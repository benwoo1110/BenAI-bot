{
    "python": {
        "getstarted": {
            "title": "Python Get Started",
            "url": "https://www.w3schools.com/python/python_getstarted.asp",
            "info": {
                "Python Install": "Many PCs and Macs will have python already installed.To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):```python\nC:\\Users\\Your Name>python --version```To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:```python\npython --version```If you find that you do not have python installed on your computer, then you can download it for free from the following website: https://www.python.org/",
                "Python Quickstart": "Python is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.The way to run a python file is like this on the command line:```python\nC:\\Users\\Your Name>python helloworld.py```Where \"helloworld.py\" is the name of your python file.Let's write our first Python file, called helloworld.py, which can be done in any text editor.```python\nprint(\"Hello, World!\")```Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:```python\nC:\\Users\\Your Name>python helloworld.py```The output should read:```python\nHello, World!```Congratulations, you have written and executed your first Python program.",
                "The Python Command Line": "To test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.Type the following on the Windows, Mac or Linux command line:```python\nC:\\Users\\Your Name>python``````python\nC:\\Users\\Your Name>py```From there you can write any python, including our hello world example from earlier in the tutorial:```python\nC:\\Users\\Your Name>python\n\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\n\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\r\n>>> print(\"Hello, World!\")```Which will write \"Hello, World!\" in the command line:```python\nC:\\Users\\Your Name>python\n\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\n\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\r\n>>> print(\"Hello, World!\")\n\r\nHello, World!```Whenever you are done in the python command line, you can simply type the following to quit the python command line interface:"
            }
        },
        "syntax": {
            "title": "Python Syntax",
            "url": "https://www.w3schools.com/python/python_syntax.asp",
            "info": {
                "Python Indentation": "Indentation refers to the spaces at the beginning of a code line.Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.Python uses indentation to indicate a block of code.```python\nif 5 > 2:\n \r\nprint(\"Five is greater than two!\")```Python will give you an error if you skip the indentation:```python\nif 5 > 2:\n\r\nprint(\"Five is greater than two!\")```The number of spaces is up to you as a programmer, but it has to be at least one.```python\nif 5 > 2:\n print(\"Five is greater than two!\") \r\nif 5 > 2:\n        print(\"Five is greater than two!\")```You have to use the same number of spaces in the same block of code, otherwise Python will give you an error:```python\nif 5 > 2:\n\r\n print(\"Five is greater than two!\")\r\n        print(\"Five is greater than two!\")```",
                "Python Variables": "In Python, variables are created when you assign a value to it:```python\nx = 5\ny = \"Hello, World!\"```Python has no command for declaring a variable.You will learn more about variables in the Python Variables chapter.",
                "Comments": "Python has commenting capability for the purpose of in-code documentation.Comments start with a #, and Python will render the rest of the line as a comment:```python\n#This is a comment.\n\r\nprint(\"Hello, World!\")```"
            }
        },
        "comments": {
            "title": "Python Comments",
            "url": "https://www.w3schools.com/python/python_comments.asp",
            "info": {
                "Creating a Comment": "Comments starts with a #, and Python will ignore them:```python\n#This is a comment\n\r\nprint(\"Hello, World!\")```Comments can be placed at the end of a line, and Python will ignore the rest of the line:```python\nprint(\"Hello, World!\") #This is a comment```Comments does not have to be text to explain the code, it can also be used to prevent Python from executing code:```python\n#print(\"Hello, World!\")\nprint(\"Cheers, Mate!\")```",
                "Multi Line Comments": "Python does not really have a syntax for multi line comments.To add a multiline comment you could insert a # for each line:```python\n#This is a comment\n#written in\n#more than just one line\nprint(\"Hello, World!\")```Or, not quite as intended, you can use a multiline string.Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:```python\n\"\"\"\nThis is a comment\nwritten in \nmore than just one line\n\"\"\"\nprint(\"Hello, World!\")```As long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment."
            }
        },
        "variables": {
            "title": "Python Variables",
            "url": "https://www.w3schools.com/python/python_variables.asp",
            "info": {
                "Creating Variables": "Variables are containers for storing data values.Unlike other programming languages, Python has no command for declaring a variable.A variable is created the moment you first assign a value to it.```python\nx = 5\n\r\ny = \"John\"\n\r\nprint(x)\n\r\nprint(y)```Variables do not need to be declared with any particular type and can even change type after they have been set.```python\nx = 4 # x is of type int\n\r\nx = \"Sally\" # x is now of type str\n\r\nprint(x)```String variables can be declared either by using single or double quotes:```python\nx = \"John\"\n# is the same as\nx = 'John'```",
                "Variable Names": "```python\n#Legal variable names:\nmyvar = \"John\"\nmy_var = \"John\"\n_my_var = \"John\"\nmyVar = \"John\"\nMYVAR = \"John\"\nmyvar2 = \"John\"\n#Illegal variable names:\n2myvar = \"John\"\nmy-var = \"John\"\nmy var = \"John\"```",
                "Assign Value to Multiple Variables": "Python allows you to assign values to multiple variables in one line:```python\nx, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)```And you can assign the same value to multiple variables in one line:```python\nx = y = z = \"Orange\"\nprint(x)\nprint(y)\nprint(z)```",
                "Output Variables": "The Python print statement is often used to output variables.To combine both text and a variable, Python uses the + character:```python\nx = \"awesome\"\nprint(\"Python is \" + x)```You can also use the + character to add a variable to another variable:```python\nx = \"Python is \"\ny = \"awesome\"\nz =  x + y\n\r\nprint(z)```For numbers, the + character works as a mathematical operator:```python\nx = 5\ny = 10\nprint(x + y)```If you try to combine a string and a number, Python will give you an error:```python\nx = 5\ny = \"John\"\nprint(x + y)```",
                "Global Variables": "Variables that are created outside of a function (as in all of the examples above) are known as global variables.Global variables can be used by everyone, both inside of functions and outside.```python\nx = \"awesome\"\ndef myfunc():\n  print(\"Python is \" + x)\nmyfunc()```If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.```python\nx = \"awesome\"\ndef myfunc():\n  x = \"fantastic\"\n  print(\"Python is \" + x)\nmyfunc()\n\nprint(\"Python is \" + x)```",
                "The global Keyword": "Normally, when you create a variable inside a function, that variable is local, and can only be used inside that function.To create a global variable inside a function, you can use the global keyword.```python\ndef myfunc():\n  global x\n  x = \"fantastic\"\nmyfunc()\n\nprint(\"Python is \" + x)```Also, use the global keyword if you want to change a global variable inside a function.```python\nx = \"awesome\"\ndef myfunc():\n  global x\n  x = \"fantastic\"\nmyfunc()\n\nprint(\"Python is \" + x)```"
            }
        },
        "datatypes": {
            "title": "Python Data Types",
            "url": "https://www.w3schools.com/python/python_datatypes.asp",
            "info": {
                "Built-in Data Types": "In programming, data type is an important concept.Variables can store data of different types, and different types can do different things.Python has the following data types built-in by default, in these categories:",
                "Getting the Data Type": "You can get the data type of any object by using the type() function:```python\nx = 5\n\r\nprint(type(x))```",
                "Setting the Data Type": "In Python, the data type is set when you assign a value to a variable:",
                "Setting the Specific Data Type": "If you want to specify the data type, you can use the following constructor functions:"
            }
        },
        "numbers": {
            "title": "Python Numbers",
            "url": "https://www.w3schools.com/python/python_numbers.asp",
            "info": {
                "Python Numbers": "There are three numeric types in Python:Variables of numeric types are created when you assign a value to them:```python\nx = 1    # int\ny = 2.8  # float\nz = 1j   # complex```To verify the type of any object in Python, use the type() function:```python\nprint(type(x))\nprint(type(y))\nprint(type(z))```",
                "Int": "Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length.```python\nx = 1\ny = 35656222554887711\nz = -3255522\nprint(type(x))\nprint(type(y))\nprint(type(z))```",
                "Float": "Float, or \"floating point number\" is a number, positive or negative, containing one or more decimals.```python\nx = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))```Float can also be scientific numbers with an \"e\" to indicate the power of 10.```python\nx = 35e3\ny = 12E4\nz = -87.7e100\nprint(type(x))\nprint(type(y))\nprint(type(z))```",
                "Complex": "Complex numbers are written with a \"j\" as the imaginary part:```python\nx = 3+5j\ny = 5j\nz = -5j\nprint(type(x))\nprint(type(y))\nprint(type(z))```",
                "Type Conversion": "You can convert from one type to another with the int(), float(), and complex() methods:```python\nx = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n#convert from int to float:\na = float(x)\n#convert from float to int:\nb = int(y)\n#convert from int to complex:\nc = complex(x)\nprint(a)\nprint(b)\nprint(c)\nprint(type(a))\nprint(type(b))\nprint(type(c))```",
                "Random Number": "Python does not have a random() function to make a random number, but Python has a built-in module calledrandom that can be used to make random numbers:```python\nimport random\nprint(random.randrange(1, 10))```In our Random Module Reference you will learn more about the Random module."
            }
        },
        "casting": {
            "title": "Python Casting",
            "url": "https://www.w3schools.com/python/python_casting.asp",
            "info": {
                "Specify a Variable Type": "There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.Casting in python is therefore done using constructor functions:```python\nx = int(1)   # x will be 1\n\r\ny = int(2.8) # y will be 2\n\r\nz = int(\"3\") # z will be 3``````python\nx = float(1)     # x will be 1.0\n\r\ny = float(2.8)   # y will be 2.8\n\r\nz = float(\"3\")   # z will be 3.0\n\r\nw = float(\"4.2\") # w will be 4.2``````python\nx = str(\"s1\") # x will be 's1'\n\r\ny = str(2)    # y will be '2'\n\r\nz = str(3.0)  # z will be '3.0'```"
            }
        },
        "strings": {
            "title": "Python Strings",
            "url": "https://www.w3schools.com/python/python_strings.asp",
            "info": {
                "String Literals": "String literals in python are surrounded by either single quotation marks, or double quotation marks.'hello' is the same as \"hello\".You can display a string literal with the print() function:```python\nprint(\"Hello\")\n\r\nprint('Hello')```",
                "Assign String to a Variable": "Assigning a string to a variable is done with the variable name followed by an equal sign and the string:```python\na = \"Hello\"\nprint(a)```",
                "Multiline Strings": "You can assign a multiline string to a variable by using three quotes:```python\na = \"\"\"Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)```Or three single quotes:```python\na = '''Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.'''\nprint(a)```",
                "Strings are Arrays": "Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.However, Python does not have a character data type, a single character is simply a string with a length of 1.Square brackets can be used to access elements of the string.```python\na = \"Hello, World!\"\n\r\nprint(a[1])```",
                "Slicing": "You can return a range of characters by using the slice syntax.Specify the start index and the end index, separated by a colon, to return a part of the string.```python\nb = \"Hello, World!\"\nprint(b[2:5])```",
                "Negative Indexing": "```python\nb = \"Hello, World!\"\nprint(b[-5:-2])```",
                "String Length": "To get the length of a string, use the len() function.```python\na = \"Hello, World!\"\n\r\nprint(len(a))```",
                "String Methods": "Python has a set of built-in methods that you can use on strings.",
                "Check String": "To check if a certain phrase or character is present in a string, we can use the keywords in or not in.```python\ntxt = \"The rain in Spain stays mainly in the plain\"\nx = \"ain\" in txt\n\r\nprint(x)``````python\ntxt = \"The rain in Spain stays mainly in the plain\"\nx = \"ain\" not in txt\n\r\nprint(x)```",
                "String Concatenation": "To concatenate, or combine, two strings you can use the + operator.```python\na = \"Hello\"\nb = \"World\"\nc = a + b\n\r\nprint(c)``````python\na = \"Hello\"\nb = \"World\"\nc = a + \" \" + b\n\r\nprint(c)```",
                "String Format": "As we learned in the Python Variables chapter, we cannot combine strings and numbers like this:```python\nage = 36\ntxt = \"My name is John, I am \" + age\nprint(txt)```But we can combine strings and numbers by using the format() method!The format() method takes the passed arguments, formats them, and places them in the string where the placeholders{} are:```python\nage = 36\ntxt = \"My name is John, and I am {}\"\nprint(txt.format(age))```The format() method takes unlimited number of arguments, and are placed into the respective placeholders:```python\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))```You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:```python\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\nprint(myorder.format(quantity, itemno, price))```",
                "Escape Character": "To insert characters that are illegal in a string, use an escape character.An escape character is a backslash \\ followed by the character you want to insert.An example of an illegal character is a double quote inside a string that is surrounded by double quotes:```python\ntxt = \"We are the so-called \"Vikings\" from the north.\"```To fix this problem, use the escape character \\\":```python\ntxt = \"We are the so-called \\\"Vikings\\\" from the north.\"```Other escape characters used in Python:"
            }
        },
        "booleans": {
            "title": "Python Booleans",
            "url": "https://www.w3schools.com/python/python_booleans.asp",
            "info": {
                "Boolean Values": "In programming you often need to know if an expression is True or False.You can evaluate any expression in Python, and get one of two answers, True or False.When you compare two values, the expression is evaluated and Python returns the Boolean answer:```python\nprint(10 > 9)\nprint(10 == 9)\nprint(10 < 9)```When you run a condition in an if statement, Python returns True or False:```python\na = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")```",
                "Evaluate Values and Variables": "The bool() function allows you to evaluate any value, and give you True or False in return,```python\nprint(bool(\"Hello\"))\nprint(bool(15))``````python\nx = \"Hello\"\ny = 15\nprint(bool(x))\nprint(bool(y))```",
                "Most Values are True": "Almost any value is evaluated to True if it has some sort of content.Any string is True, except empty strings.Any number is True, except 0.Any list, tuple, set, and dictionary are True, except empty ones.```python\nbool(\"abc\")\nbool(123)\nbool([\"apple\", \"cherry\", \"banana\"])```",
                "Some Values are False": "In fact, there are not many values that evaluates toFalse, except empty values, such as (),[], {}, \"\", the number0, and the value None. And of course the value False evaluates toFalse.```python\nbool(False)\nbool(None)\nbool(0)\nbool(\"\")\nbool(())\nbool([])\nbool({})```One more value, or object in this case, evaluates to False, and that is if you have an object that is made from a class with a \\_\\_len\\_\\_ function that returns 0 or False: ```python\nclass myclass():\n  def __len__(self):\n    return 0\n\nmyobj = myclass()\nprint(bool(myobj))```",
                "Functions can Return a Boolean": "You can create functions that returns a Boolean Value:```python\ndef myFunction() :\n  return True\nprint(myFunction())```You can execute code based on the Boolean answer of a function:```python\ndef myFunction() :\n  return True\nif myFunction():\n  print(\"YES!\")\nelse:\n  print(\"NO!\")```Python also has many built-in functions that returns a boolean value, like the isinstance() function, which can be used to determine if an object is of a certain data type:```python\nx = 200\nprint(isinstance(x, int))```"
            }
        },
        "operators": {
            "title": "Python Operators",
            "url": "https://www.w3schools.com/python/python_operators.asp",
            "info": {
                "Python Operators": "Operators are used to perform operations on variables and values.Python divides the operators in the following groups:",
                "Python Arithmetic Operators": "Arithmetic operators are used with numeric values to perform common mathematical operations:",
                "Python Assignment Operators": "Assignment operators are used to assign values to variables:",
                "Python Comparison Operators": "Comparison operators are used to compare two values:",
                "Python Logical Operators": "Logical operators are used to combine conditional statements:",
                "Python Identity Operators": "Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:",
                "Python Membership Operators": "Membership operators are used to test if a sequence is presented in an object:",
                "Python Bitwise Operators": "Bitwise operators are used to compare (binary) numbers:"
            }
        },
        "lists": {
            "title": "Python Lists",
            "url": "https://www.w3schools.com/python/python_lists.asp",
            "info": {
                "Python Collections (Arrays)": "There are four collection data types in the Python programming language:When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
                "List": "A list is a collection which is ordered and changeable. In Python lists are written with square brackets.```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(thislist)```",
                "Access Items": "You access the list items by referring to the index number:```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(thislist[1])```Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(thislist[-1])```You can specify a range of indexes by specifying where to start and where to end the range.When specifying a range, the return value will be a new list with the specified items.```python\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n\r\nprint(thislist[2:5])```By leaving out the start value, the range will start at the first item:```python\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n\r\nprint(thislist[:4])```By leaving out the end value, the range will go on to the end of the list:```python\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n\r\nprint(thislist[2:])```Specify negative indexes if you want to start the search from the end of the list:",
                "Change Item Value": "```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist[1] = \"blackcurrant\"\n\r\nprint(thislist)```",
                "Loop Through a List": "You can loop through the list items by using a for loop:```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\nfor x in thislist:\n  print(x)```You will learn more about for loops in our Python For Loops Chapter.",
                "Check if Item Exists": "To determine if a specified item is present in a list use the in keyword:```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\nif \"apple\" in thislist:\n  print(\"Yes, 'apple' is in the fruits list\")```",
                "List Length": "To determine how many items a list has, use the len() function:```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(len(thislist))```",
                "Add Items": "To add an item to the end of the list, use the append() method:```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.append(\"orange\")\n\r\nprint(thislist)```To add an item at the specified index, use the insert() method:```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.insert(1, \"orange\")\n\r\nprint(thislist)```",
                "Remove Item": "There are several methods to remove items from a list:```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.remove(\"banana\")\n\r\nprint(thislist)``````python\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.pop()\n\r\nprint(thislist)``````python\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel\r\nthislist[0]\nprint(thislist)``````python\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel\r\nthislist``````python\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.clear()\nprint(thislist)```",
                "Copy a List": "You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made inlist1 will automatically also be made inlist2.There are ways to make a copy, one way is to use the built-in List method copy().```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = thislist.copy()\nprint(mylist)```Another way to make a copy is to use the built-in method list().```python\nthislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = list(thislist)\nprint(mylist)```",
                "Join Two Lists": "There are several ways to join, or concatenate, two or more lists in Python.One of the easiest ways are by using the + operator.```python\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\nlist3 = list1 + list2\nprint(list3)```Another way to join two lists are by appending all the items from list2 into list1, one by one:```python\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nfor x in list2:\n  list1.append(x)\nprint(list1)```Or you can use the extend() method, which purpose is to add elements from one list to another list:```python\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\nlist1.extend(list2)\nprint(list1)```",
                "The list() Constructor": "It is also possible to use the list() constructor to make a new list.```python\nthislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n\r\nprint(thislist)```",
                "List Methods": "Python has a set of built-in methods that you can use on lists."
            }
        },
        "tuples": {
            "title": "Python Tuples",
            "url": "https://www.w3schools.com/python/python_tuples.asp",
            "info": {
                "Tuple": "A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nprint(thistuple)```",
                "Access Tuple Items": "You can access tuple items by referring to the index number, inside square brackets:```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nprint(thistuple[1])```Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nprint(thistuple[-1])```You can specify a range of indexes by specifying where to start and where to end the range.When specifying a range, the return value will be a new tuple with the specified items.```python\nthistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\n\r\nprint(thistuple[2:5])```Specify negative indexes if you want to start the search from the end of the tuple:```python\nthistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\n\r\nprint(thistuple[-4:-1])```",
                "Change Tuple Values": "Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.```python\nx = (\"apple\", \"banana\", \"cherry\")\ny = list(x)\ny[1] = \"kiwi\"\nx = tuple(y)\nprint(x)```",
                "Loop Through a Tuple": "You can loop through the tuple items by using a for loop.```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\nfor x in thistuple:\n  print(x)```You will learn more about for loops in our Python For Loops Chapter.",
                "Check if Item Exists": "To determine if a specified item is present in a tuple use the in keyword:```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\nif \"apple\" in thistuple:\n  print(\"Yes, 'apple' is in the fruits tuple\")```",
                "Tuple Length": "To determine how many items a tuple has, use the len() method:```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))```",
                "Add Items": "Once a tuple is created, you cannot add items to it. Tuples are unchangeable.```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nthistuple[3] = \"orange\" # This will raise an error\nprint(thistuple)```",
                "Create Tuple With One Item": "To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.```python\nthistuple = (\"apple\",)\nprint(type(thistuple))\n#NOT a tuple\nthistuple = (\"apple\")\nprint(type(thistuple))```",
                "Remove Items": "Tuples are unchangeable, so you cannot remove items from it, but you can delete the tuple completely:```python\nthistuple = (\"apple\", \"banana\", \"cherry\")\ndel\r\nthistuple\nprint(thistuple)#this will raise an error because the tuple no longer exists```",
                "Join Two Tuples": "To join two or more tuples you can use the + operator:```python\ntuple1 = (\"a\", \"b\" , \"c\")\ntuple2 = (1, 2, 3)\ntuple3 = tuple1 + tuple2\nprint(tuple3)```",
                "The tuple() Constructor": "It is also possible to use the tuple() constructor to make a tuple.```python\nthistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n\r\nprint(thistuple)```",
                "Tuple Methods": "Python has two built-in methods that you can use on tuples."
            }
        },
        "sets": {
            "title": "Python Sets",
            "url": "https://www.w3schools.com/python/python_sets.asp",
            "info": {
                "Set": "A set is a collection which is unordered and unindexed. In Python sets are written with curly brackets.```python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nprint(thisset)```",
                "Access Items": "You cannot access items in a set by referring to an index, since sets are unordered the items has no index.But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using thein keyword.```python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nfor x in thisset:\n  print(x)``````python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nprint(\"banana\" in thisset)```",
                "Change Items": "",
                "Add Items": "To add one item to a set use the add() method.To add more than one item to a set use the update() method.```python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.add(\"orange\")\nprint(thisset)``````python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.update([\"orange\", \"mango\", \"grapes\"])\nprint(thisset)```",
                "Get the Length of a Set": "To determine how many items a set has, use the len() method.```python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nprint(len(thisset))```",
                "Remove Item": "To remove an item in a set, use the remove(), or the discard() method.```python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.remove(\"banana\")\nprint(thisset)``````python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.discard(\"banana\")\nprint(thisset)```You can also use the pop(), method to remove an item, but this method will remove the last item. Remember that sets are unordered, so you will not know what item that gets removed.The return value of the pop() method is the removed item.```python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nx =thisset.pop()\nprint(x)\nprint(thisset)``````python\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.clear()\nprint(thisset)``````python\nthisset = {\"apple\", \"banana\", \"cherry\"}\ndelthisset\nprint(thisset)```",
                "Join Two Sets": "There are several ways to join two or more sets in Python.You can use the union() method that returns a new set containing all items from both sets,or the update() method that inserts all the items from one set into another:```python\nset1 = {\"a\", \"b\" , \"c\"}\nset2 = {1, 2, 3}\nset3 = set1.union(set2)\nprint(set3)``````python\nset1 = {\"a\", \"b\" , \"c\"}\nset2 = {1, 2, 3}\nset1.update(set2)\nprint(set1)```There are other methods that joins two sets and keeps ONLY the duplicates, or NEVER the duplicates, check the full list of set methods in the bottom of this page.",
                "The set() Constructor": "It is also possible to use the set() constructor to make a set.```python\nthisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n\r\nprint(thisset)```",
                "Set Methods": "Python has a set of built-in methods that you can use on sets."
            }
        },
        "dictionaries": {
            "title": "Python Dictionaries",
            "url": "https://www.w3schools.com/python/python_dictionaries.asp",
            "info": {
                "Dictionary": "A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.```python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\n\r\nprint(thisdict)```",
                "Accessing Items": "You can access the items of a dictionary by referring to its key name, inside square brackets:```python\nx = thisdict[\"model\"]```There is also a method called get() that will give you the same result:```python\nx = thisdict.get(\"model\")```",
                "Change Values": "You can change the value of a specific item by referring to its key name:```python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict[\"year\"] = 2018```",
                "Loop Through a Dictionary": "You can loop through a dictionary by using afor loop.When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.```python\nfor x in thisdict:\n  print(x)``````python\nfor x in thisdict:\n  print(thisdict[x])``````python\nfor x in thisdict.values():\n  print(x)``````python\nfor x, y in thisdict.items():\n  print(x, y)```",
                "Check if Key Exists": "To determine if a specified key is present in a dictionary use the in keyword:```python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nif \"model\" in thisdict:\n  print(\"Yes, 'model' is one of the keys in the thisdict dictionary\")```",
                "Dictionary Length": "To determine how many items (key-value pairs) a dictionary has, use the len() function.```python\nprint(len(thisdict))```",
                "Adding Items": "Adding an item to the dictionary is done by using a new index key and assigning a value to it:```python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict[\"color\"] = \"red\"\nprint(thisdict)```",
                "Removing Items": "There are several methods to remove items from a dictionary:```python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict.pop(\"model\")\nprint(thisdict)``````python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict.popitem()\nprint(thisdict)``````python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\ndel thisdict[\"model\"]\nprint(thisdict)``````python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\ndel thisdict\nprint(thisdict) #this will cause an error because \"thisdict\" no longer exists.``````python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict.clear()\nprint(thisdict)```",
                "Copy a Dictionary": "You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made indict1 will automatically also be made indict2.There are ways to make a copy, one way is to use the built-in Dictionary method copy().```python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nmydict = thisdict.copy()\nprint(mydict)```Another way to make a copy is to use the built-in function dict().```python\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nmydict = dict(thisdict)\nprint(mydict)```",
                "Nested Dictionaries": "A dictionary can also contain many dictionaries, this is called nested dictionaries.```python\nmyfamily = {\n  \"child1\" : {\n    \"name\" : \"Emil\",\n    \"year\" : 2004\n  },\n  \"child2\" : {\n    \"name\" : \"Tobias\",\n    \"year\" : 2007\n  },\n  \"child3\" : {\n    \"name\" : \"Linus\",\n    \"year\" : 2011\n  }\n}```Or, if you want to nest three dictionaries that already exists as dictionaries:```python\nchild1 = {\n  \"name\" : \"Emil\",\n  \"year\" : 2004\n}\nchild2 = {\n  \"name\" : \"Tobias\",\n  \"year\" : 2007\n}\nchild3 = {\n  \"name\" : \"Linus\",\n  \"year\" : 2011\n}\nmyfamily = {\n  \"child1\" : child1,\n  \"child2\" : child2,\n  \"child3\" : child3\n}```",
                "The dict() Constructor": "It is also possible to use the dict() constructor to make a new dictionary:```python\nthisdict =\tdict(brand=\"Ford\", model=\"Mustang\", year=1964)\n\r\n# note that keywords are not string literals\n\r\n# note the use of equals rather than colon for the assignment\n\r\nprint(thisdict)```",
                "Dictionary Methods": "Python has a set of built-in methods that you can use on dictionaries."
            }
        },
        "if...else": {
            "title": "Python If...Else",
            "url": "https://www.w3schools.com/python/python_conditions.asp",
            "info": {
                "Python Conditions and If statements": "Python supports the usual logical conditions from mathematics:These conditions can be used in several ways, most commonly in \"if statements\" and loops.An \"if statement\" is written by using the if keyword.```python\na = 33\n\r\nb = 200\n\r\nif b > a:\n  print(\"b is greater than a\")```In this example we use two variables, a and b,which are used as part of the if statement to test whether b is greater than a.As a is 33, and b is 200,we know that 200 is greater than 33, and so we print to screen that \"b is greater than a\".",
                "Indentation": "Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.```python\na = 33\n\r\nb = 200\n\r\nif b > a:\n\r\nprint(\"b is greater than a\")\r\n# you will get an error```",
                "Elif": "The elif keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".```python\na = 33\n\r\nb = 33\n\r\nif b > a:\n\tprint(\"b is greater than a\")\n\r\nelif a == b:\n\tprint(\"a and b are equal\")```In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\".",
                "Else": "The else keyword catches anything which isn't caught by the preceding conditions.```python\na = 200\n\r\nb = 33\n\r\nif b > a:\n\tprint(\"b is greater than a\")\n\r\nelif a == b:\n\tprint(\"a and b are equal\")\nelse:\n\tprint(\"a is greater than b\")```In this example a is greater than b,so the first condition is not true, also the elif condition is not true,so we go to the else condition and print to screen that \"a is greater than b\".You can also have an else without theelif:```python\na = 200\n\r\nb = 33\n\r\nif b > a:\n\tprint(\"b is greater than a\")\nelse:\n\tprint(\"b is not greater than a\")```",
                "Short Hand If": "If you have only one statement to execute, you can put it on the same line as the if statement.```python\nif a > b: print(\"a is greater than b\")```",
                "Short Hand If ... Else": "If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:```python\na = 2\nb = 330\nprint(\"A\") if a > b else print(\"B\")```You can also have multiple else statements on the same line:```python\na = 330\nb = 330\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")```",
                "And": "The and keyword is a logical operator, and is used to combine conditional statements:```python\na = 200\nb = 33\nc = 500\nif a > b and c > a:\n\tprint(\"Both conditions are True\")```",
                "Or": "The or keyword is a logical operator, and is used to combine conditional statements:```python\na = 200\nb = 33\nc = 500\nif a > b or a > c:\n\tprint(\"At least one of the conditions is True\")```",
                "Nested If": "You can have if statements inside if statements, this is called nestedif statements.```python\nx = 41\nif x > 10:\n\tprint(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")```",
                "The pass Statement": "if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.```python\na = 33\nb = 200\nif b > a:\n  pass```"
            }
        },
        "whileloops": {
            "title": "Python While Loops",
            "url": "https://www.w3schools.com/python/python_while_loops.asp",
            "info": {
                "Python Loops": "Python has two primitive loop commands:",
                "The while Loop": "With the while loop we can execute a set of statements as long as a condition is true.```python\ni = 1\n\r\nwhile i < 6:\nprint(i)\ni += 1```The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.",
                "The break Statement": "With the break statement we can stop the loop even if the while condition is true:```python\ni = 1\n\r\nwhile i < 6:\nprint(i)\n  if i == 3:\n    break\n  i += 1```",
                "The continue Statement": "With the continue statement we can stop the current iteration, and continue with the next:```python\ni = 0\n\r\nwhile i < 6:\n  i += 1\r\n  if i == 3:\n    continue\n  print(i)```",
                "The else Statement": "With the else statement we can run a block of code once when the condition no longer is true:```python\ni = 1\n\r\nwhile i < 6:\nprint(i)\ni += 1\nelse:\n  print(\"i is no longer less than 6\")```"
            }
        },
        "forloops": {
            "title": "Python For Loops",
            "url": "https://www.w3schools.com/python/python_for_loops.asp",
            "info": {
                "Python For Loops": "A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n\tprint(x)```The for loop does not require an indexing variable to set beforehand.",
                "Looping Through a String": "Even strings are iterable objects, they contain a sequence of characters:```python\nfor x in \"banana\":\n  print(x)```",
                "The break Statement": "With the break statement we can stop the loop before it has looped through all the items:```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x)\n  if x == \"banana\":\n    break``````python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  if x == \"banana\":\n    break\n  print(x)```",
                "The continue Statement": "With the continue statement we can stop the current iteration of the loop, and continue with the next:```python\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  if x == \"banana\":\n    continue\n  print(x)```",
                "The range() Function": "The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.```python\nfor x in range(6):\n\tprint(x)```The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):```python\nfor x in range(2, 6):\n\tprint(x)```The range() function defaults to increment the sequence by 1,however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):```python\nfor x in range(2, 30, 3):\n\tprint(x)```",
                "Else in For Loop": "The else keyword in afor loop specifies a block of code to be executed when the loop is finished:```python\nfor x in range(6):\n \tprint(x)\nelse:\n \tprint(\"Finally finished!\")```",
                "Nested Loops": "A nested loop is a loop inside a loop.The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":```python\nadj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor x in adj:\n  for y in fruits:\n    print(x, y)```",
                "The pass Statement": "for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.```python\nfor x in [0, 1, 2]:\n  pass```"
            }
        },
        "functions": {
            "title": "Python Functions",
            "url": "https://www.w3schools.com/python/python_functions.asp",
            "info": {
                "Creating a Function": "In Python a function is defined using the def keyword:```python\ndef my_function():\n  print(\"Hello from a function\")```",
                "Calling a Function": "To call a function, use the function name followed by parenthesis:```python\ndef my_function():\n  print(\"Hello from a function\")\n\nmy_function()```",
                "Arguments": "Information can be passed into functions as arguments.Arguments are specified after the function name, inside the parentheses.You can add as many arguments as you want, just separate them with a comma.The following example has a function with one argument (fname).When the function is called, we pass along a first name,which is used inside the function to print the full name:```python\ndef my_function(fname):\n  print(fname + \" Refsnes\")\nmy_function(\"Emil\")\nmy_function(\"Tobias\")\nmy_function(\"Linus\")```",
                "Parameters or Arguments?": "The terms parameter and argument can be used for the same thing: information that are passed into a function.",
                "Number of Arguments": "By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less. ```python\ndef my_function(fname, lname):\n  print(fname + \" \" + lname)\nmy_function(\"Emil\", \"Refsnes\")``````python\ndef my_function(fname, lname):\n  print(fname + \" \" + lname)\nmy_function(\"Emil\")```",
                "Arbitrary Arguments, *args": "If you do not know how many arguments that will be passed into your function,add a \\* before the parameter name in the function definition.This way the function will receive a tuple of arguments, and can access the items accordingly:```python\ndef my_function(*kids):\n  print(\"The youngest child is \" + kids[2])\nmy_function(\"Emil\", \"Tobias\", \"Linus\")```",
                "Keyword Arguments": "You can also send arguments with the key = value syntax.This way the order of the arguments does not matter.```python\ndef my_function(child3, child2, child1):\n  print(\"The youngest child is \" + child3)\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")```",
                "Arbitrary Keyword Arguments, **kwargs": "If you do not know how many keyword arguments that will be passed into your function,add two asterisk: \\*\\* before the parameter name in the function definition.This way the function will receive a dictionary of arguments, and can access the items accordingly:```python\ndef my_function(**kid):\n  print(\"His last name is \" + kid[\"lname\"])\n\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")```",
                "Default Parameter Value": "The following example shows how to use a default parameter value.If we call the function without argument, it uses the default value:```python\ndef my_function(country = \"Norway\"):\n  print(\"I am from \" + country)\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function()\nmy_function(\"Brazil\")```",
                "Passing a List as an Argument": "You can send any data types of argument to a function (string, number, list, dictionary etc.), and it willbe treated as the same data type inside the function.E.g. if you send a List as an argument, it will still be a List when it reaches the function:```python\ndef my_function(food):\n  for x in food:\n    print(x)\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmy_function(fruits)```",
                "Return Values": "To let a function return a value, use the return statement:```python\ndef my_function(x):\n  return 5 * x\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))```",
                "The pass Statement": "function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.```python\ndef myfunction():\n  pass```",
                "Recursion": "Python also accepts function recursion, which means a defined function can call itself.Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.In this example, tri\\_recursion() is a function that we have defined to call itself (\"recurse\"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it."
            }
        },
        "lambda": {
            "title": "Python Lambda",
            "url": "https://www.w3schools.com/python/python_lambda.asp",
            "info": {
                "Syntax": "The expression is executed and the result is returned:```python\nx = lambda a : a + 10\nprint(x(5))```Lambda functions can take any number of arguments:```python\nx = lambda a, b : a * b\nprint(x(5, 6))``````python\nx = lambda a, b, c : a + b + c\nprint(x(5, 6, 2))```",
                "Why Use Lambda Functions?": "The power of lambda is better shown when you use them as an anonymous function inside another function.Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:```python\ndef myfunc(n):\nreturn lambda a : a * n```Use that function definition to make a function that always doubles the number you send in:```python\ndef myfunc(n):\nreturn lambda a : a * n\n\nmydoubler = myfunc(2)\n\nprint(mydoubler(11))```Or, use the same function definition to make a function that always triples the number you send in:```python\ndef myfunc(n):\nreturn lambda a : a * n\n\nmytripler = myfunc(3)\n\nprint(mytripler(11))```Or, use the same function definition to make both functions, in the same program:```python\ndef myfunc(n):\nreturn lambda a : a * n\n\nmydoubler = myfunc(2)\nmytripler = myfunc(3)\n\nprint(mydoubler(11))\r\nprint(mytripler(11))```"
            }
        },
        "arrays": {
            "title": "Python Arrays",
            "url": "https://www.w3schools.com/python/python_arrays.asp",
            "info": {
                "Arrays": "Arrays are used to store multiple values in one single variable:```python\ncars = [\"Ford\", \"Volvo\", \"BMW\"]```",
                "What is an Array?": "An array is a special variable, which can hold more than one value at a time.If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?The solution is an array!An array can hold many values under a single name, and you can access the values by referring to an index number.",
                "Access the Elements of an Array": "You refer to an array element by referring to the index number.```python\nx = cars[0]``````python\ncars[0] = \"Toyota\"```",
                "The Length of an Array": "Use the len() method to return the length of an array (the number of elements in an array).```python\nx = len(cars)```",
                "Looping Array Elements": "You can use the for in loop to loop through all the elements of an array.```python\nfor x in cars:\n  print(x)```",
                "Adding Array Elements": "You can use the append() method to add an element to an array.```python\ncars.append(\"Honda\")```",
                "Removing Array Elements": "You can use the pop() method to remove an element from the array.```python\ncars.pop(1)```You can also use the remove() method to remove an element from the array.```python\ncars.remove(\"Volvo\")```",
                "Array Methods": "Python has a set of built-in methods that you can use on lists/arrays."
            }
        },
        "classes/objects": {
            "title": "Python Classes/Objects",
            "url": "https://www.w3schools.com/python/python_classes.asp",
            "info": {
                "Python Classes/Objects": "Python is an object oriented programming language.Almost everything in Python is an object, with its properties and methods.A Class is like an object constructor, or a \"blueprint\" for creating objects.",
                "Create a Class": "To create a class, use the keyword class:```python\nclass MyClass:\n  x = 5```",
                "Create Object": "Now we can use the class named MyClass to create objects:```python\np1 = MyClass()\nprint(p1.x)```",
                "The __init__() Function": "The examples above are classes and objects in their simplest form, and are not really useful in real life applications.To understand the meaning of classes we have to understand the built-in \\_\\_init\\_\\_() function.All classes have a function called \\_\\_init\\_\\_(), which is always executed when the class is being initiated.Use the \\_\\_init\\_\\_() function to assign values to object properties, or other operations that are necessary to do when the object is being created:```python\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)```",
                "Object Methods": "Objects can also contain methods. Methods in objects are functions that belong to the object.Let us create a method in the Person class:```python\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  def myfunc(self):\n    print(\"Hello my name is \" + self.name)\np1 = Person(\"John\", 36)\np1.myfunc()```",
                "The self Parameter": "The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:```python\nclass Person:\n  def __init__(mysillyobject, name, age):\n    mysillyobject.name = name\n    mysillyobject.age = age\n  def myfunc(abc):\n    print(\"Hello my name is \" + abc.name)\np1 = Person(\"John\", 36)\np1.myfunc()```",
                "Modify Object Properties": "You can modify properties on objects like this:```python\np1.age = 40```",
                "Delete Object Properties": "You can delete properties on objects by using the del keyword:```python\ndel p1.age```",
                "Delete Objects": "You can delete objects by using the del keyword:```python\ndel p1```",
                "The pass Statement": "class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass statement to avoid getting an error.```python\nclass Person:\n  pass```"
            }
        },
        "inheritance": {
            "title": "Python Inheritance",
            "url": "https://www.w3schools.com/python/python_inheritance.asp",
            "info": {
                "Python Inheritance": "Inheritance allows us to define a class that inherits all the methods and properties from another class.Parent class is the class being inherited from, also called base class.Child class is the class that inherits from another class, also called derived class.",
                "Create a Parent Class": "Any class can be a parent class, so the syntax is the same as creating any other class:```python\nclass Person:\n  def __init__(self, fname, lname):\n    self.firstname = fname\n    self.lastname = lname\n  def printname(self):\n    print(self.firstname, self.lastname)\n#Use the Person class to create an object, and then execute the printname method:\nx = Person(\"John\", \"Doe\")\nx.printname()```",
                "Create a Child Class": "To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:```python\nclass Student(Person):\n  pass```Now the Student class has the same properties and methods as the Person class.```python\nx = Student(\"Mike\", \"Olsen\")\nx.printname()```",
                "Add the __init__() Function": "So far we have created a child class that inherits the properties and methods from its parent.We want to add the \\_\\_init\\_\\_() function to the child class (instead of the pass keyword).```python\nclass Student(Person):\n  def __init__(self, fname, lname):\n    #add properties etc.```When you add the \\_\\_init\\_\\_() function, the child class will no longer inherit the parent's \\_\\_init\\_\\_() function.To keep the inheritance of the parent's \\_\\_init\\_\\_() function, add a call to the parent's \\_\\_init\\_\\_() function:```python\nclass Student(Person):\n  def __init__(self, fname, lname):\n    Person.__init__(self, fname, lname)```Now we have successfully added the \\_\\_init\\_\\_() function, and kept the inheritance of the parent class, and we are ready to add functionality in the\\_\\_init\\_\\_() function.",
                "Use the super() Function": "Python also has a super() function that will make the child class inherit all the methods and properties from its parent:```python\nclass Student(Person):\n  def __init__(self, fname, lname):\n      super().__init__(fname, lname)```By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.",
                "Add Properties": "```python\nclass Student(Person):\n  def __init__(self, fname, lname):\n    super().__init__(fname, lname)\n    self.graduationyear = 2019```In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects.To do so, add another parameter in the \\_\\_init\\_\\_() function:```python\nclass Student(Person):\n  def __init__(self, fname, lname, year):\n    super().__init__(fname, lname)\n    self.graduationyear = year\nx = Student(\"Mike\", \"Olsen\", 2019)```",
                "Add Methods": "```python\nclass Student(Person):\n  def __init__(self, fname, lname, year):\n    super().__init__(fname, lname)\n    self.graduationyear = year\n  def welcome(self):\n    print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)```If you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden."
            }
        },
        "iterators": {
            "title": "Python Iterators",
            "url": "https://www.w3schools.com/python/python_iterators.asp",
            "info": {
                "Python Iterators": "An iterator is an object that contains a countable number of values.An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods \\_\\_iter\\_\\_() and \\_\\_next\\_\\_().",
                "Iterator vs Iterable": "Lists, tuples, dictionaries, and sets are all iterable objects. They are iterablecontainers which you can get an iterator from.All these objects have a iter() method which is used to get an iterator:```python\nmytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\n  print(next(myit))\nprint(next(myit))\nprint(next(myit))```Even strings are iterable objects, and can return an iterator:```python\nmystr = \"banana\"\nmyit = iter(mystr)\n  print(next(myit))\nprint(next(myit))\nprint(next(myit))\n  print(next(myit))\nprint(next(myit))\nprint(next(myit))```",
                "Looping Through an Iterator": "We can also use a for loop to iterate through an iterable object:```python\nmytuple = (\"apple\", \"banana\", \"cherry\")\n\nfor x in mytuple:\n    print(x)``````python\nmystr = \"banana\"\n\nfor x in mystr:\n    print(x)```The for loop actually creates an iterator object and executes the next() method for each loop.",
                "Create an Iterator": "To create an object/class as an iterator you have to implement the methods\\_\\_iter\\_\\_() and \\_\\_next\\_\\_() to your object.As you have learned in the Python Classes/Objects chapter, all classes have a function called\\_\\_init\\_\\_(), which allows you to do some initializing when the object is being created.The \\_\\_iter\\_\\_() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.The \\_\\_next\\_\\_() method also allows you to do operations, and must return the next item in the sequence.```python\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n  def __next__(self):\n    x = self.a\n    self.a += 1\n    return x\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))```",
                "StopIteration": "The example above would continue forever if you had enough next() statements, or if it was used in a for loop.To prevent the iteration to go on forever, we can use the StopIteration statement.In the \\_\\_next\\_\\_() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:```python\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\nmyclass = MyNumbers()\nmyiter = iter(myclass)\nfor x in myiter:\n  print(x)```"
            }
        },
        "scope": {
            "title": "Python Scope",
            "url": "https://www.w3schools.com/python/python_scope.asp",
            "info": {
                "Local Scope": "A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.```python\ndef myfunc():\n  x = 300\n  print(x)\nmyfunc()```As explained in the example above, the variable x is not available outside the function, but it is available for any function inside the function:```python\ndef myfunc():\n  x = 300\n  def myinnerfunc():\n    print(x)\n  myinnerfunc()\nmyfunc()```",
                "Global Scope": "A variable created in the main body of the Python code is a global variable and belongs to the global scope.Global variables are available from within any scope, global and local.```python\nx = 300\ndef myfunc():\n  print(x)\nmyfunc()\nprint(x)```If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables,one available in the global scope (outside the function) and one available in the local scope (inside the function):```python\nx = 300\ndef myfunc():\n  x = 200\n    print(x)\nmyfunc()\nprint(x)```",
                "Global Keyword": "If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.The global keyword makes the variable global.```python\ndef myfunc():\n  global x\n  x = 300\nmyfunc()\n  print(x)```Also, use the global keyword if you want to make a change to a global variable inside a function.```python\nx = 300\ndef myfunc():\n  global x\n  x = 200\nmyfunc()\n\nprint(x)```"
            }
        },
        "modules": {
            "title": "Python Modules",
            "url": "https://www.w3schools.com/python/python_modules.asp",
            "info": {
                "What is a Module?": "Consider a module to be the same as a code library.A file containing a set of functions you want to include in your application.",
                "Create a Module": "To create a module just save the code you want in a file with the file extension .py:```python\ndef greeting(name):\n  print(\"Hello, \" + name)```",
                "Use a Module": "Now we can use the module we just created, by using the import statement:```python\nimport mymodule\nmymodule.greeting(\"Jonathan\")```",
                "Variables in Module": "The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):```python\nperson1 = {\n  \"name\": \"John\",\n  \"age\": 36,\n  \"country\": \"Norway\"\n}``````python\nimport mymodule\na = mymodule.person1[\"age\"]\nprint(a)```",
                "Naming a Module": "You can name the module file whatever you like, but it must have the file extension .py",
                "Re-naming a Module": "You can create an alias when you import a module, by using the as keyword:```python\nimport mymodule as mx\na = mx.person1[\"age\"]\nprint(a)```",
                "Built-in Modules": "There are several built-in modules in Python, which you can import whenever you like.```python\nimport platform\nx = platform.system()\nprint(x)```",
                "Using the dir() Function": "There is a built-in function to list all the function names (or variable names) in a module. The dir() function:```python\nimport platform\nx = dir(platform)\nprint(x)```",
                "Import From Module": "You can choose to import only parts from a module, by using the from keyword.```python\ndef greeting(name):\n  print(\"Hello, \" + name)\nperson1 = {\n  \"name\": \"John\",\n  \"age\": 36,\n  \"country\": \"Norway\"\n}``````python\nfrom mymodule import person1\nprint (person1[\"age\"])```"
            }
        },
        "dates": {
            "title": "Python Dates",
            "url": "https://www.w3schools.com/python/python_datetime.asp",
            "info": {
                "Python Dates": "A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.```python\nimport datetime\nx = datetime.datetime.now()\nprint(x)```",
                "Date Output": "When we execute the code from the example above the result will be:The date contains year, month, day, hour, minute, second, and microsecond.The datetime module has many methods to return information about the date object.Here are a few examples, you will learn more about them later in this chapter: ```python\nimport datetime\nx = datetime.datetime.now()\nprint(x.year)\nprint(x.strftime(\"%A\"))```",
                "Creating Date Objects": "To create a date, we can use the datetime() class (constructor) of thedatetime module.The datetime() class requires three parameters to create a date: year, month, day.```python\nimport datetime\nx = datetime.datetime(2020, 5, 17)\n\nprint(x)```The datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone).",
                "The strftime() Method": "The datetime object has a method for formatting date objects into readable strings.The method is called strftime(), and takes one parameter, format, to specify the format of the returned string:```python\nimport datetime\nx = datetime.datetime(2018, 6, 1)\nprint(x.strftime(\"%B\"))```A reference of all the legal format codes:"
            }
        },
        "math": {
            "title": "Python Math",
            "url": "https://www.w3schools.com/python/python_math.asp",
            "info": {
                "Built-in Math Functions": "The min() and max() functions can be used to find the lowest or highest value in an iterable:```python\nx = min(5, 10, 25)\ny = max(5, 10, 25)\nprint(x)\nprint(y)```The abs() function returns the absolute (positive) value of the specified number:```python\nx = abs(-7.25)\nprint(x)```The pow(x, y) function returns the value of x to the power of y (xy).```python\nx = pow(4, 3)\nprint(x)```",
                "The Math Module": "Python has also a built-in module called math, which extends the list of mathematical functions.To use it, you must import the math module:```python\nimport math```When you have imported the math module, you can start using methods and constants of the module.The math.sqrt() method for example, returns the square root of a number:```python\nimport   math\nx = math.sqrt(64)\nprint(x)```The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result:```python\nimport   math\nx = math.ceil(1.4)\ny = math.floor(1.4)\nprint(x) #   returns 2\nprint(y) # returns 1```The math.pi constant, returns the value of PI (3.14...):```python\nimport   math\nx = math.pi\nprint(x)```",
                "Complete Math Module Reference": "In our Math Module Reference you will find a complete reference of all methods and constants that belongs to the Math module."
            }
        },
        "json": {
            "title": "Python JSON",
            "url": "https://www.w3schools.com/python/python_json.asp",
            "info": {
                "JSON in Python": "Python has a built-in package called json, which can be used to work with JSON data.```python\nimport json```",
                "Parse JSON - Convert from JSON to Python": "If you have a JSON string, you can parse it by using thejson.loads() method.```python\nimport json\n# some JSON:\nx =  '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n# parse x:\ny = json.loads(x)\n# the result is a Python dictionary:\nprint(y[\"age\"])```",
                "Convert from Python to JSON": "If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.```python\nimport json\n# a Python object (dict):\nx = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n# convert into JSON:\ny = json.dumps(x)\n# the result is a JSON string:\nprint(y)```You can convert Python objects of the following types, into JSON strings:```python\nimport json\nprint(json.dumps({\"name\": \"John\", \"age\": 30}))\nprint(json.dumps([\"apple\", \"bananas\"]))\nprint(json.dumps((\"apple\", \"bananas\")))\nprint(json.dumps(\"hello\"))\nprint(json.dumps(42))\nprint(json.dumps(31.76))\nprint(json.dumps(True))\nprint(json.dumps(False))\nprint(json.dumps(None))```When you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:```python\nimport json\nx = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"married\": True,\n  \"divorced\": False,\n  \"children\": (\"Ann\",\"Billy\"),\n  \"pets\": None,\n  \"cars\": [\n    {\"model\": \"BMW 230\", \"mpg\": 27.5},\n    {\"model\": \"Ford Edge\", \"mpg\": 24.1}\n  ]\n}\nprint(json.dumps(x))```",
                "Format the Result": "The example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.The json.dumps() method has parameters to make it easier to read the result:```python\njson.dumps(x, indent=4)```You can also define the separators, default value is (\", \", \": \"), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:```python\njson.dumps(x, indent=4, separators=(\". \", \" = \"))```",
                "Order the Result": "The json.dumps() method has parameters to order the keys in the result:```python\njson.dumps(x, indent=4, sort_keys=True)```"
            }
        },
        "regex": {
            "title": "Python RegEx",
            "url": "https://www.w3schools.com/python/python_regex.asp",
            "info": {
                "RegEx Module": "Python has a built-in package called re, which can be used to work with Regular Expressions.Import the re module:```python\nimport re```",
                "RegEx in Python": "When you have imported the re module, you can start using regular expressions:```python\nimport   re\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)```",
                "RegEx Functions": "The re module offers a set of functions that allows us to search a string for a match:",
                "Metacharacters": "Metacharacters are characters with a special meaning:",
                "Special Sequences": "A special sequence is a \\ followed by one of the characters in the list below, and has a special meaning:",
                "Sets": "A set is a set of characters inside a pair of square brackets [] with a special meaning:",
                "The findall() Function": "The findall() function returns a list containing all matches.```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.findall(\"ai\", txt)\nprint(x)```The list contains the matches in the order they are found.If no matches are found, an empty list is returned:```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.findall(\"Portugal\", txt)\nprint(x)```",
                "The search() Function": "The search() function searches the string for a match, and returns a Match object if there is a match.If there is more than one match, only the first occurrence of the match will be returned:```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"\\s\", txt)\n\nprint(\"The first white-space character is located in position:\", x.start())```If no matches are found, the value None is returned:```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"Portugal\", txt)\nprint(x)```",
                "The split() Function": "The split() function returns a list where the string has been split at each match:```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt)\nprint(x)```You can control the number of occurrences by specifying the maxsplit parameter:```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt, 1)\nprint(x)```",
                "The sub() Function": "The sub() function replaces the matches with the text of your choice:```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt)\nprint(x)```You can control the number of replacements by specifying thecount parameter:```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt, 2)\nprint(x)```",
                "Match Object": "A Match Object is an object containing information about the search and the result.```python\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"ai\", txt)\nprint(x) #this will print an object```The Match object has properties and methods used to retrieve information about the search, and the result:.span() returns a tuple containing the start-, and end positions of the match..string returns the string passed into the function.group() returns the part of the string where there was a match```python\nimport re\n  txt = \"The rain in Spain\"\n  x = re.search(r\"\\bS\\w+\", txt)\n  print(x.span())``````python\nimport re\n  txt = \"The rain in Spain\"\n  x = re.search(r\"\\bS\\w+\", txt)\n  print(x.string)``````python\nimport re\n  txt = \"The rain in Spain\"\n  x = re.search(r\"\\bS\\w+\", txt)\n  print(x.group())```"
            }
        },
        "pip": {
            "title": "Python PIP",
            "url": "https://www.w3schools.com/python/python_pip.asp",
            "info": {
                "What is PIP?": "PIP is a package manager for Python packages, or modules if you like.",
                "What is a Package?": "A package contains all the files you need for a module.Modules are Python code libraries you can include in your project.",
                "Check if PIP is Installed": "Navigate your command line to the location of Python's script directory, and type the following:```python\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip --version```",
                "Install PIP": "If you do not have PIP installed, you can download and install it from this page:https://pypi.org/project/pip/",
                "Download a Package": "Downloading a package is very easy.Open the command line interface and tell PIP to download the package you want.Navigate your command line to the location of Python's script directory, and type the following:```python\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip install camelcase```Now you have downloaded and installed your first package!",
                "Using a Package": "Once the package is installed, it is ready to use.Import the \"camelcase\" package into your project.```python\nimport camelcase\nc = camelcase.CamelCase()\ntxt = \"hello world\"\n\nprint(c.hump(txt))```",
                "Find Packages": "Find more packages at https://pypi.org/.",
                "Remove a Package": "Use the uninstall command to remove a package:```python\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip uninstall camelcase```The PIP Package Manager will ask you to confirm that you want to remove the camelcase package:```python\nUninstalling camelcase-02.1:\n  Would remove:\n    c:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camecase-0.2-py3.6.egg-info\n    c:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camecase\\*\nProceed (y/n)?```Press y and the package will be removed.",
                "List Packages": "Use the list command to list all the packages installed on your system:```python\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip list```"
            }
        },
        "try...except": {
            "title": "Python Try...Except",
            "url": "https://www.w3schools.com/python/python_try_except.asp",
            "info": {
                "Exception Handling": "When an error occurs, or exception as we call it, Python will normally stop and generate an error message.These exceptions can be handled using the try statement:```python\ntry:\n  print(x)\nexcept:\n  print(\"An exception occurred\")```Since the try block raises an error, the except block will be executed.Without the try block, the program will crash and raise an error:```python\nprint(x)```",
                "Many Exceptions": "You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:```python\ntry:\n  print(x)\nexcept NameError:\n  print(\"Variable x is not defined\")\nexcept:\n  print(\"Something else went wrong\")```",
                "Else": "You can use the else keyword to define a block of code to be executed if no errors were raised:```python\ntry:\n  print(\"Hello\")\nexcept:\n  print(\"Something went wrong\")\nelse:\n  print(\"Nothing went wrong\")```",
                "Finally": "The finally block, if specified, will be executed regardless if the try block raises an error or not.```python\ntry:\n  print(x)\nexcept:\n  print(\"Something went wrong\")\nfinally:\n  print(\"The 'try except' is finished\")```This can be useful to close objects and clean up resources:```python\ntry:\n  f = open(\"demofile.txt\")\n  f.write(\"Lorum Ipsum\")\nexcept:\n  print(\"Something went wrong when writing to the file\")\nfinally:\n  f.close()```The program can continue, without leaving the file object open.",
                "Raise an exception": "As a Python developer you can choose to throw an exception if a condition occurs.To throw (or raise) an exception, use the raise keyword.```python\nx = -1\nif x < 0:\n  raise Exception(\"Sorry, no numbers below   zero\")```The raise keyword is used to raise an exception.You can define what kind of error to raise, and the text to print to the user.```python\nx = \"hello\"\nif not type(x) is int:\n  raise TypeError(\"Only   integers are allowed\")```"
            }
        },
        "userinput": {
            "title": "Python User Input",
            "url": "https://www.w3schools.com/python/python_user_input.asp",
            "info": {
                "User Input": "Python allows for user input.That means we are able to ask the user for input.The method is a bit different in Python 3.6 than Python 2.7.Python 3.6 uses the input() method. Python 2.7 uses the raw\\_input() method. The following example asks for the username, and when you entered the username, it gets printed on the screen:```python\nusername = input(\"Enter username:\")\n\r\nprint(\"Username is: \" + username)``````python\nusername = raw_input(\"Enter username:\")\n\r\nprint(\"Username is: \" + username)```"
            }
        },
        "stringformatting": {
            "title": "Python String Formatting",
            "url": "https://www.w3schools.com/python/python_string_formatting.asp",
            "info": {
                "String format()": "The format() method allows you to format selected parts of a string.Sometimes there are parts of a text that you do not control, maybe they come from a database, or user input?To control such values, add placeholders (curly brackets {}) in the text, and run the values through the format() method:```python\nprice = 49\ntxt = \"The price is {} dollars\"\nprint(txt.format(price))```You can add parameters inside the curly brackets to specify how to convert the value:```python\ntxt = \"The price is {:.2f} dollars\"```Check out all formatting types in our String format() Reference.",
                "Multiple Values": "If you want to use more values, just add more values to the format() method:```python\nprint(txt.format(price, itemno, count))```And add more placeholders:```python\nquantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))```",
                "Index Numbers": "You can use index numbers (a number inside the curly brackets {0}) to be sure the values are placed in the correct placeholders:```python\nquantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))```Also, if you want to refer to the same value more than once, use the index number:```python\nage = 36\nname = \"John\"\ntxt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, name))```",
                "Named Indexes": "You can also use named indexes by entering a name inside the curly brackets {carname}, but then you must use names when you pass the parameter valuestxt.format(carname = \"Ford\"):```python\nmyorder = \"I have a {carname}, it is a {model}.\"\nprint(myorder.format(carname = \"Ford\", model = \"Mustang\"))```"
            }
        },
        "filehandling": {
            "title": "Python File Handling",
            "url": "https://www.w3schools.com/python/python_file_handling.asp",
            "info": {
                "File Handling": "The key function for working with files in Python is theopen() function.The open() function takes two parameters;filename, and mode.There are four different methods (modes) for opening a file:In addition you can specify if the file should be handled as binary or text mode",
                "Syntax": "To open a file for reading it is enough to specify the name of the file:```python\nf = open(\"demofile.txt\")```The code above is the same as:```python\nf = open(\"demofile.txt\", \"rt\")```Because \"r\" for read, and \"t\" for text are the default values, you do not need to specify them."
            }
        },
        "readfiles": {
            "title": "Python Read Files",
            "url": "https://www.w3schools.com/python/python_file_open.asp",
            "info": {
                "Open a File on the Server": "Assume we have the following file, located in the same folder as Python:```python\nHello! Welcome to demofile.txt\nThis file is for testing purposes.\nGood Luck!```To open the file, use the built-in open() function.The open() function returns a file object, which has a read() method for reading the content of the file:```python\nf = open(\"demofile.txt\", \"r\")\nprint(f.read())```If the file is located in a different location, you will have to specify the file path, like this:```python\nf = open(\"D:\\\\myfiles\\welcome.txt\", \"r\")\nprint(f.read())```",
                "Read Only Parts of the File": "By default the read() method returns the whole text, but you can also specify how many characters you want to return:```python\nf = open(\"demofile.txt\", \"r\")\nprint(f.read(5))```",
                "Read Lines": "You can return one line by using the readline() method:```python\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())```By calling readline() two times, you can read the two first lines:```python\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())\nprint(f.readline())```By looping through the lines of the file, you can read the whole file, line by line:```python\nf = open(\"demofile.txt\", \"r\")\nfor x in f:\n  print(x)```",
                "Close Files": "It is a good practice to always close the file when you are done with it.```python\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())\nf.close()```"
            }
        },
        "write/createfiles": {
            "title": "Python Write/Create Files",
            "url": "https://www.w3schools.com/python/python_file_write.asp",
            "info": {
                "Write to an Existing File": "To write to an existing file, you must add a parameter to theopen() function:\"a\" - Append - will append to the end of the file\"w\" - Write - will overwrite any existing content```python\nf = open(\"demofile2.txt\", \"a\")\nf.write(\"Now the file has more content!\")\nf.close()\n#open and read the file after the appending:\nf = open(\"demofile2.txt\", \"r\")\nprint(f.read())``````python\nf = open(\"demofile3.txt\", \"w\")\nf.write(\"Woops! I have deleted the content!\")\nf.close()\n#open and read the file after the appending:\nf = open(\"demofile3.txt\", \"r\")\nprint(f.read())```",
                "Create a New File": "To create a new file in Python, use the open() method, with one of the following parameters:\"x\" - Create - will create a file, returns an error if the file exist\"a\" - Append - will create a file if the specified file does not exist\"w\" - Write - will create a file if the specified file does not exist```python\nf = open(\"myfile.txt\", \"x\")```Result: a new empty file is created!```python\nf = open(\"myfile.txt\", \"w\")```"
            }
        },
        "deletefiles": {
            "title": "Python Delete Files",
            "url": "https://www.w3schools.com/python/python_file_remove.asp",
            "info": {
                "Delete a File": "To delete a file, you must import the OS module, and run itsos.remove() function:```python\nimport os\nos.remove(\"demofile.txt\")```",
                "Check if File exist:": "To avoid getting an error, you might want to check if the file exists before you try to delete it:```python\nimport os\nif os.path.exists(\"demofile.txt\"):\n  os.remove(\"demofile.txt\")\nelse:\n  print(\"The file does not exist\")```",
                "Delete Folder": "To delete an entire folder, use the os.rmdir() method:```python\nimport os\nos.rmdir(\"myfolder\")```"
            }
        },
        "numpyintro": {
            "title": "NumPy Intro",
            "url": "https://www.w3schools.com/python/numpy_intro.asp",
            "info": {
                "What is NumPy?": "NumPy is a python library used for working with arrays.It also has functions for working in domain of linear algebra, fourier transform, and matrices.NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.NumPy stands for Numerical Python.",
                "Why Use NumPy ?": "In Python we have lists that serve the purpose of arrays, but they are slow to process.NumPy aims to provide an array object that is up to 50x faster that traditional Python lists.The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.Arrays are very frequently used in data science, where speed and resources are very important.",
                "Why is NumPy Faster Than Lists?": "NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.This behavior is called locality of reference in computer science.This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures.",
                "Which Language is NumPy written in?": "NumPy is a Python library and is written partially in Python, but most of the parts that require fast computation are written in C or C++.",
                "Where is the NumPy Codebase?": "The source code for NumPy is located at this github repository https://github.com/numpy/numpy"
            }
        },
        "numpygettingstarted": {
            "title": "NumPy Getting Started",
            "url": "https://www.w3schools.com/python/numpy_getting_started.asp",
            "info": {
                "Installation of NumPy": "If you have Python and PIP already installed on a system, then installation of NumPy is very easy.Install it using this command:```python\nC:\\Users\\Your Name>pip install numpy```If this command fails, then use a python distribution that already has NumPy installed like, Anaconda, Spyder etc.",
                "Import NumPy": "Once NumPy is installed, import it in your applications by adding theimport keyword:```python\nimport numpy```Now Numpy is imported and ready to use.```python\nimport numpy\r\n\n\r\narr = numpy.array([1, 2, 3, 4, 5])\r\n\n\r\nprint(arr)```",
                "NumPy as np": "NumPy is usually imported under the np alias.Create an alias with the as keyword while importing:```python\nimport numpy as np```Now the NumPy package can be referred to as np instead of numpy.```python\nimport numpy as np\r\n\n\r\narr = np.array([1, 2, 3, 4, 5])\r\n\n\r\nprint(arr)```",
                "Checking NumPy Version": "The version string is stored under \\_\\_version\\_\\_ attribute.```python\nimport numpy as np\nprint(np.__version__)```"
            }
        },
        "numpycreatingarrays": {
            "title": "NumPy Creating Arrays",
            "url": "https://www.w3schools.com/python/numpy_creating_arrays.asp",
            "info": {
                "Create a NumPy ndarray Object": "NumPy is used to work with arrays. The array object in NumPy is calledndarray.We can create a NumPyndarray object by using the array() function.```python\nimport numpy as np\r\n\n\r\narr = np.array([1, 2, 3, 4, 5])\nprint(arr)\n\r\nprint(type(arr))```To create an ndarray,we can pass a list, tuple or any array-like object into the array() method, and it will be converted into anndarray:```python\nimport numpy as np\r\n\n\r\narr = np.array((1, 2, 3, 4, 5))\nprint(arr)```",
                "Dimensions in Arrays": "A dimension in arrays is one level of array depth (nested arrays).",
                "0-D Arrays": "0-D arrays, or Scalars, are the elements in an array. Each value in an array is a 0-D array.```python\nimport numpy as np\narr = np.array(42)\n\nprint(arr)```",
                "1-D Arrays": "An array that has 0-D arrays as its elements is called uni-dimensional or 1-D array.These are the most common and basic arrays.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\n\nprint(arr)```",
                "2-D Arrays": "An array that has 1-D arrays as its elements is called a 2-D array.These are often used to represent matrix or 2nd order tensors.```python\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(arr)```",
                "3-D arrays": "An array that has 2-D arrays (matrices) as its elements is called 3-D array.These are often used to represent a 3rd order tensor.```python\nimport numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\n\nprint(arr)```",
                "Check Number of Dimensions?": "NumPy Arrays provides the ndim attribute that returns an integer that tells us how many dimensions the array have.```python\nimport numpy as np\na = np.array(42)\nb = np.array([1, 2, 3, 4, 5])\nc = np.array([[1, 2, 3], [4, 5, 6]])\nd = np.array([[[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]])\nprint(a.ndim) \nprint(b.ndim) \nprint(c.ndim) \nprint(d.ndim)```",
                "Higher Dimensional Arrays": "An array can have any number of dimensions.When the array is created, you can define the number of dimensions by using the ndmin argument.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4], ndmin=5)\nprint(arr)\nprint('number of dimensions :', arr.ndim)```In this array the innermost dimension (5th dim) has 4 elements,the 4th dim has 1 element that is the vector,the 3rd dim has 1 element that is the matrix with the vector,the 2nd dim has 1 element that is 3D array and 1st dim has 1 element that is a 4D array."
            }
        },
        "numpyarrayindexing": {
            "title": "NumPy Array Indexing",
            "url": "https://www.w3schools.com/python/numpy_array_indexing.asp",
            "info": {
                "Access Array Elements": "Array indexing is the same as accessing an array element.You can access an array element by referring to its index number.The indexes in NumPy arrays start with 0, meaning that the first element  has index 0, and the second has index 1 etc.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[0])``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[1])``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr[2] + arr[3])```",
                "Access 2-D Arrays": "To access elements from 2-D arrays we can use comma separated integers representing the dimension and the index of the element.```python\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('2nd element on 1st dim: ', arr[0, 1])``````python\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('5th element on 2nd dim: ', arr[1, 4])```",
                "Access 3-D Arrays": "To access elements from 3-D arrays we can use comma separated integers representing the dimensions and the index of the element.```python\nimport numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nprint(arr[0, 1, 2])```arr[0, 1, 2] prints the value 6.And this is why:The first number represents the first dimension, which contains two arrays:[[1, 2, 3], [4, 5, 6]]and:[[7, 8, 9], [10, 11, 12]]Since we selected 0, we are left with the first array:[[1, 2, 3], [4, 5, 6]]The second number represents the second dimension, which also contains two arrays:[1, 2, 3]and:[4, 5, 6]Since we selected 1, we are left with the second array:[4, 5, 6]The third number represents the third dimension, which contains three values:456Since we selected 2, we end up with the third value:6",
                "Negative Indexing": "Use negative indexing to access an array from the end.```python\nimport numpy as np\narr = np.array([[1,2,3,4,5], [6,7,8,9,10]])\nprint('Last element from 2nd dim: ', arr[1, -1])```"
            }
        },
        "numpyarrayslicing": {
            "title": "NumPy Array Slicing",
            "url": "https://www.w3schools.com/python/numpy_array_slicing.asp",
            "info": {
                "Slicing arrays": "Slicing in python means taking elements from one given index to another given index.We pass slice instead of index like this: [start:end].We can also define the step, like this: [start:end:step].If we don't pass start its considered 0If we don't pass end its considered length of array in that dimensionIf we don't pass step its considered 1```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5])``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[4:])``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[:4])```",
                "Negative Slicing": "Use the minus operator to refer to an index from the end:```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[-3:-1])```",
                "STEP": "Use the step value to determine the step of the slicing:```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[1:5:2])``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nprint(arr[::2])```",
                "Slicing 2-D Arrays": "```python\nimport numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n\nprint(arr[1, 1:4])``````python\nimport numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n\nprint(arr[0:2, 2])``````python\nimport numpy as np\narr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])\n\nprint(arr[0:2, 1:4])```"
            }
        },
        "numpydatatypes": {
            "title": "NumPy Data Types",
            "url": "https://www.w3schools.com/python/numpy_data_types.asp",
            "info": {
                "Data Types in Python": "By default Python have these data types:",
                "Data Types in NumPy": "NumPy has some extra data types, and refer to data types with one character, like i for integers, u for unsigned integers etc.Below is a list of all data types in NumPy and the characters used to represent them.",
                "Checking the Data Type of an Array": "The NumPy array object has a property called dtype that returns the data type of the array:```python\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nprint(arr.dtype)``````python\nimport numpy as np\narr = np.array(['apple', 'banana', 'cherry'])\nprint(arr.dtype)```",
                "Creating Arrays With a Defined Data Type": "We use the array() function to create arrays, this function can take an optional argument: dtype that allows us to define the expected data type of the array elements:```python\nimport numpy as np\narr = np.array([1, 2, 3, 4], dtype='S')\nprint(arr)\nprint(arr.dtype)```For i, u, f, S and U we can define size as well.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4], dtype='i4')\nprint(arr)\nprint(arr.dtype)```",
                "What if a Value Can Not Be Converted?": "If a type is given in which elements can't be casted then NumPy will raise a ValueError.```python\nimport numpy as np\narr = np.array(['a', '2', '3'], dtype='i')```",
                "Converting Data Type on Existing Arrays": "The best way to change the data type of an existing array, is to make a copy of the array with the astype() method.The astype() function creates a copy of the array, and allows you to specify the data type as a parameter.The data type can be specified using a string, like 'f' for float,'i' for integer etc. or you can use the data type directly likefloat for float and int for integer.```python\nimport numpy as np\narr = np.array([1.1, 2.1, 3.1])\n\nnewarr = arr.astype('i')\nprint(newarr)\nprint(newarr.dtype)``````python\nimport numpy as np\narr = np.array([1.1, 2.1, 3.1])\n\nnewarr = arr.astype(int)\nprint(newarr)\nprint(newarr.dtype)``````python\nimport numpy as np\narr = np.array([1, 0, 3])\n\nnewarr = arr.astype(bool)\nprint(newarr)\nprint(newarr.dtype)```"
            }
        },
        "numpycopyvsview": {
            "title": "NumPy Copy vs View",
            "url": "https://www.w3schools.com/python/numpy_copy_vs_view.asp",
            "info": {
                "The Difference Between Copy and View": "The main difference between a copy and a view of an array is thatthe copy is a new array, and the view is just a view of the original array.The copy owns the data and any changes made to the copy will not affect original array, and any changes made to the original array will not affect the copy.The view does not own the data and any changes made to the view will affect the original array, and any changes made to the original array will affect the view.",
                "COPY:": "```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nx = arr.copy()\narr[0] = 42\n\nprint(arr) \nprint(x)```",
                "VIEW:": "```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nx = arr.view()\narr[0] = 42\n\nprint(arr) \nprint(x)``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nx = arr.view()\nx[0] = 31\n\nprint(arr) \nprint(x)```",
                "Check if Array Owns it's Data": "As mentioned above, copies owns the data, and views does not own the data, but how can we check this?Every NumPy array has the attribute base that returns None if the array owns the data.Otherwise, the base\u00a0 attribute refers to the original object.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nx = arr.copy()\ny = arr.view()\nprint(x.base)\nprint(y.base)```"
            }
        },
        "numpyarrayshape": {
            "title": "NumPy Array Shape",
            "url": "https://www.w3schools.com/python/numpy_array_shape.asp",
            "info": {
                "Shape of an Array": "The shape of an array is the number of elements in each dimension.",
                "Get the Shape of an Array": "NumPy arrays have an attribute called shape that returns a tuple with each index having the number of corresponding elements.```python\nimport numpy as np\narr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n\nprint(arr.shape)```The example above returns (2, 4), which means that the array has 2 dimensions, and each dimension has 4 elements.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4], ndmin=5)\nprint(arr)\nprint('shape of array :', arr.shape)```",
                "What does the shape tuple represent?": "Integers at every index tells about the number of elements the corresponding dimension has.In the example above at index-4 we have value 4, so we can say that 5th ( 4 + 1 th) dimension has 4 elements."
            }
        },
        "numpyarrayreshape": {
            "title": "NumPy Array Reshape",
            "url": "https://www.w3schools.com/python/numpy_array_reshape.asp",
            "info": {
                "Reshaping arrays": "Reshaping means changing the shape of an array.The shape of an array is the number of elements in each dimension.By reshaping we can add or remove dimensions or change number of elements in each dimension.",
                "Reshape From 1-D to 2-D": "```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nnewarr = arr.reshape(4, 3)\nprint(newarr)```",
                "Reshape From 1-D to 3-D": "```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nnewarr = arr.reshape(2, 3, 2)\nprint(newarr)```",
                "Can We Reshape Into any Shape?": "Yes, as long as the elements required for reshaping are equal in both shapes.We can reshape an 8 elements 1D array into 4 elements in 2 rows 2D array but we cannot reshape it into a 3 elements 3 rows 2D array as that would require 3x3 = 9 elements.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nnewarr = arr.reshape(3, 3)\nprint(newarr)```",
                "Returns Copy or View?": "```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nprint(arr.reshape(2, 4).base)```The example above returns the original array, so it is a view.",
                "Unknown Dimension": "You are allowed to have one \"unknown\" dimension.Meaning that you do not have to specify an exact number for one of the dimensions in the reshape method.Pass -1 as the value, and NumPy will calculate this number for you.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nnewarr = arr.reshape(2, 2, -1)\nprint(newarr)```",
                "Flattening the arrays": "Flattening array means converting a multidimensional array into a 1D array.We can use reshape(-1) to do this.```python\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nnewarr = arr.reshape(-1)\nprint(newarr)```"
            }
        },
        "numpyarrayiterating": {
            "title": "NumPy Array Iterating",
            "url": "https://www.w3schools.com/python/numpy_array_iterating.asp",
            "info": {
                "Iterating Arrays": "Iterating means going through elements one by one.As we deal with multi-dimensional arrays in numpy, we can do this using basic for loop of python.If we iterate on a 1-D array it will go through each element one by one.```python\nimport numpy as np\narr = np.array([1, 2, 3])\nfor x in arr:\n  print(x)```",
                "Iterating 2-D Arrays": "In a 2-D array it will go through all the rows.```python\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nfor x in arr:\n  print(x)```To return the actual values, the scalars, we have to iterate the arrays in each dimension.```python\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6]])\nfor x in arr:\n  for y in x:\n    print(y)```",
                "Iterating 3-D Arrays": "In a 3-D array it will go through all the 2-D arrays.```python\nimport numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nfor x in arr:\n  print(x)```To return the actual values, the scalars, we have to iterate the arrays in each dimension.```python\nimport numpy as np\narr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])\nfor x in arr:\n  for y in x:\n    for z in y:\n      print(z)```",
                "Iterating Arrays Using nditer()": "The function nditer() is a helping function that can be used from very basic to very advanced iterations. It solves some basic issues which we face in iteration, lets go through it with examples.In basic for loops, iterating through each scalar of an array we need to use nfor loops which can be difficult to write for arrays with very high dimensionality.```python\nimport numpy as np\narr = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\nfor x in np.nditer(arr):\n  print(x)```",
                "Iterating Array With Different Data Types": "We can use op\\_dtypes argument and pass it the expected datatype to change the datatype of elements while iterating.NumPy does not change the data type of the element in-place (where the element is in array) so it needs some other space to perform this action, that extra space is called buffer, and in order to enable it in nditer() we pass flags=['buffered'].```python\nimport numpy as np\narr = np.array([1, 2, 3])\nfor x in np.nditer(arr, flags=['buffered'], op_dtypes=['S']):\n  print(x)```",
                "Iterating With Different Step Size": "We can use filtering and followed by iteration.```python\nimport numpy as np\narr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\nfor x in np.nditer(arr[:, ::2]):\n  print(x)```",
                " Enumerated Iteration Using ndenumerate()": "Enumeration means mentioning sequence number of somethings one by one.Sometimes we require corresponding index of the element while iterating, the ndenumerate() method can be used for those usecases.```python\nimport numpy as np\narr = np.array([1, 2, 3])\nfor idx, x in np.ndenumerate(arr):\n  print(idx, x)``````python\nimport numpy as np\narr = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\nfor idx, x in np.ndenumerate(arr):\n  print(idx, x)```"
            }
        },
        "numpyarrayjoin": {
            "title": "NumPy Array Join",
            "url": "https://www.w3schools.com/python/numpy_array_join.asp",
            "info": {
                "Joining NumPy Arrays": "Joining means putting contents of two or more arrays in a single array.In SQL we join tables based on a key, whereas in NumPy we join arrays by axes.We pass a sequence of arrays that we want to join to theconcatenate() function, along with the axis. If axis is not explicitly passed, it is taken as 0.```python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.concatenate((arr1, arr2))\nprint(arr)``````python\nimport numpy as np\narr1 = np.array([[1, 2], [3, 4]])\narr2 = np.array([[5, 6], [7, 8]])\narr = np.concatenate((arr1, arr2), axis=1)\n\nprint(arr)```",
                "Joining Arrays Using Stack Functions": "Stacking is same as concatenation, the only difference is that stacking is done along a new axis.We can concatenate two 1-D arrays along the second axis which would result in putting them one over the other, ie. stacking.We pass a sequence of arrays that we want to join to theconcatenate() method along with the axis. If axis is not explicitly passed it is taken as 0.```python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.stack((arr1, arr2), axis=1)\nprint(arr)```",
                "Stacking Along Rows": "NumPy provides a helper function: hstack() to stack along rows.```python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.hstack((arr1, arr2))\nprint(arr)```",
                "Stacking Along Columns": "NumPy provides a helper function: vstack() \u00a0to stack along columns.```python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.vstack((arr1, arr2))\nprint(arr)```",
                "Stacking Along Height (depth)": "NumPy provides a helper function: dstack() to stack along height, which is the same as depth.```python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([4, 5, 6])\narr = np.dstack((arr1, arr2))\nprint(arr)```"
            }
        },
        "numpyarraysplit": {
            "title": "NumPy Array Split",
            "url": "https://www.w3schools.com/python/numpy_array_split.asp",
            "info": {
                "Splitting NumPy Arrays": "Splitting is reverse operation of Joining.Joining merges multiple arrays into one and Splitting breaks onearray into multiple.We use array\\_split() for splitting arrays, we pass it the array we want to split and the number of splits.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =np.array_split(arr, 3)\nprint(newarr)```If the array has less elements than required, it will adjust from the end accordingly.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =np.array_split(arr, 4)\nprint(newarr)```",
                "Split Into Arrays": "The return value of the array\\_split() method is an array containing each of the split as an array.If you split an array into 3 arrays, you can access them from the result just like any array element:```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6])\nnewarr =np.array_split(arr, 3)\nprint(newarr[0])\nprint(newarr[1])\nprint(newarr[2])```",
                "Splitting 2-D Arrays": "Use the same syntax when splitting 2-D arrays.Use the array\\_split() method, pass in the array you want to split and the number of splits you want to do.```python\nimport numpy as np\narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\nnewarr = np.array_split(arr, 3)\nprint(newarr)```The example above returns three 2-D arrays.Let's look at another example, this time each element in the 2-D arrays contains 3 elements.```python\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.array_split(arr, 3)\nprint(newarr)```The example above returns three 2-D arrays.In addition, you can specify which axis you want to do the split around.The example below also returns three 2-D arrays, but they are split along the row (axis=1).```python\nimport numpy as np\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])\nnewarr = np.array_split(arr, 3, axis=1)\nprint(newarr)```An alternate solution is using hsplit() opposite of hstack()"
            }
        },
        "numpyarraysearch": {
            "title": "NumPy Array Search",
            "url": "https://www.w3schools.com/python/numpy_array_search.asp",
            "info": {
                "Searching Arrays": "You can search an array for a certain value, and return the indexes that get a match.To search an array, use the where() method.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 4, 4])\nx =np.where(arr == 4)\nprint(x)```The example above will return a tuple: (array([3, 5, 6],)Which means that the value 4 is present at index 3, 5, and 6.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx =np.where(arr%2 == 0)\nprint(x)``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7, 8])\nx =np.where(arr%2 == 1)\nprint(x)```",
                "Search Sorted": "There is a method called searchsorted() which performs a binary search in the array,and returns the index where the specified value would be inserted to maintain the search order.```python\nimport numpy as np\narr = np.array([6, 7, 8, 9])\nx =np.searchsorted(arr, 7)\nprint(x)```Example explained: The number 7 should be inserted on index 1 to remain the sort order.The method starts the search from the left and returns the first index where the number 7 is no longer larger than the next value.By default the left most index is returned, but we can give side='right' to return the right most index instead.```python\nimport numpy as np\narr = np.array([6, 7, 8, 9])\nx =np.searchsorted(arr, 7, side='right')\nprint(x)```Example explained: The number 7 should be inserted on index 2 to remain the sort order.The method starts the search from the right and returns the first index where the number 7 is no longer less than the next value.To search for more than one value, use an array with the specified values.The return value is an array: [1 2 3] containing the three indexes where 2, 4, 6 would be inserted in the original array to maintain the order."
            }
        },
        "numpyarraysort": {
            "title": "NumPy Array Sort",
            "url": "https://www.w3schools.com/python/numpy_array_sort.asp",
            "info": {
                "Sorting Arrays": "Sorting means putting elements in a ordered sequence.Ordered sequence is any sequence that has an order corresponding to elements, like numeric or alphabetical, ascending or descending.The NumPy ndarray object has a function called sort(), that will sort a specified array.```python\nimport numpy as np\narr = np.array([3, 2, 0, 1])\nprint(np.sort(arr))```You can also sort arrays of strings, or any other data type:```python\nimport numpy as np\narr = np.array(['banana', 'cherry', 'apple'])\nprint(np.sort(arr))``````python\nimport numpy as np\narr = np.array([True, False, True])\nprint(np.sort(arr))```",
                "Sorting a 2-D Array": "If you use the sort() method on a 2-D array, both arrays will be sorted:```python\nimport numpy as np\narr = np.array([[3, 2, 4], [5, 0, 1]])\nprint(np.sort(arr))```"
            }
        },
        "numpyarrayfilter": {
            "title": "NumPy Array Filter",
            "url": "https://www.w3schools.com/python/numpy_array_filter.asp",
            "info": {
                "Filtering Arrays": "Getting some elements out of an existing array and creating a new array out of them is called filtering.In NumPy, you filter an array using a boolean index list.If the value at an index is True that element is contained in the filtered array, if the value at that index is False that element is excluded from the filtered array.```python\nimport numpy as np\narr = np.array([41, 42, 43, 44])\nx = [True, False, True, False]\nnewarr = arr[x]\nprint(newarr)```The example above will return [41, 43], why?Because the new filter contains only the values where the filter array had the value True, in this case, index 0 and 2.",
                "Creating the Filter Array": "In the example above we hard-coded the True and False values, but the common use is to create a filter array based on conditions.```python\nimport numpy as np\narr = np.array([41, 42, 43, 44])\n# Create an empty list\nfilter_arr = []\n# go through each element in arr\nfor element in arr:\n  # if the element is higher than 42, set the value to True, otherwise False:\n  if element > 42:\n    filter_arr.append(True)\n  else:\n    filter_arr.append(False)\n\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\n# Create an empty list\nfilter_arr = []\n# go through each element in arr\nfor element in arr:\n  # if the element is completely divisble by 2, set the value to True, otherwise False\n  if element % 2 == 0:\n    filter_arr.append(True)\n  else:\n    filter_arr.append(False)\n\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)```",
                "Creating Filter Directly From Array": "The above example is quite a common task in NumPy and NumPy provides a nice way to tackle it.We can directly substitute the array instead of the iterable variable in our condition and it will work just as we expect it to.```python\nimport numpy as np\narr = np.array([41, 42, 43, 44])\nfilter_arr = arr > 42\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)``````python\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5, 6, 7])\nfilter_arr = arr % 2 == 0\nnewarr = arr[filter_arr]\nprint(filter_arr)\nprint(newarr)```"
            }
        },
        "numpyrandom": {
            "title": "NumPy Random",
            "url": "https://www.w3schools.com/python/numpy_random.asp",
            "info": {
                "What is a Random Number?": "Random number does NOT mean a different number every time. Random means something that cannot be predicted logically.",
                "Pseudo Random and True Random.": "Computers work on programs, and programs are definitive set of instructions. So it means there must be somealgorithm to generate a random number as well.If there is a program to generate random number it can bepredicted, thus it is not truly random.Random numbers generated through a generation algorithm are called pseudo random.Can we make truly random numbers?Yes. In order to generate a truly random number on our computers we need to get the random data from someoutside source. This outside source is generally our keystrokes, mouse movements, data on networketc.We do not need truly random numbers, unless its related to security (e.g. encryption keys) or the basis ofapplication is the randomness (e.g. Digital roulette wheels).In this tutorial we will be using pseudo random numbers.",
                "Generate Random Number": "NumPy offers the random module to work with random numbers.```python\nfrom numpy import random\nx = random.randint(100)\nprint(x)```",
                "Generate Random Float": "The random module's rand() method returns a random float between 0 and 1.```python\nfrom numpy import random\nx = random.rand()\nprint(x)```",
                "Generate Random Array": "In NumPy we work with arrays, and you can use the two methods from the above examples to make random arrays.The randint() method takes a sizeparameter where you can specify the shape of an array.```python\nfrom numpy import random\nx=random.randint(100, size=(5))\nprint(x)``````python\nfrom numpy import random\nx = random.randint(100, size=(3, 5))\nprint(x)```The rand() method also allows you to specify the shape of the array.```python\nfrom numpy import random\nx = random.rand(5)\nprint(x)``````python\nfrom numpy import random\nx = random.rand(3, 5)\nprint(x)```",
                "Generate Random Number From Array": "The choice() method allows you to generate a random value based on an array of values.The choice() method takes an array as a parameter and randomly returns one of the values.```python\nfrom numpy import random\nx = random.choice([3, 5, 7, 9])\nprint(x)```The choice() method also allows you to return an array of values.Add a size parameter to specify the shape of the array.```python\nfrom numpy import random\nx = random.choice([3, 5, 7, 9], size=(3, 5))\nprint(x)```"
            }
        },
        "randomintro": {
            "title": "Random Intro",
            "url": "https://www.w3schools.com/python/numpy_random.asp",
            "info": {
                "What is a Random Number?": "Random number does NOT mean a different number every time. Random means something that cannot be predicted logically.",
                "Pseudo Random and True Random.": "Computers work on programs, and programs are definitive set of instructions. So it means there must be somealgorithm to generate a random number as well.If there is a program to generate random number it can bepredicted, thus it is not truly random.Random numbers generated through a generation algorithm are called pseudo random.Can we make truly random numbers?Yes. In order to generate a truly random number on our computers we need to get the random data from someoutside source. This outside source is generally our keystrokes, mouse movements, data on networketc.We do not need truly random numbers, unless its related to security (e.g. encryption keys) or the basis ofapplication is the randomness (e.g. Digital roulette wheels).In this tutorial we will be using pseudo random numbers.",
                "Generate Random Number": "NumPy offers the random module to work with random numbers.```python\nfrom numpy import random\nx = random.randint(100)\nprint(x)```",
                "Generate Random Float": "The random module's rand() method returns a random float between 0 and 1.```python\nfrom numpy import random\nx = random.rand()\nprint(x)```",
                "Generate Random Array": "In NumPy we work with arrays, and you can use the two methods from the above examples to make random arrays.The randint() method takes a sizeparameter where you can specify the shape of an array.```python\nfrom numpy import random\nx=random.randint(100, size=(5))\nprint(x)``````python\nfrom numpy import random\nx = random.randint(100, size=(3, 5))\nprint(x)```The rand() method also allows you to specify the shape of the array.```python\nfrom numpy import random\nx = random.rand(5)\nprint(x)``````python\nfrom numpy import random\nx = random.rand(3, 5)\nprint(x)```",
                "Generate Random Number From Array": "The choice() method allows you to generate a random value based on an array of values.The choice() method takes an array as a parameter and randomly returns one of the values.```python\nfrom numpy import random\nx = random.choice([3, 5, 7, 9])\nprint(x)```The choice() method also allows you to return an array of values.Add a size parameter to specify the shape of the array.```python\nfrom numpy import random\nx = random.choice([3, 5, 7, 9], size=(3, 5))\nprint(x)```"
            }
        },
        "datadistribution": {
            "title": "Data Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_distribution.asp",
            "info": {
                "What is Data Distribution?": "Data Distribution is a list of all possible values, and how often each value occurs.Such lists are important when working with statistics and data science.The random module offer methods that returns randomly generated data distributions.",
                "Random Distribution": "A random distribution is a set of random numbers that follow a certain probability density function.We can generate random numbers based on defined probabilities using the choice() method of the random module.The choice() method allows us to specify the probability for each value.The probability is set by a number between 0 and 1, where 0 means that the value will never occur and 1 means that the value will always occur.```python\nfrom numpy import random\nx = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(100))\nprint(x)```Even if you run the example above 100 times, the value 9 will never occur.You can return arrays of any shape and size by specifying the shape in thesize parameter.```python\nfrom numpy import random\nx = random.choice([3, 5, 7, 9], p=[0.1, 0.3, 0.6, 0.0], size=(3, 5))\nprint(x)```",
                "Data Distribution": "Earlier in this tutorial we have worked with very small amounts of data in our examples, just to understand the different concepts.In the real world, the data sets are much bigger, but it can be difficult to gather real world data, at least at an early stage of a project.To create big data sets for testing, we use the Python module NumPy, which comes with a number of methods to create random data sets, of any size.```python\nimport numpy\nx = numpy.random.uniform(0.0, 5.0, 250)\n\nprint(x)```",
                "Histogram": "To visualize the data set we can draw a histogram with the data we collected.We will use the Python module Matplotlib to draw a histogram:```python\nimport numpy\nimport matplotlib.pyplot as plt\nx = numpy.random.uniform(0.0, 5.0, 250)\nplt.hist(x, 5)\nplt.show()```We use the array from the example above to draw a histogram with 5 bars.The first bar represents how many values in the array are between 0 and 1.The second bar represents how many values are between 1 and 2.Etc.Which gives us this result:",
                "Big Data Distributions": "An array containing 250 values is not considered very big, but now you know how to create a random set of values, and by changing the parameters, you can create the data set as big as you want.```python\nimport numpy\nimport matplotlib.pyplot as plt\nx = numpy.random.uniform(0.0, 5.0, 100000)\nplt.hist(x, 100)\nplt.show()```"
            }
        },
        "randompermutation": {
            "title": "Random Permutation",
            "url": "https://www.w3schools.com/python/numpy_random_permutation.asp",
            "info": {
                "Random Permutations of Elements": "A permutation refers to an arrangement of elements. e.g. [3, 2, 1] is a permutation of [1, 2, 3] and vice-versa.The NumPy Random module provides two methods for this:shuffle() and permutation().",
                "Shuffling Arrays": "Shuffle means changing arrangement of elements in-place. i.e. in the array itself.```python\nfrom numpy import random\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nrandom.shuffle(arr)\nprint(arr)```",
                "Generating Permutation of Arrays": "```python\nfrom numpy import random\nimport numpy as np\narr = np.array([1, 2, 3, 4, 5])\nprint(random.permutation(arr))```"
            }
        },
        "seabornmodule": {
            "title": "Seaborn Module",
            "url": "https://www.w3schools.com/python/numpy_random_seaborn.asp",
            "info": {
                "Visualize Distributions With Seaborn": "Seaborn is a library that uses Matplotlib underneath to plot graphs. It will be used to visualize random distributions.",
                "Install Seaborn.": "If you have Python and PIP already installed on a system, install it using this command:```python\nC:\\Users\\Your Name>pip install seaborn```If you use Jupyter, install Seaborn using this command:```python\nC:\\Users\\Your Name>!pip install seaborn```",
                "Distplots": "Distplot stands for distribution plot, it takes as input an array and plots a curve corresponding to the distribution of points in the array.",
                "Import Matplotlib": "```python\nimport matplotlib.pyplot as plt```",
                "Import Seaborn": "```python\nimport seaborn as sns```",
                "Plotting a Displot": "```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.distplot([0, 1, 2, 3, 4, 5])\nplt.show()```",
                "Plotting a Distplot Without the Histogram": "```python\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.distplot([0, 1, 2, 3, 4, 5], hist=False)\nplt.show()```"
            }
        },
        "normaldistribution": {
            "title": "Normal Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_normal.asp",
            "info": {
                "Normal Distribution": "The Normal Distribution is one of the most important distributions.It is also called the Gaussian Distribution after the German mathematician Carl Friedrich Gauss.It fits the probability distribution of many events, eg. IQ Scores, Heartbeat etc.Use the random.normal() method to get a Normal Data Distribution.It has three parameters:loc - (Mean) where the peak of the bell exists.scale - (Standard Deviation) how flat the graph distribution should be.size - The shape of the returned array.```python\nfrom numpy import random\nx = random.normal(size=(2, 3))\nprint(x)``````python\nfrom numpy import random\nx = random.normal(loc=1, scale=2, size=(2, 3))\n\nprint(x)```",
                "Visualization of Normal Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.distplot(random.normal(size=1000), hist=False)\nplt.show()```"
            }
        },
        "binomialdistribution": {
            "title": "Binomial Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_binomial.asp",
            "info": {
                "Binomial Distribution": "Binomial Distribution is a Discrete Distribution.It describes the outcome of binary scenarios, e.g. toss of a coin, it will either be head or tails.It has three parameters:n - number of trials.p - probability of occurence of each trial (e.g. for toss of a coin 0.5 each).size - The shape of the returned array.```python\nfrom numpy import random\nx = random.binomial(n=10, p=0.5, size=10)\nprint(x)```",
                "Visualization of Binomial Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.binomial(n=10, p=0.5, size=1000), hist=True, kde=False)\nplt.show()```",
                "Difference Between Normal and Binomial Distribution": "The main difference is that normal distribution is continous whereas binomial is discrete,but if there are enough data points it will be quite similar to normal distribution with certain loc and scale.```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.normal(loc=50, scale=5, size=1000), hist=False, label='normal')\nsns.distplot(random.binomial(n=100, p=0.5, size=1000), hist=False, label='binomial')\nplt.show()```"
            }
        },
        "poissondistribution": {
            "title": "Poisson Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_poisson.asp",
            "info": {
                "Poisson Distribution": "Poisson Distribution is a Discrete Distribution.It estimates how many times an event can happen in a specified time.e.g. If someone eats twice a day what is probability he will eat thrice?It has two parameters:lam - rate or known number of occurences e.g. 2 for above problem.size - The shape of the returned array.```python\nfrom numpy import random\nx = random.poisson(lam=2, size=10)\nprint(x)```",
                "Visualization of Poisson Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.poisson(lam=2, size=1000), kde=False)\nplt.show()```",
                "Difference Between Normal and Poisson Distribution": "Normal distribution is continous whereas poisson is discrete.But we can see that similar to binomial for a large enough poisson distribution it will become similar to normal distribution with certain std dev and mean.```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.normal(loc=50, scale=7, size=1000), hist=False, label='normal')\nsns.distplot(random.poisson(lam=50, size=1000), hist=False, label='poisson')\nplt.show()```",
                "Difference Between Poisson and Binomial Distribution": "The difference is very subtle it is that, binomial distribution is for discrete trials, whereas poisson distribution is for continuous trials.But for very large n and near-zero p binomial distribution is near identical to poisson distribution such that n \\* p is nearly equal to lam.```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.binomial(n=1000, p=0.01, size=1000), hist=False, label='binomial')\nsns.distplot(random.poisson(lam=10, size=1000), hist=False, label='poisson')\nplt.show()```"
            }
        },
        "uniformdistribution": {
            "title": "Uniform Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_uniform.asp",
            "info": {
                "Uniform Distribution": "Used to describe probability where every event has equal chances of occuring.E.g. Generation of random numbers.It has three parameters:a - lower bound - default 0 .0.b - upper bound - default 1.0.size - The shape of the returned array.```python\nfrom numpy import random\nx = random.uniform(size=(2, 3))\nprint(x)```",
                "Visualization of Uniform Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.uniform(size=1000), hist=False)\nplt.show()```"
            }
        },
        "logisticdistribution": {
            "title": "Logistic Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_logistic.asp",
            "info": {
                "Logistic Distribution": "Logistic Distribution is used to describe growth.Used extensively in machine learning in logistic regression, neural networks etc.It has three parameters:loc - mean, where the peak is. Default 0.scale - standard deviation, the flatness of distribution. Default 1.size - The shape of the returned array.```python\nfrom numpy import random\nx = random.logistic(loc=1, scale=2, size=(2, 3))\nprint(x)```",
                "Visualization of Logistic Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.logistic(size=1000), hist=False)\nplt.show()```",
                "Difference Between Logistic and Normal Distribution": "Both distributions are near identical, but logistic distribution has more area under the tails. ie. It representage more possibility of occurence of an events further away from mean.For higher value of scale (standard deviation) the normal and logistic distributions are near identical apart from the peak.```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.normal(scale=2, size=1000), hist=False, label='normal')\nsns.distplot(random.logistic(size=1000), hist=False, label='logistic')\nplt.show()```"
            }
        },
        "multinomialdistribution": {
            "title": "Multinomial Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_multinomial.asp",
            "info": {
                "Multinomial Distribution": "Multinomial distribution is a generalization of binomial distribution.It describes outcomes of multi-nomial scenarios unlike binomial where scenarios must be only one of two.e.g. Blood type of a population, dice roll outcome.It has three parameters:n - number of possible outcomes (e.g. 6 for dice roll).pvals - list of probabilties of outcomes (e.g. [1/6, 1/6, 1/6, 1/6, 1/6, 1/6] for dice roll).size - The shape of the returned array.```python\nfrom numpy import random\nx = random.multinomial(n=6, pvals=[1/6, 1/6, 1/6, 1/6, 1/6, 1/6])\nprint(x)```"
            }
        },
        "exponentialdistribution": {
            "title": "Exponential Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_exponential.asp",
            "info": {
                "Exponential Distribution": "Exponential distribution is used for describing time till next event e.g. failure/success etc.It has two parameters:scale - inverse of rate ( see lam in poisson distribution ) defaults to 1.0.size - The shape of the returned array.```python\nfrom numpy import random\nx = random.exponential(scale=2, size=(2, 3))\nprint(x)```",
                "Visualization of Exponential Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.exponential(size=1000), hist=False)\nplt.show()```",
                "Relation Between Poisson and Exponential Distribution": "Poisson distribution deals with number of occurences of an event in a time period whereas exponentialdistribution deals with the time between these events."
            }
        },
        "chisquaredistribution": {
            "title": "Chi Square Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_chisquare.asp",
            "info": {
                "Chi Square Distribution": "Chi Square distribution is used  as a basis to verify the hypothesis.It has two parameters:df - (degree of freedom).size - The shape of the returned array.```python\nfrom numpy import random\nx = random.chisquare(df=2, size=(2, 3))\nprint(x)```",
                "Visualization of Chi Square Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.chisquare(df=1, size=1000), hist=False)\nplt.show()```"
            }
        },
        "rayleighdistribution": {
            "title": "Rayleigh Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_rayleigh.asp",
            "info": {
                "Rayleigh Distribution": "Rayleigh distribution is used in signal processing.It has two parameters:scale - (standard deviation) decides how flat the distribution will be  default 1.0).size - The shape of the returned array.```python\nfrom numpy import random\nx = random.rayleigh(scale=2, size=(2, 3))\nprint(x)```",
                "Visualization of Rayleigh Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.rayleigh(size=1000), hist=False)\nplt.show()```",
                "Similarity Between Rayleigh and Chi Square Distribution": "At unit stddev the and 2 degrees of freedom rayleigh and chi square represent the same distributions."
            }
        },
        "paretodistribution": {
            "title": "Pareto Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_pareto.asp",
            "info": {
                "Pareto Distribution": "A distribution following Pareto's law i.e. 80-20 distribution (20% factors cause 80% outcome).It has two parameter:a - shape parameter.size - The shape of the returned array.```python\nfrom numpy import random\nx = random.pareto(a=2, size=(2, 3))\nprint(x)```",
                "Visualization of Pareto Distribution": "```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.distplot(random.pareto(a=2, size=1000), kde=False)\nplt.show()```"
            }
        },
        "zipfdistribution": {
            "title": "Zipf Distribution",
            "url": "https://www.w3schools.com/python/numpy_random_zipf.asp",
            "info": {
                "Visualization of Zipf Distribution": "Sample 1000 points but plotting only ones with value < 10 for more meaningful chart.```python\nfrom numpy import random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nx = random.zipf(a=2, size=1000)\nsns.distplot(x[x<10], kde=False)\nplt.show()```"
            }
        },
        "numpyufunc": {
            "title": "NumPy ufunc",
            "url": "https://www.w3schools.com/python/numpy_ufunc.asp",
            "info": {
                "What are ufuncs?": "ufuncs stands for \"Universal Functions\" and they are NumPy functions thatoperates on the ndarray object.",
                "Why use ufuncs?": "ufuncs are used to implement vectorization in NumPy which is way faster than iterating over elements.They also provide broadcasting and additional methods like reduce, accumulate etc. that are very helpful for computation.ufuncs also take additional arguments, like:where boolean array or condition defining where the operations should take place.dtype defining the return type of elements.out output array where the return value should be copied.",
                "What is Vectorization?": "Converting iterative statements into a vector based operation is called vectorization.It is faster as modern CPUs are optimized for such operations.list 1: [1, 2, 3, 4]list 2: [4, 5, 6, 7]One way of doing it is to iterate over both of the lists and then sum each elements.```python\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\n  z.append(i + j)\nprint(z)```NumPy has a ufunc for this, called add(x, y) that will produce the same result.```python\nimport numpy as np\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x, y)\nprint(z)```"
            }
        },
        "ufuncintro": {
            "title": "ufunc Intro",
            "url": "https://www.w3schools.com/python/numpy_ufunc.asp",
            "info": {
                "What are ufuncs?": "ufuncs stands for \"Universal Functions\" and they are NumPy functions thatoperates on the ndarray object.",
                "Why use ufuncs?": "ufuncs are used to implement vectorization in NumPy which is way faster than iterating over elements.They also provide broadcasting and additional methods like reduce, accumulate etc. that are very helpful for computation.ufuncs also take additional arguments, like:where boolean array or condition defining where the operations should take place.dtype defining the return type of elements.out output array where the return value should be copied.",
                "What is Vectorization?": "Converting iterative statements into a vector based operation is called vectorization.It is faster as modern CPUs are optimized for such operations.list 1: [1, 2, 3, 4]list 2: [4, 5, 6, 7]One way of doing it is to iterate over both of the lists and then sum each elements.```python\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = []\nfor i, j in zip(x, y):\n  z.append(i + j)\nprint(z)```NumPy has a ufunc for this, called add(x, y) that will produce the same result.```python\nimport numpy as np\nx = [1, 2, 3, 4]\ny = [4, 5, 6, 7]\nz = np.add(x, y)\nprint(z)```"
            }
        },
        "ufunccreatefunction": {
            "title": "ufunc Create Function",
            "url": "https://www.w3schools.com/python/numpy_ufunc_create_function.asp",
            "info": {
                "How To Create Your Own ufunc": "To create you own ufunc, you have to define a function, like you do with normal functions in Python, then youadd it to your NumPy ufunc library with the frompyfunc() method.The frompyfunc() method takes the following arguments:```python\nimport numpy as np\ndef myadd(x, y):\n  return x+y\nmyadd = np.frompyfunc(myadd, 2, 1)\nprint(myadd([1, 2, 3, 4], [5, 6, 7, 8]))```",
                "Check if a Function is a ufunc": "Check the type of a function to check if it is a ufunc or not.A ufunc should return <class 'numpy.ufunc'>.```python\nimport numpy as np\nprint(type(np.add))```If it is not a ufunc, it will return another type, like this built-in NumPy function for joining two or more arrays:```python\nimport numpy as np\nprint(type(np.concatenate))```If the function is not recognized at all, it will return an error:```python\nimport numpy as np\nprint(type(np.blahblah))```To test if the function is a ufunc in an if statement, use the numpy.ufunc value (or np.ufunc if you use np as an alias for numpy):```python\nimport numpy as np\nif type(np.add) == np.ufunc:\n  print('add is ufunc')\nelse:\n  print('add is not ufunc')```"
            }
        },
        "ufuncsimplearithmetic": {
            "title": "ufunc Simple Arithmetic",
            "url": "https://www.w3schools.com/python/numpy_ufunc_simple_arithmetic.asp",
            "info": {
                "Simple Arithmetic": "You could use arithmetic operators +-\\*/directly between NumPy arrays, but this section discusses an extension of the same where we have functions that can take any array-like objects e.g. lists, tuples etc. and perform arithmetic conditionally.All of the discussed arithmetic functions take a where parameter in which we can specify that condition.",
                "Addition": "The add() function sums the content of two arrays, and return the results in a new array.```python\nimport numpy as np\narr1 = np.array([10, 11, 12, 13, 14, 15])\narr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.add(arr1, arr2)\nprint(newarr)```",
                "Subtraction": "The subtract() function subtracts the values from one array with the values from another array,and return the results in a new array.```python\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.subtract(arr1, arr2)\nprint(newarr)```",
                "Multiplication": "The multiply() function multiplies the values from one array with the values from another array,and return the results in a new array.```python\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([20, 21, 22, 23, 24, 25])\nnewarr = np.multiply(arr1, arr2)\nprint(newarr)```",
                "Division": "The divide() function divides the values from one array with the values from another array,and return the results in a new array.```python\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 5, 10, 8, 2, 33])\nnewarr = np.divide(arr1, arr2)\nprint(newarr)```",
                "Power": "The power() function rises the values from the first array to the power of the values of the second array,and return the results in a new array.```python\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 5, 6, 8, 2, 33])\nnewarr = np.power(arr1, arr2)\nprint(newarr)```",
                "Remainder": "Both the mod() and the remainder() functionsreturn the remainder of the values in the first array corresponding to the values in the second array, and return the results in a new array.```python\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.mod(arr1, arr2)\nprint(newarr)```You get the same result when using the remainder() function:```python\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.remainder(arr1, arr2)\nprint(newarr)```",
                "Quotient and Mod": "The divmod() functionreturn both the quotient and the the mod. The return value is two arrays, the first array contains the quotient and second array contains the mod.```python\nimport numpy as np\narr1 = np.array([10, 20, 30, 40, 50, 60])\narr2 = np.array([3, 7, 9, 8, 2, 33])\nnewarr = np.divmod(arr1, arr2)\nprint(newarr)```",
                "Absolute Values": "Both the absolute() and the abs() functions functions do the same absolute operation element-wise but we should use absolute()  to avoid confusion with python's inbuilt math.abs()```python\nimport numpy as np\narr = np.array([-1, -2, 1, 2, 3, -4])\nnewarr = np.absolute(arr)\nprint(newarr)```"
            }
        },
        "ufuncroundingdecimals": {
            "title": "ufunc Rounding Decimals",
            "url": "https://www.w3schools.com/python/numpy_ufunc_rounding_decimals.asp",
            "info": {
                "Rounding Decimals": "There are primarily five ways of rounding off decimals in NumPy:",
                "Truncation": "Remove the decimals, and return the float number closest to zero. Use the trunc() and fix() functions.```python\nimport numpy as np\narr = np.trunc([-3.1666, 3.6667])\nprint(arr)``````python\nimport numpy as np\narr = np.fix([-3.1666, 3.6667])\nprint(arr)```",
                "Rounding": "The around() function increments preceding digit or decimal by 1 if >=5 else do nothing.E.g. round off to 1 decimal point, 3.16666 is 3.2```python\nimport numpy as np\narr = np.around(3.1666, 2)\nprint(arr)```",
                "Floor": "The floor() function rounds off decimal to nearest lower integer.E.g. floor of 3.166 is 3.```python\nimport numpy as np\narr = np.floor([-3.1666, 3.6667])\nprint(arr)```",
                "Ceil": "The ceil() function rounds off decimal to nearest upper integer.E.g. ceil of 3.166 is 4.```python\nimport numpy as np\narr = np.ceil([-3.1666, 3.6667])\nprint(arr)```"
            }
        },
        "ufunclogs": {
            "title": "ufunc Logs",
            "url": "https://www.w3schools.com/python/numpy_ufunc_logs.asp",
            "info": {
                "Logs": "NumPy provides functions to perform log at the base 2, e and 10.We will also explore how we can take log for any base by creating a custom ufunc.All of the log functions will place -inf or inf in the elements if the log can not be computed.",
                "Log at Base 2": "Use the log2() function to perform log at the base 2.```python\nimport numpy as np\narr = np.arange(1, 10)\nprint(np.log2(arr))```",
                "Log at Base 10": "Use the log10() function to perform log at the base 10.```python\nimport numpy as np\narr = np.arange(1, 10)\nprint(np.log10(arr))```",
                "Natural Log, or Log at Base e": "Use the log() function to perform log at the base e.```python\nimport numpy as np\narr = np.arange(1, 10)\nprint(np.log(arr))```",
                "Log at Any Base": "NumPy does not provide any function to take log at any base,so we can use the frompyfunc() function along with inbuilt function math.log() with two input parameters and one output parameter:```python\nfrom math import log\nimport numpy as np\nnplog = np.frompyfunc(log, 2, 1)\nprint(nplog(100, 15))```"
            }
        },
        "ufuncsummations": {
            "title": "ufunc Summations",
            "url": "https://www.w3schools.com/python/numpy_ufunc_summations.asp",
            "info": {
                "Summations": "What is the difference between summation and addition?Addition is done between two arguments whereas summation happens over n elements.```python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([1, 2, 3])\nnewarr = np.add(arr1, arr2)\nprint(newarr)``````python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([1, 2, 3])\nnewarr = np.sum([arr1, arr2])\nprint(newarr)```",
                "Summation Over an Axis": "If you specify axis=1, NumPy will sum the numbers in each array.```python\nimport numpy as np\narr1 = np.array([1, 2, 3])\narr2 = np.array([1, 2, 3])\nnewarr = np.sum([arr1, arr2], axis=1)\nprint(newarr)```",
                "Cummulative Sum": "Cummulative sum means partially adding the elements in array.E.g. The partial sum of [1, 2, 3, 4] would be [1, 1+2, 1+2+3, 1+2+3+4] = [1, 3, 6, 10].Perfom partial sum with the cumsum() function.```python\nimport numpy as np\narr = np.array([1, 2, 3])\nnewarr = np.cumsum(arr)\n\nprint(newarr)```"
            }
        },
        "ufuncproducts": {
            "title": "ufunc Products",
            "url": "https://www.w3schools.com/python/numpy_ufunc_products.asp",
            "info": {
                "Products": "To find the product of the elements in an array, use theprod() function.```python\nimport numpy as np\narr = np.array([1, 2, 3, 4])\nx = np.prod(arr)\nprint(x)``````python\nimport numpy as np\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([5, 6, 7, 8])\nx = np.prod([arr1, arr2])\nprint(x)```",
                "Product Over an Axis": "If you specify axis=1, NumPy will return the product of each array.```python\nimport numpy as np\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([5, 6, 7, 8])\nnewarr = np.prod([arr1, arr2], axis=1)\nprint(newarr)```",
                "Cummulative Product": "Cummulative product means taking the product partially.E.g. The partial product of [1, 2, 3, 4] is [1, 1\\*2, 1\\*2\\*3, 1\\*2\\*3\\*4] = [1, 2, 6, 24]Perfom partial sum with the cumprod() function.```python\nimport numpy as np\narr = np.array([5, 6, 7, 8])\nnewarr = np.cumprod(arr)\n\nprint(newarr)```"
            }
        },
        "ufuncdifferences": {
            "title": "ufunc Differences",
            "url": "https://www.w3schools.com/python/numpy_ufunc_differences.asp",
            "info": {
                "Differences": "A discrete difference means subtracting two successive elements.E.g. for [1, 2, 3, 4], the discrete difference would be [2-1, 3-2, 4-3] = [1, 1, 1]To find the discrete difference, use the diff() function.```python\nimport numpy as np\narr = np.array([10, 15, 25, 5])\nnewarr = np.diff(arr)\nprint(newarr)```We can perform this operation repeatedly by giving parameter n.```python\nimport numpy as np\narr = np.array([10, 15, 25, 5])\nnewarr = np.diff(arr, n=2)\nprint(newarr)```"
            }
        },
        "ufuncfindinglcm": {
            "title": "ufunc Finding LCM",
            "url": "https://www.w3schools.com/python/numpy_ufunc_lcm.asp",
            "info": {
                "Finding LCM (Lowest Common Multiple)": "The Lowest Common Multiple is the least number that is common multiple of both of the numbers.```python\nimport numpy as np\nnum1 = 4\nnum2 = 6\nx = np.lcm(num1, num2)\n\nprint(x)```",
                "Finding LCM in Arrays": "To find the Lowest Common Multiple of all values in an array, you can use the reduce() method.```python\nimport numpy as np\narr = np.array([3, 6, 9])\nx = np.lcm.reduce(arr)\n\nprint(x)``````python\nimport numpy as np\narr = np.arange(1, 11)\nx = np.lcm.reduce(arr)\n\nprint(x)```"
            }
        },
        "ufuncfindinggcd": {
            "title": "ufunc Finding GCD",
            "url": "https://www.w3schools.com/python/numpy_ufunc_gcd.asp",
            "info": {
                "Finding GCD (Greatest Common Denominator)": "The GCD (Greatest Common Denominator), also known as HCF (Highest Common Factor) is the biggest number that is a common factor of both of the numbers.```python\nimport numpy as np\nnum1 = 6\nnum2 = 9\nx = np.gcd(num1, num2)\n\nprint(x)```",
                "Finding GCD in Arrays": "To find the Highest Common Factor of all values in an array, you can use the reduce() method.```python\nimport numpy as np\narr = np.array([20, 8, 32, 36, 16])\nx = np.gcd.reduce(arr)\n\nprint(x)```"
            }
        },
        "ufunctrigonometric": {
            "title": "ufunc Trigonometric",
            "url": "https://www.w3schools.com/python/numpy_ufunc_trigonometric.asp",
            "info": {
                "Trigonometric Functions": "NumPy provides the ufuncs sin(), cos() and tan() that take values in radians and produce the corresponding sin, cos and tan values.```python\nimport numpy as np\nx = np.sin(np.pi/2)\n\nprint(x)``````python\nimport numpy as np\n\narr = np.array([np.pi/2, np.pi/3, np.pi/4, np.pi/5])\nx = np.sin(arr)\n\nprint(x)```",
                "Convert Degrees Into Radians": "By default all of the trigonometric functions take radians as parameters but we can convert radians to degrees and vice versa as well in NumP.```python\nimport numpy as np\narr = np.array([90, 180, 270, 360])\nx = np.deg2rad(arr)\n\nprint(x)```",
                "Radians to Degrees": "```python\nimport numpy as np\narr = np.array([np.pi/2, np.pi, 1.5*np.pi, 2*np.pi])\n\nx = np.rad2deg(arr)\n\nprint(x)```",
                "Finding Angles": "Finding angles from values of sine, cos, tan. E.g. sin, cos and tan inverse (arcsin, arccos, arctan).NumPy provides ufuncs arcsin(), arccos() and arctan() that produce radian values for corresponding sin, cos and tan values given.```python\nimport numpy as np\nx = np.arcsin(1.0)\n\nprint(x)```",
                "Angles of Each Value in Arrays": "```python\nimport numpy as np\narr = np.array([1, -1, 0.1])\nx = np.arcsin(arr)\n\nprint(x)```",
                "Hypotenues": "Finding hypotenues using pythagoras theorem in NumPy.NumPy provides the hypot() function that takes the base and perpendicular values and produces hypotenues based on pythagoras theorem.```python\nimport numpy as np\nbase = 3\nperp = 4\nx = np.hypot(base, perp)\n\nprint(x)```"
            }
        },
        "ufunchyperbolic": {
            "title": "ufunc Hyperbolic",
            "url": "https://www.w3schools.com/python/numpy_ufunc_hyperbolic.asp",
            "info": {
                "Hyperbolic Functions": "NumPy provides the ufuncs sinh(), cosh() and tanh() that take values in radians and produce the corresponding sinh, cosh and tanh values..```python\nimport numpy as np\nx = np.sinh(np.pi/2)\n\nprint(x)``````python\nimport numpy as np\n\narr = np.array([np.pi/2, np.pi/3, np.pi/4, np.pi/5])\nx = np.cosh(arr)\n\nprint(x)```",
                "Finding Angles": "Finding angles from values of hyperbolic sine, cos, tan. E.g. sinh, cosh and tanh inverse (arcsinh, arccosh, arctanh).Numpy provides ufuncs arcsinh(), arccosh() and arctanh() that produce radian values for corresponding sinh, cosh and tanh values given.```python\nimport numpy as np\n\nx = np.arcsinh(1.0)\n\nprint(x)```",
                "Angles of Each Value in Arrays": "```python\nimport numpy as np\narr = np.array([0.1, 0.2, 0.5])\nx = np.arctanh(arr)\n\nprint(x)```"
            }
        },
        "ufuncsetoperations": {
            "title": "ufunc Set Operations",
            "url": "https://www.w3schools.com/python/numpy_ufunc_set_operations.asp",
            "info": {
                "What is a Set": "A set in mathematics is a collection of unique elements.Sets are used for operations involving frequent intersection, union and difference operations.",
                "Create Sets in NumPy": "We can use NumPy's unique() method to find unique elements from any array.E.g. create a set array, but remember that the set arrays should only be 1-D arrays.```python\nimport numpy as np\narr = np.array([1, 1, 1, 2, 3, 4, 5, 5, 6, 7])\nx = np.unique(arr)\n\nprint(x)```",
                "Finding Union": "To find the unique values of two arrays, use the union1d() method.```python\nimport numpy as np\n\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.union1d(arr1, arr2)\n\nprint(newarr)```",
                "Finding Intersection": "To find only the values that are present in both arrays, use the intersect1d() method.```python\nimport numpy as np\n\narr1 = np.array([1, 2, 3, 4])\narr2 = np.array([3, 4, 5, 6])\nnewarr = np.intersect1d(arr1, arr2, assume_unique=True)\n\nprint(newarr)```",
                "Finding Difference": "To find only the values in the first set that is NOT present in the seconds set, use the setdiff1d() method.```python\nimport numpy as np\n\nset1 = np.array([1, 2, 3, 4])\nset2 = np.array([3, 4, 5, 6])\nnewarr = np.setdiff1d(set1, set2, assume_unique=True)\n\nprint(newarr)```",
                "Finding Symmetric Difference": "To find only the values that are NOT present in BOTH sets, use the setxor1d() method.```python\nimport numpy as np\n\nset1 = np.array([1, 2, 3, 4])\nset2 = np.array([3, 4, 5, 6])\nnewarr = np.setxor1d(set1, set2, assume_unique=True)\n\nprint(newarr)```"
            }
        },
        "gettingstarted": {
            "title": "Getting Started",
            "url": "https://www.w3schools.com/python/python_ml_getting_started.asp",
            "info": {
                "Where To Start?": "In this tutorial we will go back to mathematics and study statistics, and how to calculate important numbers based on data sets.We will also learn how to use various Python modules to get the answers we need.And we will learn how to make functions that are able to predict the outcome based on what we have learned.",
                "Data Set": "In the mind of a computer, a data set is any collection of data.It can be anything from an array to a complete database.Example of an array:Example of a database:By looking at the array, we can guess that the average value is probably around 80 or 90, and we are also able to determine the highest value and the lowest value, but what else can we do?And by looking at the database we can see that the most popular color is white, and the oldest car is 17 years,but what if we could predict if a car had an AutoPass, just by looking at the other values?That is what Machine Learning is for! Analyzing data and predicting the outcome!",
                "Data Types": "To analyze data, it is important to know what type of data we are dealing with.We can split the data types into three main categories:Numerical data are numbers, and can be split into two numerical categories:Categorical data are values that cannot be measured up against each other. Example: a color value, or any yes/no values.Ordinal data are like categorical data, but can be measured up against each other. Example: school grades where A is better than B and so on.By knowing the data type of your data source, you will be able to know what technique to use when analyzing them.You will learn more about statistics and analyzing data in the next chapters."
            }
        },
        "meanmedianmode": {
            "title": "Mean Median Mode",
            "url": "https://www.w3schools.com/python/python_ml_mean_median_mode.asp",
            "info": {
                "Mean, Median, and Mode": "What can we learn from looking at a group of numbers?In Machine Learning (and in mathematics) there are often three values that interests us:Example: We have registered the speed of 13 cars:What is the average, the middle, or the most common speed value?",
                "Mean": "The mean value is the average value.To calculate the mean, find the sum of all values, and divide the sum by the number of values:The NumPy module has a method for this. Learn about the NumPy module in our NumPy Tutorial.```python\nimport numpy\nspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nx = numpy.mean(speed)\nprint(x)```",
                "Median": "The median value is the value in the middle, after you have sorted all the values:The NumPy module has a method for this:```python\nimport numpy\nspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\n\nx = numpy.median(speed)\nprint(x)``````python\nimport numpy\nspeed = [99,86,87,88,86,103,87,94,78,77,85,86]\n\nx = numpy.median(speed)\nprint(x)```",
                "Mode": "The Mode value is the value that appears the most number of times:The SciPy module has a method for this:```python\nfrom scipy import stats\nspeed = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nx = stats.mode(speed)\nprint(x)```",
                "Chapter Summary": "The Mean, Median, and Mode are techniques that are often used in Machine Learning, so it is important to understand the concept behind them."
            }
        },
        "standarddeviation": {
            "title": "Standard Deviation",
            "url": "https://www.w3schools.com/python/python_ml_standard_deviation.asp",
            "info": {
                "What is Standard Deviation?": "Standard deviation is a number that describes how spread out the values are.A low standard deviation means that most of the numbers are close to the mean (average) value.A high standard deviation means that the values are spread out over a wider range.Example: This time we have registered the speed of 7 cars:The standard deviation is:Meaning that most of the values are within the range of 0.9 from the mean value, which is 86.4.Let us do the same with a selection of numbers with a wider range:The standard deviation is:Meaning that most of the values are within the range of 37.85 from the mean value, which is 77.4.As you can see, a higher standard deviation indicates that the values are spread out over a wider range.The NumPy module has a method to calculate the standard deviation:```python\nimport numpy\nspeed = [86,87,88,86,87,85,86]\n\nx = numpy.std(speed)\nprint(x)``````python\nimport numpy\nspeed = [32,111,138,28,59,77,97]\n\nx = numpy.std(speed)\nprint(x)```",
                "Variance": "Variance is another number that indicates how spread out the values are.In fact, if you take the square root of the variance, you get the standard deviation!Or the other way around, if you multiply the standard deviation by itself, you get the variance!To calculate the variance you have to do as follows:1. Find the mean:2. For each value: find the difference from the mean:3. For each difference: find the square value:4. The variance is the average number of these squared differences:Luckily, NumPy has a method to calculate the variance:```python\nimport numpy\nspeed = [32,111,138,28,59,77,97]\n\nx = numpy.var(speed)\nprint(x)```",
                "Standard Deviation": "As we have learned, the formula to find the standard deviation is the square root of the variance:Or, as in the example from before, use the NumPy to calculate the standard deviation:```python\nimport numpy\nspeed = [32,111,138,28,59,77,97]\n\nx = numpy.std(speed)\nprint(x)```",
                "Symbols": "Standard Deviation is often represented by the symbol Sigma: \u03c3 Variance is often represented by the symbol Sigma Square: \u03c32 ",
                "Chapter Summary": "The Standard Deviation and Variance are terms that are often used in Machine Learning, so it is important to understand how to get them, and the concept behind them."
            }
        },
        "percentile": {
            "title": "Percentile",
            "url": "https://www.w3schools.com/python/python_ml_percentile.asp",
            "info": {
                "What are Percentiles?": "Percentiles are used in statistics to give you a number that describes the value that a given percent of the values are lower than.Example: Let's say we have an array of the ages of all the people that lives in a street.What is the 75. percentile? The answer is 43, meaning that 75% of the people are 43 or younger.The NumPy module has a method for finding the specified percentile:```python\nimport numpy\nages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]\n\nx = numpy.percentile(ages, 75)\nprint(x)``````python\nimport numpy\nages = [5,31,43,48,50,41,7,11,15,39,80,82,32,2,8,6,25,36,27,61,31]\n\nx = numpy.percentile(ages, 90)\nprint(x)```"
            }
        },
        "normaldatadistribution": {
            "title": "Normal Data Distribution",
            "url": "https://www.w3schools.com/python/python_ml_normal_data_distribution.asp",
            "info": {
                "Normal Data Distribution": "In the previous chapter we learned how to create a completely random array, of a given size, and between two given values.In this chapter we will learn how to create an array where the values are concentrated around a given value.In probability theory this kind of data distribution is known as the normal data distribution, or the Gaussian data distribution, after the mathematician Carl Friedrich Gauss who came up with the formula of this data distribution.```python\nimport numpy\nimport matplotlib.pyplot as plt\nx = numpy.random.normal(5.0, 1.0, 100000)\nplt.hist(x, 100)\nplt.show()```We use the array from the numpy.random.normal() method, with 100000 values,\u00a0 to draw a histogram with 100 bars.We specify that the mean value is 5.0, and the standard deviation is 1.0.Meaning that the values should be concentrated around 5.0, and rarely further away than 1.0 from the mean.And as you can see from the histogram, most values are between 4.0 and 6.0, with a top at approximately 5.0."
            }
        },
        "scatterplot": {
            "title": "Scatter Plot",
            "url": "https://www.w3schools.com/python/python_ml_scatterplot.asp",
            "info": {
                "Scatter Plot": "A scatter plot is a diagram where each value in the data set is represented by a dot.The Matplotlib module has a method for drawing scatter plots, it needs two arrays of the same length, one for the values of the x-axis, and one for the values of the y-axis:The x array represents the age of each car.The y array represents the speed of each car.```python\nimport matplotlib.pyplot as plt\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nplt.scatter(x, y)\nplt.show()```The x-axis represents ages, and the y-axis represents speeds.What we can read from the diagram is that the two fastest cars were both 2 years old, and the slowest car was 12 years old.",
                "Random Data Distributions": "In Machine Learning the data sets can contain thousands-, or even millions, of values.You might not have real world data when you are testing an algorithm, you might have to use randomly generated values.As we have learned in the previous chapter, the NumPy module can help us with that!Let us create two arrays that are both filled with 1000 random numbers from a normal data distribution.The first array will have the mean set to 5.0 with a standard deviation of 1.0.The second array will have the mean set to 10.0 with a standard deviation of 2.0:```python\nimport numpy\nimport matplotlib.pyplot as plt\nx = numpy.random.normal(5.0, 1.0, 1000)\ny = numpy.random.normal(10.0, 2.0, 1000)\nplt.scatter(x, y)\nplt.show()```We can see that the dots are concentrated around the value 5 on the x-axis, and 10 on the y-axis.We can also see that the spread is wider on the y-axis than on the x-axis."
            }
        },
        "linearregression": {
            "title": "Linear Regression",
            "url": "https://www.w3schools.com/python/python_ml_linear_regression.asp",
            "info": {
                "Regression": "The term regression is used when you try to find the relationship between variables.In Machine Learning, and in statistical modeling, that relationship is used to predict the outcome of future events.",
                "Linear Regression": "Linear regression uses the relationship between the data-points to draw a straight line through all them.This line can be used to predict future values.In Machine Learning, predicting the future is very important.",
                "How Does it Work?": "Python has methods for finding a relationship between data-points and to draw a line of linear regression. We will show you how to use these methods instead of going through the mathematic formula.In the example below, the x-axis represents age, and the y-axis represents speed. We have registered the age and speed of 13 cars as they were passing a tollbooth. Let us see if the data we collected could be used in a linear regression:```python\nimport matplotlib.pyplot as plt\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nplt.scatter(x, y)\nplt.show()``````python\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nslope, intercept, r, p, std_err = stats.linregress(x, y)\ndef myfunc(x):\n  return slope * x + intercept\nmymodel = list(map(myfunc, x))\nplt.scatter(x, y)\nplt.plot(x, mymodel)\nplt.show()```Import the modules you need:Create the arrays that represents the values of the x and y axis:Execute a method that returns some important key values of Linear Regression:Create a function that uses the slope and intercept values to return a new value. This new value represents where on the y-axis the corresponding x value will be placed:Run each value of the x array through the function. This will result in a new array with new values for the y-axis:Draw the original scatter plot:Draw the line of linear regression:Display the diagram:",
                "R-Squared": "It is important to know how the relationship between the values of the x-axis and the values of the y-axis is, if there are no relationship the linear regression can not be used to predict anything.The relationship is measured with a value called the r-squared.The r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 means 100% related.Python and the Scipy module will compute this value for you, all you have to do is feed it with the x and y values.```python\nfrom scipy import stats\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nslope, intercept, r, p, std_err = stats.linregress(x, y)\nprint(r)```",
                "Predict Future Values": "Now we can use the information we have gathered to predict future values.Example: Let us try to predict the speed of a 10 years old car.To do so, we need the same myfunc() function from the example above:```python\nfrom scipy import stats\n\nx = [5,7,8,7,2,17,2,9,4,11,12,9,6]\ny = [99,86,87,88,111,86,103,87,94,78,77,85,86]\nslope, intercept, r, p, std_err = stats.linregress(x, y)\ndef myfunc(x):\n  return slope * x + intercept\nspeed = myfunc(10)\nprint(speed)```The example predicted a speed at 85.6, which we also could read from the diagram:",
                "Bad Fit?": "Let us create an example where linear regression would not be the best method to predict future values.```python\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nslope, intercept, r, p, std_err = stats.linregress(x, y)\ndef myfunc(x):\n  return slope * x + intercept\nmymodel = list(map(myfunc, x))\nplt.scatter(x, y)\nplt.plot(x, mymodel)\nplt.show()```And the r-squared value?```python\nimport numpy\nfrom scipy import stats\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nslope, intercept, r, p, std_err = stats.linregress(x, y)\nprint(r)```"
            }
        },
        "polynomialregression": {
            "title": "Polynomial Regression",
            "url": "https://www.w3schools.com/python/python_ml_polynomial_regression.asp",
            "info": {
                "Polynomial Regression": "If your data points clearly will not fit a linear regression (a straight line through all data points), it might be ideal for polynomial regression.Polynomial regression, like linear regression, uses the relationship between the variables x and y to find the best way to draw a line through the data points.",
                "How Does it Work?": "Python has methods for finding a relationship between data-points and to draw a line of polynomial regression. We will show you how to use these methods instead of going through the mathematic formula.In the example below, we have registered 18 cars as they were passing a certain tollbooth.We have registered the car's speed, and the time of day (hour) the passing occurred.The x-axis represents the hours of the day and the y-axis represents the speed:```python\nimport matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nplt.scatter(x, y)\nplt.show()``````python\nimport numpy\nimport matplotlib.pyplot as plt\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(1, 22, 100)\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()```Import the modules you need:Create the arrays that represents the values of the x and y axis:NumPy has a method that lets us make a polynomial model:Then specify how the line will display, we start at position 1, and end at position 22:Draw the original scatter plot:Draw the line of polynomial regression:Display the diagram:",
                "R-Squared": "It is important to know how well the relationship between the values of the x- and y-axis is, if there are no relationship the polynomial regression can not be used to predict anything.The relationship is measured with a value called the r-squared.The r-squared value ranges from 0 to 1, where 0 means no relationship, and 1 means 100% related.Python and the Sklearn module will computed this value for you, all you have to do is feed it with the x and y arrays:```python\nimport numpy\nfrom sklearn.metrics import r2_score\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nprint(r2_score(y, mymodel(x)))```",
                "Predict Future Values": "Now we can use the information we have gathered to predict future values.Example: Let us try to predict the speed of a car that passes the tollbooth at around 17 P.M:To do so, we need the same mymodel array from the example above:```python\nimport numpy\nfrom sklearn.metrics import r2_score\nx = [1,2,3,5,6,7,8,9,10,12,13,14,15,16,18,19,21,22]\ny = [100,90,80,60,60,55,60,65,70,70,75,76,78,79,90,99,99,100]\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nspeed = mymodel(17)\nprint(speed)```The example predicted a speed to be 88.87, which we also could read from the diagram:",
                "Bad Fit?": "Let us create an example where polynomial regression would not be the best method to predict future values.```python\nimport numpy\nimport matplotlib.pyplot as plt\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nmyline = numpy.linspace(2, 95, 100)\n\nplt.scatter(x, y)\nplt.plot(myline, mymodel(myline))\nplt.show()```And the r-squared value?```python\nimport numpy\nfrom sklearn.metrics import r2_score\nx = [89,43,36,36,95,10,66,34,38,20,26,29,48,64,6,5,36,66,72,40]\ny = [21,46,3,35,67,95,53,72,58,10,26,34,90,33,38,20,56,2,47,15]\nmymodel = numpy.poly1d(numpy.polyfit(x, y, 3))\nprint(r2_score(y, mymodel(x)))```"
            }
        },
        "multipleregression": {
            "title": "Multiple Regression",
            "url": "https://www.w3schools.com/python/python_ml_multiple_regression.asp",
            "info": {
                "Multiple Regression": "Multiple regression is like linear regression, but with more than one independent value, meaning that we try to predict a value based on two or more variables.Take a look at the data set below, it contains some information about cars.We can predict the CO2 emission of a car based on the size of the engine, but with multiple regression we can throw in more variables, like the weight of the car, to make the prediction more accurate.",
                "How Does it Work?": "In Python we have modules that will do the work for us. Start by importing the Pandas module.The Pandas module allows us to read csv files and return a DataFrame object.The file is meant for testing purposes only, you can download it here: cars.csvThen make a list of the independent values and call this variable X. Put the dependent values in a variable called y.We will use some methods from the sklearn module, so we will have to import that module as well:From the sklearn module we will use the LinearRegression() method to create a linear regression object.This object has a method called fit() that takes the independent and dependent values as parameters and fills the regression object with data that describes the relationship:Now we have a regression object that are ready to predict CO2 values based on a car's weight and volume:We have predicted that a car with 1.3 liter engine, and a weight of 2300 kg, will release approximately 107 grams of CO2 for every kilometer it drives.",
                "Coefficient": "The coefficient is a factor that describes the relationship with an unknown variable.Example: if x is a variable, then2x is x two times. x is the unknown variable, and the number 2 is the coefficient.In this case, we can ask for the coefficient value of weight against CO2, and for volume against CO2. The answer(s) we get tells us what would happen if we increase, or decrease, one of the independent values.```python\nimport pandas\nfrom sklearn import linear_model\ndf = pandas.read_csv(\"cars.csv\")\n\nX = df[['Weight', 'Volume']]\ny = df['CO2']\nregr = linear_model.LinearRegression()\nregr.fit(X, y)\nprint(regr.coef_)```",
                "Result Explained": "The result array represents the coefficient values of weight and volume.Weight: 0.00755095Volume: 0.00780526These values tell us that if the weight increase by 1kg, the CO2 emission increases by 0.00755095g.And if the engine size (Volume) increases by 1 ccm, the CO2 emission increases by 0.00780526 g.I think that is a fair guess, but let test it!We have already predicted that if a car with a 1300ccm engine weighs 2300kg, the CO2 emission will be approximately 107g.What if we increase the weight with 1000kg?```python\nimport pandas\nfrom sklearn import linear_model\ndf = pandas.read_csv(\"cars.csv\")\n\nX = df[['Weight', 'Volume']]\ny = df['CO2']\nregr = linear_model.LinearRegression()\nregr.fit(X, y)\npredictedCO2 = regr.predict([[3300, 1300]])\n\nprint(predictedCO2)```We have predicted that a car with 1.3 liter engine, and a weight of 3300 kg, will release approximately 115 grams of CO2 for every kilometer it drives.Which shows that the coefficient of 0.00755095 is correct:107.2087328 + (1000 \\* 0.00755095) = 114.75968"
            }
        },
        "scale": {
            "title": "Scale",
            "url": "https://www.w3schools.com/python/python_ml_scale.asp",
            "info": {
                "Scale Features": "When your data has different values, and even different measurement units, it can be difficult to compare them. What is kilograms compared to meters? Or altitude compared to time?The answer to this problem is scaling. We can scale data into new values that are easier to compare.Take a look at the table below, it is the same data set that we used in the multiple regression chapter, but this time the volume column contains values in liters instead of ccm (1.0 instead of 1000).It can be difficult to compare the volume 1.0 with the weight 790, but if we scale them both into comparable values, we can easily see how much one value is compared to the other.There are different methods for scaling data, in this tutorial we will use a method called standardization.The standardization method  uses this formula:z = (x - u) / sWhere z is the new value, x is the original value, u is the mean and s is the standard deviation.If you take the weight column from the data set above, the first value is 790, and the scaled value will be:If you take the volume column from the data set above, the first value is 1.0, and the scaled value will be:(1.0 - 1.61) / 0.38 = -1.59Now you can compare -2.1 with -1.59 instead of comparing 790 with 1.0.You do not have to do this manually,the Python sklearn module has a method called StandardScaler()which returns a Scaler object with methods for transforming data sets.",
                "Predict CO2 Values": "The task in the Multiple Regression chapter was to predict the CO2 emission from a car when you only knew its weight and volume.When the data set is scaled, you will have to use the scale when you predict values:```python\nimport pandas\nfrom sklearn import linear_model\nfrom sklearn.preprocessing import StandardScaler\nscale = StandardScaler()\n\ndf = pandas.read_csv(\"cars2.csv\")\nX = df[['Weight', 'Volume']]\ny = df['CO2']\n\nscaledX = scale.fit_transform(X)\nregr = linear_model.LinearRegression()\nregr.fit(scaledX, y)\nscaled = scale.transform([[2300, 1.3]])\npredictedCO2 = regr.predict([scaled[0]])\nprint(predictedCO2)```"
            }
        },
        "train/test": {
            "title": "Train/Test",
            "url": "https://www.w3schools.com/python/python_ml_train_test.asp",
            "info": {
                "Evaluate Your Model": "In Machine Learning we create models to predict the outcome of certain events,like in the previous chapter where we predicted the CO2 emission of a car when we knewthe weight and engine size.To measure if the model is good enough, we can use a method called Train/Test.",
                "What is Train/Test": "Train/Test is a method to measure the accuracy of your model.It is called Train/Test because you split the the data set into two sets: a training set and a testing set.You train the model using the training set.You test the model using the testing set.",
                "Start With a Data Set": "Start with a data set you want to test.Our data set illustrates 100 customers in a shop, and their shopping habits.```python\nimport numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\n\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\nplt.scatter(x, y)\nplt.show()```",
                "Split Into Train/Test": "The training set should be a random selection of 80% of the original data.The testing set should be the remaining 20%.",
                "Display the Training Set": "Display the same scatter plot with the training set:```python\nplt.scatter(train_x, train_y)\nplt.show()```",
                "Display the Testing Set": "To make sure the testing set is not completely different, we will take a look at the testing set as well.```python\nplt.scatter(test_x, test_y)\nplt.show()```",
                "Fit the Data Set": "What does the data set look like? In my opinion I think the best fit would be a polynomial regression, so let us draw a line of polynomial regression.To draw a line through the data points, we use the plot() method of the matplotlib module:```python\nimport numpy\nimport matplotlib.pyplot as plt\nnumpy.random.seed(2)\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\n\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\n\nmyline = numpy.linspace(0, 6, 100)\nplt.scatter(train_x, train_y)\nplt.plot(myline, mymodel(myline))\nplt.show()```The result can back my suggestion of the data set fitting a polynomial regression, even though it would give us some weird results if we try to predict values outside of the data set. Example: the line indicates that a customer spending 6 minutes in the shop would make a purchase worth 200. That is probably a sign of overfitting.But what about the R-squared score? The R-squared score is a good indicator of how well my data set is fitting the model.",
                "R2": "Remember R2, also known as R-squared?It measures the relationship between the x axis and the y axis, and the value ranges from 0 to 1, where 0 means no relationship, and 1 means totally related.The sklearn module has a method called r2\\_score() that will help us find this relationship.In this case we would like to measure the relationship  between the minutes a customer stays in the shop and how much money they spend.```python\nimport numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\n\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nr2 = r2_score(train_y, mymodel(train_x))\nprint(r2)```",
                "Bring in the Testing Set": "Now we have made a model that is OK, at least when it comes to training data.Now we want to test the model with the testing data as well, to see if gives us the same result.```python\nimport numpy\nfrom sklearn.metrics import r2_score\nnumpy.random.seed(2)\n\nx = numpy.random.normal(3, 1, 100)\ny = numpy.random.normal(150, 40, 100) / x\ntrain_x = x[:80]\ntrain_y = y[:80]\ntest_x = x[80:]\ntest_y = y[80:]\nmymodel = numpy.poly1d(numpy.polyfit(train_x, train_y, 4))\nr2 = r2_score(test_y, mymodel(test_x))\nprint(r2)```",
                "Predict Values": "Now that we have established that our model is OK, we can start predicting new values.```python\nprint(mymodel(5))```The example predicted the customer to spend 22.88 dollars, as seems to correspond to the diagram:"
            }
        },
        "decisiontree": {
            "title": "Decision Tree",
            "url": "https://www.w3schools.com/python/python_ml_decision_tree.asp",
            "info": {
                "Decision Tree": "In this chapter we will show you how to make a \"Decision Tree\". A Decision Tree is a Flow Chart, and can help you make decisions based on previous experience.In the example, a person will try to decide if he/she should go to a comedy show or not.Luckily our example person has registered every time there was a comedy show in town, and registered some information about the comedian, and also registered if he/she went or not.Now, based on this data set, Python can create a decision tree that can be used to decide if any new shows are worth attending to.",
                "How Does it Work?": "First, import the modules you need, and read the dataset with pandas:```python\nimport pandas\nfrom sklearn import tree\nimport pydotplus\nfrom sklearn.tree import DecisionTreeClassifier\nimport matplotlib.pyplot as plt\nimport matplotlib.image as pltimg\ndf = pandas.read_csv(\"shows.csv\")\n\nprint(df)```To make a decision tree, all data has to be numerical.We have to convert the non numerical columns 'Nationality' and 'Go' into numerical values.Pandas has a map() method that takes a dictionary with information on how to convert the values.{'UK': 0, 'USA': 1, 'N': 2}Means convert the values 'UK' to 0, 'USA' to 1, and 'N' to 2.```python\nd = {'UK': 0, 'USA': 1, 'N': 2}\ndf['Nationality'] = df['Nationality'].map(d)\nd = {'YES': 1, 'NO': 0}\ndf['Go'] = df['Go'].map(d)\nprint(df)```Then we have to separate the feature columns from the target column.The feature columns are the columns that we try to predict from, and the target column is the column with the values we try to predict.Now we can create the actual decision tree, fit it with our details, and save a .png file on the computer:",
                "Result Explained": "The decision tree uses your earlier decisions to calculate the odds for you to wanting to go see a comedian or not.Let us read the different aspects of the decision tree:Rank <= 6.5 means that every comedian with a rank of 6.5 or lower will follow the True arrow (to the left), and the rest will follow the False arrow (to the right).gini = 0.497 refers to the quality of the split, and is always a number between 0.0 and 0.5, where 0.0 would mean all of the samples got the same result, and 0.5 would mean that the split is done exactly in the middle.samples = 13 means that there are 13 comedians left at this point in the decision, which is all of them since this is the first step.value = [6, 7] means that of these 13 comedians, 6 will get a \"NO\", and 7 will get a \"GO\".The next step contains two boxes, one box for the comedians with a 'Rank' of 6.5 or lower, and one box with the rest.gini = 0.0 means all of the samples got the same result.samples = 5 means that there are 5 comedians left in this branch (5 comedian with a Rank of 6.5 or lower).value = [5, 0] means that 5 will get a \"NO\" and 0 will get a \"GO\".Nationality <= 0.5 means that the comedians with a nationality value of less than 0.5 will follow the arrow to the left (which means everyone from the UK, ), and the rest will follow the arrow to the right.gini = 0.219 means that about 22% of the samples would go in one direction.samples = 8 means that there are 8 comedians left in this branch (8 comedian with a Rank higher than 6.5).value = [1, 7] means that of these 8 comedians, 1 will get a \"NO\" and 7 will get a \"GO\".Age <= 35.5 means that comedians at the age of 35.5 or younger will follow the arrow to the left, and the rest will follow the arrow to the right.gini = 0.375 means that about 37,5% of the samples would go in one direction.samples = 4 means that there are 4 comedians left in this branch (4 comedians from the UK).value = [1, 3] means that of these 4 comedians, 1 will get a \"NO\" and 3 will get a \"GO\".gini = 0.0 means all of the samples got the same result.samples = 4 means that there are 4 comedians left in this branch (4 comedians not from the UK).value = [0, 4] means that of these 4 comedians, 0 will get a \"NO\" and 4 will get a \"GO\".gini = 0.0 means all of the samples got the same result.samples = 2 means that there are 2 comedians left in this branch (2 comedians at the age 35.5 or younger).value = [0, 2] means that of these 2 comedians, 0 will get a \"NO\" and 2 will get a \"GO\".Experience <= 9.5 means that comedians with 9.5 years of experience, or more, will follow the arrow to the left, and the rest will follow the arrow to the right.gini = 0.5 means that 50% of the samples would go in one direction.samples = 2 means that there are 2 comedians left in this branch (2 comedians older than 35.5).value = [1, 1] means that of these 2 comedians, 1 will get a \"NO\" and 1 will get a \"GO\".gini = 0.0 means all of the samples got the same result.samples = 1 means that there is 1 comedian left in this branch (1 comedian with 9.5 years of experience or less).value = [0, 1] means that 0 will get a \"NO\" and 1 will get a \"GO\".gini = 0.0 means all of the samples got the same result.samples = 1 means that there is 1 comedians left in this branch (1 comedian with more than 9.5 years of experience).value = [1, 0] means that 1 will get a \"NO\" and 0 will get a \"GO\".",
                "Predict Values": "We can use the Decision Tree to predict new values.Example: Should I go see a show starring a 40 years old American comedian, with 10 years of experience, and a comedy ranking of 7?```python\nprint(dtree.predict([[40, 10, 7, 1]]))``````python\nprint(dtree.predict([[40, 10, 6, 1]]))```"
            }
        },
        "mysqlgetstarted": {
            "title": "MySQL Get Started",
            "url": "https://www.w3schools.com/python/python_mysql_getstarted.asp",
            "info": {
                "MySQL Database": "To be able to experiment with the code examples in this tutorial, you should have MySQL installed on your computer.You can download a free MySQL database athttps://www.mysql.com/downloads/.",
                "Install MySQL Driver": "Python needs a MySQL driver to access the MySQL database.In this tutorial we will use the driver \"MySQL Connector\".We recommend that you use PIP to install \"MySQL Connector\".PIP is most likely already installed in your Python environment.Navigate your command line to the location of PIP, and type the following:```python\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>python -m pip install mysql-connector-python```Now you have downloaded and installed a MySQL driver.",
                "Test MySQL Connector": "To test if the installation was successful, or if you already have \"MySQL Connector\" installed, create a Python page with the following content:```python\nimport mysql.connector```If the above code was executed with no errors, \"MySQL Connector\" is installed and ready to be used.",
                "Create Connection": "Start by creating a connection to the database.Use the username and password from your MySQL database:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  password=\"yourpassword\"\n)\n\nprint(mydb)```Now you can start querying the database using SQL statements."
            }
        },
        "mysqlcreatedatabase": {
            "title": "MySQL Create Database",
            "url": "https://www.w3schools.com/python/python_mysql_create_db.asp",
            "info": {
                "Creating a Database": "To create a database in MySQL, use the \"CREATE DATABASE\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\"\n)\nmycursor = mydb.cursor()\nmycursor.execute(\"CREATE DATABASE mydatabase\")```If the above code was executed with no errors, you have successfully created a database.",
                "Check if Database Exists": "You can check if a database exist by listing all databases in your system by using the \"SHOW DATABASES\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  password=\"yourpassword\"\n)\nmycursor = mydb.cursor()\nmycursor.execute(\"SHOW DATABASES\")\nfor x in mycursor:\n  print(x)```Or you can try to access the database when making the connection:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)```If the database does not exist, you will get an error."
            }
        },
        "mysqlcreatetable": {
            "title": "MySQL Create Table",
            "url": "https://www.w3schools.com/python/python_mysql_create_table.asp",
            "info": {
                "Creating a Table": "To create a table in MySQL, use the \"CREATE TABLE\" statement.Make sure you define the name of the database when you create the connection```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\n\nmycursor.execute(\"CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))\")```If the above code was executed with no errors, you have now successfully created a table.",
                "Check if Table Exists": "You can check if a table exist by listing all tables in your database with the \"SHOW TABLES\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nmycursor.execute(\"SHOW TABLES\")\nfor x in mycursor:\n  print(x)```",
                "Primary Key": "When creating a table, you should also create a column with a unique key for each record.This can be done by defining a PRIMARY KEY.We use the statement \"INT AUTO\\_INCREMENT PRIMARY KEY\" which will insert a unique number for each record. Starting at 1, and increased by one for each record.```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\n\nmycursor.execute(\"CREATE TABLE customers (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255))\")```If the table already exists, use the ALTER TABLE keyword:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\n\nmycursor.execute(\"ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY\")```"
            }
        },
        "mysqlinsert": {
            "title": "MySQL Insert",
            "url": "https://www.w3schools.com/python/python_mysql_insert.asp",
            "info": {
                "Insert Into Table": "To fill a table in MySQL, use the \"INSERT INTO\" statement.```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"INSERT INTO customers (name, address) VALUES (%s, %s)\"\nval = (\"John\", \"Highway 21\")\nmycursor.execute(sql, val)\n\nmydb.commit()\nprint(mycursor.rowcount, \"record inserted.\")```",
                "Insert Multiple Rows": "To insert multiple rows into a table, use the executemany() method.The second parameter of the executemany() method is a list of tuples, containing the data you want to insert:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"INSERT INTO customers (name, address) VALUES (%s, %s)\"\nval = [\n  ('Peter', 'Lowstreet 4'),\n  ('Amy', 'Apple st 652'),\n  ('Hannah', 'Mountain 21'),\n  ('Michael', 'Valley 345'),\n  ('Sandy', 'Ocean blvd 2'),\n  ('Betty', 'Green Grass 1'),\n  ('Richard', 'Sky st 331'),\n  ('Susan', 'One way 98'),\n  ('Vicky', 'Yellow Garden 2'),\n  ('Ben', 'Park Lane 38'),\n  ('William', 'Central st 954'),\n  ('Chuck', 'Main Road 989'),\n  ('Viola', 'Sideway 1633')\n]\nmycursor.executemany(sql, val)\nmydb.commit()\nprint(mycursor.rowcount, \"was inserted.\")```",
                "Get Inserted ID": "You can get the id of the row you just inserted by asking the cursor object.```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"INSERT INTO customers (name, address) VALUES (%s, %s)\"\nval = (\"Michelle\", \"Blue Village\")\nmycursor.execute(sql, val)\nmydb.commit()\nprint(\"1 record inserted, ID:\", mycursor.lastrowid)```"
            }
        },
        "mysqlselect": {
            "title": "MySQL Select",
            "url": "https://www.w3schools.com/python/python_mysql_select.asp",
            "info": {
                "Select From a Table": "To select from a table in MySQL, use the \"SELECT\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM customers\")\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```",
                "Selecting Columns": "To select only some of the columns in a table, use the \"SELECT\" statement followed by the column name(s):```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT name, address FROM customers\")\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```",
                "Using the fetchone() Method": "If you are only interested in one row, you can use the fetchone() method.The fetchone() method will return the first row of the result:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM customers\")\nmyresult = mycursor.fetchone()\nprint(myresult)```"
            }
        },
        "mysqlwhere": {
            "title": "MySQL Where",
            "url": "https://www.w3schools.com/python/python_mysql_where.asp",
            "info": {
                "Select With a Filter": "When selecting records from a table, you can filter the selection by using the \"WHERE\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nsql = \"SELECT * FROM customers WHERE address ='Park Lane 38'\"\nmycursor.execute(sql)\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```",
                "Wildcard Characters": "You can also select the records that starts, includes, or ends with a given letter or phrase.Use the %\u00a0 to represent wildcard characters:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"SELECT * FROM customers WHERE address LIKE '%way%'\"\nmycursor.execute(sql)\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```",
                "Prevent SQL Injection": "When query values are provided by the user, you should escape the values.This is to prevent SQL injections, which is a common web hacking technique to  destroy or misuse your database.The mysql.connector module has methods to escape query values:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"SELECT * FROM customers WHERE address = %s\"\nadr = (\"Yellow Garden 2\", )\nmycursor.execute(sql, adr)\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```"
            }
        },
        "mysqlorderby": {
            "title": "MySQL Order By",
            "url": "https://www.w3schools.com/python/python_mysql_orderby.asp",
            "info": {
                "Sort the Result": "Use the ORDER BY statement to sort the result in ascending or descending order.The ORDER BY keyword sorts the result ascending by default. To sort the result in descending order, use the DESC keyword.```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nsql = \"SELECT * FROM customers ORDER BY name\"\nmycursor.execute(sql)\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```",
                "ORDER BY DESC": "Use the DESC keyword to sort the result in a descending order.```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"SELECT * FROM customers ORDER BY name DESC\"\nmycursor.execute(sql)\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```"
            }
        },
        "mysqldelete": {
            "title": "MySQL Delete",
            "url": "https://www.w3schools.com/python/python_mysql_delete.asp",
            "info": {
                "Delete Record": "You can delete records from an existing table by using the \"DELETE FROM\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nsql = \"DELETE FROM customers WHERE address = 'Mountain 21'\"\nmycursor.execute(sql)\nmydb.commit()\nprint(mycursor.rowcount, \"record(s) deleted\")```",
                "Prevent SQL Injection": "It is considered a good practice to escape the values of any query, also in delete statements.This is to prevent SQL injections, which is a common web hacking technique to  destroy or misuse your database.The mysql.connector module uses the placeholder %s to escape values in the delete statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"DELETE FROM customers WHERE address = %s\"\nadr = (\"Yellow Garden 2\", )\nmycursor.execute(sql, adr)\nmydb.commit()\nprint(mycursor.rowcount, \"record(s) deleted\")```"
            }
        },
        "mysqldroptable": {
            "title": "MySQL Drop Table",
            "url": "https://www.w3schools.com/python/python_mysql_drop_table.asp",
            "info": {
                "Delete a Table": "You can delete an existing table by using the \"DROP TABLE\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nsql = \"DROP TABLE customers\"\nmycursor.execute(sql)```",
                "Drop Only if Exist": "If the the table you want to delete is already deleted, or for any other reason does not exist, you can use the IF EXISTS keyword to avoid getting an error.```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"DROP TABLE IF EXISTS customers\"\nmycursor.execute(sql)```"
            }
        },
        "mysqlupdate": {
            "title": "MySQL Update",
            "url": "https://www.w3schools.com/python/python_mysql_update.asp",
            "info": {
                "Update Table": "You can update existing records in a table by using the \"UPDATE\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nsql = \"UPDATE customers SET address = 'Canyon 123' WHERE address = 'Valley 345'\"\nmycursor.execute(sql)\nmydb.commit()\n\nprint(mycursor.rowcount, \"record(s) affected\")```",
                "Prevent SQL Injection": "It is considered a good practice to escape the values of any query, also in update statements.This is to prevent SQL injections, which is a common web hacking technique to  destroy or misuse your database.The mysql.connector module uses the placeholder %s to escape values in the delete statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\nsql = \"UPDATE customers SET address = %s WHERE address = %s\"\nval = (\"Valley 345\", \"Canyon 123\")\nmycursor.execute(sql, val)\nmydb.commit()\nprint(mycursor.rowcount, \"record(s) affected\")```"
            }
        },
        "mysqllimit": {
            "title": "MySQL Limit",
            "url": "https://www.w3schools.com/python/python_mysql_limit.asp",
            "info": {
                "Limit the Result": "You can limit the number of records returned from the query, by using the \"LIMIT\" statement:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM customers LIMIT 5\")\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```",
                "Start From Another Position": "If you want to return five records, starting from the third record, you can use the \"OFFSET\" keyword:```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nmycursor.execute(\"SELECT * FROM customers LIMIT 5 OFFSET 2\")\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```"
            }
        },
        "mysqljoin": {
            "title": "MySQL Join",
            "url": "https://www.w3schools.com/python/python_mysql_join.asp",
            "info": {
                "Join Two or More Tables": "You can combine rows from two or more tables, based on a related column between them, by using a JOIN statement.Consider you have a \"users\" table and a \"products\" table:```python\n{ id: 1, name: 'John', fav: 154},\n{ id: 2, name: 'Peter', fav: 154},\n{ id: 3, name: 'Amy', fav: 155},\n{ id: 4, name: 'Hannah', fav:},\n{ id: 5, name: 'Michael', fav:}``````python\n{ id: 154, name: 'Chocolate Heaven' },\n{ id: 155, name: 'Tasty Lemons' },\n{ id: 156, name: 'Vanilla Dreams' }```These two tables can be combined by using users' fav field and products' id field.```python\nimport mysql.connector\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n user=\"yourusername\",\n  password=\"yourpassword\",\n  database=\"mydatabase\"\n)\nmycursor = mydb.cursor()\nsql = \"SELECT \\\n  users.name AS user, \\\n  products.name AS favorite \\\n  FROM users \\\n  INNER JOIN products ON users.fav = products.id\"\nmycursor.execute(sql)\nmyresult = mycursor.fetchall()\nfor x in myresult:\n  print(x)```",
                "LEFT JOIN": "In the example above, Hannah, and Michael were excluded from the result, that is because INNER JOIN only shows the records where there is a match.If you want to show all users, even if they do not have a favorite product, use the LEFT JOIN statement:```python\nsql = \"SELECT \\\n  users.name AS user, \\\n  products.name AS favorite \\\n  FROM users \\\n  LEFT JOIN products ON users.fav = products.id\"```",
                "RIGHT JOIN": "If you want to return all products, and the users who have them as their favorite, even if no user have them as their favorite, use the RIGHT JOIN statement:```python\nsql = \"SELECT \\\n  users.name AS user, \\\n  products.name AS favorite \\\n  FROM users \\\n  RIGHT JOIN products ON users.fav = products.id\"```"
            }
        },
        "mongodbgetstarted": {
            "title": "MongoDB Get Started",
            "url": "https://www.w3schools.com/python/python_mongodb_getstarted.asp",
            "info": {
                "MongoDB": "MongoDB stores data in JSON-like documents, which makes the database very flexible and scalable.To be able to experiment with the code examples in this tutorial, you will need access to a MongoDB database.You can download a free MongoDB database athttps://www.mongodb.com.Or get started right away with a MongoDB cloud service at https://www.mongodb.com/cloud/atlas.",
                "PyMongo": "Python needs a MongoDB driver to access the MongoDB database.In this tutorial we will use the MongoDB driver \"PyMongo\".We recommend that you use PIP to install \"PyMongo\".PIP is most likely already installed in your Python environment.Navigate your command line to the location of PIP, and type the following:```python\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>python -m pip install pymongo```Now you have downloaded and installed a mongoDB driver.",
                "Test PyMongo": "To test if the installation was successful, or if you already have \"pymongo\" installed, create a Python page with the following content:```python\nimport pymongo```If the above code was executed with no errors, \"pymongo\" is installed and ready to be used."
            }
        },
        "mongodbcreatedatabase": {
            "title": "MongoDB Create Database",
            "url": "https://www.w3schools.com/python/python_mongodb_create_db.asp",
            "info": {
                "Creating a Database": "To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create.MongoDB will create the database if it does not exist, and make a connection to it.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n\nmydb = myclient[\"mydatabase\"]```MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection).",
                "Check if Database Exists": "You can check if a database exist by listing all databases in you system:```python\nprint(myclient.list_database_names())```Or you can check a specific database by name:```python\ndblist = myclient.list_database_names()\nif \"mydatabase\" in dblist:\n  print(\"The database exists.\")```"
            }
        },
        "mongodbcreatecollection": {
            "title": "MongoDB Create Collection",
            "url": "https://www.w3schools.com/python/python_mongodb_create_collection.asp",
            "info": {
                "Creating a Collection": "To create a collection in MongoDB, use database object and specify the name of the collection you want to create.MongoDB will create the collection if it does not exist.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]```MongoDB waits until you have inserted a document before it actually creates the collection.",
                "Check if Collection Exists": "You can check if a collection exist in a database by listing all collections:```python\nprint(mydb.list_collection_names())```Or you can check a specific collection by name:```python\ncollist = mydb.list_collection_names()\nif \"customers\" in collist:\n  print(\"The collection exists.\")```"
            }
        },
        "mongodbinsert": {
            "title": "MongoDB Insert",
            "url": "https://www.w3schools.com/python/python_mongodb_insert.asp",
            "info": {
                "Insert Into Collection": "To insert a record, or document as it is called in MongoDB, into a collection, we use the insert\\_one() method.The first parameter of the insert\\_one() method is a dictionary containing the name(s) and value(s) of each field in the document you want to insert.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydict = { \"name\": \"John\", \"address\": \"Highway 37\" }\nx =mycol.insert_one(mydict)```",
                "Return the _id Field": "The insert\\_one() method returns a InsertOneResult object, which has a property, inserted\\_id, that holds the id of the inserted document.```python\nmydict = { \"name\": \"Peter\", \"address\": \"Lowstreet 27\" }\nx = mycol.insert_one(mydict)\nprint(x.inserted_id)```If you do not specify an \\_id field, then MongoDB will add one for you and assign a unique id for each document.In the example above no \\_id field was specified, so MongoDB assigned a unique \\_id for the record (document).",
                "Insert Multiple Documents": "To insert multiple documents into a collection in MongoDB, we use the insert\\_many() method.The first parameter of the insert\\_many() method is a list containing dictionaries with the data you want to insert:The insert\\_many() method returns a InsertManyResult object, which has a property, inserted\\_ids, that holds the ids of the inserted documents.",
                "Insert Multiple Documents, with Specified IDs": "If you do not want MongoDB to assign unique ids for you document, you can specify the \\_id field when you insert the document(s).Remember that the values has to be unique. Two documents cannot have the same \\_id."
            }
        },
        "mongodbfind": {
            "title": "MongoDB Find",
            "url": "https://www.w3schools.com/python/python_mongodb_find.asp",
            "info": {
                "Find One": "To select data from a collection in MongoDB, we can use thefind\\_one() method.The find\\_one() method returns the first occurrence in the selection.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nx = mycol.find_one()\nprint(x)```",
                "Find All": "To select data from a table in MongoDB, we can also use thefind() method.The find() method returns all occurrences in the selection.The first parameter of the find() method is a query object. In this example we use an empty query object, which selects all documents in the collection.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find():\n  print(x)```",
                "Return Only Some Fields": "The second parameter of the find() method is an object describing which fields to include in the result.This parameter is optional, and if omitted, all fields will be included in the result.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"_id\": 0, \"name\": 1, \"address\": 1 }):\n    print(x)``````python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"address\": 0 }):\n    print(x)``````python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nfor x in mycol.find({},{ \"name\": 1, \"address\": 0 }):\n    print(x)```"
            }
        },
        "mongodbquery": {
            "title": "MongoDB Query",
            "url": "https://www.w3schools.com/python/python_mongodb_query.asp",
            "info": {
                "Filter the Result": "When finding documents in a collection, you can filter the result by using a query object.The first argument of the find() method is a query object, and is used to limit the search.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Park Lane 38\" }\n\nmydoc = mycol.find(myquery)\nfor x in mydoc:\n  print(x)```",
                "Advanced Query": "To make advanced queries you can use modifiers as values in the query object.E.g. to find the documents where the \"address\" field starts with the letter \"S\" or higher (alphabetically), use the greater than modifier:{\"$gt\": \"S\"}:```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$gt\": \"S\" } }\nmydoc = mycol.find(myquery)\n\nfor x in mydoc:\n  print(x)```",
                "Filter With Regular Expressions": "You can also use regular expressions as a modifier.To find only the documents where the \"address\" field starts with the letter \"S\", use the regular expression {\"$regex\": \"^S\"}:```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nmydoc = mycol.find(myquery)\n\nfor x in mydoc:\n  print(x)```"
            }
        },
        "mongodbsort": {
            "title": "MongoDB Sort",
            "url": "https://www.w3schools.com/python/python_mongodb_sort.asp",
            "info": {
                "Sort the Result": "Use the sort() method to sort the result in ascending or descending order.The sort() method takes one parameter for \"fieldname\" and one parameter for \"direction\" (ascending is the default direction).```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find().sort(\"name\")\nfor x in mydoc:\n  print(x)```",
                "Sort Descending": "Use the value -1 as the second parameter to sort descending.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmydoc = mycol.find().sort(\"name\", -1)\nfor x in mydoc:\n  print(x)```"
            }
        },
        "mongodbdelete": {
            "title": "MongoDB Delete",
            "url": "https://www.w3schools.com/python/python_mongodb_delete.asp",
            "info": {
                "Delete Document": "To delete one document, we use thedelete\\_one() method.The first parameter of the delete\\_one() method is a query object defining which document to delete.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Mountain 21\" }\n\nmycol.delete_one(myquery)```",
                "Delete Many Documents": "To delete more than one document, use thedelete\\_many() method.The first parameter of the delete\\_many() method is a query object defining which documents to delete.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": {\"$regex\": \"^S\"} }\n\nx = mycol.delete_many(myquery)\nprint(x.deleted_count, \" documents deleted.\")```",
                "Delete All Documents in a Collection": "To delete all documents in a collection, pass an empty query object to the delete\\_many() method:```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nx = mycol.delete_many({})\nprint(x.deleted_count, \" documents deleted.\")```"
            }
        },
        "mongodbdropcollection": {
            "title": "MongoDB Drop Collection",
            "url": "https://www.w3schools.com/python/python_mongodb_drop_collection.asp",
            "info": {
                "Delete Collection": "You can delete a table, or collection as it is called in MongoDB, by using the drop() method.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmycol.drop()```The drop() method returns true if the collection was dropped successfully, and false if the collection does not exist."
            }
        },
        "mongodbupdate": {
            "title": "MongoDB Update",
            "url": "https://www.w3schools.com/python/python_mongodb_update.asp",
            "info": {
                "Update Collection": "You can update a record, or document as it is called in MongoDB, by using the update\\_one() method.The first parameter of the update\\_one() method is a query object defining which document to update.The second parameter  is an object defining the new values of the document.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": \"Valley 345\" }\nnewvalues = { \"$set\": { \"address\": \"Canyon 123\" } }\n\nmycol.update_one(myquery, newvalues)\n#print \"customers\" after the update:\nfor x in mycol.find():\n  print(x)```",
                "Update Many": "To update all documents that meets the criteria of the query, use the update\\_many() method.```python\nimport pymongo\nmyclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\nmydb = myclient[\"mydatabase\"]\nmycol = mydb[\"customers\"]\n\nmyquery = { \"address\": { \"$regex\": \"^S\" } }\nnewvalues = { \"$set\": { \"name\": \"Minnie\" } }\n\nx = mycol.update_many(myquery, newvalues)\nprint(x.modified_count, \"documents updated.\")```"
            }
        },
        "mongodblimit": {
            "title": "MongoDB Limit",
            "url": "https://www.w3schools.com/python/python_mongodb_limit.asp",
            "info": {
                "Limit the Result": "To limit the result in MongoDB, we use the limit() method.The limit() method takes one parameter, a number defining how many documents to return.Consider you have a \"customers\" collection:```python\n{'_id': 1, 'name': 'John', 'address': 'Highway37'}\n\r\n{'_id': 2, 'name': 'Peter', 'address': 'Lowstreet 27'}\n\r\n{'_id': 3, 'name': 'Amy', 'address': 'Apple st 652'}\n\r\n{'_id': 4, 'name': 'Hannah', 'address': 'Mountain 21'}\n\r\n{'_id': 5, 'name': 'Michael', 'address': 'Valley 345'}\n\r\n{'_id': 6, 'name': 'Sandy', 'address': 'Ocean blvd 2'}\n\r\n{'_id': 7, 'name': 'Betty', 'address': 'Green Grass 1'}\n\r\n{'_id': 8, 'name': 'Richard', 'address': 'Sky st 331'}\n\r\n{'_id': 9, 'name': 'Susan', 'address': 'One way 98'}\n\r\n{'_id': 10, 'name': 'Vicky', 'address': 'Yellow Garden 2'}\n\r\n{'_id': 11, 'name': 'Ben', 'address': 'Park Lane 38'}\n\r\n{'_id': 12, 'name': 'William', 'address': 'Central st 954'}\n\r\n{'_id': 13, 'name': 'Chuck', 'address': 'Main Road 989'}\n\r\n{'_id': 14, 'name': 'Viola', 'address': 'Sideway 1633'}```"
            }
        },
        "overview": {
            "title": "Python Overview",
            "url": "https://www.w3schools.com/python/python_reference.asp",
            "info": {
                "Python Reference": "",
                "Module Reference": ""
            }
        },
        "built-infunctions": {
            "title": "Python Built-in Functions",
            "url": "https://www.w3schools.com/python/python_ref_functions.asp",
            "info": {}
        },
        "stringmethods": {
            "title": "Python String Methods",
            "url": "https://www.w3schools.com/python/python_ref_string.asp",
            "info": {}
        },
        "listmethods": {
            "title": "Python List Methods",
            "url": "https://www.w3schools.com/python/python_ref_list.asp",
            "info": {}
        },
        "dictionarymethods": {
            "title": "Python Dictionary Methods",
            "url": "https://www.w3schools.com/python/python_ref_dictionary.asp",
            "info": {}
        },
        "tuplemethods": {
            "title": "Python Tuple Methods",
            "url": "https://www.w3schools.com/python/python_ref_tuple.asp",
            "info": {}
        },
        "setmethods": {
            "title": "Python Set Methods",
            "url": "https://www.w3schools.com/python/python_ref_set.asp",
            "info": {}
        },
        "filemethods": {
            "title": "Python File Methods",
            "url": "https://www.w3schools.com/python/python_ref_file.asp",
            "info": {}
        },
        "keywords": {
            "title": "Python Keywords",
            "url": "https://www.w3schools.com/python/python_ref_keywords.asp",
            "info": {}
        },
        "exceptions": {
            "title": "Python Exceptions",
            "url": "https://www.w3schools.com/python/python_ref_exceptions.asp",
            "info": {
                "Built-in Exceptions": "The table below shows built-in exceptions that are usually raised in Python:"
            }
        },
        "randommodule": {
            "title": "Random Module",
            "url": "https://www.w3schools.com/python/module_random.asp",
            "info": {}
        },
        "requestsmodule": {
            "title": "Requests Module",
            "url": "https://www.w3schools.com/python/module_requests.asp",
            "info": {
                "Definition and Usage": "The requests module allows you to send HTTP requests using Python.The HTTP request returns a Response Object with all the response data (content, encoding, status, etc).",
                "Download and Install the Requests Module": "Navigate your command line to the location of PIP, and type the following:```python\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip install requests```",
                "Syntax": "",
                "Methods": ""
            }
        },
        "mathmodule": {
            "title": "Math Module",
            "url": "https://www.w3schools.com/python/module_math.asp",
            "info": {
                "Python math Module": "Python has a built-in module that you can use for mathematical tasks.The math module has a set of methods and constants.",
                "Math Methods": "",
                "Math Constants": ""
            }
        },
        "cmathmodule": {
            "title": "cMath Module",
            "url": "https://www.w3schools.com/python/module_cmath.asp",
            "info": {
                "Python cmath Module": "Python has a built-in module that you can use for mathematical tasks for complex numbers.The methods in this module accepts int, float,  and complex numbers. It even accepts Python objects that has a \\_\\_complex\\_\\_() or \\_\\_float\\_\\_() method.The methods in this module almost always return a complex number. If the return value can be expressed as a real number, the return value has an imaginary part of 0.The cmath module has a set of methods and constants.",
                "cMath Methods": "",
                "cMath Constants": ""
            }
        },
        "removelistduplicates": {
            "title": "Remove List Duplicates",
            "url": "https://www.w3schools.com/python/python_howto_remove_duplicates.asp",
            "info": {
                "Example Explained": "Create a function that takes a List as an argument.```python\ndef my_function(x):\n  return list(dict.fromkeys(x))\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)```Create a dictionary, using this List items as keys.```python\ndef my_function(x):\n  return list(dict.fromkeys(x))\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)```Convert the dictionary into a list.```python\ndef my_function(x):\n  return list(dict.fromkeys(x))\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)```Return the list```python\ndef my_function(x):\n  return list(dict.fromkeys(x))\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)```Call the function, with a list as a parameter:```python\ndef my_function(x):\n  return list(dict.fromkeys(x))\n\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)```Print the result:```python\ndef my_function(x):\n  return list(dict.fromkeys(x))\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)```",
                "Create a Function": "If you like to have a function where you can send your lists, and get them back without duplicates, you can create a function and insert the code from the example above.```python\ndef my_function(x):\n  return list(dict.fromkeys(x))\nmylist = my_function([\"a\", \"b\", \"a\", \"c\", \"c\"])\n\nprint(mylist)```"
            }
        },
        "reverseastring": {
            "title": "Reverse a String",
            "url": "https://www.w3schools.com/python/python_howto_reverse_string.asp",
            "info": {
                "Example Explained": "Create a function that takes a String as an argument.```python\ndef my_function(x):\n  return x[::-1]\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt)```Slice the string starting at the end of the string and move backwards.```python\ndef my_function(x):\n  return x[::-1]\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt)```Return the backward String```python\ndef my_function(x):\n  return x[::-1]\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt )```Call the function, with a string as a parameter:```python\ndef my_function(x):\n  return x[::-1]\n\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt)```Print the result:```python\ndef my_function(x):\n  return x[::-1]\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt)```",
                "Create a Function": "If you like to have a function where you can send your strings, and return them backwards, you can create a function and insert the code from the example above.```python\ndef my_function(x):\n  return x[::-1]\nmytxt = my_function(\"I wonder how this text looks like backwards\")\n\nprint(mytxt)```"
            }
        },
        "addtwonumbers": {
            "title": "Add Two Numbers",
            "url": "https://www.w3schools.com/python/python_howto_add_two_numbers.asp",
            "info": {
                "Add Two Numbers with User Input": "In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:```python\nx = input(\"Type a number: \")\ny = input(\"Type another number: \")\nsum = int(x) + int(y)\nprint(\"The sum is: \", sum)```"
            }
        }
    },
    "css": {
        "syntax": {
            "title": "CSS Syntax",
            "url": "https://www.w3schools.com/css/css_syntax.asp",
            "info": {
                "CSS Syntax": "A CSS rule-set consists of a selector and a declaration block:The selector points to the HTML element you want to style.The declaration block contains one or more declarations separated by semicolons.Each declaration includes a CSS property name and a value, separated by a colon.Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces.```css\np\r\n{\ncolor: red;\ntext-align: center;\n\r\n}```"
            }
        },
        "selectors": {
            "title": "CSS Selectors",
            "url": "https://www.w3schools.com/css/css_selectors.asp",
            "info": {
                "CSS Selectors": "CSS selectors are used to \"find\" (or select) the HTML elements you want to style.We can divide CSS selectors into five categories:This page will explain the most basic CSS selectors.",
                "The CSS element Selector": "The element selector selects HTML elements based on the element name.```css\np\r\n{\ntext-align: center;\ncolor: red;\n\r\n}```",
                "The CSS id Selector": "The id selector uses the id attribute of an HTML element to select a specific element.The id of an element is unique within a page, so the id selector is used to select one unique element!To select an element with a specific id, write a hash (#) character, followed by the id of the element.```css\n#para1\r\n{\ntext-align: center;\ncolor: red;\n\r\n}```",
                "The CSS class Selector": "The class selector selects HTML elements with a specific class attribute.To select elements with a specific class, write a period (.) character, followed by the class name.```css\n.center {\n  text-align: center;\n  color: red;\n}```You can also specify that only specific HTML elements should be affected by a class.```css\np.center {\n  text-align: center;\n  color: red;\n}```HTML elements can also refer to more than one class.```css\n<p class=\"center large\">This paragraph refers to two classes.</p>```",
                "The CSS Universal Selector": "The universal selector (\\*) selects all HTML elements on the page.```css\n*\r\n{\ntext-align: center;\ncolor: blue;\n\r\n}```",
                "The CSS Grouping Selector": "The grouping selector selects all the HTML elements with the same style definitions.Look at the following CSS code (the h1, h2, and p elements have the same style definitions):```css\nh1\r\n{\ntext-align: center;\n  color: red;\n\r\n}\n\nh2\r\n{\n \r\ntext-align: center;\n  color: red;\n}\n\np\r\n{\ntext-align: center;\n  color: red;\n\r\n}```It will be better to group the selectors, to minimize the code.To group selectors, separate each selector with a comma.```css\nh1, h2, p\r\n{\n \r\ntext-align: center;\n  color: red;\n}```",
                "All CSS Simple Selectors": ""
            }
        },
        "howto": {
            "title": "CSS How To",
            "url": "https://www.w3schools.com/css/css_howto.asp",
            "info": {
                "Three Ways to Insert CSS": "There are three ways of inserting a style sheet:",
                "External CSS": "With anexternal style sheet, you can change the look of an entire website by changing just one file!Each HTML page must include a reference to the external style sheet file inside the <link> element, inside the head section.```css\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n</head>\n<body>\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>```An external style sheet can be written in any text editor, and must be saved with a .css extension.The external .css file should not contain any HTML tags.Here is how the \"mystyle.css\" file looks like:```css\nbody {\n  background-color: lightblue;\n}\nh1 {\n  color: navy;\n  margin-left: 20px;\n}```",
                "Internal CSS": "An internal style sheet may be used if one single HTML page has a unique style.The internal style is defined inside the <style> element, inside the head section.```css\n<!DOCTYPE html>\n<html>\n<head>\n<style>\nbody {\n  background-color: linen;\n}\nh1 {\n  color: maroon;\n  margin-left: 40px;\n} \n</style>\n</head>\n<body>\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>```",
                "Inline CSS": "An inline style may be used to apply a unique style for a single element.To use inline styles, add the style attribute to the relevant element. Thestyle attribute can contain any CSS property.```css\n<!DOCTYPE html>\n<html>\n<body>\n<h1 style=\"color:blue;text-align:center;\">This is a heading</h1>\n<p style=\"color:red;\">This is a paragraph.</p>\n</body>\n</html>```",
                "Multiple Style Sheets": "If some properties have been defined for the same selector (element) in different style sheets,the value from the last read style sheet will be used.\u00a0```css\nh1\r\n{\ncolor: navy;\n\r\n}``````css\nh1\r\n{\ncolor: orange;   \r\n}``````css\n<head>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n\r\n<style>\nh1 {\n  color: orange;\n}\n</style>\n</head>``````css\n<head>\n<style>\nh1 {\n  color: orange;\n}\n</style>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">\n\r\n</head>```",
                "Cascading Order": "What style will be used when there is more than one style specified for an HTML element?All the styles in a page will \"cascade\" into a new \"virtual\" stylesheet by the following rules, where number one has the highest priority:So, an inline style has the highest priority, and will override external and internal styles and browser defaults.Try it Yourself \u00bb"
            }
        },
        "comments": {
            "title": "CSS Comments",
            "url": "https://www.w3schools.com/css/css_comments.asp",
            "info": {
                "CSS Comments": "Comments are used to explain the code, and may help when you edit the source code at a later date.Comments are ignored by browsers.A CSS comment is placed inside the <style> element, and starts with /\\* and ends with \\*/:```css\n/* This is a single-line comment */\np\r\n{\n \r\ncolor: red;\n\r\n}```You can add comments wherever you want in the code:```css\np\r\n{\n \r\ncolor: red; /* Set text color to red */\n\r\n}```Comments can also span multiple lines:\u00a0```css\n/* This is\na multi-line\ncomment */\r\n\np\r\n{\n \r\ncolor: red;\n\r\n}```",
                "HTML and CSS Comments": "From the HTML tutorial, you learned that you can add comments to your HTML source by using the <!--...--> syntax.In the following example, we use a combination of HTML and CSS comments:```css\n<!DOCTYPE html>\n<html>\n<head>\n<style>\np {\n  color: red; /* Set text color to red */\n} \n</style>\n</head>\n<body>\n<h2>My Heading</h2>\n<!-- These paragraphs will be red -->\n<p>Hello World!</p>\n<p>This paragraph is styled with CSS.</p>\n<p>CSS comments are not shown in the output.</p>\n</body>\n</html>```"
            }
        },
        "colors": {
            "title": "CSS Colors",
            "url": "https://www.w3schools.com/css/css_colors.asp",
            "info": {
                "CSS Color Names": "In CSS, a color can be specified by using a color name:Try it Yourself \u00bbCSS/HTML support 140 standard color names.",
                "CSS Background Color": "You can set the background color for HTML elements:```css\n<h1 style=\"background-color:DodgerBlue;\">Hello World</h1>\n<p style=\"background-color:Tomato;\">Lorem ipsum...</p>```",
                "CSS Text Color": "You can set the color of text:Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.```css\n<h1 style=\"color:Tomato;\">Hello World</h1>\n<p style=\"color:DodgerBlue;\">Lorem ipsum...</p>\n<p style=\"color:MediumSeaGreen;\">Ut wisi enim...</p>```",
                "CSS Border Color": "You can set the color of borders:",
                "Hello World": "```css\n<h1 style=\"border:2px solid Tomato;\">Hello World</h1>\n<h1 style=\"border:2px solid DodgerBlue;\">Hello World</h1>\n<h1 style=\"border:2px solid Violet;\">Hello World</h1>```",
                "CSS Color Values": "In CSS, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values:Same as color name \"Tomato\":Same as color name \"Tomato\", but 50% transparent:```css\n<h1 style=\"background-color:rgb(255, 99, 71);\">...</h1>\n<h1 style=\"background-color:#ff6347;\">...</h1>\n<h1 style=\"background-color:hsl(9, 100%, 64%);\">...</h1>\n<h1 style=\"background-color:rgba(255, 99, 71, 0.5);\">...</h1>\n<h1 style=\"background-color:hsla(9, 100%, 64%, 0.5);\">...</h1>```",
                "RGBA Colors": "RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color.An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).The following example defines different RGBA colors:```css\n#p1 {background-color: rgba(255, 0, 0, 0.3);}  /* red \r\nwith opacity */\n#p2 {background-color: rgba(0, 255, 0, 0.3);}  /* green with opacity */\n#p3 {background-color: rgba(0, 0, 255, 0.3);}  /* blue \r\nwith opacity */```",
                "HSL Colors": "HSL stands for Hue, Saturation and Lightness.An HSL color value is specified with: hsl(hue, saturation, lightness).The following example defines different HSL colors:```css\n#p1 {background-color: hsl(120, 100%, 50%);}  /* green */\n#p2 {background-color: hsl(120, 100%, 75%);}  /* light green */\n#p3 {background-color: hsl(120, 100%, 25%);}  /* dark \r\ngreen */\n#p4 {background-color: hsl(120, 60%, 70%);}   /* pastel green */```",
                "HSLA Colors": "HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color.An HSLA color value is specified with: hsla(hue, saturation, lightness, alpha), where the alpha parameter defines the opacity. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).The following example defines different HSLA colors:```css\n#p1 {background-color: hsla(120, 100%, 50%, 0.3);}  /* green with opacity */\n#p2 {background-color: hsla(120, 100%, 75%, 0.3);}  /* light green with opacity */\n#p3 {background-color: hsla(120, 100%, 25%, 0.3);}  /* dark \r\ngreen with opacity */\n#p4 {background-color: hsla(120, 60%, 70%, 0.3);}   /* pastel green \r\nwith opacity */```",
                "Opacity": "The CSS opacity property sets the opacity for the whole element (both background color and text will be opaque/transparent).The opacity property value must be a number between 0.0 (fully transparent) and 1.0 (fully opaque).Notice that the text above will also be transparent/opaque!The following example shows different elements with opacity:```css\n#p1 {background-color:rgb(255,0,0);opacity:0.6;}  /* red with opacity \r\n*/\n#p2 {background-color:rgb(0,255,0);opacity:0.6;}  /* green with \r\nopacity */\n#p3 {background-color:rgb(0,0,255);opacity:0.6;}  /* blue \r\nwith opacity */```"
            }
        },
        "rgb": {
            "title": "RGB",
            "url": "https://www.w3schools.com/css/css_colors_rgb.asp",
            "info": {
                "RGB Value": "In CSS, a color can be specified as an RGB value, using this formula:rgb(red, green, blue)Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255.For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255) and the others are set to 0.To display black, set all color parameters to 0, like this: rgb(0, 0, 0).To display white, set all color parameters to 255, like this: rgb(255, 255, 255). Experiment by mixing the RGB values below:Shades of gray are often defined using equal values for all the 3 light sources:",
                "RGBA Value": "RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color.An RGBA color value is specified with:rgba(red, green, blue, alpha)The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):Experiment by mixing the RGBA values below:"
            }
        },
        "hex": {
            "title": "HEX",
            "url": "https://www.w3schools.com/css/css_colors_hex.asp",
            "info": {
                "HEX Value": "In CSS, a color can be specified using a hexadecimal value in the form:#rrggbbWhere rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).For example, #ff0000 is displayed as red, because red is set to its highest value (ff) and the others are set to the lowest value (00).Experiment by mixing the HEX values below:Shades of gray are often defined using equal values for all the 3 light sources:"
            }
        },
        "hsl": {
            "title": "HSL",
            "url": "https://www.w3schools.com/css/css_colors_hsl.asp",
            "info": {
                "HSL Value": "In CSS, a color can be specified using hue, saturation, and lightness (HSL) in the form:hsl(hue, saturation, lightness)Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color.Lightness is also a percentage, 0% is black, 50% is neither light or dark, 100% is whiteExperiment by mixing the HSL values below:Saturation can be described as the intensity of a color.100% is pure color, no shades of gray50% is 50% gray, but you can still see the color.0% is completely gray, you can no longer see the color.The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) 100% means full lightness (white).Shades of gray are often defined by setting the hue and saturation to 0, and adjust the lightness from 0% to 100% to get darker/lighter shades:",
                "HSLA Value": "HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color.An HSLA color value is specified with:hsla(hue, saturation, lightness, alpha)The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):Experiment by mixing the HSLA values below:"
            }
        },
        "backgrounds": {
            "title": "CSS Backgrounds",
            "url": "https://www.w3schools.com/css/css_background.asp",
            "info": {
                "CSS background-color": "The background-color property specifies the background color of an element.```css\nbody {\n  background-color: lightblue;\n}```With CSS, a color is most often specified by:Look at CSS Color Values for a complete list of possible color values.",
                "Other Elements": "You can set the background color for any HTML elements:```css\nh1 {\n  background-color: green;\n}\n\r\ndiv {\n  background-color: lightblue;\n}\np {\n  background-color: \r\nyellow;\n}```",
                "Opacity / Transparency": "The opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent:```css\ndiv {\n  background-color: green;\n  opacity: 0.3;\n}```",
                "Transparency using RGBA": "If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text:You learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color.An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).Tip: You will learn more about RGBA Colors in our CSS Colors Chapter.```css\ndiv {\n  background: rgba(0, 128, 0, 0.3) /* Green background with 30% \r\nopacity */\n}```",
                "CSS Multiple Backgrounds": "CSS allows you to add multiple background images for an element, through the background-image property.The different background images are separated by commas, and the images are stacked on top of each other, where the first image is closest to the viewer.The following example has two background images, the first image is a flower (aligned to the bottom and right) and the second image is a paper background (aligned to the top-left corner):```css\n#example1 {\n  background-image: url(img_flwr.gif), url(paper.gif);\n  background-position: right bottom, left top;\n  background-repeat: no-repeat, repeat;\n}```Multiple background images can be specified using either the individual background properties (as above) or the background shorthand property.The following example uses the background shorthand property (same result as example above):```css\n#example1 {\n  background: url(img_flwr.gif) right bottom \r\nno-repeat, url(paper.gif) left top repeat;\n}```",
                "CSS Background Size": "The CSS background-size property allows you to specify the size of background images.The size can be specified in lengths, percentages, or by using one of the two keywords: contain or cover.The following example resizes a background image to much smaller than the original image (using pixels):Here is the code:```css\n#div1\r\n{\n \r\nbackground: url(img_flower.jpg);\nbackground-size: 100px 80px;\n  background-repeat: no-repeat;\n\r\n}```The two other possible values for background-size are contain and cover.The contain keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the proportions of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image.The cover keyword scales the background image so that the content area is completely covered by the background image (both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area.The following example illustrates the use of contain and cover:",
                "Define Sizes of Multiple Background Images": "The background-size property also accepts multiple values for background size (using a comma-separated list), when working with multiple backgrounds.The following example has three background images specified, with different background-size value for each image:```css\n#example1 {\n  background: url(img_tree.gif) left top \r\nno-repeat, url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top \r\nrepeat;\n  background-size: 50px, 130px, auto;\n}```",
                "Full Size Background Image": "Now we want to have a background image on a website that covers the entire browser window at all times.The requirements are as follows:The following example shows how to do it; Use the <html> element (the <html> element is always at least the height of the browser window). Then set a fixed and centered background on it. Then adjust its size with the background-size property:```css\nhtml {\n  background: url(img_man.jpg) no-repeat \r\ncenter fixed; \n  background-size: cover;\n}```",
                "Hero Image": "You could also use different background properties on a <div> to create a hero image (a large image with text), and place it where you want.```css\n.hero-image {\n  background: url(img_man.jpg) no-repeat center; \n   background-size: cover;\n  height: 500px;\n  position:  relative;\n}```",
                "CSS background-origin Property": "The CSS background-origin property specifies where the background image is positioned.The property takes three different values:The following example illustrates the background-origin property:```css\n#example1\r\n{\n  border: 10px solid black;\n  padding: 35px;\n  background: url(img_flwr.gif);\n  \r\nbackground-repeat: no-repeat;\n  \r\nbackground-origin: content-box;\n}```",
                "CSS background-clip Property": "The CSS background-clip property specifies the painting area of the background.The property takes three different values:The following example illustrates the background-clip property:```css\n#example1\r\n{\n   border: 10px dotted black;\n  \r\npadding: 35px;\n  background: yellow;\n  \r\nbackground-clip: content-box;\n}```",
                "CSS Advanced Background Properties": ""
            }
        },
        "backgroundcolor": {
            "title": "Background Color",
            "url": "https://www.w3schools.com/css/css_background.asp",
            "info": {
                "CSS background-color": "The background-color property specifies the background color of an element.```css\nbody {\n  background-color: lightblue;\n}```With CSS, a color is most often specified by:Look at CSS Color Values for a complete list of possible color values.",
                "Other Elements": "You can set the background color for any HTML elements:```css\nh1 {\n  background-color: green;\n}\n\r\ndiv {\n  background-color: lightblue;\n}\np {\n  background-color: \r\nyellow;\n}```",
                "Opacity / Transparency": "The opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent:```css\ndiv {\n  background-color: green;\n  opacity: 0.3;\n}```",
                "Transparency using RGBA": "If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text:You learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color.An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).Tip: You will learn more about RGBA Colors in our CSS Colors Chapter.```css\ndiv {\n  background: rgba(0, 128, 0, 0.3) /* Green background with 30% \r\nopacity */\n}```"
            }
        },
        "backgroundimage": {
            "title": "Background Image",
            "url": "https://www.w3schools.com/css/css_background_image.asp",
            "info": {
                "CSS background-image": "The background-image property specifies an image to use as the background of an element.By default, the image is repeated so it covers the entire element.```css\nbody {\n  background-image: url(\"paper.gif\");\n}``````css\nbody {\n  background-image: url(\"bgdesert.jpg\");\n}```"
            }
        },
        "backgroundrepeat": {
            "title": "Background Repeat",
            "url": "https://www.w3schools.com/css/css_background_repeat.asp",
            "info": {
                "CSS background-repeat": "By default, the background-image property repeats an image both horizontally and vertically.Some images should be repeated only horizontally or vertically, or they will look strange, like this:```css\nbody\r\n{\nbackground-image: url(\"gradient_bg.png\");\n\r\n}```If the image above is repeated only horizontally (background-repeat: repeat-x;), the background will look better:```css\nbody\r\n{\nbackground-image: url(\"gradient_bg.png\");\nbackground-repeat: repeat-x;\n\r\n}```",
                "CSS background-repeat: no-repeat": "Showing the background image only once is also specified by the background-repeat property:```css\nbody\r\n{\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\n\r\n}```In the example above, the background image is placed in the same place as the text. We want to change the position of the image, so that it does not disturb the text too much.",
                "CSS background-position": "The background-position property is used to specify the position of the background image.```css\nbody\r\n{\n \r\nbackground-image: url(\"img_tree.png\");\n \r\nbackground-repeat: no-repeat;\n \r\nbackground-position: right top;\n\r\n}```"
            }
        },
        "backgroundattachment": {
            "title": "Background Attachment",
            "url": "https://www.w3schools.com/css/css_background_attachment.asp",
            "info": {
                "CSS background-attachment": "The background-attachment property specifies whether the background image should scroll or be fixed (will not scroll with the rest of the page):```css\nbody\r\n{\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\nbackground-position: right top;\n  background-attachment: fixed;\n}``````css\nbody\r\n{\nbackground-image: url(\"img_tree.png\");\nbackground-repeat: no-repeat;\nbackground-position: right top;\n  background-attachment: scroll;\n}```"
            }
        },
        "backgroundshorthand": {
            "title": "Background Shorthand",
            "url": "https://www.w3schools.com/css/css_background_shorthand.asp",
            "info": {
                "CSS background - Shorthand property": "To shorten the code, it is also possible to specify all the background properties in one single property. This is called a shorthand property.Instead of writing:```css\nbody {\n  background-color: #ffffff;\n  background-image: url(\"img_tree.png\");\n  background-repeat: no-repeat;\n  background-position: right top;\n}```You can use the shorthand property background:```css\nbody {\n  background: #ffffff url(\"img_tree.png\") no-repeat right top;\n}```When using the shorthand property the order of the property values is:It does not matter if one of the property values is missing, as long as the other ones are in this order. Note that we do not use the background-attachment property in the examples above, as it does not have a value.",
                "All CSS Background Properties": ""
            }
        },
        "borders": {
            "title": "CSS Borders",
            "url": "https://www.w3schools.com/css/css_border.asp",
            "info": {
                "CSS Border Properties": "The CSS border properties allow you to specify the style, width, and color of an element's border.",
                "CSS Border Style": "The border-style property specifies what kind of border to display.The following values are allowed:The border-style property can have from one to four values (for the top border, right border, bottom border, and the left border).```css\np.dotted {border-style: dotted;}\np.dashed \r\n{border-style: dashed;}\np.solid {border-style: solid;}\np.double \r\n{border-style: double;}\np.groove {border-style: groove;}\np.ridge \r\n{border-style: ridge;}\np.inset {border-style: inset;}\np.outset \r\n{border-style: outset;}\np.none {border-style: none;}\np.hidden {border-style: hidden;}\n\r\np.mix {border-style: dotted dashed solid double;}```"
            }
        },
        "borderwidth": {
            "title": "Border Width",
            "url": "https://www.w3schools.com/css/css_border_width.asp",
            "info": {
                "CSS Border Width": "The border-width property specifies the width of the four borders.The width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick:```css\np.one\r\n{\n \r\nborder-style: solid;\n \r\nborder-width: 5px;\n\r\n}\n\r\np.two\r\n{\n \r\nborder-style: solid;\nborder-width: medium;\n\r\n}\np.three\r\n{\n \r\nborder-style: dotted;\nborder-width: 2px;\n\r\n}\r\n\np.four\r\n{\n \r\nborder-style: dotted;\n  border-width: thick;\n\r\n}```",
                "Specific Side Widths": "The border-width property can have from one to four values (for the top border, right border, bottom border, and the left border):```css\np.one {\n  border-style: solid;\n  border-width: 5px 20px; /* 5px top and bottom, 20px on the sides */\n}\np.two {\n  border-style: solid;\n  border-width: 20px 5px; /* 20px top and bottom, 5px on the sides */\n}\n\np.three {\n  border-style: solid;\n  border-width: 25px 10px 4px 35px; /* 25px top, 10px right, 4px bottom and 35px left */\n}```"
            }
        },
        "bordercolor": {
            "title": "Border Color",
            "url": "https://www.w3schools.com/css/css_border_color.asp",
            "info": {
                "CSS Border Color": "The border-color property is used to set the color of the four borders.The color can be set by:Note: If border-color is not set, it inherits the color of the element.```css\np.one\r\n{\n \r\nborder-style: solid;\n \r\nborder-color: red;\n\r\n}\n\r\np.two\r\n{\n \r\nborder-style: solid;\nborder-color: green;\n\r\n}\np.three {\n  border-style: dotted;\n  border-color: blue;\n}```",
                "Specific Side Colors": "The border-color property can have from one to four values (for the top border, right border, bottom border, and the left border).\u00a0```css\np.one {\n  border-style: solid;\n  border-color: red green blue yellow; /* red top, green right, blue bottom and yellow left */\n}```",
                "HEX Values": "The color of the border can also be specified using a hexadecimal value (HEX):```css\np.one {\n  border-style: solid;\n  border-color: #ff0000; /* red */\n}```",
                "RGB Values": "Or by using RGB values:```css\np.one {\n  border-style: solid;\n  border-color: rgb(255, 0, 0); /* red */\n}```",
                "HSL Values": "You can also use HSL values:```css\np.one {\n  border-style: solid;\n  border-color: hsl(0, 100%, 50%); /* red */\n}```"
            }
        },
        "bordersides": {
            "title": "Border Sides",
            "url": "https://www.w3schools.com/css/css_border_sides.asp",
            "info": {
                "CSS Border - Individual Sides": "From the examples on the previous pages, you have seen that it is possible to specify a different border for each side.In CSS, there are also properties for specifying each of the borders (top, right, bottom, and left):```css\np\r\n{\n \r\nborder-top-style: dotted;\n \r\nborder-right-style: solid;\nborder-bottom-style: dotted;\nborder-left-style: solid;\n\r\n}```The example above gives the same result as this:```css\np {\n \r\nborder-style: dotted solid;\n}```So, here is how it works:If the border-style property has four values:If the border-style property has three values:If the border-style property has two values:If the border-style property has one value:```css\n/* Four values */\np {\n  border-style: dotted solid double dashed; \n}\n/* Three values */\np {\n  border-style: dotted solid double; \n}\n\n/* Two values */\np {\n  border-style: dotted solid; \n}\n/* One value */\np {\n  border-style: dotted; \n}```"
            }
        },
        "bordershorthand": {
            "title": "Border Shorthand",
            "url": "https://www.w3schools.com/css/css_border_shorthand.asp",
            "info": {
                "CSS Border - Shorthand Property": "Like you saw in the previous page, there are many properties to consider when dealing with borders.To shorten the code, it is also possible to specify all the individual border properties in one property.The border property is a shorthand property for the following individual border properties:```css\np {\n \r\nborder: 5px solid red;\n}```You can also specify all the individual border properties for just one side:```css\np {\n \r\nborder-left: 6px solid red;\n  background-color: lightgrey;\n}``````css\np {\n \r\nborder-bottom: 6px solid red;\n  background-color: lightgrey;\n}```"
            }
        },
        "roundedborders": {
            "title": "Rounded Borders",
            "url": "https://www.w3schools.com/css/css_border_rounded.asp",
            "info": {
                "CSS Rounded Borders": "The border-radius property is used to add rounded borders to an element:Normal borderRound borderRounder borderRoundest border```css\np {\n  border: 2px solid red;\n  border-radius: 5px;\n}```",
                "More Examples": "All the top border properties in one declarationThis example demonstrates a shorthand property for setting all of the properties for the top border in one declaration.Set the style of the bottom borderThis example demonstrates how to set the style of the bottom border.Set the width of the left borderThis example demonstrates how to set the width of the left border.Set the color of the four bordersThis example demonstrates how to set the color of the four borders. It can have from one to four colors.Set the color of the right borderThis example demonstrates how to set the color of the right border.",
                "All CSS Border Properties": ""
            }
        },
        "margins": {
            "title": "CSS Margins",
            "url": "https://www.w3schools.com/css/css_margin.asp",
            "info": {
                "CSS Margins": "The CSS margin properties are used to create space around elements, outside of any defined borders.With CSS, you have full control over the margins. There are properties for setting the margin for each side of an element (top, right, bottom, and left).",
                "Margin - Individual Sides": "CSS has properties for specifying the margin for each side of an element:All the margin properties can have the following values:Tip: Negative values are allowed.```css\np {\n  margin-top: 100px;\nmargin-bottom: 100px;\nmargin-right: 150px;\nmargin-left: 80px;\n}```",
                "Margin - Shorthand Property": "To shorten the code, it is possible to specify all the margin properties in one property.The margin property is a shorthand property for the following individual margin properties:So, here is how it works:If the margin property has four values:```css\np {\n  margin: 25px 50px 75px 100px;\n}```If the margin property has three values:```css\np {\n \r\nmargin: 25px 50px 75px;\n}```If the margin property has two values:```css\np {\n \r\nmargin: 25px 50px;\n}```If the margin property has one value:```css\np {\n  margin: 25px;\n}```",
                "The auto Value": "You can set the margin property to auto to horizontally center the element within its container.The element will then take up the specified width, and the remaining space will be split equally between the left and right margins.```css\ndiv {\n  width: 300px;\n  margin: \r\nauto;\n  border: 1px solid red;\n}```",
                "The inherit Value": "This example lets the left margin of the <p class=\"ex1\"> element be inherited from the parent element (<div>):```css\ndiv {\n  border: 1px solid red;\n  margin-left: 100px;\n}\np.ex1 {\n  margin-left: \r\ninherit;\n}```"
            }
        },
        "margincollapse": {
            "title": "Margin Collapse",
            "url": "https://www.w3schools.com/css/css_margin_collapse.asp",
            "info": {
                "Margin Collapse": "Top and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins.This does not happen on left and right margins! Only top and bottom margins!Look at the following example:```css\nh1 {\n  margin: 0 0 50px 0;\n}\nh2 {\n  margin: 20px 0 0 0;\n}```In the example above, the <h1> element has a bottom margin of 50px and the <h2> element has a top margin set to 20px.Common sense would seem to suggest that the vertical margin between the <h1> and the <h2> would be a total of 70px (50px + 20px). But due to margin collapse, the actual margin ends up being 50px.",
                "All CSS Margin Properties": ""
            }
        },
        "padding": {
            "title": "CSS Padding",
            "url": "https://www.w3schools.com/css/css_padding.asp",
            "info": {
                "CSS Padding": "The CSS padding properties are used to generate space around an element's content, inside of any defined borders.With CSS, you have full control over the padding. There are properties for setting the padding for each side of an element (top, right, bottom, and left).",
                "Padding - Individual Sides": "CSS has properties for specifying the padding for each side of an element:All the padding properties can have the following values:Note: Negative values are not allowed.```css\ndiv {\n \r\npadding-top: 50px;\npadding-right: 30px;\npadding-bottom: 50px;\npadding-left: 80px;\n}```",
                "Padding - Shorthand Property": "To shorten the code, it is possible to specify all the padding properties in one property.The padding property is a shorthand property for the following individual padding properties:So, here is how it works:If the padding property has four values:```css\ndiv {\n padding: 25px 50px 75px 100px;\n}```If the padding property has three values:```css\ndiv {\n padding: 25px 50px 75px;\n}```If the padding property has two values:```css\ndiv {\n padding: 25px 50px;\n}```If the padding property has one value:```css\ndiv {\n padding: 25px;\n}```",
                "Padding and Element Width": "The CSS width property specifies the width of the element's content area. The content area is the portion inside the padding, border, and margin of an element (the box model).So, if an element has a specified width, the padding added to that element will be added to the total width of the element. This is often an undesirable result.```css\ndiv {\n  width: 300px;\n  padding: 25px;\n}```To keep the width at 300px, no matter the amount of padding, you can use the box-sizing property. This causes the element to maintain its width; if you increase the padding, the available content space will decrease.```css\ndiv {\n  width: 300px;\n  padding: 25px;\n  box-sizing: border-box;\n}```",
                "More Examples": "Set the left paddingThis example demonstrates how to set the left padding of a <p> element.Set the right paddingThis example demonstrates how to set the right padding of a <p> element.Set the top paddingThis example demonstrates how to set the top padding of a <p> element.Set the bottom paddingThis example demonstrates how to set the bottom padding of a <p> element.",
                "All CSS Padding Properties": ""
            }
        },
        "height/width": {
            "title": "CSS Height/Width",
            "url": "https://www.w3schools.com/css/css_dimension.asp",
            "info": {
                "CSS Setting height and width": "The height and width properties are used to set the height and width of an element.The height and width properties do not include padding, borders, or margins. It sets the height/width of the area inside the padding, border, and margin of the element.",
                "CSS height and width Values": "The height and width properties may have the following values:",
                "CSS height and width Examples": "```css\ndiv {\n  height: \r\n200px;\n  width: 50%;\n  background-color: powderblue;\n}``````css\ndiv {\n  \r\nheight: \r\n100px;\n  width: 500px;\n  background-color: powderblue;\n}```Note: Remember that the height and width properties do not include padding, borders, or margins! They set the height/width of the area inside the padding, border, and margin of the element!",
                "Setting max-width": "The max-width property is used to set the maximum width of an element.The max-width can be specified in length values, like px, cm, etc., or in percent (%) of the containing block, or set to none (this is default. Means that there is no maximum width).The problem with the <div> above occurs when the browser window is smaller than the width of the element (500px). The browser then adds a horizontal scrollbar to the page.Using max-width instead, in this situation, will improve the browser's handling of small windows.Tip: Drag the browser window to smaller than 500px wide, to see the difference between the two divs!Note: The value of the max-width property overrides width.```css\ndiv {\n  max-width: 500px;\n  \r\nheight: \r\n100px;\n  background-color: powderblue;\n}```",
                "Try it Yourself - Examples": "Set the height and width of elementsThis example demonstrates how to set the height and width of different elements.Set the height and width of an image using percentThis example demonstrates how to set the height and width of an image using a percent value.Set min-width and max-width of an elementThis example demonstrates how to set a minimum width and a maximum width of an element using a pixel value.Set min-height and max-height of an elementThis example demonstrates how to set a minimum height and a maximum height of an element using a pixel value.",
                "All CSS Dimension Properties": ""
            }
        },
        "boxmodel": {
            "title": "CSS Box Model",
            "url": "https://www.w3schools.com/css/css_boxmodel.asp",
            "info": {
                "The CSS Box Model": "All HTML elements can be considered as boxes. In CSS, the term \"box model\" is used when talking about design and layout.The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content. The image below illustrates the box model:Explanation of the different parts:The box model allows us to add a border around elements, and to define space between elements.\u00a0```css\ndiv {\n  width: 300px;\n  border: 15px solid \r\ngreen;\n  \r\npadding: 50px;\n  \r\nmargin: 20px;\n}```",
                "Width and Height of an Element": "In order to set the width and height of an element correctly in all browsers, you need to know how the box model works.```css\ndiv {\n \r\nwidth: 320px;\n \r\npadding: 10px;\n \r\nborder: 5px solid gray;\n \r\nmargin: 0;\r\n}```Here is the calculation:The total width of an element should be calculated like this:Total element width = width + left padding + right padding + left border + right border + left margin + right marginThe total height of an element should be calculated like this:Total element height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin"
            }
        },
        "outline": {
            "title": "CSS Outline",
            "url": "https://www.w3schools.com/css/css_outline.asp",
            "info": {
                "CSS Outline": "An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element \"stand out\". CSS has the following outline properties:",
                "CSS Outline Style": "The outline-style property specifies the style of the outline, and can have one of the following values:The following example shows the different outline-style values:```css\np.dotted {outline-style: dotted;}\n\r\np.dashed {outline-style: dashed;}\np.solid {outline-style: solid;}\n\r\np.double {outline-style: double;}\np.groove {outline-style: groove;}\n\r\np.ridge {outline-style: ridge;}\np.inset {outline-style: inset;}\n\r\np.outset {outline-style: outset;}```"
            }
        },
        "outlinewidth": {
            "title": "Outline Width",
            "url": "https://www.w3schools.com/css/css_outline_width.asp",
            "info": {
                "CSS Outline Width": "The outline-width property specifies the width of the outline, and can have one of the following values:The following example shows some outlines with different widths:A thin outline.A medium outline.A thick outline.A 4px thick outline.```css\np.ex1\r\n{\n  border: 1px solid black;\noutline-style: solid;\n  outline-color: red;\n \r\noutline-width: thin;\n\r\n}\np.ex2\r\n{\n  border: 1px solid black;\n \r\noutline-style: solid;\n  outline-color: red;\noutline-width: medium;\n\r\n}\np.ex3\r\n{\n  border: 1px solid black;\n \r\noutline-style: solid;\n  outline-color: red;\noutline-width: thick;\n\r\n}\n\r\np.ex4\r\n{\nborder: 1px solid black;\noutline-style: solid;\n  outline-color: red;\n \r\noutline-width: 4px;\n\r\n}```"
            }
        },
        "outlinecolor": {
            "title": "Outline Color",
            "url": "https://www.w3schools.com/css/css_outline_color.asp",
            "info": {
                "CSS Outline Color": "The outline-color property is used to set the color of the outline.The color can be set by:The following example shows some different outlines with different colors. Also notice that these elements also have a thin black border inside the outline:A solid red outline.A dotted blue outline.An outset grey outline.```css\np.ex1\r\n{\n  border: 2px solid black;\n \r\noutline-style: solid;\noutline-color: red;\n\r\n}\np.ex2\r\n{\nborder: 2px solid black;\n \r\noutline-style: dotted;\n \r\noutline-color: blue;\n\r\n}\np.ex3\r\n{\nborder: 2px solid black;\n  outline-style: outset;\noutline-color: grey;\n\r\n}```",
                "HEX Values": "The outline color can also be specified using a hexadecimal value (HEX):```css\np.ex1 {\n  outline-style: solid;\n  outline-color: #ff0000; /* red */\n}```",
                "RGB Values": "Or by using RGB values:```css\np.ex1 {\n  outline-style: solid;\n  outline-color: rgb(255, 0, 0); /* red */\n}```",
                "HSL Values": "You can also use HSL values:```css\np.ex1 {\n  outline-style: solid;\n  outline-color: hsl(0, 100%, 50%); /* red */\n}```",
                "Invert Color": "The following example uses outline-color: invert, which performs a color inversion. This ensures that the outline is visible, regardless of color background:A solid invert outline.```css\np.ex1\r\n{\nborder: 1px solid yellow;\n \r\noutline-style: solid;\n \r\noutline-color: invert;\n\r\n}```"
            }
        },
        "outlineshorthand": {
            "title": "Outline Shorthand",
            "url": "https://www.w3schools.com/css/css_outline_shorthand.asp",
            "info": {
                "CSS Outline - Shorthand property": "The outline property is a shorthand property for setting the following individual outline properties:The outline property is specified as one, two, or three values from the list above. The order of the values does not matter.The following example shows some outlines specified with the shorthand outline property:A dashed outline.A dotted red outline.A 5px solid yellow outline.A thick ridge pink outline.```css\np.ex1\r\n{outline: dashed;}\np.ex2\r\n{outline: dotted red;}\np.ex3\r\n{outline: 5px solid yellow;}\np.ex4\r\n{outline: thick ridge pink;}```"
            }
        },
        "outlineoffset": {
            "title": "Outline Offset",
            "url": "https://www.w3schools.com/css/css_outline_offset.asp",
            "info": {
                "CSS Outline Offset": "The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent.The following example specifies an outline 15px outside the border edge:This paragraph has an outline 15px outside the border edge.```css\np {\n  margin: 30px;\n  border: 1px solid black;\n  outline: 1px solid red;\n  outline-offset: 15px;\n}```The following example shows that the space between an element and its outline is transparent:This paragraph has an outline of 15px outside the border edge.```css\np {\n  margin: 30px;\n  background: yellow;\n  border: 1px solid black;\n  outline: 1px solid red;\n  outline-offset: 15px;\n}```",
                "All CSS Outline Properties": ""
            }
        },
        "text": {
            "title": "CSS Text",
            "url": "https://www.w3schools.com/css/css_text.asp",
            "info": {
                "Text Color": "The color property is used to set the color of the text. The color is specified by:Look at CSS Color Values for a complete list of possible color values.The default text color for a page is defined in the body selector.```css\nbody {\n  color: blue;\n}\n\nh1 {\n  color: green;\n}```",
                "Text Color and Background Color": "In this example, we define both the background-color property and the color property:```css\nbody {\n  background-color: lightgrey;\n  color: blue;\n}\n\nh1 {\n  background-color: black;\n  color: white;\n}```"
            }
        },
        "textcolor": {
            "title": "Text Color",
            "url": "https://www.w3schools.com/css/css_text.asp",
            "info": {
                "Text Color": "The color property is used to set the color of the text. The color is specified by:Look at CSS Color Values for a complete list of possible color values.The default text color for a page is defined in the body selector.```css\nbody {\n  color: blue;\n}\n\nh1 {\n  color: green;\n}```",
                "Text Color and Background Color": "In this example, we define both the background-color property and the color property:```css\nbody {\n  background-color: lightgrey;\n  color: blue;\n}\n\nh1 {\n  background-color: black;\n  color: white;\n}```"
            }
        },
        "textalignment": {
            "title": "Text Alignment",
            "url": "https://www.w3schools.com/css/css_text_align.asp",
            "info": {
                "Text Alignment": "The text-align property is used to set the horizontal alignment of a text.A text can be left or right aligned, centered, or justified.The following example shows center aligned, and left and right aligned text (left alignment is default if text direction is left-to-right, and right alignment is default if text direction is right-to-left):```css\nh1 {\n  text-align: center;\n}\nh2 {\n  text-align: left;\n}\nh3 {\n  text-align: right;\n\r\n}```When the text-align property is set to \"justify\", each line is stretched so that every line has equal width, and the left and right margins are straight (like in magazines and newspapers):```css\ndiv {\n  text-align: justify;\n}```",
                "Text Direction": "The direction and unicode-bidi properties can be used to change the text direction of an element:```css\np {\n  direction: rtl;\n  unicode-bidi: bidi-override;\n}```",
                "Vertical Alignment": "The vertical-align property sets the vertical alignment of an element.This example demonstrates how to set the vertical alignment of an image in a text:```css\nimg.top {\n  vertical-align: top;\n}\nimg.middle {\n  vertical-align: middle;\n}\nimg.bottom {\n  vertical-align: bottom;\n}```"
            }
        },
        "textdecoration": {
            "title": "Text Decoration",
            "url": "https://www.w3schools.com/css/css_text_decoration.asp",
            "info": {
                "Text Decoration": "The text-decoration property is used to set or remove decorations from text.The value text-decoration: none; is often used to remove underlines from links:```css\na {\n  text-decoration: none;\n}```The other text-decoration values are used to decorate text:```css\nh1 {\n  text-decoration: overline;\n}\n\nh2 {\n  text-decoration: line-through;\n}\n\nh3 {\n  text-decoration: underline;\n}```"
            }
        },
        "texttransformation": {
            "title": "Text Transformation",
            "url": "https://www.w3schools.com/css/css_text_transformation.asp",
            "info": {
                "Text Transformation": "The text-transform property is used to specify uppercase and lowercase letters in a text.It can be used to turn everything into uppercase or lowercase letters, or capitalize the first letter of each word:```css\np.uppercase {\n  text-transform: uppercase;\n}\n\np.lowercase {\n  text-transform: lowercase;\n}\n\np.capitalize {\n  text-transform: capitalize;\n}```"
            }
        },
        "textspacing": {
            "title": "Text Spacing",
            "url": "https://www.w3schools.com/css/css_text_spacing.asp",
            "info": {
                "Text Indentation": "The text-indent property is used to specify the indentation of the first line of a text:```css\np {\n  text-indent: 50px;\n}```",
                "Letter Spacing": "The letter-spacing property is used to specify the space between the characters in a text.The following example demonstrates how to increase or decrease the space between characters:```css\nh1 {\n  letter-spacing: 3px;\n}\nh2 {\n  letter-spacing: -3px;\n}```",
                "Line Height": "The line-height property is used to specify the space between lines:```css\np.small {\n  line-height: 0.8;\n}\np.big {\n  \r\nline-height: 1.8;\n}```",
                "Word Spacing": "The word-spacing property is used to specify the space between the words in a text.The following example demonstrates how to increase or decrease the space between words:```css\nh1 {\n  word-spacing: 10px;\n}\nh2 {\n  word-spacing: -5px;\n}```",
                "White Space": "The white-space property specifies how white-space inside an element is handled.This example demonstrates how to disable text wrapping inside an element:```css\np {\n  white-space: nowrap;\n}```"
            }
        },
        "textshadow": {
            "title": "Text Shadow",
            "url": "https://www.w3schools.com/css/css_text_shadow.asp",
            "info": {
                "Text Shadow": "The text-shadow property adds shadow to text.In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):",
                "Text shadow effect!": "```css\nh1\r\n{\ntext-shadow: 2px 2px 5px red;\n\r\n}```",
                "All CSS Text Properties": ""
            }
        },
        "fonts": {
            "title": "CSS Fonts",
            "url": "https://www.w3schools.com/css/css_font.asp",
            "info": {
                "Difference Between Serif and Sans-serif Fonts": "",
                "CSS Font Families": "In CSS, there are two types of font family names:",
                "Font Family": "The font family of a text is set with the font-family property.The font-family property should hold several font names as a \"fallback\" system. If the browser does not support the first font, it tries the next font, and so on.Start with the font you want, and end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available. More than one font family is specified in a comma-separated list:```css\n.serif {\n  font-family: \"Times New Roman\", Times, serif;\n}\n.sansserif {\n  font-family: Arial, Helvetica, sans-serif;\n}\n.monospace {\n  font-family: \"Lucida Console\", Courier, monospace;\n}``````css\np.impact {\n  font-family: Impact, Charcoal, sans-serif;\n}```For commonly used font combinations, look at our Web Safe Font Combinations."
            }
        },
        "fontfamily": {
            "title": "Font Family",
            "url": "https://www.w3schools.com/css/css_font.asp",
            "info": {
                "Difference Between Serif and Sans-serif Fonts": "",
                "CSS Font Families": "In CSS, there are two types of font family names:",
                "Font Family": "The font family of a text is set with the font-family property.The font-family property should hold several font names as a \"fallback\" system. If the browser does not support the first font, it tries the next font, and so on.Start with the font you want, and end with a generic family, to let the browser pick a similar font in the generic family, if no other fonts are available. More than one font family is specified in a comma-separated list:```css\n.serif {\n  font-family: \"Times New Roman\", Times, serif;\n}\n.sansserif {\n  font-family: Arial, Helvetica, sans-serif;\n}\n.monospace {\n  font-family: \"Lucida Console\", Courier, monospace;\n}``````css\np.impact {\n  font-family: Impact, Charcoal, sans-serif;\n}```For commonly used font combinations, look at our Web Safe Font Combinations."
            }
        },
        "fontstyle": {
            "title": "Font Style",
            "url": "https://www.w3schools.com/css/css_font_style.asp",
            "info": {
                "Font Style": "The font-style property is mostly used to specify italic text.This property has three values:```css\np.normal {\n  font-style: normal;\n}\n\np.italic {\n  font-style: italic;\n}\n\np.oblique {\n  font-style: oblique;\n}```",
                "Font Weight": "The font-weight property specifies the weight of a font:```css\np.normal {\n  font-weight: normal;\n}\n\np.thick {\n  font-weight: bold;\n}```",
                "Font Variant": "The font-variant property specifies whether or not a text should be displayed in a small-caps font.In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text.```css\np.normal {\n  font-variant: normal;\n}\n\np.small {\n  font-variant: small-caps;\n}```"
            }
        },
        "fontsize": {
            "title": "Font Size",
            "url": "https://www.w3schools.com/css/css_font_size.asp",
            "info": {
                "Font Size": "The font-size property sets the size of the text.Being able to manage the text size is important in web design. However, you should not use font size adjustments to make paragraphs look like headings, or headings look like paragraphs.Always use the proper HTML tags, like <h1> - <h6> for headings and <p> for paragraphs.The font-size value can be  an absolute, or relative size.Absolute size:Relative size:",
                "Set Font Size With Pixels": "Setting the text size with pixels gives you full control over the text size:```css\nh1 {\n  font-size: 40px;\n}\n\nh2 {\n  font-size: 30px;\n}\n\np {\n  font-size: 14px;\n}```Tip: If you use pixels, you can still use the zoom tool to resize the entire page.",
                "Set Font Size With Em": "To allow users to resize the text (in the browser menu), many developers use em instead of pixels.The em size unit is recommended by the W3C.1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px.The size can be calculated from pixels to em using this formula: pixels/16=em```css\nh1 {\n  font-size: 2.5em; /* 40px/16=2.5em */\n}\n\nh2 {\n  font-size: 1.875em; /* 30px/16=1.875em */\n\r\n}\n\np {\n  font-size: 0.875em; /* 14px/16=0.875em */\n}```In the example above, the text size in em is the same as the previous example in pixels. However, with the em size, it is possible to adjust the text size in all browsers.Unfortunately, there is still a problem with older versions of Internet Explorer. The text becomes larger than it should when made larger, and smaller than it should when made smaller.",
                "Use a Combination of Percent and Em": "The solution that works in all browsers, is to set a default font-size in percent for the <body> element:```css\nbody {\n  font-size: 100%;\n}\n\nh1 {\n  font-size: 2.5em;\n}\n\nh2 {\n  font-size: 1.875em;\n}\n\np {\n  font-size: 0.875em;\n}```Our code now works great! It shows the same text size in all browsers, and allows all browsers to zoom or resize the text!",
                "Responsive Font Size": "The text size can be set with a vw unit, which means the \"viewport width\".That way the text size will follow the size of the browser window:```css\n<h1 style=\"font-size:10vw\">Hello World</h1>```"
            }
        },
        "fontgoogle": {
            "title": "Font Google",
            "url": "https://www.w3schools.com/css/css_font_google.asp",
            "info": {
                "Google Fonts": "If you do not want to use any of the standard fonts in HTML, you can use the Google Fonts API to add hundreds of other fonts to your page.Just add a stylesheet link and refer to a font family of your choice:```css\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Sofia\">\n<style>\nbody {\n  font-family: \"Sofia\";\n  font-size: 22px;\n}\n</style>\n</head>\n<body>\n<h1>Sofia Font</h1>\n<p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>\n</body>\n</html>```For a list of all available Google Fonts, visit our How To Use Google Fonts Tutorial."
            }
        },
        "fontshorthand": {
            "title": "Font Shorthand",
            "url": "https://www.w3schools.com/css/css_font_shorthand.asp",
            "info": {
                "Font Property": "To shorten the code, it is also possible to specify all the individual font properties in one property.The font property is a shorthand property for:```css\np.a\r\n {\n   \r\n font: 20px Arial, sans-serif;\n\r\n }\n\n\r\n p.b\r\n {\n   \r\n font: italic small-caps bold 12px/30px Georgia, serif;\n\r\n }```Note: The font-size and font-family values are required. If one of the other values is missing, their default value are used.",
                "All CSS Font Properties": ""
            }
        },
        "icons": {
            "title": "CSS Icons",
            "url": "https://www.w3schools.com/css/css_icons.asp",
            "info": {
                "How To Add Icons": "The simplest way to add an icon to your HTML page, is with an icon library, such as Font Awesome.Add the name of the specified icon class to any inline HTML element (like <i> or <span>).All the icons in the icon libraries below, are scalable vectors that can be customized with CSS (size, color, shadow, etc.)",
                "Font Awesome Icons": "To use the Font Awesome icons, go to fontawesome.com, sign in, and get a code to add in the <head> section of your HTML page:<script src=\"https://kit.fontawesome.com/yourcode.js\"></script>Read more about how to get started with Font Awesome in our Font Awesome 5 tutorial.Note: No downloading or installation is required!```css\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"https://kit.fontawesome.com/a076d05399.js\"></script>\n\r\n</head>\n<body>\n<i class=\"fas fa-cloud\"></i>\n<i  class=\"fas fa-heart\"></i>\n<i class=\"fas fa-car\"></i>\n<i class=\"fas fa-file\"></i>\n\r\n<i class=\"fas fa-bars\"></i>\n\r\n</body>\n</html>```",
                "Bootstrap Icons": "To use the Bootstrap glyphicons, add the following line inside the <head> section of your HTML page:<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">Note: No downloading or installation is required!```css\n<!DOCTYPE html>\n<html>\n<head>\n   <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n</head>\n<body>\n\n<i class=\"glyphicon glyphicon-cloud\"></i>\n<i class=\"glyphicon  glyphicon-remove\"></i>\n<i class=\"glyphicon glyphicon-user\"></i>\n<i  class=\"glyphicon glyphicon-envelope\"></i>\n<i class=\"glyphicon glyphicon-thumbs-up\"></i>\n</body>\n</html>```",
                "Google Icons": "To use the Google icons, add the following line inside the <head> section of your HTML page:<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">Note: No downloading or installation is required!```css\n<!DOCTYPE html>\n<html>\n<head>\n\r\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\n</head>\n<body>\n\n<i class=\"material-icons\">cloud</i>\n<i  class=\"material-icons\">favorite</i>\n<i  class=\"material-icons\">attachment</i>\n<i  class=\"material-icons\">computer</i>\n<i  class=\"material-icons\">traffic</i>\n</body>\n</html>```"
            }
        },
        "links": {
            "title": "CSS Links",
            "url": "https://www.w3schools.com/css/css_link.asp",
            "info": {
                "Styling Links": "Links can be styled with any CSS property (e.g. color, font-family, background, etc.).```css\na {\n  color: hotpink;\n}```In addition, links can be styled differently depending on what state they are in.The four links states are: ```css\n/* unvisited link */\na:link {\n  color: red;\n}\n/* visited \r\nlink */\na:visited {\n  color: green;\n}\n/* mouse over link */\n\r\na:hover {\n  color: hotpink;\n}\n/* selected link */\na:active {\n \r\ncolor: blue;\n}```When setting the style for several link states, there are some order rules:",
                "Text Decoration": "The text-decoration property is mostly used to remove underlines from links:```css\na:link {\n  text-decoration: none;\n}\n\na:visited {\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\na:active {\n  text-decoration: underline;\n}```",
                "Background Color": "The background-color property can be used to specify a background color for links:```css\na:link {\n  background-color: yellow;\n}\n\r\na:visited {\n  background-color: cyan;\n}\n\r\na:hover {\n  background-color: lightgreen;\n}\n\r\na:active {\n  background-color: hotpink;\n}```",
                "Link Buttons": "This example demonstrates a more advanced example where we combine several CSS properties to display links as boxes/buttons:```css\na:link, a:visited {\n  background-color: #f44336;\n  \r\ncolor: white;\n  padding: 14px 25px;\n  text-align: center; \n  text-decoration: none;\n  display: inline-block;\n}\na:hover, a:active {\n  background-color: red;\n}```",
                "More Examples": "Add different styles to hyperlinksThis example demonstrates how to add other styles to hyperlinks.Advanced - Create a link button with bordersAnother example of how to create link boxes/buttons.Change the cursorThe cursor property specifies the type of cursor to display.This example demonstrates the different types of cursors (can be useful for links)."
            }
        },
        "lists": {
            "title": "CSS Lists",
            "url": "https://www.w3schools.com/css/css_list.asp",
            "info": {
                "HTML Lists and CSS List Properties": "In HTML, there are two main types of lists:The CSS list properties allow you to:",
                "Different List Item Markers": "The list-style-type property specifies the type of list item marker.The following example shows some of the available list item markers: ```css\nul.a {\n  list-style-type: circle;\n}\n\nul.b {\n  list-style-type: square;\n}\n\n\r\nol.c {\n  list-style-type: upper-roman;\n}\n\nol.d {\n  list-style-type: lower-alpha;\n}```Note: Some of the values are for unordered lists, and some for ordered lists.",
                "An Image as The List Item Marker": "The list-style-image property specifies an image as the list item marker:```css\nul\r\n{\n  list-style-image: url('sqpurple.gif');\n\r\n}```",
                "Position The List Item Markers": "The list-style-position property specifies the position of the list-item markers (bullet points).\"list-style-position: outside;\" means that the bullet points will be outside the list item. The start of each line of a list item will be aligned vertically. This is default:\"list-style-position: inside;\" means that the bullet points will be inside the list item. As it is part of the list item, it will be part of the text and push the text at the start:```css\nul.a {\n  list-style-position: outside;\n}\nul.b {\n  list-style-position: inside;\n}```",
                "Remove Default Settings": "The list-style-type:none property can also be used to remove the markers/bullets. Note that the list also has default margin and padding. To remove this, add margin:0 and padding:0 to <ul> or <ol>:```css\nul\r\n{\n \r\nlist-style-type: none;\n  margin: 0;\n  padding: 0;\n\r\n}```",
                "List - Shorthand property": "The list-style property is a shorthand property. It is used to set all the list properties in one declaration:```css\nul\r\n{\n \r\nlist-style: square inside url(\"sqpurple.gif\");\n\r\n}```When using the shorthand property, the order of the property values are:If one of the property values above are missing, the default value for the missing property will be inserted, if any.",
                "Styling List With Colors": "We can also style lists with colors, to make them look a little more interesting.Anything added to the <ol> or <ul> tag, affects the entire list, while properties added to the <li> tag will affect the individual list items:```css\nol {\n  background: #ff9999;\n  \r\npadding: 20px;\n}\nul {\n  background: #3399ff;\n  \r\npadding: 20px;\n}\nol li {\n  background: \r\n#ffe5e5;\n  padding: 5px;\n  \r\nmargin-left: 35px;\n}\nul li {\n  background: \r\n#cce5ff;\n  margin: 5px;\n}```",
                "More Examples": "Customized list with a red left borderThis example demonstrates how to create a list with a red left border.Full-width bordered listThis example demonstrates how to create a bordered list without bullets.All the different list-item markers for listsThis example demonstrates all the different list-item markers in CSS.",
                "All CSS List Properties": ""
            }
        },
        "tables": {
            "title": "CSS Tables",
            "url": "https://www.w3schools.com/css/css_table.asp",
            "info": {
                "Table Borders": "To specify table borders in CSS, use the border property.The example below specifies a black border for <table>, <th>, and <td> elements:```css\ntable, th, td {\nborder: 1px solid black;\n\r\n}```Notice that the table in the example above has double borders. This is because both the table and the <th> and <td> elements have separate borders.",
                "Collapse Table Borders": "The border-collapse property sets whether the table borders should be collapsed into a single border:```css\ntable\r\n{\nborder-collapse: collapse;\n\r\n}\n\r\ntable, th, td\r\n{\nborder: 1px solid black;\n\r\n}```If you only want a border around the table, only specify the border property for <table>:```css\ntable\r\n{\nborder: 1px solid black;\n\r\n}```",
                "Table Width and Height": "Width and height of a table are defined by the width and height properties.The example below sets the width of the table to 100%, and the height of the <th> elements to 50px:```css\ntable \r\n{\nwidth: 100%;\n\r\n}\n\r\nth\r\n{\nheight: 50px;\n\r\n}```",
                "Horizontal Alignment": "The text-align property sets the horizontal alignment (like left, right, or center) of the content in <th> or <td>.By default, the content of <th> elements are center-aligned and the content of <td> elements are left-aligned.The following example left-aligns the text in <th> elements:```css\nth\r\n{\n \r\ntext-align: left;\n\r\n}```",
                "Vertical Alignment": "The vertical-align property sets the vertical alignment (like top, bottom, or middle) of the content in <th> or <td>.By default, the vertical alignment of the content in a table is middle (for both <th> and <td> elements).The following example sets the vertical text alignment to bottom for <td> elements:```css\ntd\r\n{\n \r\nheight: 50px;\n \r\nvertical-align: bottom;\n\r\n}```",
                "Table Padding": "To control the space between the border and the content in a table, use the padding property on <td> and <th> elements:```css\nth, td\r\n{\n \r\npadding: 15px;\n  text-align: left;\n\r\n}```",
                "Horizontal Dividers": "Add the border-bottom property to <th> and <td> for horizontal dividers:```css\nth, td {\n  border-bottom: 1px solid #ddd;\n}```",
                "Hoverable Table": "Use the :hover selector on <tr> to highlight table rows on mouse over:```css\ntr:hover {background-color: #f5f5f5;}```",
                "Striped Tables": "For zebra-striped tables, use the nth-child() selector and add a background-color to all even (or odd) table rows:```css\ntr:nth-child(even) {background-color: #f2f2f2;}```",
                "Table Color": "The example below specifies the background color and text color of <th> elements:```css\nth {\n  background-color: #4CAF50;\n  color: white;\n}```",
                "Responsive Table": "A responsive table will display a horizontal scroll bar if the screen is too small to display the full content:Add a container element (like <div>) with overflow-x:auto around the <table> element to make it responsive:```css\n<div style=\"overflow-x:auto;\">\n<table>\n\r\n... table content ...\n</table>\n\n</div>```",
                "More Examples": "Make a fancy tableThis example demonstrates how to create a fancy table.Set the position of the table captionThis example demonstrates how to position the table caption.",
                "CSS Table Properties": ""
            }
        },
        "display": {
            "title": "CSS Display",
            "url": "https://www.w3schools.com/css/css_display_visibility.asp",
            "info": {
                "The display Property": "The display property specifies if/how an element is displayed.Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.Click to show panel",
                "Block-level Elements": "A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).Examples of block-level elements:",
                "Inline Elements": "An inline element does not start on a new line and only takes up as much width as necessary.This is an inline <span> element inside a paragraph.Examples of inline elements:",
                "Display: none;": "display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. Take a look at our last example on this page if you want to know how this can be achieved.The <script> element uses display: none; as default.\u00a0",
                "Override The Default Display Value": "As mentioned, every element has a default display value. However, you can override this.Changing an inline element to a block element, or vice versa, can be useful for making the page look a specific way, and still follow the web standards.A common example is making inline <li> elements for horizontal menus:```css\nli {\n  display: inline;\n}```The following example displays <span> elements as block elements:```css\nspan {\n  display: block;\n}```The following example displays <a> elements as block elements:```css\na {\n  display: block;\n}```",
                "Hide an Element - display:none or visibility:hidden?": "Hiding an element can be done by setting the display property to none. The element will be hidden, and the page will be displayed as if the element is not there:```css\nh1.hidden {\n  display: none;\n}```visibility:hidden; also hides an element.However, the element will still take up the same space as before. The element will be hidden, but still affect the layout:```css\nh1.hidden {\n  visibility: hidden;\n}```",
                "More Examples": "Differences between display: none; and visibility: hidden;This example demonstrates display: none; versus visibility: hidden;Using CSS together with JavaScript to show contentThis example demonstrates how to use CSS and JavaScript to show an element on click.",
                "CSS Display/Visibility Properties": ""
            }
        },
        "max-width": {
            "title": "CSS Max-width",
            "url": "https://www.w3schools.com/css/css_max-width.asp",
            "info": {
                "Using width, max-width and margin: auto;": "As mentioned in the previous chapter; a block-level element always takes up the full width available (stretches out to the left and right as far as it can).Setting the width of a block-level element will prevent it from stretching out to the edges of its container. Then, you can set the margins to auto, to horizontally center the element within its container. The element will take up the specified width, and the remaining space will be split equally between the two margins:Note: The problem with the <div> above occurs when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page.Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices:Tip: Resize the browser window to less than 500px wide, to see the difference between the two divs!Here is an example of the two divs above:"
            }
        },
        "position": {
            "title": "CSS Position",
            "url": "https://www.w3schools.com/css/css_positioning.asp",
            "info": {
                "The position Property": "The position property specifies the type of positioning method used for an element.There are five different position values: Elements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value.",
                "position: static;": "HTML elements are positioned static by default.Static positioned elements are not affected by the top, bottom, left, and right properties.An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page:Here is the CSS that is used:```css\ndiv.static {\n  position: static;\n  border: 3px solid #73AD21;\n}```",
                "position: relative;": "An element with position: relative; is positioned relative to its normal position.Setting the top, right, bottom, and left properties of a relatively-positioned element will causeit to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.Here is the CSS that is used:```css\ndiv.relative {\n  position: relative;\n  \r\nleft: 30px;\n  border: 3px solid #73AD21;\n}```",
                "position: fixed;": "An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.A fixed element does not leave a gap in the page where it would normally have been located.Notice the fixed element in the lower-right corner of the page. Here is the CSS that is used:```css\ndiv.fixed {\n  position: fixed;\n  \r\nbottom: 0;\n  right: 0;\n  width: \r\n300px;\n  border: 3px solid #73AD21;\n}```",
                "position: absolute;": "An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.Note: A \"positioned\" element is one whose position is anything except static.Here is a simple example:Here is the CSS that is used:```css\ndiv.relative {\n  position: relative;\n  \r\nwidth: 400px;\n  height: 200px;\n  border: 3px solid #73AD21;\n}\r\n\n\r\ndiv.absolute {\n  position: absolute;\n \r\ntop: 80px;\n  right: 0;\n  width: 200px;\n  height: 100px;\n  border: 3px solid #73AD21;\n}```",
                "position: sticky;": "An element with position: sticky; is positioned based on the user's scroll position.A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \"sticks\" in place (like position:fixed).In this example, the sticky element sticks to the top of the page (top: 0), when you reach its scroll position.```css\ndiv.sticky {\n  position: -webkit-sticky; /* Safari */\n  position: sticky;\n  top: 0;\n  background-color: green;\n  border: 2px solid #4CAF50;\n}```",
                "Overlapping Elements": "When elements are positioned, they can overlap other elements.The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).An element can have a positive or negative stack order:```css\nimg\r\n{\n \r\nposition: absolute;\nleft: 0px;\n \r\ntop: 0px;\n \r\nz-index: -1;\n\r\n}```An element with greater stack order is always in front of an element with a lower stack order.",
                "Positioning Text In an Image": "How to position text over an image:",
                "More Examples": "Set the shape of an elementThis example demonstrates how to set the shape of an element. The element is clipped into this shape, and displayed.",
                "All CSS Positioning Properties": ""
            }
        },
        "overflow": {
            "title": "CSS Overflow",
            "url": "https://www.w3schools.com/css/css_overflow.asp",
            "info": {
                "CSS Overflow": "The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.The overflow property has the following values:",
                "overflow: visible": "By default, the overflow is visible, meaning that it is not clipped and it renders outside the element's box:```css\ndiv {\n  width: 200px;\n  height: \r\n50px;\n  background-color: #eee;\n  \r\noverflow: visible;\n}```",
                "overflow: hidden": "With the hidden value, the overflow is clipped, and the rest of the content is hidden:```css\ndiv {\n  overflow: hidden;\n}```",
                "overflow: scroll": "Setting the value to scroll, the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontally and vertically (even if you do not need it):```css\ndiv {\n  overflow: scroll;\n}```",
                "overflow: auto": "The auto value is similar to scroll, but it adds scrollbars only when necessary:```css\ndiv {\n  overflow: auto;\n}```",
                "overflow-x and overflow-y": "The overflow-x and overflow-y properties specifies whether to change the overflow of content just horizontally or vertically (or both):overflow-x specifies what to do with the left/right edges of the content.overflow-y specifies what to do with the top/bottom edges of the content.```css\ndiv {\n  overflow-x: hidden; /* Hide horizontal scrollbar \r\n*/\n  overflow-y: scroll; /* Add vertical scrollbar */\n}```",
                "All CSS Overflow Properties": ""
            }
        },
        "float": {
            "title": "CSS Float",
            "url": "https://www.w3schools.com/css/css_float.asp",
            "info": {
                "The float Property": "The float property is used for positioning and formatting content e.g. let an image float left to the text in a container.The float property can have one of the following values:In its simplest use, the float property can be used to wrap text around images.",
                "Example - float: right;": "The following example specifies that an image should float to the right in a text:```css\nimg {\n  float: right;\n}```",
                "Example - float: left;": "The following example specifies that an image should float to the left in a text:```css\nimg {\n  float: left;\n}```",
                "Example - No float": "In the following example the image will be displayed just where it occurs in the text (float: none;):```css\nimg {\n  float: none;\n}```"
            }
        },
        "clear": {
            "title": "Clear",
            "url": "https://www.w3schools.com/css/css_float_clear.asp",
            "info": {
                "The clear Property": "The clear property specifies what elements can float beside the cleared element and on which side.The clear property can have one of the following values:The most common way to use the clear property is after you have used a float property on an element.When clearing floats, you should match the clear to the float: If an element is floated to the left, then you should clear to the left. Your floated element will continue to float, but the cleared element will appear below it on the web page.The following example clears the float to the left. Means that no floating elements are allowed on the left side (of the div):```css\ndiv {\n  clear: left;\n}```",
                "The clearfix Hack": "If an element is taller than the element containing it, and it is floated, it will \"overflow\" outside of its container:Then we can add overflow: auto; to the containing element to fix this problem:```css\n.clearfix {\n  overflow: auto;\n}```The overflow: auto clearfix works well as long as you are able to keep control of your margins and padding (else you might see scrollbars). The new, modern clearfix hack however, is safer to use, and the following code is used for most webpages:```css\n.clearfix::after {\n  content: \"\";\n  clear: both;\n  display: table;\n}```"
            }
        },
        "floatexamples": {
            "title": "Float Examples",
            "url": "https://www.w3schools.com/css/css_float_examples.asp",
            "info": {
                "Grid of Boxes / Equal Width Boxes": "With the float property, it is easy to float boxes of content side by side:```css\n* {\n  box-sizing: border-box;\n}\n.box {\n  float: left;\n  width: 33.33%; /* three boxes (use 25% for four, and 50% for two, etc) */\n  padding: 50px; /* if you want space between the images */\n}```",
                "Images Side By Side": "The grid of boxes can also be used to display images side by side:```css\n.img-container {\n  float: left;\n  width: 33.33%; /* three containers (use 25% for four, and 50% for two, etc) */\n  padding: 5px; /* if you want space between the images */\n}```",
                "Equal Height Boxes": "In the previous example, you learned how to float boxes side by side with an equal width. However, it is not easy to create floating boxes with equal heights. A quick fix however, is to set a fixed height, like in the example below:```css\n.box {\n  height: 500px;\n}```However, this is not very flexible. It is ok if you can guarantee that the boxes will always have the same amount of content in them. But many times, the content is not the same. If you try the example above on a mobile phone, you will see that the second box's content will be displayed outside of the box. This is where CSS3 Flexbox comes in handy - as it can automatically stretch boxes to be as long as the longest box:",
                "Navigation Menu": "Use float with a list of hyperlinks to create a horizontal menu:",
                "Web Layout Example": "It is also common to do entire web layouts using the float property:```css\n.header, .footer {\n  background-color: grey;\n  color: white;\n  padding: 15px;\n}\n.column {\n  float: left;\n  padding: 15px;\n}\n.clearfix::after {\n  content: \"\";\n  clear: both;\n  display: table;\n}\n.menu {\n  width: 25%;\n}\n.content {\n  width: 75%;\n}```",
                "More Examples": "An image with border and margins that floats to the right in a paragraphLet an image float to the right in a paragraph. Add border and margins to the image.An image with a caption that floats to the rightLet an image with a caption float to the right.Let the first letter of a paragraph float to the leftLet the first letter of a paragraph float to the left and style the letter.Creating a website with floatUse float to create a homepage with a navbar, header, footer, left content and main content.",
                "All CSS Float Properties": ""
            }
        },
        "inline-block": {
            "title": "CSS Inline-block",
            "url": "https://www.w3schools.com/css/css_inline-block.asp",
            "info": {
                "The display: inline-block Value": "Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.The following example shows the different behavior of display: inline, display: inline-block and display: block:```css\nspan.a {\n  display: inline; /* the default for span */\n  width: 100px;\n  height: 100px;\n  padding: 5px;\n  border: 1px solid blue; \n  background-color: yellow; \n}\nspan.b {\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n  padding: 5px;\n  border: 1px solid blue; \n  background-color: yellow; \n}\nspan.c {\n  display: block;\n  width: 100px;\n  height: 100px;\n  padding: 5px;\n  border: 1px solid blue; \n  background-color: yellow; \n}```",
                "Using inline-block to Create Navigation Links": "One common use for display: inline-block is to display list items horizontally instead of vertically. The following example creates horizontal navigation links:```css\n.nav {\n  background-color: yellow; \n  list-style-type: none;\n  text-align: center; \n  padding: 0;\n  margin: 0;\n}\n.nav li {\n  display: inline-block;\n  font-size: 20px;\n  padding: 20px;\n}```"
            }
        },
        "align": {
            "title": "CSS Align",
            "url": "https://www.w3schools.com/css/css_align.asp",
            "info": {
                "Center Align Elements": "To horizontally center a block element (like <div>), use margin: auto;Setting the width of the element will prevent it from stretching out to the edges of its container.The element will then take up the specified width, and the remaining space will be split equally between the two margins:```css\n.center\r\n{\nmargin: auto;\n \r\nwidth: 50%;\n \r\nborder: 3px solid green;\n  padding: 10px;\n\r\n}```Note: Center aligning has no effect if the width property is not set (or set to 100%).",
                "Center Align Text": "To just center the text inside an element, use text-align: center;```css\n.center {\n  text-align: center;\n  \r\nborder: 3px solid green;\n}```Tip: For more examples on how to align text, see the CSS Text chapter.",
                "Center an Image": "To center an image, set left and right margin to auto and make it into a block element:```css\nimg\r\n{\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\nwidth: 40%;\n\r\n}```",
                "Left and Right Align - Using position": "One method for aligning elements is to use position: absolute;:```css\n.right\r\n{\nposition: absolute;\n \r\nright: 0px;\nwidth: 300px;\nborder: 3px solid #73AD21;\n  padding: 10px;\n\r\n}```Note: Absolute positioned elements are removed from the normal flow, and can overlap elements.",
                "Left and Right Align - Using float": "Another method for aligning elements is to use the float property:```css\n.right\r\n{\nfloat: right;\n \r\nwidth: 300px;\nborder: 3px solid #73AD21;\n  padding: 10px;\n\r\n}```",
                "The clearfix Hack": "Then we can add overflow: auto; to the containing element to fix this problem:```css\n.clearfix {\n  overflow: auto;\n}```",
                "Center Vertically - Using padding": "There are many ways to center an element vertically in CSS. A simple solution is to use top and bottom padding:```css\n.center {\n  padding: 70px 0;\n  border: 3px solid \r\ngreen;\n\r\n}```To center both vertically and horizontally, use padding and text-align: center:```css\n.center {\n  padding: 70px 0;\n  border: 3px solid \r\ngreen;\n  text-align: center;\n\r\n}```",
                "Center Vertically - Using line-height": "Another trick is to use the line-height property with a value that is equal to the height property:```css\n.center {\n  line-height: 200px;\n  height: 200px;\n  border: 3px solid green;\n  text-align: center;\n}\n/* If the text has multiple lines, add the \r\nfollowing: */\n.center p {\n  line-height: 1.5;\n  display: inline-block;\n  vertical-align: middle;\n}```",
                "Center Vertically - Using position & transform": "If padding and line-height are not options, another solution is to use positioning and the transform property:```css\n.center { \n  height: 200px;\n  position: relative;\n  border: 3px solid green; \n}\n\r\n.center p {\n  margin: 0;\n  \r\nposition: absolute;\n  top: 50%;\n  \r\nleft: 50%;\n  transform: translate(-50%, -50%);\n}```Tip: You will learn more about the transform property in our 2D Transforms Chapter.",
                "Center Vertically - Using Flexbox": "You can also use flexbox to center things. Just note that flexbox is not supported in IE10 and earlier versions:```css\n.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n  border: 3px solid green; \n}```Tip: You will learn more about Flexbox in our CSS Flexbox Chapter."
            }
        },
        "combinators": {
            "title": "CSS Combinators",
            "url": "https://www.w3schools.com/css/css_combinators.asp",
            "info": {
                "CSS Combinators": "A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.There are four different combinators in CSS:",
                "Descendant Selector": "The descendant selector matches all elements that are descendants of a specified element.The following example selects all <p> elements inside <div> elements:\u00a0```css\ndiv p {\n  background-color: yellow;\n}```",
                "Child Selector": "The child selector selects all elements that are the children of a specified element.The following example selects all <p> elements that are  children of a <div> element:```css\ndiv > p {\n  background-color: yellow;\n}```",
                "Adjacent Sibling Selector": "The adjacent sibling selector selects all elements that are the adjacent siblings of a specified element.Sibling elements must have the same parent element, and \"adjacent\" means \"immediately following\".The following example selects all <p> elements that are placed immediately after <div> elements:```css\ndiv + p {\n  background-color: yellow;\n}```",
                "General Sibling Selector": "The general sibling selector selects all elements that are siblings of a specified element.The following example selects all <p> elements that are siblings of <div> elements:\u00a0```css\ndiv ~ p {\n  background-color: yellow;\n}```",
                "All CSS Combinator Selectors": ""
            }
        },
        "pseudo-class": {
            "title": "CSS Pseudo-class",
            "url": "https://www.w3schools.com/css/css_pseudo_classes.asp",
            "info": {
                "What are Pseudo-classes?": "A pseudo-class is used to define a special state of an element.For example, it can be used to:",
                "Syntax": "The syntax of pseudo-classes:```css\nselector:pseudo-class {\n  property: value;\n}```",
                "Anchor Pseudo-classes": "Links can be displayed in different ways:```css\n/* unvisited link */\na:link {\n  color: #FF0000;\n}\n/* visited \r\nlink */\na:visited {\n  color: #00FF00;\n}\n/* mouse over link */\n\r\na:hover {\n  color: #FF00FF;\n}\n/* selected link */\na:active {\ncolor: #0000FF;\n}```",
                "Pseudo-classes and CSS Classes": "Pseudo-classes can be combined with CSS classes:When you hover over the link in the example, it will change color:```css\na.highlight:hover {\n  color: #ff0000;\n}```",
                "Hover on <div>": "An example of using the :hover pseudo-class on a <div> element:```css\ndiv:hover {\n  background-color: blue;\n}```",
                "Simple Tooltip Hover": "Hover over a <div> element to show a <p> element (like a tooltip):```css\np {\n  display: none;\n  \r\nbackground-color: yellow;\n  padding: 20px;\n}\n\r\ndiv:hover p {\n  display: block;\n}```",
                "CSS - The :first-child Pseudo-class": "The :first-child pseudo-class matches a specified element that is the first child of another element.",
                "Match the first <p> element": "In the following example, the selector matches any <p> element that is the first child of any element:```css\np:first-child\r\n{\n \r\ncolor: blue;\n\r\n}```",
                "Match the first <i> element in all <p> elements": "In the following example, the selector matches the first <i> element in all <p> elements:```css\np i:first-child\r\n{\n \r\ncolor: blue;\n\r\n}```",
                "Match all <i> elements in all first child <p> elements": "In the following example, the selector matches all <i> elements in <p> elements that are the first child of another element:```css\np:first-child i\r\n{\ncolor: blue;\n\r\n}```",
                "CSS - The :lang Pseudo-class": "The :lang pseudo-class allows you to define special rules for different languages.In the example below, :lang defines the quotation marks for <q> elements with lang=\"no\":```css\n<html>\n\r\n<head>\n\r\n<style>\nq:lang(no) {\n  quotes: \"~\" \"~\";\n}\n\r\n</style>\n\r\n</head>\n\r\n<body>\n\r\n<p>Some text <q lang=\"no\">A quote in a paragraph</q> \r\nSome text.</p>\n\r\n</body>\n\r\n</html>```",
                "More Examples": "Add different styles to hyperlinksThis example demonstrates how to add other styles to hyperlinks.Use of :focusThis example demonstrates how to use the :focus pseudo-class.",
                "All CSS Pseudo Classes": "",
                "All CSS Pseudo Elements": ""
            }
        },
        "pseudo-element": {
            "title": "CSS Pseudo-element",
            "url": "https://www.w3schools.com/css/css_pseudo_elements.asp",
            "info": {
                "What are Pseudo-Elements?": "A CSS pseudo-element is used to style specified parts of an element.For example, it can be used to:",
                "Syntax": "The syntax of pseudo-elements:```css\nselector::pseudo-element {\n  property: value;\n}```",
                "The ::first-line Pseudo-element": "The ::first-line pseudo-element is used to add a special style to the first line of a text.The following example formats the first line of the text in all <p> elements:```css\np::first-line \r\n{\n \r\ncolor: #ff0000;\n \r\nfont-variant: small-caps;\n\r\n}```Note: The ::first-line pseudo-element can only be applied to block-level elements.The following properties apply to the ::first-line pseudo-element:",
                "The ::first-letter Pseudo-element": "The ::first-letter pseudo-element is used to add a special style to the first letter of a text.The following example formats the first letter of the text in all <p> elements:\u00a0```css\np::first-letter \r\n{\n \r\ncolor: #ff0000;\n \r\nfont-size: xx-large;\n\r\n}```Note: The ::first-letter pseudo-element can only be applied to block-level elements.The following properties apply to the ::first-letter pseudo- element:\u00a0",
                "Pseudo-elements and CSS Classes": "Pseudo-elements can be combined with CSS classes:\u00a0```css\np.intro::first-letter {\n  color: #ff0000;\n  \r\nfont-size: 200%;\n}```The example above will display the first letter of paragraphs with class=\"intro\", in red and in a larger size.",
                "Multiple Pseudo-elements": "Several pseudo-elements can also be combined.In the following example, the first letter of a paragraph will be red, in an xx-large font size. The rest of the first line will be blue, and in small-caps. The rest of the paragraph will be the default font size and color:```css\np::first-letter\r\n{\ncolor: #ff0000;\nfont-size: xx-large;\n\r\n}\n\r\np::first-line \r\n{\n \r\ncolor: #0000ff;\n \r\nfont-variant: small-caps;\n\r\n}```",
                "CSS - The ::before Pseudo-element": "The ::before pseudo-element can be used to insert some content before the content of an element.The following example inserts an image before the content of each <h1> element:```css\nh1::before \r\n{\ncontent: url(smiley.gif);\n\r\n}```",
                "CSS - The ::after Pseudo-element": "The ::after pseudo-element can be used to insert some content after the content of an element.The following example inserts an image after the content of each <h1> element:```css\nh1::after\r\n{\ncontent: url(smiley.gif);\n\r\n}```",
                "CSS - The ::selection Pseudo-element": "The ::selection pseudo-element matches the portion of an element that is selected by a user.The following CSS properties can be applied to ::selection: color, background, cursor, and outline.The following example makes the selected text red on a yellow background:```css\n::selection {\n  color: red; \n  \r\nbackground: yellow;\n}```",
                "All CSS Pseudo Elements": "",
                "All CSS Pseudo Classes": ""
            }
        },
        "opacity": {
            "title": "CSS Opacity",
            "url": "https://www.w3schools.com/css/css_image_transparency.asp",
            "info": {
                "Transparent Image": "The opacity property can take a value from 0.0 - 1.0. The lower value, the more transparent:```css\nimg {\n  opacity: 0.5;\n}```",
                "Transparent Hover Effect": "The opacity property is often used together with the :hover selector to change the opacity on mouse-over:```css\nimg {\n  opacity: 0.5;\n}\nimg:hover {\n  opacity: 1.0;\n}```The first CSS block is similar to the code in Example 1. In addition, we have added what should happen when a user hovers over one of the images. In this case we want the image to NOT be transparent when the user hovers over it. The CSS for this is opacity:1;.When the mouse pointer moves away from the image, the image will be transparent again.An example of reversed hover effect:```css\nimg:hover {\n  opacity: 0.5;\n}```",
                "Transparent Box": "When using the opacity property to add transparency to the background of an element, all of its child elements inherit the same transparency. This can make the text inside a fully transparent element hard to read:```css\ndiv {\n  opacity: 0.3;\n}```",
                "Transparency using RGBA": "If you do not want to apply opacity to child elements, like in our example above, use RGBA color values. The following example sets the opacity for the background color and not the text:You learned from our CSS Colors Chapter, that you can use RGB as a color value. In addition to RGB, you can use an RGB color value with an alpha channel (RGBA) - which specifies the opacity for a color.An RGBA color value is specified with: rgba(red, green, blue, alpha). The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).Tip: You will learn more about RGBA Colors in our CSS Colors Chapter.```css\ndiv {\n  background: rgba(76, 175, 80, 0.3) /* Green background with 30% \r\nopacity */\n}```",
                "Text in Transparent Box": "```css\n<html>\n\r\n<head>\n\r\n<style>\n\r\ndiv.background {\n  background: url(klematis.jpg) repeat;\n  border: 2px solid black;\n\r\n}\n\n\r\ndiv.transbox {\n  margin: 30px;\n  background-color: #ffffff;\n  border: 1px solid black;\nopacity: 0.6;\n\r\n}\n\n\r\ndiv.transbox p {\nmargin: 5%;\nfont-weight: bold;\n  color: #000000;\n\r\n}\n\r\n</style>\n\r\n</head>\n\r\n<body>\n\n\r\n<div class=\"background\">\n<div class=\"transbox\">\n  <p>This is some text that is placed in the transparent box.</p>\n</div>\n\r\n</div>\n\n\r\n</body>\n\r\n</html>```",
                "Example explained": "First, we create a <div> element (class=\"background\") with a background image, and a border.Then we create another <div> (class=\"transbox\") inside the first <div>. The <div class=\"transbox\"> have a background color, and a border - the div is transparent. Inside the transparent <div>, we add some text inside a <p> element."
            }
        },
        "navigationbar": {
            "title": "CSS Navigation Bar",
            "url": "https://www.w3schools.com/css/css_navbar.asp",
            "info": {
                "Demo: Navigation Bars": "",
                "Navigation Bars": "Having easy-to-use navigation is important for any web site.With CSS you can transform boring HTML menus into good-looking navigation bars.",
                "Navigation Bar = List of Links": "A navigation bar needs standard HTML as a base.In our examples we will build the navigation bar from a standard HTML list.A navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect sense:```css\n<ul>\n\r\n \r\n<li><a href=\"default.asp\">Home</a></li>\n\r\n \r\n<li><a href=\"news.asp\">News</a></li>\n\r\n \r\n<li><a href=\"contact.asp\">Contact</a></li>\n\r\n \r\n<li><a href=\"about.asp\">About</a></li>\n\r\n</ul>```Now let's remove the bullets and the margins and padding from the list:```css\nul\r\n{\nlist-style-type: none;\n  \r\nmargin: 0;\n  \r\npadding: 0;\n\r\n}```Example explained:The code in the example above is the standard code used in both vertical, and horizontal navigation bars, which you will learn more about in the next chapters."
            }
        },
        "navbar": {
            "title": "Navbar",
            "url": "https://www.w3schools.com/css/css_navbar.asp",
            "info": {
                "Demo: Navigation Bars": "",
                "Navigation Bars": "Having easy-to-use navigation is important for any web site.With CSS you can transform boring HTML menus into good-looking navigation bars.",
                "Navigation Bar = List of Links": "A navigation bar needs standard HTML as a base.In our examples we will build the navigation bar from a standard HTML list.A navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect sense:```css\n<ul>\n\r\n \r\n<li><a href=\"default.asp\">Home</a></li>\n\r\n \r\n<li><a href=\"news.asp\">News</a></li>\n\r\n \r\n<li><a href=\"contact.asp\">Contact</a></li>\n\r\n \r\n<li><a href=\"about.asp\">About</a></li>\n\r\n</ul>```Now let's remove the bullets and the margins and padding from the list:```css\nul\r\n{\nlist-style-type: none;\n  \r\nmargin: 0;\n  \r\npadding: 0;\n\r\n}```Example explained:The code in the example above is the standard code used in both vertical, and horizontal navigation bars, which you will learn more about in the next chapters."
            }
        },
        "verticalnavbar": {
            "title": "Vertical Navbar",
            "url": "https://www.w3schools.com/css/css_navbar_vertical.asp",
            "info": {
                "Vertical Navigation Bar": "To build a vertical navigation bar, you can style the <a> elements inside the list, in addition to the code from the previous page:```css\nli a\r\n{\n \r\ndisplay: block;\n \r\nwidth: 60px;\n\r\n}```Example explained:You can also set the width of <ul>, and remove the width of <a>, as they will take up the full width available when displayed as block elements. This will produce the same result as our previous example:```css\nul\r\n{\n  \r\nlist-style-type: none;\n  \r\nmargin: 0;\n  \r\npadding: 0;\n  width: 60px;\n\r\n}\r\n\nli\r\na\r\n{\n  \r\ndisplay: block;\n\r\n}```",
                "Vertical Navigation Bar Examples": "Create a basic vertical navigation bar with a gray background color and change the background color of the links when the user moves the mouse over them:```css\nul {\n  list-style-type: none;\n  \r\nmargin: 0;\n  padding: 0;\n  width: \r\n200px;\n  background-color: #f1f1f1;\n}\nli a {\n  display: \r\nblock;\n  color: #000;\n  padding: 8px 16px;\n  text-decoration: none;\n}\n/* \r\nChange the link color on hover */\nli a:hover {\n  \r\nbackground-color: #555;\n  color: white;\n}```Add an \"active\" class to the current link to let the user know which page he/she is on:```css\n.active {\n  background-color: #4CAF50;\n  \r\ncolor: white;\n}```Add text-align:center to <li> or <a> to center the links.Add the border property to <ul> add a border around the navbar. If you also want borders inside the navbar, add a border-bottom to all <li> elements, except for the last one:```css\nul {\n  border: 1px solid #555;\n}\nli {\n  text-align: center;\n  \r\nborder-bottom: 1px solid #555;\n}\nli:last-child {\n  \r\nborder-bottom: none;\n}```Create a full-height, \"sticky\" side navigation:Note: This example might not work properly on mobile devices."
            }
        },
        "horizontalnavbar": {
            "title": "Horizontal Navbar",
            "url": "https://www.w3schools.com/css/css_navbar_horizontal.asp",
            "info": {
                "Horizontal Navigation Bar": "There are two ways to create a horizontal navigation bar. Using inline or floating list items.One way to build a horizontal navigation bar is to specify the <li> elements as inline, in addition to the \"standard\" code from the previous page:```css\nli\r\n{\n \r\ndisplay: inline;\n\r\n}```Example explained:Another way of creating a horizontal navigation bar is to float the <li> elements, and specify a layout for the navigation links:```css\nli\r\n{\nfloat: left;\n\r\n}\n\r\na\r\n{\n \r\ndisplay: block;\n  padding: 8px;\n  background-color: \r\n#dddddd;\n\r\n}```Example explained:Tip: Add the background-color to <ul> instead of each <a> element if you want a full-width background color:```css\nul\r\n{\nbackground-color: #dddddd;\n\r\n}```",
                "Horizontal Navigation Bar Examples": "Create a basic horizontal navigation bar with a dark background color and change the background color of the links when the user moves the mouse over them:```css\nul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  overflow: \r\nhidden;\n  background-color: #333;\n}\nli {\n  \r\nfloat: left;\n}\n\nli a {\n  display: block;\n  \r\ncolor: white;\n  text-align: center;\n  \r\npadding: 14px 16px;\n  text-decoration: none;\n}\n\n/* Change the link color to #111 (black) on hover */\nli a:hover {\n  background-color: \r\n#111;\n}```Add an \"active\" class to the current link to let the user know which page he/she is on:```css\n.active {\n  background-color: #4CAF50;\n}```Right-align links by floating the list items to the right (float:right;):```css\n<ul>\n  <li><a href=\"#home\">Home</a></li>\n  \r\n<li><a href=\"#news\">News</a></li>\n  <li><a href=\"#contact\">Contact</a></li>\n<li style=\"float:right\"><a \r\nclass=\"active\" href=\"#about\">About</a></li>\n</ul>```Add the border-right property to <li> to create link dividers:Make the navigation bar stay at the top or the bottom of the page, even when the user scrolls the page:An example of a gray horizontal navigation bar with a thin gray border:Add position: sticky; to <ul> to create a sticky navbar.A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \"sticks\" in place (like position:fixed).",
                "More Examples": ""
            }
        },
        "dropdowns": {
            "title": "CSS Dropdowns",
            "url": "https://www.w3schools.com/css/css_dropdowns.asp",
            "info": {
                "Demo: Dropdown Examples": "Move the mouse over the examples below:",
                "Basic Dropdown": "Create a dropdown box that appears when the user moves the mouse over an element.```css\n<style>\n.dropdown {\n  position: relative;\n  \r\ndisplay: inline-block;\n}\n.dropdown-content {\n  display: \r\nnone;\n  position: absolute;\n  \r\nbackground-color: #f9f9f9;\n  min-width: 160px;\n  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n  padding: \r\n12px 16px;\n  z-index: 1;\n}\n.dropdown:hover \r\n.dropdown-content {\n  display: block;\n}\n</style>\n<div class=\"dropdown\">\n<span>Mouse over me</span>\n  \r\n<div class=\"dropdown-content\">\n    <p>Hello World!</p>\n  </div>\n</div>```HTML) Use any element to open the dropdown content, e.g. a <span>, or a <button> element.Use a container element (like <div>) to create the dropdown content and add whatever you want inside of it.Wrap a <div> element around the elements to position the dropdown content correctly with CSS.CSS) The .dropdown class uses position:relative, which is needed when we want the dropdown content to be placed right below the dropdown button (using position:absolute).The .dropdown-content class holds the actual dropdown content. It is hidden by default, and will be displayed on hover (see below). Note the min-width is set to 160px. Feel free to change this. Tip: If you want the width of the dropdown content to be as wide as the dropdown button, set the width to 100% (and overflow:auto to enable scroll on small screens).Instead of using a border, we have used the CSS box-shadow property to make the dropdown menu look like a \"card\".The :hover selector is used to show the dropdown menu when the user moves the mouse over the dropdown button.",
                "Dropdown Menu": "Create a dropdown menu that allows the user to choose an option from a list:This example is similar to the previous one, except that we add links inside the dropdown box and style them to fit a styled dropdown button:",
                "Right-aligned Dropdown Content": "If you want the dropdown menu to go from right to left, instead of left to right, add right: 0;```css\n.dropdown-content {\n  right: 0;\n}```",
                "More Examples": ""
            }
        },
        "imagegallery": {
            "title": "CSS Image Gallery",
            "url": "https://www.w3schools.com/css/css_image_gallery.asp",
            "info": {
                "Image Gallery": "The following image gallery is created with CSS:",
                "More Examples": ""
            }
        },
        "imagesprites": {
            "title": "CSS Image Sprites",
            "url": "https://www.w3schools.com/css/css_image_sprites.asp",
            "info": {
                "Image Sprites": "An image sprite is a collection of images put into a single image.A web page with many images can take a long time to load and generates multiple server requests.Using image sprites will reduce the number of server requests and save bandwidth.",
                "Image Sprites - Simple Example": "Instead of using three separate images, we use this single image (\"img\\_navsprites.gif\"):With CSS, we can show just the part of the image we need.In the following example the CSS specifies which part of the \"img\\_navsprites.gif\" image to show:```css\n#home\r\n{\n \r\nwidth: 46px;\nheight: 44px;\n \r\nbackground: url(img_navsprites.gif) 0 0;\n\r\n}```Example explained:This is the easiest way to use image sprites, now we want to expand it by using links and hover effects.",
                "Image Sprites - Create a Navigation List": "We want to use the sprite image (\"img\\_navsprites.gif\") to create a navigation list.We will use an HTML list, because it can be a link and also supports a background image:```css\n#navlist {\n  position: relative;\n}\n\n#navlist li {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  position: absolute;\n  top: 0;\n}\n\r\n#navlist li, #navlist a {\n  height: 44px;\n  display: block;\n}\n\n\r\n#home {\n  left: 0px;\n  width: 46px;\n  background: url('img_navsprites.gif') \r\n0 0;\n}\n\n#prev {\n  left: 63px;\n  width: 43px;\n  background: url('img_navsprites.gif') -47px 0;\n}\n\n#next {\n  left: 129px;\n  width: 43px;\n  background: url('img_navsprites.gif') \r\n-91px 0;\n}```Example explained:Now start to position and style for each specific part:",
                "Image Sprites - Hover Effect": "Now we want to add a hover effect to our navigation list.Our new image (\"img\\_navsprites\\_hover.gif\") contains three navigation images and three images to use for hover effects:Because this is one single image, and not six separate files, there will be no loading delay when a user hovers over the image.We only add three lines of code to add the hover effect:```css\n#home a:hover {\n  background: url('img_navsprites_hover.gif') 0 -45px;\n}\n\n#prev a:hover {\n  background: url('img_navsprites_hover.gif') -47px \r\n-45px;\n}\n\n#next a:hover {\n  background: url('img_navsprites_hover.gif') -91px \r\n-45px;\n}```Example explained:"
            }
        },
        "attrselectors": {
            "title": "CSS Attr Selectors",
            "url": "https://www.w3schools.com/css/css_attribute_selectors.asp",
            "info": {
                "Style HTML Elements With Specific Attributes": "It is possible to style HTML elements that have specific attributes or attribute values.",
                "CSS [attribute] Selector": "The [attribute] selector is used to select elements with a specified attribute.The following example selects all <a> elements with a target attribute:```css\na[target] {\n  background-color: yellow;\n}```",
                "CSS [attribute=\"value\"] Selector": "The [attribute=\"value\"] selector is used to select elements with a specified attribute and value.The following example selects all <a> elements with a target=\"\\_blank\" attribute:```css\na[target=\"_blank\"] { \n  background-color: yellow;\n}```",
                "CSS [attribute~=\"value\"] Selector": "The [attribute~=\"value\"] selector is used to select elements with an attribute value containing a specified word.The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is \"flower\":```css\n[title~=\"flower\"] {\n  border: 5px solid yellow;\n}```The example above will match elements with title=\"flower\", title=\"summer flower\", and title=\"flower new\", but not title=\"my-flower\" or title=\"flowers\".",
                "CSS [attribute|=\"value\"] Selector": "The [attribute|=\"value\"] selector is used to select elements with the specified attribute starting with the specified value.The following example selects all elements with a class attribute value that begins with \"top\":Note: The value has to be a whole word, either alone, like class=\"top\", or followed by a hyphen( - ), like class=\"top-text\"!\u00a0```css\n[class|=\"top\"] {\n  background: yellow;\n}```",
                "CSS [attribute^=\"value\"] Selector": "The [attribute^=\"value\"] selector is used to select elements whose attribute value begins with a specified value.The following example selects all elements with a class attribute value that begins with \"top\":Note: The value does not have to be a whole word!\u00a0```css\n[class^=\"top\"] {\n  background: yellow;\n}```",
                "CSS [attribute$=\"value\"] Selector": "The [attribute$=\"value\"] selector is used to select elements whose attribute value ends with a specified value.The following example selects all elements with a class attribute value that ends with \"test\":Note: The value does not have to be a whole word!\u00a0\u00a0```css\n[class$=\"test\"] {\n  background: yellow;\n}```",
                "CSS [attribute*=\"value\"] Selector": "The [attribute\\*=\"value\"] selector is used to select elements whose attribute value contains a specified value.The following example selects all elements with a class attribute value that contains \"te\":Note: The value does not have to be a whole word!\u00a0\u00a0```css\n[class*=\"te\"] {\n  background: yellow;\n}```",
                "Styling Forms": "The attribute selectors can be useful for styling forms without class or ID:```css\ninput[type=\"text\"]\r\n{\nwidth: 150px;\n \r\ndisplay: block;\n \r\nmargin-bottom: 10px;\n \r\nbackground-color: yellow;\n\r\n}\n\r\ninput[type=\"button\"]\r\n{\nwidth: 120px;\nmargin-left: 35px;\ndisplay: block;\n\r\n}```Tip: Visit our CSS Forms Tutorial for more examples on how to style forms with CSS.",
                "All CSS Attribute Selectors": ""
            }
        },
        "forms": {
            "title": "CSS Forms",
            "url": "https://www.w3schools.com/css/css_form.asp",
            "info": {
                "Styling Input Fields": "Use the width property to determine the width of the input field:```css\ninput\r\n{\nwidth: 100%;\n\r\n}```The example above applies to all <input> elements. If you only want to style a specific input type, you can use attribute selectors:",
                "Padded Inputs": "Use the padding property to add space inside the text field.Tip: When you have many inputs after each other, you might also want to add some margin, to add more space outside of them:```css\ninput[type=text]\r\n{\n  width: 100%;\n  padding: 12px 20px;\n  margin: 8px 0;\n  \r\nbox-sizing: border-box;\n\r\n}```",
                "Bordered Inputs": "Use the border property to change the border size and color, and use the border-radius property to add rounded corners:```css\ninput[type=text]\r\n{\n  border: 2px solid red;\n  \r\nborder-radius: 4px;\n\r\n}```If you only want a bottom border, use the border-bottom property:```css\ninput[type=text]\r\n{\n  border: none;\n  \r\nborder-bottom: 2px solid red;\n\r\n}```",
                "Colored Inputs": "Use the background-color property to add a background color to the input, and the color property to change the text color:```css\ninput[type=text]\r\n{\n  background-color: #3CBC8D;\n  color: white;\n\r\n}```",
                "Focused Inputs": "By default, some browsers will add a blue outline around the input when it gets focus (clicked on). You can remove this behavior by adding outline: none; to the input.Use the :focus selector to do something with the input field when it gets focus:```css\ninput[type=text]:focus\r\n{\nbackground-color: lightblue;\n\r\n}```",
                "Input with icon/image": "If you want an icon inside the input, use the background-image property and position it with the background-position property. Also notice that we add a large left padding to reserve the space of the icon:```css\ninput[type=text]\r\n{\n  background-color: white;\n  background-image: url('searchicon.png');\n  \r\nbackground-position: 10px 10px; \n  background-repeat: \r\nno-repeat;\n  \r\npadding-left: 40px;\n\r\n}```",
                "Animated Search Input": "In this example we use the CSS transition property to animate the width of the search input when it gets focus. You will learn more about the transition property later, in our CSS Transitions chapter.```css\ninput[type=text] {\n  transition: width 0.4s ease-in-out;\n}\ninput[type=text]:focus {\n  \r\nwidth: 100%;\n}```",
                "Styling Textareas": "Tip: Use the resize property to prevent textareas from being resized (disable the \"grabber\" in the bottom right corner):```css\ntextarea\r\n{\n  width: 100%;\n  height: 150px;\n  padding: 12px 20px;\n  \r\nbox-sizing: border-box;\n  border: 2px solid #ccc;\n  \r\nborder-radius: 4px;\n  background-color: #f8f8f8;\n  resize: none;\n\r\n}```",
                "Styling Select Menus": "```css\nselect\r\n{\n  width: 100%;\n  padding: 16px 20px;\n  \r\nborder: none;\n  border-radius: 4px;\n  background-color: #f1f1f1;\n\r\n}```",
                "Styling Input Buttons": "```css\ninput[type=button], input[type=submit], input[type=reset]\r\n{\n  background-color: #4CAF50;\n  border: \r\nnone;\n  color: white;\n  padding: \r\n16px 32px;\n  text-decoration: none;\n  \r\nmargin: 4px 2px;\n  cursor: pointer;\n\r\n}\n/* Tip: use width: 100% for full-width buttons */```For more information about how to style buttons with CSS, read our CSS Buttons Tutorial.",
                "Responsive Form": "Resize the browser window to see the effect. When the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other."
            }
        },
        "counters": {
            "title": "CSS Counters",
            "url": "https://www.w3schools.com/css/css_counters.asp",
            "info": {
                "Automatic Numbering With Counters": "CSS counters are like \"variables\". The variable values can be incremented by CSS rules (which will track how many times they are used).To work with CSS counters we will use the following properties:To use a CSS counter, it must first be created with counter-reset.The following example creates a counter for the page (in the body selector), then increments the counter value for each <h2> element and adds \"Section <value of the counter>:\" to the beginning of each <h2> element:```css\nbody {\n  counter-reset: section;\n}\nh2::before {\n  counter-increment: section;\n  content: \"Section \" counter(section) \": \";\n}```",
                "Nesting Counters": "The following example creates one counter for the page (section) and one counter for each <h1> element (subsection). The \"section\" counter will be counted for each <h1> element with \"Section <value of the section counter>.\", and the \"subsection\" counter will be counted for each <h2> element with \"<value of the section counter>.<value of the subsection counter>\":```css\nbody {\n  counter-reset: section;\n}\nh1 {\n  \r\ncounter-reset: subsection;\n}\nh1::before {\n  counter-increment: \r\nsection;\n  content: \"Section \" counter(section) \". \";\n\r\n}\nh2::before {\n  \r\ncounter-increment: subsection;\n  content: \r\ncounter(section) \".\" counter(subsection) \" \";\n}```A counter can also be useful to make outlined lists because a new instance of a counter is automatically created in child elements. Here we use the counters() function to insert a string between different levels of nested counters:",
                "\u00a0CSS Counter Properties": ""
            }
        },
        "websitelayout": {
            "title": "CSS Website Layout",
            "url": "https://www.w3schools.com/css/css_website_layout.asp",
            "info": {
                "Website Layout": "A website is often divided into headers, menus, content and a footer:There are tons of different layout designs to choose from. However, the structure above, is one of the most common, and we will take a closer look at it in this tutorial.",
                "Header": "A header is usually located at the top of the website (or right below a top navigation menu). It often contains a logo or the website name:```css\n.header {\n  background-color: #F1F1F1;\n  text-align:  center;\n  padding: 20px;\n}```",
                "Navigation Bar": "A navigation bar contains a list of links to help visitors navigating through your website:```css\n/* The navbar container */\n.topnav {\n  overflow: hidden;\n   background-color: #333;\n}\n/* Navbar links */\n.topnav a {\n  float:  left;\n  display: block;\n  color:  #f2f2f2;\n  text-align: center;\n   padding: 14px 16px;\n  text-decoration: none;\n}\n /* Links - change color on hover */\n.topnav a:hover {\n   background-color: #ddd;\n  color: black;\n}```",
                "Content": "The layout in this section, often depends on the target users. The most common layout is one (or combining them) of the following:We will create a 3-column layout, and change it to a 1-column layout on smaller screens:```css\n/* Create three equal columns that floats next to each other */\n.column {\n   float: left;\n  width: 33.33%;\n}\n/* Clear floats after the  columns */\n.row:after {\n  content: \"\";\n   display: table;\n  clear: both;\n}\n/* Responsive  layout - makes the three columns stack on top of each other instead of next  to each other on smaller screens (600px wide or less) */\n@media screen and (max-width:  600px) {\n  .column  {\n    width: 100%;\n  }\n}```",
                "Unequal Columns": "The main content is the biggest and the most important part of your site.It is common with unequal column widths, so that most of the space is reserved for the main content. The side content (if any) is often used as an alternative navigation or to specify information relevant to the main content. Change the widths as you like, only remember that it should add up to 100% in total:```css\n.column {\n  float: left;\n}\n/* Left and right column */\n .column.side {\n  width: 25%;\n}\n/* Middle column */\n.column.middle  {\n  width: 50%;\n}\n/* Responsive layout - makes  the three columns stack on top of each other instead of next to each other */\n @media screen and (max-width: 600px) {\n  .column.side, .column.middle  {\n    width: 100%;\n  }\n}```",
                "Footer": "The footer is placed at the bottom of your page. It often contains information like copyright and contact info:```css\n.footer {\n  background-color: #F1F1F1;\n  text-align:  center;\n  padding: 10px;\n}```",
                "Responsive Website Layout": "By using some of the CSS code above, we have created a responsive website layout, which varies between two columns and full-width columns depending on screen width:Try it Yourself \u00bb"
            }
        },
        "units": {
            "title": "CSS Units",
            "url": "https://www.w3schools.com/css/css_units.asp",
            "info": {
                "CSS Units": "CSS has several different units for expressing a length.Many CSS properties take \"length\" values, such as width, margin, padding, font-size, etc.Length is a number followed by a length unit, such as 10px, 2em, etc.A whitespace cannot appear between the number and the unit. However, if the value is 0, the unit can be omitted.For some CSS properties, negative lengths are allowed.There are two types of length units: absolute and relative.",
                "Absolute Lengths": "The absolute length units are fixed and a length expressed in any of these will appear as exactly that size.Absolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout.\\* Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.",
                "Relative Lengths": "Relative length units specify a length relative to another length property. Relative length units scales better between different rendering mediums.",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the length unit.Note: Internet Explorer 9 supports vmin with the non-standard name: vm."
            }
        },
        "specificity": {
            "title": "CSS Specificity",
            "url": "https://www.w3schools.com/css/css_specificity.asp",
            "info": {
                "What is Specificity?": "If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.Think of specificity as a score/rank that determines which style declarations are ultimately applied to an element.The universal selector (\\*) has low specificity, while ID selectors are highly specific!\u00a0",
                "Specificity Hierarchy ": "Every selector has its place in the specificity hierarchy. There are four categories which define the specificity level of a selector:Inline styles - An inline style is attached directly to the element to be styled. Example: <h1 style=\"color: #ffffff;\">.IDs - An ID is a unique identifier for the page elements, such as #navbar.Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus etc.Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.",
                "How to Calculate Specificity?": "Memorize how to calculate specificity!Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element.Consider these three code fragments:```css\nA: h1\nB: #content h1\nC: <div id=\"content\"><h1 style=\"color: #ffffff\">Heading</h1></div>```The specificity of A is 1 (one element)The specificity of B is 101 (one ID reference and one element)The specificity of C is 1000 (inline styling)Since 1 < 101 < 1000, the third rule (C) has a greater level of specificity, and therefore will be applied.",
                "Specificity Rules": "Equal specificity: the latest rule counts - If the same rule is written twice into the external style sheet, then the lower rule in the style sheet is closer to the element to be styled, and therefore will be applied:```css\nh1 {background-color: yellow;}\n\r\nh1 {background-color: red;}```the latter rule is always applied.ID selectors have a higher specificity than attribute selectors - Look at the following three code lines:```css\ndiv#a {background-color: green;}\n#a {background-color: yellow;}\ndiv[id=a] {background-color: blue;}```the first rule is more specific than the other two, and will be applied.Contextual selectors are more specific than a single element selector - The embedded style sheet is closer to the element to be styled. So in the following situation```css\nFrom external CSS file:\n#content h1 {background-color: red;}\n\r\nIn HTML file:\n<style>\n#content h1 {\n  background-color: \r\nyellow;\n}\n</style>```the latter rule will be applied.A class selector beats any number of element selectors - a class selector such as .intro beats h1, p, div, etc:The universal selector and inherited values have a specificity of 0 - \\*, body \\* and similar have a zero specificity. Inherited values also have a specificity of 0."
            }
        },
        "roundedcorners": {
            "title": "CSS Rounded Corners",
            "url": "https://www.w3schools.com/css/css3_borders.asp",
            "info": {
                "CSS border-radius Property": "The CSS border-radius property defines the radius of an element's corners.Tip: This property allows you to add rounded corners to elements!Here are three examples:1. Rounded corners for an element with a specified background color:Rounded corners!2. Rounded corners for an element with a border:Rounded corners!3. Rounded corners for an element with a background image:Rounded corners!Here is the code:```css\n#rcorners1 {\n  border-radius: 25px;\n  background: #73AD21;\n  padding: 20px; \n  width: 200px;\n  height: 150px; \n}\n#rcorners2 {\n  border-radius: 25px;\n  border: 2px solid #73AD21;\n  padding: 20px; \n  width: 200px;\n  height: 150px; \n}\n#rcorners3 {\n  border-radius: 25px;\n  background: url(paper.gif);\n  background-position: left top;\n  background-repeat: \r\nrepeat;\n  padding: 20px; \n  width: \r\n200px;\n  height: 150px; \n}```",
                "CSS border-radius - Specify Each Corner": "The border-radius property can have from one to four values. Here are the rules:Four values - border-radius: 15px 50px 30px 5px; (first value applies to top-left corner, second value applies to top-right corner, third value applies to bottom-right corner, and fourth value applies to bottom-left corner):\u00a0Three values - border-radius: 15px 50px 30px; (first value applies to top-left corner, second value applies to top-right and bottom-left corners, and third value applies to bottom-right corner):Two values - border-radius: 15px 50px; (first value applies to top-left and bottom-right corners, and the second value applies to top-right and bottom-left corners):One value - border-radius: 15px; (the value applies to all four corners, which are rounded equally:Here is the code:You could also create elliptical corners:",
                "CSS Rounded Corners Properties": ""
            }
        },
        "borderimages": {
            "title": "CSS Border Images",
            "url": "https://www.w3schools.com/css/css3_border_images.asp",
            "info": {
                "CSS border-image Property": "The CSS border-image property allows you to specify an image to be used instead of the normal border around an element.The property has three parts:We will use the following image (called \"border.png\"):The border-image property takes the image and slices it into nine sections, like a tic-tac-toe board. It then places the corners at the corners, and the middle sections are repeated or stretched as you specify.Note: For border-image to work, the element also needs the border property set!Here, the middle sections of the image are repeated to create the border:An image as a border!Here is the code:```css\n#borderimg\r\n{\nborder: 10px solid transparent;\n  padding: 15px;\n  border-image: url(border.png) \r\n30 round;\n}```Here, the middle sections of the image are stretched to create the border:An image as a border!Here is the code:```css\n#borderimg\r\n{\n   border: 10px solid transparent;\n  \r\npadding: 15px;\n  border-image: url(border.png) \r\n30 stretch;\n}```",
                "CSS border-image - Different Slice Values": "Different slice values completely changes the look of the border:Example 1:border-image: url(border.png) 50 round;Example 2:border-image: url(border.png) 20% round;Example 3:border-image: url(border.png) 30% round;Here is the code:```css\n#borderimg1 {\n  border: 10px solid transparent;\n  \r\npadding: 15px;\n  border-image: url(border.png) \r\n50 round;\n}\n#borderimg2 {\n  \r\nborder: 10px solid transparent;\n  padding: 15px;\n  \r\nborder-image: url(border.png) 20% round;\n}\n\r\n#borderimg3 {\n  border: 10px solid transparent;\n  \r\npadding: 15px;\n  border-image: url(border.png) \r\n30% round;\n}```",
                "CSS Border Image Properties": ""
            }
        },
        "gradients": {
            "title": "CSS Gradients",
            "url": "https://www.w3schools.com/css/css3_gradients.asp",
            "info": {
                "CSS Linear Gradients": "To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.Linear Gradient - Top to Bottom (this is default)The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow:```css\n#grad {\n  background-image: linear-gradient(red, yellow);\n}```Linear Gradient - Left to RightThe following example shows a linear gradient that starts from the left. It starts red, transitioning to yellow:```css\n#grad {\n  background-image: linear-gradient(to right, red , yellow);\n}```Linear Gradient - DiagonalYou can make a gradient diagonally by specifying both the horizontal and vertical starting positions.The following example shows a linear gradient that starts at top left (and goes to bottom right). It starts red, transitioning to yellow:",
                "Using Angles": "If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.).The angle is specified as an angle between a horizontal line and the gradient line.The following example shows how to use angles on linear gradients:```css\n#grad {\n  background-image: linear-gradient(-90deg, red, yellow);\n\r\n}```",
                "Using Multiple Color Stops": "The following example shows a linear gradient (from top to bottom) with multiple color stops:```css\n#grad {\n  background-image: linear-gradient(red, yellow, green);\n}```The following example shows how to create a linear gradient (from left to right) with the color of the rainbow and some text:```css\n#grad {\n  background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet); \n}```",
                "Using Transparency": "CSS gradients also support transparency, which can be used to create fading effects.To add transparency, we use the rgba() function to define the color stops. The last parameter in the rgba() function can be a value from 0 to 1, and it defines the transparency of the color: 0 indicates full transparency, 1 indicates full color (no transparency).The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red:```css\n#grad {\n  background-image: linear-gradient(to right, rgba(255,0,0,0), \r\nrgba(255,0,0,1));\n}```",
                "Repeating a linear-gradient": "The repeating-linear-gradient() function is used to repeat linear gradients:```css\n#grad {\n  background-image: \r\nrepeating-linear-gradient(red, yellow 10%, green 20%);\n}```"
            }
        },
        "lineargradients": {
            "title": "Linear Gradients",
            "url": "https://www.w3schools.com/css/css3_gradients.asp",
            "info": {
                "CSS Linear Gradients": "To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.Linear Gradient - Top to Bottom (this is default)The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow:```css\n#grad {\n  background-image: linear-gradient(red, yellow);\n}```Linear Gradient - Left to RightThe following example shows a linear gradient that starts from the left. It starts red, transitioning to yellow:```css\n#grad {\n  background-image: linear-gradient(to right, red , yellow);\n}```Linear Gradient - DiagonalYou can make a gradient diagonally by specifying both the horizontal and vertical starting positions.The following example shows a linear gradient that starts at top left (and goes to bottom right). It starts red, transitioning to yellow:",
                "Using Angles": "If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.).The angle is specified as an angle between a horizontal line and the gradient line.The following example shows how to use angles on linear gradients:```css\n#grad {\n  background-image: linear-gradient(-90deg, red, yellow);\n\r\n}```",
                "Using Multiple Color Stops": "The following example shows a linear gradient (from top to bottom) with multiple color stops:```css\n#grad {\n  background-image: linear-gradient(red, yellow, green);\n}```The following example shows how to create a linear gradient (from left to right) with the color of the rainbow and some text:```css\n#grad {\n  background-image: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet); \n}```",
                "Using Transparency": "CSS gradients also support transparency, which can be used to create fading effects.To add transparency, we use the rgba() function to define the color stops. The last parameter in the rgba() function can be a value from 0 to 1, and it defines the transparency of the color: 0 indicates full transparency, 1 indicates full color (no transparency).The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red:```css\n#grad {\n  background-image: linear-gradient(to right, rgba(255,0,0,0), \r\nrgba(255,0,0,1));\n}```",
                "Repeating a linear-gradient": "The repeating-linear-gradient() function is used to repeat linear gradients:```css\n#grad {\n  background-image: \r\nrepeating-linear-gradient(red, yellow 10%, green 20%);\n}```"
            }
        },
        "radialgradients": {
            "title": "Radial Gradients",
            "url": "https://www.w3schools.com/css/css3_gradients_radial.asp",
            "info": {
                "CSS Radial Gradients": "A radial gradient is defined by its center.To create a radial gradient you must also define at least two color stops.By default, shape is ellipse, size is farthest-corner, and position is center.Radial Gradient - Evenly Spaced Color Stops (this is default)The following example shows a radial gradient with evenly spaced color stops:```css\n#grad {\n  background-image: radial-gradient(red, yellow, green);\n}```Radial Gradient - Differently Spaced Color StopsThe following example shows a radial gradient with differently spaced color stops:```css\n#grad {\n  background-image: radial-gradient(red 5%, yellow 15%, green 60%);\n}```",
                "Set Shape": "The shape parameter defines the shape. It can take the value circle or ellipse. The default value is ellipse.The following example shows a radial gradient with the shape of a circle:```css\n#grad {\n  background-image: radial-gradient(circle, red, yellow, green);\n\r\n}```",
                "Use of Different Size Keywords": "The size parameter defines the size of the gradient. It can take four values:```css\n#grad1 {\n  background-image: radial-gradient(closest-side at 60% 55%, red, yellow, \r\nblack);\n}\n\n#grad2 {\n    background-image: radial-gradient(farthest-side at 60% \r\n55%, red, yellow, black);\n}```",
                "Repeating a radial-gradient": "The repeating-radial-gradient() function is used to repeat radial gradients:```css\n#grad {\n  background-image: \r\nrepeating-radial-gradient(red, yellow 10%, green 15%);\n}```",
                "CSS Gradient Properties": "The following table lists the CSS gradient properties:"
            }
        },
        "shadows": {
            "title": "CSS Shadows",
            "url": "https://www.w3schools.com/css/css3_shadows.asp",
            "info": {
                "CSS Shadow Effects": "With CSS you can add shadow to text and to elements.In these chapters you will learn about the following properties:",
                "CSS Text Shadow": "The CSS text-shadow property applies shadow to text.In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):",
                "Text shadow effect!": "```css\nh1\r\n{\n  color: white;\ntext-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;\n}```You can also use the text-shadow property to create a plain border around some text (without shadows):",
                "Multiple Shadows": "To add more than one shadow to the text, you can add a comma-separated list of shadows. The following example shows a red and blue neon glow shadow:",
                "Border around text!": "```css\nh1\r\n{\n  color: yellow;\n  text-shadow: -1px 0 black, 0 1px   black, 1px 0 black, 0 -1px black;\n}```"
            }
        },
        "shadoweffects": {
            "title": "Shadow Effects",
            "url": "https://www.w3schools.com/css/css3_shadows.asp",
            "info": {
                "CSS Shadow Effects": "With CSS you can add shadow to text and to elements.In these chapters you will learn about the following properties:",
                "CSS Text Shadow": "The CSS text-shadow property applies shadow to text.In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):",
                "Text shadow effect!": "```css\nh1\r\n{\n  color: white;\ntext-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;\n}```You can also use the text-shadow property to create a plain border around some text (without shadows):",
                "Multiple Shadows": "To add more than one shadow to the text, you can add a comma-separated list of shadows. The following example shows a red and blue neon glow shadow:",
                "Border around text!": "```css\nh1\r\n{\n  color: yellow;\n  text-shadow: -1px 0 black, 0 1px   black, 1px 0 black, 0 -1px black;\n}```"
            }
        },
        "boxshadow": {
            "title": "Box Shadow",
            "url": "https://www.w3schools.com/css/css3_shadows_box.asp",
            "info": {
                "CSS box-shadow Property": "The CSS box-shadow property applies shadow to elements.In its simplest use, you only specify the horizontal shadow and the vertical shadow:```css\ndiv\r\n{\nbox-shadow: 10px 10px;\n\r\n}```Next, add a color to the shadow:```css\ndiv\r\n{\nbox-shadow: 10px 10px grey;\n\r\n}```Next, add a blur effect to the shadow:```css\ndiv\r\n{\nbox-shadow: 10px 10px 5px grey;\n\r\n}```",
                "Cards": "You can also use the box-shadow property to create paper-like cards:```css\ndiv.card\r\n{\nwidth: 250px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, \r\n0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n  text-align: \r\ncenter;\n\r\n}```",
                "CSS Shadow Properties": "The following table lists the CSS shadow properties:"
            }
        },
        "texteffects": {
            "title": "CSS Text Effects",
            "url": "https://www.w3schools.com/css/css3_text_effects.asp",
            "info": {
                "CSS Text Overflow, Word Wrap, Line Breaking \r\nRules, and Writing Modes": "In this chapter you will learn about the following properties:",
                "CSS Text Overflow": "The CSS text-overflow property specifies how overflowed content that is not displayed should be signaled to the user.It can be clipped:This is some long text that will not fit in the boxor it can be rendered as an ellipsis (...):This is some long text that will not fit in the boxThe CSS code is as follows:```css\np.test1 {\n  \r\nwhite-space: nowrap; \n  width: 200px; \n  border: 1px solid #000000;\n  \r\noverflow: hidden;\n  \r\ntext-overflow: clip; \n}\np.test2 {\n  white-space: nowrap; \n  width: 200px; \n  border: 1px solid #000000;\n  \r\noverflow: hidden;\n  \r\ntext-overflow: ellipsis; \n}```The following example shows how you can display the overflowed content when hovering over the element:```css\ndiv.test:hover {\n  overflow: visible;\n}```",
                "CSS Word Wrapping": "The CSS word-wrap property allows long words to be able to be broken and wrap onto the next line.\u00a0If a word is too long to fit within an area, it expands outside: This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.The word-wrap property allows you to force the text to wrap - even if it means splitting it in the middle of a word: This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.The CSS code is as follows:```css\np {\n  word-wrap: break-word;\n}```",
                "CSS Word Breaking": "The CSS word-break property specifies line breaking rules.This paragraph contains some text. This line will-break-at-hyphens.This paragraph contains some text. The lines will break at any character.The CSS code is as follows:```css\np.test1 {\n  word-break: \r\nkeep-all;\n}\np.test2 {\n  word-break: \r\nbreak-all;\n}```",
                "CSS Writing Mode": "The CSS writing-mode property specifies whether lines of text are laid out horizontally or vertically.Some text with a span element with a vertical-rl writing-mode.The following example shows some different writing modes:```css\np.test1 {\n  writing-mode: horizontal-tb; \n}\nspan.test2 {\n  writing-mode: vertical-rl; \n}\np.test2 {\n  writing-mode:  vertical-rl; \n}```",
                "CSS Text Effect Properties": "The following table lists the CSS text effect properties:"
            }
        },
        "webfonts": {
            "title": "CSS Web Fonts",
            "url": "https://www.w3schools.com/css/css3_fonts.asp",
            "info": {
                "The CSS @font-face Rule": "Web fonts allow Web designers to use fonts that are not installed on the user's computer.When you have found/bought the font you wish to use, just include the font file on your web server, and it will be automatically downloaded to the user when needed.Your \"own\" fonts are defined within the CSS @font-face rule.",
                "Different Font Formats": "TrueType Fonts (TTF)TrueType is a font standard developed in the late 1980s, by Apple and Microsoft. TrueType is the most common font format for both the Mac OS and Microsoft Windows operating systems.OpenType Fonts (OTF)OpenType is a format for scalable computer fonts. It was built on TrueType, and is a registered trademark of Microsoft. OpenType fonts are used commonly today on the major computer platforms.The Web Open Font Format (WOFF)WOFF is a font format for use in web pages. It was developed in 2009, and is now a W3C Recommendation. WOFF is essentially OpenType or TrueType with compression and additional metadata. The goal is to support font distribution from a server to a client over a network with bandwidth constraints.The Web Open Font Format (WOFF 2.0)TrueType/OpenType font that provides better compression than WOFF 1.0.SVG Fonts/ShapesSVG fonts allow SVG to be used as glyphs when displaying text. The SVG 1.1 specification define a font module that allows the creation of fonts within an SVG document. You can also apply CSS to SVG documents, and the @font-face rule can be applied to text in SVG documents.Embedded OpenType Fonts (EOT)EOT fonts are a compact form of OpenType fonts designed by Microsoft for use as embedded fonts on web pages.",
                "Browser Support for Font Formats": "The numbers in the table specifies the first browser version that fully supports the font format.\\*IE: The font format only works when set to be \"installable\".\\*Firefox: Not supported by default, but can be enabled (need to set a flag to \"true\" to use WOFF2).",
                "Using The Font You Want": "In the @font-face rule; first define a name for the font (e.g. myFirstFont) and then point to the font file.To use the font for an HTML element, refer to the name of the font (myFirstFont) through the font-family property:```css\n@font-face\r\n{\n \r\nfont-family: myFirstFont;\n \r\nsrc: url(sansation_light.woff);\n\r\n}\n\n\r\ndiv\r\n{\n \r\nfont-family: myFirstFont;\n\r\n}```",
                "Using Bold Text": "You must add another @font-face rule containing descriptors for bold text:```css\n@font-face\r\n{\nfont-family: myFirstFont;\nsrc: url(sansation_bold.woff);\n \r\nfont-weight: bold;\n\r\n}```The file \"sansation\\_bold.woff\" is another font file, that contains the bold characters for the Sansation font.Browsers will use this whenever a piece of text with the font-family \"myFirstFont\" should render as bold.This way you can have many @font-face rules for the same font.",
                "CSS Font Descriptors": "The following table lists all the font descriptors that can be defined inside the @font-face rule:"
            }
        },
        "2dtransforms": {
            "title": "CSS 2D Transforms",
            "url": "https://www.w3schools.com/css/css3_2dtransforms.asp",
            "info": {
                "CSS 2D Transforms": "CSS transforms allow you to move, rotate, scale, and skew elements.Mouse over the element below to see a 2D transformation:In this chapter you will learn about the following CSS property:",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the property.",
                "CSS 2D Transforms Methods ": "With the CSS transform property you can use the following 2D transformation methods:",
                "The translate() Method": "The translate() method moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).The following example moves the <div> element 50 pixels to the right, and 100 pixels down from its current position:```css\ndiv\r\n{\n \r\ntransform: translate(50px, 100px);\n\r\n}```",
                "The rotate() Method": "The rotate() method rotates an element clockwise or counter-clockwise according to a given degree.The following example rotates the <div> element clockwise with 20 degrees:```css\ndiv\r\n{\ntransform: rotate(20deg);\n\r\n}```Using negative values will rotate the element counter-clockwise.The following example rotates the <div> element counter-clockwise with 20 degrees:```css\ndiv\r\n{\n \r\ntransform: rotate(-20deg);\n\r\n}```",
                "The scale() Method": "The scale() method increases or decreases the size of an element (according to the parameters given for the width and height).The following example increases the <div> element to be two times of its original width, and three times of its original height:\u00a0```css\ndiv\r\n{\n \r\ntransform: scale(2, 3);\n\r\n}```The following example decreases the <div> element to be half of its original width and height:\u00a0```css\ndiv\r\n{\n \r\ntransform: scale(0.5, 0.5);\n\r\n}```",
                "The scaleX() Method": "The scaleX() method increases or decreases the width of an element.The following example increases the <div> element to be two times of its original width:\u00a0```css\ndiv\r\n{\n \r\ntransform: scaleX(2);\n\r\n}```The following example decreases the <div> element to be half of its original width:\u00a0```css\ndiv\r\n{\n \r\ntransform: scaleX(0.5);\n\r\n}```",
                "The scaleY() Method": "The scaleY() method increases or decreases the height of an element.The following example increases the <div> element to be three times of its original height:\u00a0```css\ndiv\r\n{\n \r\ntransform: scaleY(3);\n\r\n}```The following example decreases the <div> element to be half of its original height:\u00a0```css\ndiv\r\n{\n \r\ntransform: scaleY(0.5);\n\r\n}```",
                "The skewX() Method": "The skewX() method skews an element along the X-axis by the given angle.The following example skews the <div> element 20 degrees along the X-axis:```css\ndiv\r\n{\n \r\ntransform: skewX(20deg);\n\r\n}```",
                "The skewY() Method": "The skewY() method skews an element along the Y-axis by the given angle.The following example skews the <div> element 20 degrees along the Y-axis:```css\ndiv\r\n{\n \r\ntransform: skewY(20deg);\n\r\n}```",
                "The skew() Method": "The skew() method skews an element along the X and Y-axis by the given angles.The following example skews the <div> element 20 degrees along the X-axis, and 10 degrees along the Y-axis:```css\ndiv\r\n{\n \r\ntransform: skew(20deg, 10deg);\n\r\n}```If the second parameter is not specified, it has a zero value. So, the following example skews the <div> element 20 degrees along the X-axis:```css\ndiv\r\n{\n \r\ntransform: skew(20deg);\n\r\n}```",
                "The matrix() Method": "The matrix() method combines all the 2D transform methods into one.The matrix() method take six parameters, containing mathematic functions, which allows you to rotate, scale, move (translate), and skew elements.The parameters are as follow: matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())```css\ndiv\r\n{\n  \r\ntransform: matrix(1, -0.3, 0, 1, 0, 0);\n}```",
                "CSS Transform Properties": "The following table lists all the 2D transform properties:",
                "CSS 2D Transform Methods": ""
            }
        },
        "3dtransforms": {
            "title": "CSS 3D Transforms",
            "url": "https://www.w3schools.com/css/css3_3dtransforms.asp",
            "info": {
                "CSS 3D Transforms": "CSS also supports 3D transformations.Mouse over the elements below to see the difference between a 2D and a 3D transformation:In this chapter you will learn about the following CSS property:",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the property.",
                "CSS 3D Transforms Methods ": "With the CSS transform property you can use the following 3D transformation methods:",
                "The rotateX() Method": "The rotateX() method rotates an element around its X-axis at a given degree:```css\n#myDiv\r\n{\n \r\ntransform: rotateX(150deg);\n\r\n}```",
                "The rotateY() Method": "The rotateY() method rotates an element around its Y-axis at a given degree:```css\n#myDiv\r\n{\n \r\ntransform: rotateY(130deg);\n\r\n}```",
                "The rotateZ() Method": "The rotateZ() method rotates an element around its Z-axis at a given degree:```css\n#myDiv\r\n{\n \r\ntransform: rotateZ(90deg);\n\r\n}```",
                "CSS Transform Properties": "The following table lists all the 3D transform properties:",
                "CSS 3D Transform Methods": ""
            }
        },
        "transitions": {
            "title": "CSS Transitions",
            "url": "https://www.w3schools.com/css/css3_transitions.asp",
            "info": {
                "CSS Transitions": "CSS transitions allows you to change property values smoothly, over a given duration.\u00a0Mouse over the element below to see a CSS transition effect:In this chapter you will learn about the following properties:",
                "Browser Support for Transitions": "The numbers in the table specify the first browser version that fully supports the property.",
                "How to Use CSS Transitions?": "To create a transition effect, you must specify two things:Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.The following example shows a 100px \\* 100px red <div> element. The <div> element has also specified a transition effect for the width property, with a duration of 2 seconds:```css\ndiv\r\n{\n  width: 100px;\n  height: 100px;\n  \r\nbackground: red;\n  transition: width 2s;\n\r\n}```The transition effect will start when the specified CSS property (width) changes value.Now, let us specify a new value for the width property when a user mouses over the <div> element:```css\ndiv:hover\r\n{\nwidth: 300px;\n\r\n}```Notice that when the cursor mouses out of the element, it will gradually change back to its original style.",
                "Change Several Property Values": "The following example adds a transition effect for both the width and height property, with a duration of 2 seconds for the width and 4 seconds for the height:```css\ndiv\r\n{\ntransition: width 2s, height 4s;\n\r\n}```",
                "Specify the Speed Curve of the Transition": "The transition-timing-function property specifies the speed curve of the transition effect.The transition-timing-function property can have the following values:The following example shows the some of the different speed curves that can be used:```css\n#div1 {transition-timing-function: linear;}\n#div2 \r\n{transition-timing-function: ease;}\n#div3 {transition-timing-function: \r\nease-in;}\n#div4 {transition-timing-function: ease-out;}\n#div5 \r\n{transition-timing-function: ease-in-out;}```",
                "Delay the Transition Effect": "The transition-delay property specifies a delay (in seconds) for the transition effect.The following example has a 1 second delay before starting:```css\ndiv {\n  \r\ntransition-delay: 1s;\n}```",
                "Transition + Transformation": "The following example adds a transition effect to the transformation:```css\ndiv {\n  transition: \r\nwidth 2s, height 2s, transform 2s;\n}```",
                "More Transition Examples": "The CSS transition properties can be specified one by one, like this:```css\ndiv\r\n{\n  transition-property: width;\n \r\ntransition-duration: 2s;\n \r\ntransition-timing-function: linear;\ntransition-delay: 1s;\n\r\n}```or by using the shorthand property transition:```css\ndiv\r\n{\n \r\ntransition: width 2s linear 1s;\n\r\n}```",
                "CSS Transition Properties": "The following table lists all the CSS transition properties:"
            }
        },
        "animations": {
            "title": "CSS Animations",
            "url": "https://www.w3schools.com/css/css3_animations.asp",
            "info": {
                "CSS Animations": "CSS allows animation of HTML elements without using JavaScript or Flash!In this chapter you will learn about the following properties:",
                "Browser Support for Animations": "The numbers in the table specify the first browser version that fully supports the property.",
                "What are CSS Animations?": "An animation lets an element gradually change from one style to another.You can change as many CSS properties you want, as many times you want.To use CSS animation, you must first specify some keyframes for the animation.Keyframes hold what styles the element will have at certain times.",
                "The @keyframes Rule": "When you specify CSS styles inside the @keyframesrule, the animation will gradually change from the current style to the new style at certain times.To get an animation to work, you must bind the animation to an element.The following example binds the \"example\" animation to the <div> element. The animation will last for 4 seconds, and it will gradually change the background-color of the <div> element from \"red\" to \"yellow\":```css\n/* The animation code */\n\r\n@keyframes example {\nfrom {background-color: red;}\n \r\nto {background-color: yellow;}\n\r\n}\n/* The element to apply the animation to */\n\r\ndiv {\n  width: 100px;\n  height: 100px;\n  \r\nbackground-color: red;\n \r\nanimation-name: example;\n  animation-duration: 4s;\n\r\n}```Note: The animation-duration property defines how long time an animation should take to complete. If the animation-duration property is not specified, no animation will occur, because the default value is 0s (0 seconds).\u00a0In the example above we have specified when the style will change by using the keywords \"from\" and \"to\" (which represents 0% (start) and 100% (complete)).It is also possible to use percent. By using percent, you can add as many style changes as you like.The following example will change the background-color of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:The following example will change both the background-color and the position of the <div> element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:",
                "Delay an Animation": "The animation-delay property specifies a delay for the start of an animation.The following example has a 2 seconds delay before starting the animation:```css\ndiv {\n  \r\nwidth: 100px;\n  height: 100px;\n  \r\nposition: relative;\n  background-color: red;\n  animation-name: example;\n  \r\nanimation-duration: 4s;\n  animation-delay: 2s;\n}```Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for N seconds.In the following example, the animation will start as if it had already been playing for 2 seconds:```css\ndiv {\n  \r\nwidth: 100px;\n  height: 100px;\n  \r\nposition: relative;\n  background-color: red;\n  \r\nanimation-name: example;\n  \r\nanimation-duration: 4s;\n  animation-delay: -2s;\n}```",
                "Set How Many Times an Animation Should Run": "The animation-iteration-count property specifies the number of times an animation should run.The following example will run the animation 3 times before it stops:```css\ndiv {\n  width: 100px;\n  height: 100px;\n  position: relative;\n  background-color: red;\n  animation-name: example;\n  animation-duration: 4s;\n  animation-iteration-count: 3;\n}```The following example uses the value \"infinite\" to make the animation continue for ever:```css\ndiv {\n  \r\nwidth: 100px;\n  height: 100px;\n  \r\nposition: relative;\n  background-color: red;\n  animation-name: example;\n  animation-duration: 4s;\n  animation-iteration-count: \r\ninfinite;\n}```",
                "Run Animation in Reverse Direction or Alternate Cycles": "The animation-direction property specifies whether an animation should be played forwards, backwards or in alternate cycles.The animation-direction property can have the following values:The following example will run the animation in reverse direction (backwards):```css\ndiv {\n  \r\nwidth: 100px;\n  height: 100px;\n  \r\nposition: relative;\n  background-color: red;\n  \r\nanimation-name: example;\n  \r\nanimation-duration: 4s;\n  animation-direction: \r\nreverse;\n}```The following example uses the value \"alternate\" to make the animation run forwards first, then backwards:```css\ndiv {\n  \r\nwidth: 100px;\n  height: 100px;\n  \r\nposition: relative;\n  background-color: red;\n  animation-name: example;\n  animation-duration: 4s;\n  animation-iteration-count: 2;\n  animation-direction: \r\nalternate;\n}```The following example uses the value \"alternate-reverse\" to make the animation run backwards first, then forwards:",
                "Specify the Speed Curve of the Animation": "The animation-timing-function property specifies the speed curve of the animation.The animation-timing-function property can have the following values:The following example shows the some of the different speed curves that can be used:```css\n#div1 {animation-timing-function: linear;}\n#div2 \r\n{animation-timing-function: ease;}\n#div3 {animation-timing-function: \r\nease-in;}\n#div4 {animation-timing-function: ease-out;}\n#div5 \r\n{animation-timing-function: ease-in-out;}```",
                "Specify the fill-mode For an Animation": "CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior.The animation-fill-mode property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both).The animation-fill-mode property can have the following values:The following example lets the <div> element retain the style values from the last keyframe when the animation ends:```css\ndiv {\n  width: 100px;\n  height: 100px;\n  background: red;\n  position: relative;\n  animation-name: example;\n  animation-duration: 3s;\n  animation-fill-mode: forwards;\n}```The following example lets the <div> element get the style values set by the first keyframe before the animation starts (during the animation-delay period):The following example lets the <div> element get the style values set by the first keyframe before the animation starts, and retain the style values from the last keyframe when the animation ends:",
                "Animation Shorthand Property": "The example below uses six of the animation properties:```css\ndiv\r\n{\n \r\nanimation-name: example;\n \r\nanimation-duration: 5s;\n \r\nanimation-timing-function: linear;\n \r\nanimation-delay: 2s;\n \r\nanimation-iteration-count: infinite;\n \r\nanimation-direction: alternate;\n\r\n}```The same animation effect as above can be achieved by using the shorthand animation property:```css\ndiv\r\n{\n  animation: example 5s linear 2s infinite alternate;\n\r\n}```",
                "CSS Animation Properties": "The following table lists the @keyframes rule and all the CSS animation properties:"
            }
        },
        "tooltips": {
            "title": "CSS Tooltips",
            "url": "https://www.w3schools.com/css/css_tooltip.asp",
            "info": {
                "Demo: Tooltip Examples": "A tooltip is often used to specify extra information about something when the user moves the mouse pointer over an element:",
                "Basic Tooltip": "Create a tooltip that appears when the user moves the mouse over an element:```css\n<style>\n/* Tooltip container */\n.tooltip {\n  position: relative;\n  \r\ndisplay: inline-block;\n  border-bottom: 1px dotted \r\nblack; /* If you want dots under the hoverable text */\n}\n/* Tooltip text \r\n*/\n.tooltip .tooltiptext {\n  visibility: hidden;\n  width: 120px;\n  \r\nbackground-color: black;\n  color: #fff;\n  text-align: center;\n  padding: 5px 0;\n  \r\nborder-radius: 6px;\n \n  \r\n/* Position the tooltip text - see examples below! */\n  position: absolute;\n  z-index: 1;\n}\n/* Show \r\nthe tooltip text when you mouse over the tooltip container */\n.tooltip:hover \r\n.tooltiptext {\n  visibility: visible;\n}\n</style>\n<div class=\"tooltip\">Hover \r\nover me\n<span class=\"tooltiptext\">Tooltip \r\ntext</span>\n</div>```HTML: Use a container element (like <div>) and add the \"tooltip\" class to it. When the user mouse over this <div>, it will show the tooltip text.The tooltip text is placed inside an inline element (like <span>) with class=\"tooltiptext\".CSS: The tooltip class use position:relative, which is needed to position the tooltip text (position:absolute).Note: See examples below on how to position the tooltip.The tooltiptext class holds the actual tooltip text. It is hidden by default, and will be visible on hover (see below). We have also added some basic styles to it: 120px width, black background color, white text color, centered text, and 5px top and bottom padding. The CSS border-radius property is used to add rounded corners to the tooltip text.The :hover selector is used to show the tooltip text when the user moves the mouse over the <div> with class=\"tooltip\".",
                "Positioning Tooltips": "In this example, the tooltip is placed to the right (left:105%) of the \"hoverable\" text (<div>). Also note that top:-5px is used to place it in the middle of its container element. We use the number 5 because the tooltip text has a top and bottom padding of 5px. If you increase its padding, also increase the value of the top property to ensure that it stays in the middle (if this is something you want). The same applies if you want the tooltip placed to the left.```css\n.tooltip .tooltiptext {\n  top: -5px;\n  \r\nleft: \r\n105%; \n}``````css\n.tooltip .tooltiptext {\n  top: -5px;\n  \r\nright: \r\n105%; \n}```If you want the tooltip to appear on top or on the bottom, see examples below. Note that we use the margin-left property with a value of minus 60 pixels. This is to center the tooltip above/below the hoverable text. It is set to the half of the tooltip's width (120/2 = 60).",
                "Tooltip Arrows": "To create an arrow that should appear from a specific side of the tooltip, add \"empty\" content after tooltip, with the pseudo-element class ::after together with the content property. The arrow itself is created using borders. This will make the tooltip look like a speech bubble.This example demonstrates how to add an arrow to the bottom of the tooltip:```css\n.tooltip .tooltiptext::after {\n  content: \" \";\n  position: absolute;\n  top: 100%; \r\n/* At the bottom of the tooltip */\n  left: 50%;\n  margin-left: -5px;\n  \r\nborder-width: 5px;\n  border-style: solid;\n  \r\nborder-color: black transparent transparent transparent;\n}```Position the arrow inside the tooltip: top: 100% will place the arrow at the bottom of the tooltip. left: 50% will center the arrow.Note: The border-width property specifies the size of the arrow. If you change this, also change the margin-left value to the same. This will keep the arrow centered.The border-color is used to transform the content into an arrow. We set the top border to black, and the rest to transparent. If all sides were black, you would end up with a black square box.This example demonstrates how to add an arrow to the top of the tooltip. Notice that we set the bottom border color this time:This example demonstrates how to add an arrow to the left of the tooltip:This example demonstrates how to add an arrow to the right of the tooltip:",
                "Fade In Tooltips (Animation)": "If you want to fade in the tooltip text when it is about to be visible, you can use the CSS transition property together with the opacity property, and go from being completely invisible to 100% visible, in a number of specified seconds (1 second in our example):```css\n.tooltip .tooltiptext {\n  opacity: 0;\n  \r\ntransition: opacity 1s;\n}\n.tooltip:hover \r\n.tooltiptext {\n  opacity: 1;\n}```"
            }
        },
        "styleimages": {
            "title": "CSS Style Images",
            "url": "https://www.w3schools.com/css/css3_images.asp",
            "info": {
                "Rounded Images": "Use the border-radius property to create rounded images:```css\nimg {\n  border-radius: 8px;\n}```",
                "Thumbnail Images": "Use the border property to create thumbnail images.```css\nimg {\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  padding: 5px;\n  width: 150px;\n}\n      <img src=\"paris.jpg\"      alt=\"Paris\">```",
                "Responsive Images": "Responsive images will automatically adjust to fit the size of the screen.Resize the browser window to see the effect:If you want an image to scale down if it has to, but never scale up to be larger than its original size, add the following:```css\nimg {\n  max-width: 100%;\n  height: \r\nauto;\n}```Tip: Read more about Responsive Web Design in our CSS RWD Tutorial.",
                "Center an Image": "To center an image, set left and right margin to auto and make it into a block element:```css\nimg {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n \r\nwidth: 50%;\n\r\n}```",
                "Polaroid Images / Cards": "```css\ndiv.polaroid {\n  width: 80%;\n  background-color: white;\n  box-shadow: 0 4px 8px 0 rgba(0, \r\n0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\nimg {width: 100%}\n\ndiv.container {\n  text-align: center;\n  padding: 10px 20px;\n}```",
                "Transparent Image": "The opacity property can take a value from 0.0 - 1.0. The lower value, the more transparent:```css\nimg {\n  opacity: 0.5;\n}```",
                "Image Text": "How to position text in an image:",
                "Image Filters": "The CSS filter property adds visual effects (like blur and saturation) to an element.Note: The filter property is not supported in Internet Explorer or Edge 12.```css\nimg {\n  filter: grayscale(100%);\n}```Tip: Go to our CSS filter Reference to learn more about CSS filters.",
                "Image Hover Overlay": "Create an overlay effect on hover:",
                "Flip an Image": "Move your mouse over the image:```css\nimg:hover {\n  transform: scaleX(-1);\n}```",
                "Responsive Image Gallery": "CSS can be used to create image galleries. This example use media queries to re-arrange the images on different screen sizes. Resize the browser window to see the effect:```css\n.responsive {\n  \r\npadding: 0 6px;\n  float: left;\n  width: 24.99999%;\n}\n@media only screen and \r\n(max-width: 700px){\n  .responsive {\n    \r\nwidth: 49.99999%;\n    margin: 6px \r\n0;\n  }\n}\n@media only screen and (max-width: 500px){\n  .responsive {\n    width: 100%;\n  }\n}```Tip: Read more about Responsive Web Design in our CSS RWD Tutorial.",
                "Image Modal (Advanced)": "This is an example to demonstrate how CSS and JavaScript can work together.First, use CSS to create a modal window (dialog box), and hide it by default.Then, use a JavaScript to show the modal window and to display the  image inside the modal, when a user clicks on the image:```css\n// Get the modal\nvar modal = document.getElementById('myModal');\n// Get the image and insert it \r\ninside the modal - use its \"alt\" text as a caption\nvar img = \r\ndocument.getElementById('myImg');\nvar modalImg = document.getElementById(\"img01\");\n\r\nvar captionText = document.getElementById(\"caption\");\nimg.onclick = \r\nfunction(){\n  modal.style.display = \"block\";\n  modalImg.src = this.src;\n  captionText.innerHTML = this.alt;\n}\n\r\n// Get the <span> element that closes the modal\nvar span = \r\ndocument.getElementsByClassName(\"close\")[0];\n// When the user clicks \r\non <span> (x), close the modal\nspan.onclick = function() { \n  modal.style.display = \"none\";\n}```"
            }
        },
        "object-fit": {
            "title": "CSS object-fit",
            "url": "https://www.w3schools.com/css/css3_object-fit.asp",
            "info": {
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the property.",
                "The CSS object-fit Property": "The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.This property tells the content to fill the container in a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".Look at the following image from Paris, which is 400x300 pixels:However, if we style the image above to be 200x400 pixels, it will look like this:```css\nimg {\n  width: 200px;\n  height: 400px;\n}```We see that the image is being squeezed to fit the container of 200x400 pixels, and its original aspect ratio is destroyed.If we use object-fit: cover; it will cut off the sides of the image,preserving the aspect ratio, and also filling in the space, like this:```css\nimg {\n  width: 200px;\n  height: 400px;\n  object-fit: cover;\n}```",
                "Another Example": "Here we have two images and we want them to fill the width of 50% of the browser window and 100% of the height.In the following example we do NOT use object-fit, so when we resize the browser window, the aspect ratio of the images will be destroyed:In the next example, we use object-fit: cover;, so when we resize the browser window, the aspect ratio of the images is preserved:",
                "All Values of The CSS object-fit Property": "The object-fit property can have the following values:The following example demonstrates all the possible values of the object-fit property:```css\n.fill {object-fit: fill;}\n\r\n.contain {object-fit: contain;}\n\r\n.cover {object-fit: cover;}\n\r\n.scale-down {object-fit: scale-down;}\n\r\n.none {object-fit: none;}```"
            }
        },
        "buttons": {
            "title": "CSS Buttons",
            "url": "https://www.w3schools.com/css/css3_buttons.asp",
            "info": {
                "Basic Button Styling": "Default Button CSS Button```css\n.button {\n  background-color: #4CAF50; /* Green */\n  border: none;\n  \r\ncolor: white;\n  padding: 15px 32px;\n  text-align: center;\n  \r\ntext-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n\r\n}```",
                "Button Colors": "Use the background-color property to change the background color of a button:```css\n.button1 {background-color: #4CAF50;} /* Green */\n.button2 \r\n{background-color: #008CBA;} /* Blue */\n.button3 {background-color: \r\n#f44336;} /* Red */ \n\r\n.button4 {background-color: #e7e7e7; color: black;} /* Gray */ \n.button5 \r\n{background-color: #555555;} /* Black */```",
                "Button Sizes": "Use the font-size property to change the font size of a button:```css\n.button1 {font-size: 10px;}\n.button2 {font-size: 12px;}\n.button3 \r\n{font-size: 16px;}\n\r\n.button4 {font-size: 20px;}\n.button5 {font-size: 24px;}```Use the padding property to change the padding of a button:```css\n.button1 {padding: 10px \r\n24px;}\n.button2 {padding: 12px 28px;}\n.button3 {padding: 14px 40px;}\n\r\n.button4 {padding: 32px 16px;}\n.button5 {padding: 16px;}```",
                "Rounded Buttons": "Use the border-radius property to add rounded corners to a button:```css\n.button1 {border-radius: 2px;}\n.button2 {border-radius: 4px;}\n.button3 \r\n{border-radius: 8px;}\n\r\n.button4 {border-radius: 12px;}\n.button5 {border-radius: 50%;}```",
                "Colored Button Borders": "Use the border property to add a colored border to a button:```css\n.button1 {\n  background-color: white;\n  color: black;\n  \r\nborder: 2px solid #4CAF50; /* Green */\n}\n...```",
                "Hoverable Buttons": "Use the :hover selector to change the style of a button when you move the mouse over it.Tip: Use the transition-duration property to determine the speed of the \"hover\" effect:```css\n.button {\n  \r\ntransition-duration: 0.4s;\n}\n.button:hover {\n  \r\nbackground-color: #4CAF50; /* Green */\n  color: white;\n}\n...```",
                "Shadow Buttons": "Use the box-shadow property to add shadows to a button:```css\n.button1 {\n  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 \r\nrgba(0,0,0,0.19);\n}\n.button2:hover {\n  box-shadow: 0 12px \r\n16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19);\n}```",
                "Disabled Buttons": "Use the opacity property to add transparency to a button (creates a \"disabled\" look).Tip: You can also add the cursor property with a value of \"not-allowed\", which will display a \"no parking sign\" when you mouse over the button:```css\n.disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}```",
                "Button Width": "By default, the size of the button is determined by its text content (as wide as its content). Use the width property to change the width of a button:```css\n.button1 {width: 250px;}\n.button2 {width: 50%;}\n.button3 {width: \r\n100%;}```",
                "Button Groups": "Remove margins and add float:left to each button to create a button group:```css\n.button {\n  float: left;\n}```",
                "Bordered Button Group": "Use the border property to create a bordered button group:```css\n.button {\n  float: left;\n  border: 1px \r\nsolid green;\n}```",
                "Vertical Button Group": "Use display:block instead of float:left to group the buttons below each other, instead of side by side:```css\n.button {\n  display: block;\n}```",
                "Button on Image": "",
                "Animated Buttons": ""
            }
        },
        "pagination": {
            "title": "CSS Pagination",
            "url": "https://www.w3schools.com/css/css3_pagination.asp",
            "info": {
                "Simple Pagination": "If you have a website with lots of pages, you may wish to add some sort of pagination to each page:```css\n.pagination {\n  display: inline-block;\n}\n.pagination a {\n  color: \r\nblack;\n  float: left;\n  padding: 8px \r\n16px;\n  text-decoration: none;\n}```",
                "Active and Hoverable Pagination": "Highlight the current page with an .active class, and use the :hover selector to change the color of each page link when moving the mouse over them:```css\n.pagination a.active {\n  background-color: \r\n#4CAF50;\n  color: white;\n}\n.pagination a:hover:not(.active) {background-color: #ddd;}```Add the border-radius property if you want a rounded \"active\" and \"hover\" button:```css\n.pagination a {\n  border-radius: 5px;\n}\n.pagination a.active {\n  border-radius: 5px;\n}```Add the transition property to the page links to create a transition effect on hover:```css\n.pagination a {\n  transition: background-color .3s;\n}```",
                "Bordered Pagination": "Use the border property to add borders to the pagination:```css\n.pagination a {\n  border: 1px solid #ddd; /* Gray \r\n*/\n}```Tip: Add rounded borders to your first and last link in the pagination:```css\n.pagination a:first-child {\n  border-top-left-radius: \r\n5px;\n  border-bottom-left-radius: 5px;\n}\n.pagination a:last-child {\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n}```Tip: Add the margin property if you do not want to group the page links:```css\n.pagination a {\n  margin: 0 4px; /* 0 is for top \r\nand bottom. Feel free to change it */\n}```",
                "Pagination Size": "Change the size of the pagination with the font-size property:```css\n.pagination a {\n  font-size: 22px;\n}```",
                "Centered Pagination": "To center the pagination, wrap a container element (like <div>) around it with text-align:center```css\n.center {\n  text-align: center;\n}```",
                "More Examples": "",
                "Breadcrumbs": "Another variation of pagination is so-called \"breadcrumbs\":```css\nul.breadcrumb {\n  padding: 8px 16px;\n  \r\nlist-style: none;\n  background-color: #eee;\n}\n\r\nul.breadcrumb li {display: inline;}\nul.breadcrumb li+li:before {\n  \r\npadding: 8px;\n  color: black;\n  content: \"/\\00a0\";\n}```"
            }
        },
        "multiplecolumns": {
            "title": "CSS Multiple Columns",
            "url": "https://www.w3schools.com/css/css3_multiple_columns.asp",
            "info": {
                "CSS Multi-column Layout": "The CSS multi-column layout allows easy definition of multiple columns of text - just like in newspapers:",
                "CSS Multi-column Properties": "In this chapter you will learn about the following multi-column properties:",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the property.",
                "CSS Create Multiple Columns": "The column-count property specifies the number of columns an element should be divided into.The following example will divide the text in the <div> element into 3 columns:\u00a0```css\ndiv\r\n{\ncolumn-count: 3;\n\r\n}```",
                "CSS Specify the Gap Between Columns": "The column-gap property specifies the gap between the columns.The following example specifies a 40 pixels gap between the columns:```css\ndiv\r\n{\ncolumn-gap: 40px;\n\r\n}```",
                "CSS Column Rules": "The column-rule-style property specifies the style of the rule between columns:```css\ndiv\r\n{\ncolumn-rule-style: solid;\n\r\n}```The column-rule-width property specifies the width of the rule between columns:```css\ndiv\r\n{\ncolumn-rule-width: 1px;\n\r\n}```The column-rule-color property specifies the color of the rule between columns:```css\ndiv\r\n{\ncolumn-rule-color: lightblue;\n\r\n}```The column-rule property is a shorthand property for setting all the column-rule-\\* properties above. The following example sets the width, style, and color of the rule between columns:```css\ndiv\r\n{\ncolumn-rule: 1px solid lightblue;\n\r\n}```",
                "Specify How Many Columns an Element Should Span": "The column-span property specifies how many columns an element should span across.The following example specifies that the <h2> element should span across all columns:```css\nh2 {\ncolumn-span: all;\n\r\n}```",
                "Specify The Column Width": "The column-width property specifies a suggested, optimal width for the columns.The following example specifies that the suggested, optimal width for the columns should be 100px:```css\ndiv {\ncolumn-width: 100px;\n\r\n}```",
                "CSS Multi-columns Properties": "The following table lists all the multi-columns properties:\u00a0"
            }
        },
        "userinterface": {
            "title": "CSS User Interface",
            "url": "https://www.w3schools.com/css/css3_user_interface.asp",
            "info": {
                "CSS User Interface": "In this chapter you will learn about the following CSS user interface properties:",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the property.",
                "CSS Resizing": "The resize property specifies if (and how) an element should be resizable by the user.The following example lets the user resize only the width of a <div> element:```css\ndiv\r\n{\n \r\nresize: horizontal;\n \r\noverflow: auto;\n\r\n}```The following example lets the user resize only the height of a <div> element:```css\ndiv\r\n{\n \r\nresize: vertical;\noverflow: auto;\n\r\n}```The following example lets the user resize both the height and width of a <div> element:```css\ndiv\r\n{\n \r\nresize: both;\n \r\noverflow: auto;\n\r\n}```In many browsers, <textarea> is resizable by default. Here, we have used the resize property to disable the resizability:```css\ntextarea {\n  resize: none;\n}```",
                "CSS Outline Offset": "The outline-offset property adds space between an outline and the edge or border of an element.The following example uses the outline-offset property to add space between the border and the outline:```css\ndiv.ex1 {\n  margin: 20px;\n  border: 1px solid black;\n  outline: 4px solid red;\n  outline-offset: 15px;\n} \ndiv.ex2 {\n  margin: 10px;\n  border: 1px solid black;\n  outline: 5px dashed blue;\n  outline-offset: 5px;\n}```",
                "CSS User Interface Properties": "The following table lists all the user interface properties:"
            }
        },
        "variables": {
            "title": "CSS Variables",
            "url": "https://www.w3schools.com/css/css3_variables.asp",
            "info": {
                "CSS Custom Properties (Variables)": "The var() function can be used to insert the value of a custom property.",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the property.",
                "The var() Function": "Variables in CSS should be declared within a CSS selector that defines its scope. For a global scope you can use either the :root or the body selector.The variable name must begin with two dashes (--) and is case sensitive!The syntax of the var() function is as follows:The following example first defines a global custom property named \"--main-bg-color\", then it uses the var() function to insert the value of the custom property later in the style sheet:```css\n:root {\n  --main-bg-color: coral; \n}\n#div1 {\n  background-color: var(--main-bg-color); \n}\n#div2 {\n  background-color: var(--main-bg-color);\n}```The following example uses the var() function to insert several custom property values:```css\n:root {\n  --main-bg-color: coral;\n  --main-txt-color: blue; \n  --main-padding: 15px; \n}\n\n#div1 {\n  background-color: var(--main-bg-color);\n  color: var(--main-txt-color);\n  padding: var(--main-padding);\n}\n#div2 {\n  background-color: var(--main-bg-color);\n  color: var(--main-txt-color);\n  padding: var(--main-padding);\n}```",
                "CSS var() Function": ""
            }
        },
        "boxsizing": {
            "title": "CSS Box Sizing",
            "url": "https://www.w3schools.com/css/css3_box-sizing.asp",
            "info": {
                "CSS Box Sizing": "The CSS box-sizing property allows us to include the padding and border in an element's total width and height.",
                "Without the CSS box-sizing Property": "By default, the width and height of an element is calculated like this:width + padding + border = actual width of an elementheight + padding + border = actual height of an elementThis means: When you set the width/height of an element, the element often appears bigger than you have set (because the element's border and padding are added to the element's specified width/height).The following illustration shows two <div> elements with the same specified width and height:The two <div> elements above end up with different sizes in the result (because div2 has a padding specified):```css\n.div1 {\n  width: 300px;\n  height: \r\n100px;\n  border: 1px solid blue; \n}\n\n.div2 {\n  width: 300px;\n  height: 100px;\n  padding: 50px;\n  border: 1px solid red;\n}```The box-sizing property solves this problem.",
                "With the CSS box-sizing Property": "The box-sizing property allows us to include the padding and border in an element's total width and height.If you set box-sizing: border-box; on an element, padding and border are included in the width and height:Here is the same example as above, with box-sizing: border-box; added to both <div> elements:```css\n.div1 {\n  width: 300px;\n  height: \r\n100px;\n  border: 1px solid blue;\n  box-sizing: border-box;\n}\n\n.div2 {\n  width: 300px;\n  \r\nheight: 100px;\n  padding: 50px;\n  border: 1px solid red;\n  box-sizing: border-box;\n}```Since the result of using the box-sizing: border-box; is so much better, many developers want all elements on their pages to work this way.The code below ensures that all elements are sized in this more intuitive way. Many browsers already use box-sizing: border-box; for many form elements (but not all - which is why inputs and text areas look different at width: 100%;). Applying this to all elements is safe and wise:```css\n* {\n  box-sizing: border-box;\n}```",
                "CSS Box Sizing Property": ""
            }
        },
        "flexbox": {
            "title": "CSS Flexbox",
            "url": "https://www.w3schools.com/css/css3_flexbox.asp",
            "info": {
                "CSS Flexbox Layout Module": "Before the Flexbox Layout module, there were four layout modes:The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning.",
                "Browser Support": "The flexbox properties are supported in all modern browsers.",
                "Flexbox Elements": "To start using the Flexbox model, you need to first define a flex container.The element above represents a flex container (the blue area) with three flex items.```css\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</div>```",
                "Parent Element (Container)": "The flex container becomes flexible by setting the display property to flex:```css\n.flex-container {\n  display: flex;\n}```The flex container properties are:",
                "The flex-direction Property": "The flex-direction property defines in which direction the container wants to stack the flex items.```css\n.flex-container {\n  display: flex;\n  flex-direction: column;\n}``````css\n.flex-container {\n  display: flex;\n  flex-direction: column-reverse;\n}``````css\n.flex-container {\n  display: flex;\n  flex-direction: row;\n}``````css\n.flex-container {\n  display: flex;\n  flex-direction: row-reverse;\n}```",
                "The flex-wrap Property": "The flex-wrap property specifies whether the flex items should wrap or not.The examples below have 12 flex items, to better demonstrate the flex-wrap property.```css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap;\n}``````css\n.flex-container {\n  display: flex;\n  flex-wrap: nowrap;\n}``````css\n.flex-container {\n  display: flex;\n  flex-wrap: wrap-reverse;\n}```",
                "The flex-flow Property": "The flex-flow property is a shorthand property for setting both the flex-direction and flex-wrap properties.```css\n.flex-container {\n  display: flex;\n  flex-flow: row wrap;\n}```",
                "The justify-content Property": "The justify-content property is used to align the flex items:```css\n.flex-container {\n  display: flex;\n  justify-content: center;\n}``````css\n.flex-container {\n  display: flex;\n  justify-content: flex-start;\n}``````css\n.flex-container {\n  display: flex;\n  justify-content: flex-end;\n}``````css\n.flex-container {\n  display: flex;\n  justify-content: space-around;\n}``````css\n.flex-container {\n  display: flex;\n  justify-content: space-between;\n}```",
                "The align-items Property": "The align-items property is used to align the flex items.In these examples we use a 200 pixels high container, to better demonstrate the align-items property.```css\n.flex-container {\n  display: flex;\n  height: 200px;\n  align-items: center;\n}``````css\n.flex-container {\n  display: flex;\n  height: 200px;\n  align-items: flex-start;\n}``````css\n.flex-container {\n  display: flex;\n  height: 200px;\n  align-items: flex-end;\n}``````css\n.flex-container {\n  display: flex;\n  height: 200px;\n  align-items: stretch;\n}``````css\n.flex-container {\n  display: flex;\n  height: 200px;\n  align-items: baseline;\n}```",
                "The align-content Property": "The align-content property is used to align the flex lines.In these examples we use a 600 pixels high container, with the flex-wrap property set to wrap, to better demonstrate the align-content property.```css\n.flex-container {\n  display: flex;\n  height: 600px;\n  flex-wrap: wrap;\n  align-content: space-between;\n\r\n}``````css\n.flex-container {\n  display: flex;\n  height: 600px;\n  flex-wrap: wrap;\n  align-content: space-around;\n\r\n}``````css\n.flex-container {\n  display: flex;\n  height: 600px;\n  flex-wrap: wrap;\n  align-content: stretch;\n\r\n}``````css\n.flex-container {\n  display: flex;\n  height: 600px;\n  flex-wrap: wrap;\n  align-content: center;\n\r\n}``````css\n.flex-container {\n  display: flex;\n  height: 600px;\n  flex-wrap: wrap;\n  align-content: flex-start;\n\r\n}``````css\n.flex-container {\n  display: flex;\n  height: 600px;\n  flex-wrap: wrap;\n  align-content: flex-end;\n\r\n}```",
                "Perfect Centering": "In the following example we will solve a very common style problem: perfect centering.SOLUTION: Set both the justify-content and align-items properties tocenter, and the flex item will be perfectly centered:```css\n.flex-container {\n  display: flex;\n  height: 300px;\n  justify-content: center;\n  align-items: center;\n}```",
                "Child Elements (Items)": "The direct child elements of a flex container automatically becomes flexible (flex) items.The element above represents four blue flex items inside a grey flex container.```css\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div> \n  <div>4</div>\n</div>```The flex item properties are:",
                "The order Property": "The order property specifies the order of the flex items.The first flex item in the code does not have to appear as the first item in the layout.The order value must be a number, default value is 0.```css\n<div class=\"flex-container\">\n  <div style=\"order: 3\">1</div>\n  <div style=\"order: 2\">2</div>\n  <div style=\"order: 4\">3</div> \n  <div style=\"order: 1\">4</div>\n</div>```",
                "The flex-grow Property": "The flex-grow property specifies how much a flex item will grow relative to the rest of the flex items.The value must be a number, default value is 0.```css\n<div class=\"flex-container\">\n  <div style=\"flex-grow: 1\">1</div>\n  <div style=\"flex-grow: 1\">2</div>\n  <div style=\"flex-grow: 8\">3</div> \n</div>```",
                "The flex-shrink Property": "The flex-shrink property specifies how much a flex item will shrink relative to the rest of the flex items.The value must be a number, default value is 1.```css\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div style=\"flex-shrink: 0\">3</div>\n  <div>4</div>\n  <div>5</div>\n  <div>6</div>\n  <div>7</div>\n  <div>8</div>\n  <div>9</div>\n  <div>10</div>\n</div>```",
                "The flex-basis Property": "The flex-basis property specifies the initial length of a flex item.```css\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div style=\"flex-basis: 200px\">3</div>\n  <div>4</div>\n</div>```",
                "The flex Property": "The flex property is a shorthand property for the flex-grow, flex-shrink, and flex-basis properties.```css\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div style=\"flex: 0 0 200px\">3</div>\n  <div>4</div>\n</div>```",
                "The align-self Property": "The align-self property specifies the alignment for the selected item inside the flexible container.The align-self property overrides the default alignment set by the container's align-items property.In these examples we use a 200 pixels high container, to better demonstrate the align-self property:```css\n<div class=\"flex-container\">\n  <div>1</div>\n  <div>2</div>\n  <div style=\"align-self: center\">3</div>\n  <div>4</div>\n</div>``````css\n<div class=\"flex-container\">\n  <div>1</div>\n  <div style=\"align-self: flex-start\">2</div>\n  <div style=\"align-self: flex-end\">3</div>\n  <div>4</div>\n</div>```",
                "Responsive Image Gallery using Flexbox": "Use flexbox to create a responsive image gallery that varies between four, two or full-width images, depending on screen size:",
                "Responsive Website using Flexbox": "Use flexbox to create a responsive website, containing a flexible navigation bar and flexible content:",
                "CSS Flexbox Properties": "The following table lists the CSS properties used with flexbox:"
            }
        },
        "mediaqueries": {
            "title": "CSS Media Queries",
            "url": "https://www.w3schools.com/css/css3_mediaqueries.asp",
            "info": {
                "CSS2 Introduced Media Types": "The @media rule, introduced in CSS2, made it possible to define different style rules for different media types.Examples: You could have one set of style rules for computer screens, one for printers, one for handheld devices, one for television-type devices, and so on.Unfortunately these media types never got a lot of support by devices, other than the print media type.",
                "CSS3 Introduced Media Queries": "Media queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.Media queries can be used to check many things, such as:Using media queries are a popular technique for delivering a tailored style sheet to desktops, laptops, tablets, and mobile phones (such as iPhone and Android phones).",
                "Browser Support": "The numbers in the table specifies the first browser version that fully supports the @media rule.",
                "Media Query Syntax": "A media query consists of a media type and can contain one or more expressions, which resolve to either true or false.The result of the query is true if the specified media type matches the type of device the document is being displayed on and all expressions in the media query are true. When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules.Unless you use the not or only operators, the media type is optional and theall type will be implied.You can also have different stylesheets for different media:",
                "CSS3 Media Types": "",
                "Media Queries Simple Examples": "One way to use media queries is to have an alternate CSS section right inside your style sheet.The following example changes the background-color to lightgreen if the viewport is 480 pixels wide or wider (if the viewport is less than 480 pixels, the background-color will be pink):```css\n@media screen and (min-width: 480px) {\n  body {\n  background-color: lightgreen;\n  }\n}```The following example shows a menu that will float to the left of the page if the viewport is 480 pixels wide or wider (if the viewport is less than 480 pixels, the menu will be on top of the content):```css\n@media screen and (min-width: 480px) {\n  #leftsidebar \r\n{width: 200px; float: left;}\n  #main \r\n{margin-left: 216px;}\n}```",
                "CSS @media Reference ": "For a full overview of all the media types and features/expressions, please look at the@media rule in our CSS reference."
            }
        },
        "mqexamples": {
            "title": "CSS MQ Examples",
            "url": "https://www.w3schools.com/css/css3_mediaqueries_ex.asp",
            "info": {
                "CSS Media Queries - More Examples": "Let us look at some more examples of using media queries.Media queries are a popular technique for delivering a tailored style sheet to different devices. To demonstrate a simple example, we can change the background color for different devices:```css\n/* Set the background color of body to tan */\nbody {\n  background-color: tan;\n}\n/* On screens that are 992px or less, set the background color to blue */\n@media screen and (max-width: 992px) {\n  body {\n    background-color: blue;\n  }\n}\n/* On screens that are 600px or less, set the background color to olive */\n@media screen and (max-width: 600px) {\n  body {\n    background-color: olive;\n  }\n}```",
                "Media Queries For Menus": "In this example, we use media queries to create a responsive navigation menu, that varies in design on different screen sizes.```css\n/* The navbar container */\n.topnav {\n  overflow: hidden;\n   background-color: #333;\n}\n/* Navbar links */\n.topnav a {\n  float:  left;\n  display: block;\n  color:  white;\n  text-align: center;\n  padding: 14px 16px;\n   text-decoration: none;\n}\n /* On screens that are 600px wide or less, make the menu links stack on top  of each other instead of next to each other */\n@media screen and (max-width: 600px) {\n    .topnav a {\n    float: none;\n    width:  100%;\n  }\n}```",
                "Media Queries For Columns": "A common use of media queries, is to create a flexible layout. In this example, we create a layout that varies between four, two and full-width columns, depending on different screen sizes:```css\n/* Create four equal columns that floats next to each other */\n.column {\n  float: left;\n  width: 25%;\n}\n/* On screens that are 992px wide or less, go from four columns to two columns */\n@media screen and (max-width: 992px) {\n  .column {\n    width: 50%;\n  }\n}\n/* On screens that are 600px wide or less, make the columns stack on top of each other instead of next to each other */\n@media screen and (max-width: 600px) {\n  .column {\n    width: 100%;\n  }\n}```",
                "Hide Elements With Media Queries": "Another common use of media queries, is to hide elements on different screen sizes:```css\n/* If the screen size is 600px wide or less, hide the element */\n@media screen and (max-width: 600px) {\n  div.example {\n    display: none;\n  }\n}```",
                "Change Font Size With Media Queries": "You can also use media queries to change the font size of an element on different screen sizes:```css\n/* If screen size is more than 600px wide, set the font-size of <div> to 80px */\n@media screen and (min-width: 600px) {\n  div.example {\n    font-size: 80px;\n  }\n}\n/* If screen size is 600px wide, or less, set the font-size of <div> to 30px */\n@media screen and (max-width: 600px) {\n  div.example {\n    font-size: 30px;\n  }\n}```",
                "Flexible Image Gallery": "In this example, we use media queries together with flexbox to create a responsive image gallery:",
                "Flexible Website": "In this example, we use media queries together with flexbox to create a responsive website, containing a flexible navigation bar and flexible content.",
                "Orientation: Portrait / Landscape": "Media queries can also be used to change layout of a page depending on the orientation of the browser.You can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called \"Landscape\" orientation: ```css\n@media only screen and (orientation: \r\nlandscape) {\n  body {\n  background-color: lightblue;\n  }\n}```",
                "Min Width to Max Width": "You can also use the (max-width: ..) and (min-width: ..) values to set a minimum width and a maximum width.For example, when the browser's width is between 600 and 900px, change the appearance of a <div> element:```css\n@media screen and (max-width: 900px) and (min-width: 600px) {\n  div.example {\n    font-size: 50px;\n    padding: 50px;\n    border: 8px solid black;\n    background: yellow;\n  }\n}```Using an additional value: In the example below, we add an additional media query to our already existing one using a comma (this will behave like an OR operator):```css\n/* When the width is between 600px and 900px OR above 1100px - change the appearance of <div> */\n@media screen and (max-width: 900px) and (min-width: 600px), (min-width: \r\n1100px) {\n  div.example {\n    font-size: 50px;\n    padding: 50px;\n    border: 8px solid black;\n    background: yellow;\n  }\n}```",
                "CSS @media Reference": "For a full overview of all the media types and features/expressions, please look at the@media rule in our CSS reference.Tip: To learn more about responsive web design (how to target different devices and screens), using media query breakpoints, read our Responsive Web Design Tutorial."
            }
        },
        "rwdintro": {
            "title": "RWD Intro",
            "url": "https://www.w3schools.com/css/css_rwd_intro.asp",
            "info": {
                "What is Responsive Web Design?": "Responsive web design makes your web page look good on all devices.Responsive web design uses only HTML and CSS.Responsive web design is not a program or a JavaScript.",
                "Designing For The Best Experience For All Users": "Web pages can be viewed using many different devices: desktops, tablets, and phones.Your web page should look good, and be easy to use, regardless of the device.Web pages should not leave out information to fit smaller devices, but rather adapt its content to fit any device:It is called responsive web design when you use CSS and HTML to resize, hide, shrink, enlarge, or move the content to make it look good on any screen.Don't worry if you don't understand the example below, we will break down the code, step-by-step, in the next chapters:"
            }
        },
        "rwdviewport": {
            "title": "RWD Viewport",
            "url": "https://www.w3schools.com/css/css_rwd_viewport.asp",
            "info": {
                "What is The Viewport?": "The viewport is the user's visible area of a web page.The viewport varies with the device, and will be smaller on a mobile phone than on a computer screen.Before tablets and mobile phones, web pages were designed only for computer screens, and it was common forweb pages to have a static design and a fixed size.Then, when we started surfing the internet using tablets and mobile phones, fixed size web pages were too large to fit the viewport.To fix this, browsers on those devices scaled down the entire web page to fit the screen.This was not perfect!! But a quick fix.",
                "Setting The Viewport": "HTML5 introduced a method to let web designers take control over the viewport, through the <meta> tag.You should include the following <meta> viewport element in all your web pages:This gives the browser instructions on how to control the page's dimensions and scaling.The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:",
                "Size Content to The Viewport": "Users are used to scroll websites vertically on both desktop and mobile devices - but not horizontally!So, if the user is forced to scroll horizontally, or zoom out, to see the whole web page it results in a poor user experience.Some additional rules to follow:1. Do NOT use large fixed width elements - For example, if an image is displayed at a width wider than the viewport it can cause the viewport to scroll horizontally. Remember to adjust this content to fit within the width of the viewport.2. Do NOT let the content rely on a particular viewport width to render well - Since screen dimensions and width in CSS pixels vary widely between devices, content should not rely on a particular viewport width to render well.3. Use CSS media queries to apply different styling for small and large screens - Setting large absolute CSS widths for page elements will cause the element to be too wide for the viewport on a smaller device. Instead, consider using relative width values, such as width: 100%. Also, be careful of using large absolute positioning values. It may cause the element to fall outside the viewport on small devices."
            }
        },
        "rwdgridview": {
            "title": "RWD Grid View",
            "url": "https://www.w3schools.com/css/css_rwd_grid.asp",
            "info": {
                "What is a Grid-View?": "Many web pages are based on a grid-view, which means that the page is divided into columns:Using a grid-view is very helpful when designing web pages. It makes it easier to place elements on the page.A responsive grid-view often has 12 columns, and has a total width of 100%, and will shrink and expand as you resize the browser window.Example: Responsive Grid View",
                "Building a Responsive Grid-View": "Lets start building a responsive grid-view.First ensure that all HTML elements have the box-sizing property set to border-box. This makes sure that the padding and border are included in the total width and height of the elements.Add the following code in your CSS:Read more about the box-sizing property in our CSS Box Sizing chapter.The following example shows a simple responsive web page, with two columns:```css\n.menu {\n  width: 25%;\n  \r\nfloat: left;\n}\n\r\n.main {\n  width: 75%;\n  \r\nfloat: left;\n}```The example above is fine if the web page only contains two columns.However, we want to use a responsive grid-view with 12 columns, to have more control over the web page.First we must calculate the percentage for one column: 100% / 12 columns = 8.33%.Then we make one class for each of the 12 columns, class=\"col-\" and a number defining how many columns the section should span:\u00a0All these columns should be floating to the left, and have a padding of 15px:Each row should be wrapped in a <div>. The number of columns inside a row should always add up to 12:The columns inside a row are all floating to the left, and are therefore taken out of the flow of the page, and other elements will be placed as if the columns do not exist. To prevent this, we will add a style that clears the flow:We also want to add some styles and colors to make it look better:"
            }
        },
        "rwdmediaqueries": {
            "title": "RWD Media Queries",
            "url": "https://www.w3schools.com/css/css_rwd_mediaqueries.asp",
            "info": {
                "What is a Media Query?": "Media query is a CSS technique introduced in CSS3.It uses the @media rule to include a block of CSS properties only if a certain condition is true.```css\n@media only screen and (max-width: 600px) {\n  body {\n \r\nbackground-color: lightblue;\n  }\n}```",
                "Add a Breakpoint": "Earlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.Media queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.Use a media query to add a breakpoint at 768px:```css\n/* For desktop: */\n.col-1 {width: 8.33%;}\n.col-2 {width: 16.66%;}\n.col-3 {width: 25%;}\n\r\n.col-4 {width: 33.33%;}\n.col-5 {width: 41.66%;}\n.col-6 {width: 50%;}\n\r\n.col-7 {width: 58.33%;}\n.col-8 {width: 66.66%;}\n.col-9 {width: 75%;}\n\r\n.col-10 {width: 83.33%;}\n.col-11 {width: 91.66%;}\n.col-12 {width: \r\n100%;}\n@media only screen and (max-width: 768px) {\n  /* For mobile phones: */\n  \r\n[class*=\"col-\"] {\n    width: 100%;\n  }\n}```",
                "Always Design for Mobile First": "Mobile First means designing for mobile before designing for desktop or any other device (This will make the page display faster on smaller devices).This means that we must make some changes in our CSS.Instead of changing styles when the width gets smaller than 768px, we should change the design when the width gets larger than 768px. This will make our design Mobile First:```css\n/* For mobile phones: */\n[class*=\"col-\"] {\n  width: 100%;\n}\n@media only screen and (min-width: \r\n768px) {\n  /* For desktop: */\n  .col-1 {width: 8.33%;}\n  .col-2 {width: 16.66%;}\n  .col-3 {width: 25%;}\n  .col-4 {width: 33.33%;}\n  .col-5 {width: 41.66%;}\n  .col-6 {width: 50%;}\n  .col-7 {width: 58.33%;}\n  .col-8 {width: 66.66%;}\n  .col-9 {width: 75%;}\n  .col-10 {width: 83.33%;}\n  .col-11 {width: 91.66%;}\n  .col-12 {width: 100%;}\n}```",
                "Another Breakpoint": "You can add as many breakpoints as you like.We will also insert a breakpoint between tablets and mobile phones.We do this by adding one more media query (at 600px), and a set of new classes for devices larger than 600px (but smaller than 768px):It might seem odd that we have two sets of identical classes, but it gives us the opportunity in HTML, to decide what will happen with the columns at each breakpoint:```css\n<div class=\"row\">\n  <div class=\"col-3 col-s-3\">...</div>\n  <div \r\nclass=\"col-6 col-s-9\">...</div>\n  <div \r\nclass=\"col-3 col-s-12\">...</div>\n</div>```",
                "Typical Device Breakpoints": "There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:```css\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {...} \n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {...} \n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {...} \n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {...} \n/* Extra large devices (large laptops and desktops, 1200px and up) */\n@media only screen and (min-width: 1200px) {...}```",
                "Orientation: Portrait / Landscape": "Media queries can also be used to change layout of a page depending on the orientation of the browser.You can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called \"Landscape\" orientation: ```css\n@media only screen and (orientation: \r\nlandscape) {\n  body {\n   \r\nbackground-color: lightblue;\n  }\n}```",
                "Hide Elements With Media Queries": "Another common use of media queries, is to hide elements on different screen sizes:```css\n/* If the screen size is 600px wide or less, hide the element */\n@media only screen and (max-width: 600px) {\n  div.example {\n    display: none;\n  }\n}```",
                "Change Font Size With Media Queries": "You can also use media queries to change the font size of an element on different screen sizes:```css\n/* If the screen size is 601px or more, set the font-size of <div> to 80px */\n@media only screen and (min-width: 601px) {\n  div.example {\n    font-size: 80px;\n  }\n}\n/* If the screen size is 600px or less, set the font-size of <div> to 30px */\n@media only screen and (max-width: 600px) {\n  div.example {\n    font-size: 30px;\n  }\n}```",
                "CSS @media Reference": "For a full overview of all the media types and features/expressions, please look at the@media rule in our CSS reference."
            }
        },
        "rwdimages": {
            "title": "RWD Images",
            "url": "https://www.w3schools.com/css/css_rwd_images.asp",
            "info": {
                "Using The width Property": "If the width property is set to a percentage and the height is set to \"auto\", the image will be responsive and scale up and down:```css\nimg {\nwidth: 100%;\n  height: auto;\n\r\n}```Notice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use themax-width property instead.",
                "Using The max-width Property": "If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:```css\nimg {\n  max-width: 100%;\n  height: auto;\n\r\n}```",
                "Add an Image to The Example Web Page": "```css\nimg {\n  width: 100%;\n  height: auto;\n\r\n}```",
                "Background Images": "Background images can also respond to resizing and scaling.Here we will show three different methods:1. If the background-size property is set to \"contain\", the background image will scale, and try to fit the content area. However, the image will keep its aspect ratio (the proportional relationship between the image's width and height):Here is the CSS code:```css\ndiv {\n  width: 100%;\n  height: 400px;\n  \r\nbackground-image: url('img_flowers.jpg');\n  background-repeat: no-repeat;\n  background-size: contain;\n  border: 1px solid red;\n}```2. If the background-size property is set to \"100% 100%\", the background image will stretch to cover the entire content area:Here is the CSS code:```css\ndiv {\n  width: 100%;\n  height: 400px;\n  \r\nbackground-image: url('img_flowers.jpg');\n  \r\nbackground-size: 100% 100%;\n  border: 1px solid red;\n}```3. If the background-size property is set to \"cover\", the background image will scale to cover the entire content area. Notice that the \"cover\" value keeps the aspect ratio, and some part of the background image may be clipped:Here is the CSS code:",
                "Different Images for Different Devices": "A large image can be perfect on a big computer screen, but useless on a small device. Why load a large image when you have to scale it down anyway? To reduce the load, or for any other reasons, you can use media queries to display different images on different devices.Here is one large image and one smaller image that will be displayed on different devices:```css\n/* For width smaller than 400px: */\nbody {\n  background-image: \r\nurl('img_smallflower.jpg'); \n}\n/* \r\nFor width 400px and larger: */\n@media only screen and (min-width: 400px) \r\n{\n  body { \n    background-image: url('img_flowers.jpg'); \n  }\n}```You can use the media query min-device-width, instead of min-width, whichchecks the device width, instead of the browser width. Then the image will not change when you resize the browser window:",
                "HTML5 <picture> Element": "HTML5 introduced the <picture> element, which lets you define more than one image.The <picture> element works similar to the <video> and <audio> elements. You set up different sources, and the first source that fits the preferences is the one being used:```css\n<picture>\n  <source srcset=\"img_smallflower.jpg\" media=\"(max-width: \r\n400px)\">\n  <source srcset=\"img_flowers.jpg\">\n  <img \r\nsrc=\"img_flowers.jpg\" alt=\"Flowers\">\n</picture>```The srcset attribute is required, and defines the source of the image.The media attribute is optional, and accepts the media queries you find inCSS @media rule.You should also define an <img> element for browsers that do not support the<picture> element."
            }
        },
        "rwdvideos": {
            "title": "RWD Videos",
            "url": "https://www.w3schools.com/css/css_rwd_videos.asp",
            "info": {
                "Using The width Property": "If the width property is set to 100%, the video player will be responsive and scale up and down:```css\nvideo {\nwidth: 100%;\n  height: auto;\n\r\n}```Notice that in the example above, the video player can be scaled up to be larger than its original size. A better solution, in many cases, will be to use themax-width property instead.",
                "Using The max-width Property": "If the max-width property is set to 100%, the video player will scale down if it has to, but never scale up to be larger than its original size:```css\nvideo {\n  max-width: 100%;\n  height: auto;\n\r\n}```",
                "Add a Video to the Example Web Page": "We want to add a video in our example web page. The video will be resized to always take up all the available space:```css\nvideo {\n  width: 100%;\n  height: auto;\n\r\n}```"
            }
        },
        "rwdframeworks": {
            "title": "RWD Frameworks",
            "url": "https://www.w3schools.com/css/css_rwd_frameworks.asp",
            "info": {
                "Using W3.CSS": "A great way to create a responsive design, is to use a responsive style sheet, like W3.CSSW3.CSS makes it easy to develop sites that look nice at any size; desktop, laptop, tablet, or phone:To learn more about W3.CSS, read our W3.CSS Tutorial.",
                "Bootstrap": "Another popular framework is Bootstrap, it uses HTML, CSS and jQuery to make responsive web pages.```css\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Bootstrap \r\nExample</title>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" \r\ncontent=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" \r\nhref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\n\r\n<script \r\nsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n\r\n<script \r\nsrc=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\n\r\n</head>\n<body>\n<div class=\"container\">\n  <div \r\nclass=\"jumbotron\">\n    <h1>My First Bootstrap Page</h1>\n  \r\n</div>\n  <div class=\"row\">\n    <div \r\nclass=\"col-sm-4\">\n      ...\n    \r\n</div>\n    <div class=\"col-sm-4\">\n      \r\n...\n    </div>\n    <div \r\nclass=\"col-sm-4\">\n    ...\n    </div>\n  \r\n</div>\n</div>\n</body>\n</html>```To learn more about Bootstrap, go to our Bootstrap Tutorial."
            }
        },
        "rwdtemplates": {
            "title": "RWD Templates",
            "url": "https://www.w3schools.com/css/css_rwd_templates.asp",
            "info": {
                "W3.CSS Web Site Templates": "We have created some responsive templates with the W3.CSS framework.You are free to modify, save, share, and use them in all your projects."
            }
        },
        "gridintro": {
            "title": "Grid Intro",
            "url": "https://www.w3schools.com/css/css_grid.asp",
            "info": {
                "Grid Layout": "The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.",
                "Browser Support": "The grid properties are supported in all modern browsers.",
                "Grid Elements": "A grid layout consists of a parent element, with one or more child elements.```css\n<div class=\"grid-container\">\n  <div class=\"grid-item\">1</div>\n  <div class=\"grid-item\">2</div>\n  <div class=\"grid-item\">3</div>\n  <div class=\"grid-item\">4</div>\n  <div class=\"grid-item\">5</div>\n  <div class=\"grid-item\">6</div>\n  <div class=\"grid-item\">7</div>\n  <div class=\"grid-item\">8</div>\n  <div class=\"grid-item\">9</div>\n</div>```",
                "Display Property": "An HTML element becomes a grid container when its display property is set togrid or inline-grid.```css\n.grid-container {\n  display: grid;\n}``````css\n.grid-container {\n  display: inline-grid;\n}```All direct children of the grid container automatically become grid items.",
                "Grid Columns": "The vertical lines of grid items are called columns.",
                "Grid Rows": "The horizontal lines of grid items are called rows.",
                "Grid Gaps": "The spaces between each column/row are called gaps.You can adjust the gap size by using one of the following properties:grid-column-gapgrid-row-gapgrid-gap```css\n.grid-container {\n  display: grid;\n  grid-column-gap: 50px;\n}``````css\n.grid-container {\n  display: grid;\n  grid-row-gap: 50px;\n}``````css\n.grid-container {\n  display: grid;\n  grid-gap: 50px 100px;\n}``````css\n.grid-container {\n  display: grid;\n  grid-gap: 50px;\n}```",
                "Grid Lines": "The lines between columns are called column lines.The lines between rows are called row lines.Refer to line numbers when placing a grid item in a grid container:```css\n.item1 {\n  grid-column-start: 1;\n  grid-column-end: 3;\n}``````css\n.item1 {\n  grid-row-start: 1;\n  grid-row-end: 3;\n}```"
            }
        },
        "gridcontainer": {
            "title": "Grid Container",
            "url": "https://www.w3schools.com/css/css_grid_container.asp",
            "info": {
                "Grid Container": "To make an HTML element behave as a grid container, you have to set the display property to grid or inline-grid.Grid containers consist of grid items, placed inside columns and rows.",
                "The grid-template-columns Property": "The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.The value is a space-separated-list, where each value defines the width of the respective column.If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or \"auto\" if all columns should have the same width.```css\n.grid-container {\n  display: grid;\n  grid-template-columns: auto auto auto auto;\n}```The grid-template-columns property can also be used to specify the size (width) of the columns.```css\n.grid-container {\n  display: grid;\n  grid-template-columns: 80px 200px auto 40px;\n}```",
                "The grid-template-rows Property": "The grid-template-rows property defines the height of each row.The value is a space-separated-list, where each value defines the height of the respective row:```css\n.grid-container {\n  display: grid;\n  grid-template-rows: 80px 200px;\n}```",
                "The justify-content Property": "The justify-content property is used to align the whole grid inside the container.```css\n.grid-container {\n  display: grid;\n  justify-content: space-evenly;\n}``````css\n.grid-container {\n  display: grid;\n  justify-content: space-around;\n}``````css\n.grid-container {\n  display: grid;\n  justify-content: space-between;\n}``````css\n.grid-container {\n  display: grid;\n  justify-content: center;\n}``````css\n.grid-container {\n  display: grid;\n  justify-content: start;\n}``````css\n.grid-container {\n  display: grid;\n  justify-content: end;\n}```",
                "The align-content Property": "The align-content property is used to vertically align the whole grid inside the container.```css\n.grid-container {\n  display: grid;\n  height: 400px;\n  align-content: center;\n}``````css\n.grid-container {\n  display: grid;\n  height: 400px;\n  align-content: space-evenly;\n}``````css\n.grid-container {\n  display: grid;\n  height: 400px;\n  align-content: space-around;\n}``````css\n.grid-container {\n  display: grid;\n  height: 400px;\n  align-content: space-between;\n}``````css\n.grid-container {\n  display: grid;\n  height: 400px;\n  align-content: start;\n}``````css\n.grid-container {\n  display: grid;\n  height: 400px;\n  align-content: end;\n}```"
            }
        },
        "griditem": {
            "title": "Grid Item",
            "url": "https://www.w3schools.com/css/css_grid_item.asp",
            "info": {
                "Child Elements (Items)": "A grid container contains grid items.By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.",
                "The grid-column Property:": "The grid-column property defines on which column(s) to place an item.You define where the item will start, and where the item will end.To place an item, you can refer to line numbers, or use the keyword \"span\" to define how many columns the item will span.```css\n.item1 {\n  grid-column: 1 / 5;\n}``````css\n.item1 {\n  grid-column: 1 / span 3;\n}``````css\n.item2 {\n  grid-column: 2 / span 3;\n}```",
                "The grid-row Property:": "The grid-row property defines on which row to place an item.You define where the item will start, and where the item will end.To place an item, you can refer to line numbers, or use the keyword \"span\" to define how many rows the item will span:```css\n.item1 {\n  grid-row: 1 / 4;\n}``````css\n.item1 {\n  grid-row: 1 / span 2;\n}```",
                "The grid-area Property": "The grid-area property can be used as a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties.```css\n.item8 {\n  grid-area: 1 / 2 / 5 / 6;\n}``````css\n.item8 {\n  grid-area: 2 / 1 / span 2 / span 3;\n}```",
                "Naming Grid Items": "The grid-area property can also be used to assign names to grid items.Named grid items can be referred to by the grid-template-areas property of the grid container.```css\n.item1 {\n  grid-area: myArea;\n}\n.grid-container {\n  grid-template-areas: 'myArea myArea myArea myArea myArea';\n}```Each row is defined by apostrophes (' ')The columns in each row is defined inside the apostrophes, separated by a space.```css\n.item1 {\n  grid-area: myArea;\n}\n.grid-container {\n  grid-template-areas: 'myArea myArea . . .';\n}```To define two rows, define the column of the second row inside another set of apostrophes:```css\n.grid-container {\n  grid-template-areas: 'myArea myArea . . .' 'myArea myArea . . .';\n}``````css\n.item1 { grid-area: header; }\n.item2 { grid-area: menu; }\n.item3 { grid-area: main; }\n.item4 { grid-area: right; }\n.item5 { grid-area: footer; }\n.grid-container {\n  grid-template-areas:\n    'header header header header header header'\n    'menu main main main right right'\n    'menu footer footer footer footer footer';\n}```",
                "The Order of the Items": "The Grid Layout allows us to position the items anywhere we like.```css\n.item1 { grid-area: 1 / 3 / 2 / 4; }\n.item2 { grid-area: 2 / 3 / 3 / 4; }\n.item3 { grid-area: 1 / 1 / 2 / 2; }\n.item4 { grid-area: 1 / 2 / 2 / 3; }\n.item5 { grid-area: 2 / 1 / 3 / 2; }\n.item6 { grid-area: 2 / 2 / 3 / 3; }```You can re-arrange the order for certain screen sizes, by using media queries:```css\n@media only screen and (max-width: 500px) {\n  .item1 { grid-area: 1 / span 3 / 2 / 4; }\n  .item2 { grid-area: 3 / 3 / 4 / 4; }\n  .item3 { grid-area: 2 / 1 / 3 / 2; }\n  .item4 { grid-area: 2 / 2 / span 2 / 3; }\n  .item5 { grid-area: 3 / 1 / 4 / 2; }\n  .item6 { grid-area: 2 / 3 / 3 / 4; }\n}```"
            }
        }
    },
    "js": {
        "whereto": {
            "title": "JS Where To",
            "url": "https://www.w3schools.com/js/js_whereto.asp",
            "info": {
                "The <script> Tag": "In HTML, JavaScript code is inserted between <script> and </script> tags.```js\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = \"My First JavaScript\";\n\r\n</script>```",
                "JavaScript Functions and Events": "A JavaScript function is a block of JavaScript code, that can be executed when \"called\" for.For example, a function can be called when an event occurs, like when the user clicks a button.",
                "JavaScript in <head> or <body>": "You can place any number of scripts in an HTML document.Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.",
                "JavaScript in <head>": "In this example, a JavaScript function is placed in the <head> section of an HTML page.The function is invoked (called) when a button is clicked:```js\n<!DOCTYPE html>\n<html><head>\n\r\n<script>\n\r\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\n\r\n}\n\r\n</script>\n\r\n</head>\n<body>\n<h1>A Web Page</h1>\n<p id=\"demo\">A Paragraph</p>\n<button type=\"button\" onclick=\"myFunction()\">Try \r\nit</button>\n</body>\n\r\n</html>```",
                "JavaScript in <body>": "In this example, a JavaScript function is placed in the <body> section of an HTML page.The function is invoked (called) when a button is clicked:```js\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\r\n\n<h1>A Web Page</h1>\n<p id=\"demo\">A Paragraph</p>\n<button type=\"button\" onclick=\"myFunction()\">Try \r\nit</button>\n\n<script>\n\r\nfunction myFunction() {\n document.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\n\r\n}\n\r\n</script>\n\n</body>\n\r\n</html>```",
                "External JavaScript": "Scripts can also be placed in external files:```js\nfunction myFunction() {\ndocument.getElementById(\"demo\").innerHTML = \"Paragraph changed.\";\n\r\n}```External scripts are practical when the same code is used in many different web pages. JavaScript files have the file extension .js.To use an external script, put the name of the script file in the src (source) attribute of a <script> tag:```js\n<script src=\"myScript.js\"></script>```You can place an external script reference in <head> or <body> as you like.The script will behave as if it was located exactly where the <script> tag is located.",
                "External JavaScript Advantages": "Placing scripts in external files has some advantages:To add several script files to one page\u00a0 - use several script tags:```js\n<script src=\"myScript1.js\"></script>\n\r\n<script src=\"myScript2.js\"></script>```",
                "External References": "External scripts can be referenced with a full URL or with a path relative to the current web page.This example uses a full URL to link to a script: ```js\n<script src=\"https://www.w3schools.com/js/myScript1.js\"></script>```This example uses a script located in a specified folder on the current web site:```js\n<script src=\"/js/myScript1.js\"></script>```This example links to a script located in the same folder as the current page:```js\n<script src=\"myScript1.js\"></script>```"
            }
        },
        "output": {
            "title": "JS Output",
            "url": "https://www.w3schools.com/js/js_output.asp",
            "info": {
                "JavaScript Display Possibilities": "JavaScript can \"display\" data in different ways:",
                "Using innerHTML": "To access an HTML element, JavaScript can use the document.getElementById(id) method. The id attribute defines the HTML element. The innerHTML  property defines the HTML content:```js\n<!DOCTYPE html>\n<html>\n\r\n<body>\n\n\r\n<h1>My First Web Page</h1>\n\r\n <p>My First Paragraph</p>\n\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\n document.getElementById(\"demo\").innerHTML = 5 + 6;\n  </script>\n\n\r\n</body>\n\r\n</html>```",
                "Using document.write()": "For testing purposes, it is convenient to use document.write():```js\n<!DOCTYPE html>\n<html>\n\r\n<body>\n<h1>My First Web Page</h1>\n\r\n <p>My first paragraph.</p>\n\n<script>\ndocument.write(5 + 6);\n</script>\n\n\r\n</body>\n\r\n</html>``````js\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\r\n<h1>My First Web Page</h1>\n\r\n <p>My first paragraph.</p>\n\r\n<button type=\"button\" onclick=\"document.write(5 + 6)\">Try it</button>\n\r\n</body>\n\r\n</html>```",
                "Using window.alert()": "You can use an alert box to display data:```js\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\r\n<h1>My First Web Page</h1>\n<p>My first paragraph.</p>\n\n\r\n<script>\nwindow.alert(5 + 6);\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```You can skip the window keyword.In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belongs to the window object.This also means that specifying the window keyword is optional:```js\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\r\n<h1>My First Web Page</h1>\n<p>My first paragraph.</p>\n\n\r\n<script>\nalert(5 + 6);\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```",
                "Using console.log()": "For debugging purposes, you can call the console.log() methodin the browser to display data.```js\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\n\r\n<script>\n\r\nconsole.log(5 + 6);\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```",
                "JavaScript Print": "JavaScript does not have any print object or print methods.You cannot access output devices from JavaScript.The only exception is that you can call the window.print() method inthe browser to print the content of the current window.```js\n<!DOCTYPE html>\n\r\n<html>\n<body>\n\r\n<button onclick=\"window.print()\">Print this page</button>\n\r\n</body>\n\r\n</html>>```"
            }
        },
        "statements": {
            "title": "JS Statements",
            "url": "https://www.w3schools.com/js/js_statements.asp",
            "info": {
                "JavaScript Programs": "A computer program is a list of \"instructions\" to be \"executed\" by a computer.In a programming language, these programming instructions are called statements.A JavaScript program is a list of programming statements.",
                "JavaScript Statements": "JavaScript statements are composed of:Values, Operators, Expressions,\u00a0Keywords, and Comments.This statement tells the browser to write \"Hello Dolly.\" inside an HTML element with id=\"demo\":```js\ndocument.getElementById(\"demo\").innerHTML = \"Hello Dolly.\";```Most JavaScript programs contain many JavaScript statements.The statements are executed, one by one, in the same order as they are written.",
                "Semicolons ;": "Semicolons separate JavaScript statements.Add a semicolon at the end of each executable statement: ```js\nvar a, b, c;     // Declare 3 variables\na = 5;           // Assign the value 5 to a\n\r\nb = 6;           // Assign the value 6 to b\n\r\nc = a + b;       // Assign the sum of a and b to c```When separated by semicolons, multiple statements on one line are allowed:```js\na = 5; b = 6; c = a + b;```",
                "JavaScript White Space": "JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.The following lines are equivalent:```js\nvar person = \"Hege\";\n\r\nvar person=\"Hege\";```A good practice is to put spaces around operators ( = + - \\* / ):```js\nvar x = y + z;```",
                "JavaScript Line Length and Line Breaks": "For best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";```",
                "JavaScript Code Blocks": "JavaScript statements can be grouped together in code blocks, inside curly brackets {...}.The purpose of code blocks is to define statements to be executed together.One place you will find statements grouped together in blocks, is in JavaScript functions:```js\nfunction myFunction() {\ndocument.getElementById(\"demo1\").innerHTML = \"Hello Dolly!\";\ndocument.getElementById(\"demo2\").innerHTML = \"How are you?\";\n\r\n}```",
                "JavaScript Keywords": "JavaScript statements often start with a keyword to identify the JavaScript action to be performed.Visit our Reserved Words reference to view a full list ofJavaScript keywords.Here is a list of some of the keywords you will learn about in this tutorial: "
            }
        },
        "syntax": {
            "title": "JS Syntax",
            "url": "https://www.w3schools.com/js/js_syntax.asp",
            "info": {
                "JavaScript Values": "The JavaScript syntax defines two types of values: Fixed values and variable values.Fixed values are called literals. Variable values are calledvariables.",
                "JavaScript Literals": "The most important rules for writing fixed values are:Numbers are written with or without decimals:```js\n10.50\n\r\n1001```Strings are text, written within double or single quotes:```js\n\"John Doe\"\n\r\n'John Doe'```",
                "JavaScript Variables": "In a programming language, variables are used to store data values.JavaScript uses the var keyword to declare variables.An equal sign is used to assign values to variables.In this example, x is defined as a variable. Then, x is assigned (given) the value 6:```js\nvar x;\n\r\n x = 6;```",
                "JavaScript Operators": "JavaScript uses arithmetic operators ( + - \\* / ) to compute values: ```js\n(5 + 6) * 10```JavaScript uses an assignment operator ( = ) to assign values to variables: ```js\nvar x, y;\nx = 5;\n\r\ny = 6;```",
                "JavaScript Expressions": "An expression is a combination of values, variables, and operators, which computes to a value.The computation is called an evaluation.For example, 5 \\* 10 evaluates to 50:```js\n5 * 10```Expressions can also contain variable values:```js\nx * 10```The values can be of various types, such as numbers and strings.For example, \"John\" + \" \" + \"Doe\", evaluates to \"John Doe\":```js\n\"John\" + \" \" + \"Doe\"```",
                "JavaScript Keywords": "JavaScript keywords are used to identify actions to be performed.Thevar keyword tells the browser to create variables:```js\nvar x, y;\nx = 5 + 6;\ny = x * 10;```",
                "JavaScript Comments": "Not all JavaScript statements are \"executed\".Code after double slashes// or between /\\* and \\*/ is treated as a comment.Comments are ignored, and will not be executed:```js\nvar x = 5;   // I will be executed\n// var x = 6;   I will \r\nNOT be executed```",
                "JavaScript Identifiers": "Identifiers are names.In JavaScript, identifiers are used to name variables (and keywords, and functions, and labels).The rules for legal names are much the same in most programming languages.In JavaScript, the first character must be a letter, or an underscore (\\_), or a dollar sign ($).Subsequent characters may be letters, digits, underscores, or dollar signs.",
                "JavaScript is Case Sensitive": "All JavaScript identifiers are case sensitive.\u00a0 The variables lastName and lastname, are two different variables:```js\nvar lastname, lastName;\nlastName = \"Doe\";\nlastname = \"Peterson\";```JavaScript does not interpret VAR or Var as the keyword var.",
                "JavaScript and Camel Case": "Historically, programmers have used different ways of joining multiple words into one variable name:Hyphens:first-name, last-name, master-card, inter-city.Underscore:first\\_name, last\\_name, master\\_card, inter\\_city.Upper Camel Case (Pascal Case):FirstName, LastName, MasterCard, InterCity.Lower Camel Case:JavaScript programmers tend to use camel case that starts with a lowercase letter:firstName, lastName, masterCard, interCity.",
                "JavaScript Character Set": "JavaScript uses the Unicode character set.Unicode covers (almost) all the characters, punctuations, and symbols in the world.For a closer look, please study our Complete Unicode Reference."
            }
        },
        "comments": {
            "title": "JS Comments",
            "url": "https://www.w3schools.com/js/js_comments.asp",
            "info": {
                "Single Line Comments": "Single line comments start with //.Any text between // and the end of the line will be ignored by JavaScript (will not be executed).This example uses a single-line comment before each code line:```js\n// Change heading:\n\r\ndocument.getElementById(\"myH\").innerHTML = \"My First Page\";\n\r\n// Change paragraph:\n\r\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";```This example uses a single line comment at the end of each line to explain the code:```js\nvar x = 5;      // Declare x, give it the value of 5\n\r\nvar y = x + 2;  // Declare y, give it the value of x + 2```",
                "Multi-line Comments": "Multi-line comments start with /\\* and end with  \\*/.Any text between /\\* and \\*/ will be ignored by JavaScript.This example uses a multi-line comment (a comment block) to explain the code:```js\n/*\n\r\nThe code below will change\n\r\nthe heading with id = \"myH\"\n\r\nand the paragraph with id = \"myP\"\n\r\nin my web page:\n\r\n*/\n\r\ndocument.getElementById(\"myH\").innerHTML = \"My First Page\";\n\r\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";```",
                "Using Comments to Prevent Execution": "Using comments to prevent execution of code is suitable for code testing.Adding // in front of a code line changes the code lines from an executable line to a comment.This example uses // to prevent execution of one of the code lines:```js\n//document.getElementById(\"myH\").innerHTML = \"My First Page\";\n\r\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";```This example uses a comment block to prevent execution of multiple lines:```js\n/*\n\r\ndocument.getElementById(\"myH\").innerHTML = \"My First Page\";\n\r\ndocument.getElementById(\"myP\").innerHTML = \"My first paragraph.\";\n\r\n*/```"
            }
        },
        "variables": {
            "title": "JS Variables",
            "url": "https://www.w3schools.com/js/js_variables.asp",
            "info": {
                "Much Like Algebra": "In this example, price1, price2, and total, are variables:```js\nvar price1 = 5;\nvar price2 = 6;\n\r\nvar total = price1 + price2;```In programming, just like in algebra, we use variables (like price1) to hold values.In programming, just like in algebra, we use variables in expressions (total = price1 + price2).From the example above, you can calculate the total to be 11.",
                "JavaScript Identifiers": "All JavaScript variables must beidentified with unique names.These unique names are called identifiers.Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).The general rules for constructing names for variables (unique identifiers) are:",
                "The Assignment Operator": "In JavaScript, the equal sign (=) is an \"assignment\" operator, not an \"equal to\" operator.This is different from algebra. The following does not make sense in algebra:```js\nx = x + 5```In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to x.(It calculates the value of x + 5 and puts the result into x. The value of x is incremented by 5.)",
                "JavaScript Data Types": "JavaScript variables can hold numbers like 100 and text values like \"John Doe\".In programming, text values are called text strings.JavaScript can handle many types of data, but for now, just think of numbers and strings. Strings are written inside double or single quotes. Numbers are written without quotes.If you put a number in quotes, it will be treated as a text string.```js\nvar pi = 3.14;\n\r\nvar person = \"John Doe\";\n\r\nvar answer = 'Yes I am!';```",
                "Declaring (Creating) JavaScript Variables": "Creating a variable in JavaScript is called \"declaring\" a variable. You declare a JavaScript variable with the var keyword:```js\nvar carName;```After the declaration, the variable has no value (technically it has the value of undefined).To assign a value to the variable, use the equal sign:```js\ncarName = \"Volvo\";```You can also assign a value to the variable when you declare it:```js\nvar carName = \"Volvo\";```In the example below, we create a variable called carName and assign the value \"Volvo\" to it.Then we \"output\" the value inside an HTML paragraph with id=\"demo\":```js\n<p id=\"demo\"></p>\n<script>\n\r\nvar carName = \"Volvo\";\n\r\ndocument.getElementById(\"demo\").innerHTML = carName; \n</script>```",
                "One Statement, Many Variables": "You can declare many variables in one statement.Start the statement with var and separate the variables by comma:```js\nvar person = \"John Doe\", carName = \"Volvo\", price = 200;```A declaration can span multiple lines: ```js\nvar person = \"John Doe\",\n\r\ncarName = \"Volvo\",\n\r\nprice = 200;```",
                "Value = undefined": "In computer programs, variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input.A variable declared without a value will have the value undefined.The variable carName will have the value undefined after the execution of this statement:```js\nvar carName;```",
                "Re-Declaring JavaScript Variables": "If you re-declare a JavaScript variable, it will not lose its value.The variable carName will still have the value \"Volvo\" after the execution of these statements:```js\nvar\r\ncarName = \"Volvo\";\n\r\nvar carName;```",
                "JavaScript Arithmetic": "As with algebra, you can do arithmetic with JavaScript variables, using operators like = and +: ```js\nvar x = 5 + 2 + 3;```You can also add strings, but strings will be concatenated:```js\nvar x = \"John\" + \" \" + \"Doe\";```Also try this:```js\nvar x = \"5\" + 2 + 3;```Now try this:```js\nvar x = 2 + 3 + \"5\";```",
                "JavaScript Dollar Sign $": "Remember that JavaScript identifiers (names) must begin with:Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:```js\nvar $$$ = \"Hello World\";\n\r\nvar $ = 2;\n\r\nvar $myMoney = 5;```Using the dollar sign is not very common in JavaScript,but professional programmers often use it as an alias for the main function in a JavaScript library.In the JavaScript library jQuery, for instance, the main function$ is used to select HTML elements.In jQuery $(\"p\"); means \"select all p elements\".",
                "JavaScript Underscore (_)": "Since JavaScript treats underscore as a letter, identifiers containing \\_ are valid variable names:```js\nvar _lastName = \"Johnson\";\n\r\nvar _x = 2;\n\r\nvar _100 = 5;```Using the underscore is not very common in JavaScript,but a convention among professional programmers is to use it as an alias for\"private (hidden)\" variables."
            }
        },
        "operators": {
            "title": "JS Operators",
            "url": "https://www.w3schools.com/js/js_operators.asp",
            "info": {
                "JavaScript Arithmetic Operators": "Arithmetic operators are used to perform arithmetic on numbers:",
                "JavaScript Assignment Operators": "Assignment operators assign values to JavaScript variables.The addition assignment operator (+=) adds a value to a variable.```js\nvar x = 10;\nx += 5;```",
                "JavaScript String Operators": "The + operator can also be used to add (concatenate) strings.```js\nvar\r\ntxt1 = \"John\";\nvar\r\ntxt2 = \"Doe\";\nvar\r\ntxt3 = txt1 + \" \" + txt2;```The += assignment operator can also be used to add (concatenate) strings:```js\nvar\r\ntxt1 = \"What a very \";\n\r\ntxt1 += \"nice day\";```",
                "Adding Strings and Numbers": "Adding two numbers, will return the sum, but adding a number and a string will return a string:```js\nvar\r\nx = 5 + 5;\nvar\r\ny = \"5\" + 5;\nvar\r\nz = \"Hello\" + 5;```",
                "JavaScript Comparison Operators": "",
                "JavaScript Logical Operators": "",
                "JavaScript Type Operators": "",
                "JavaScript Bitwise Operators": "Bit operators work on 32 bits numbers."
            }
        },
        "arithmetic": {
            "title": "JS Arithmetic",
            "url": "https://www.w3schools.com/js/js_arithmetic.asp",
            "info": {
                "JavaScript Arithmetic Operators": "Arithmetic operators perform arithmetic on numbers (literals or variables).",
                "Arithmetic Operations": "A typical arithmetic operation operates on two numbers.The two numbers can be literals:```js\nvar x = 100 + 50;```or variables:```js\nvar x = a + b;```or expressions:```js\nvar x = (100 + 50) * a;```",
                "Operators and Operands": "The numbers (in an arithmetic operation) are called operands.The operation (to be performed between the two operands) is defined by an operator.",
                "Adding": "The addition operator (+) adds numbers:```js\nvar x = 5;\n\r\nvar y = 2;\nvar z = x + y;```",
                "Subtracting": "The subtraction operator (-) subtracts numbers.```js\nvar x = 5;\n\r\nvar y = 2;\nvar z = x - y;```",
                "Multiplying": "The multiplication operator (\\*) multiplies numbers.```js\nvar x = 5;\n\r\nvar y = 2;\nvar z = x * y;```",
                "Dividing": "The division operator (/) divides numbers.```js\nvar x = 5;\nvar y = 2;\n\r\nvar z = x / y;```",
                "Remainder": "The modulus operator (%) returns the division remainder.```js\nvar x = 5;\nvar y = 2;\n\r\nvar z = x % y;```",
                "Incrementing": "The increment operator (++) increments numbers.```js\nvar x = 5;\nx++;\nvar z = x;```",
                "Decrementing": "The decrement operator (--) decrements numbers.```js\nvar x = 5;\n\r\n x--;\nvar z = x;```",
                "Exponentiation": "The exponentiation operator (\\*\\*) raises the first operand to the power of the second operand.```js\nvar x = 5;\nvar z =\r\n x ** 2;          // result is 25```x \\*\\* y produces the same result as Math.pow(x,y):```js\nvar x = 5;\nvar z =Math.pow(x,2);   // result is 25```",
                "Operator Precedence": "Operator precedence describes the order in which operations are performed in an arithmetic expression.```js\nvar x = 100 + 50 * 3;```Is the result of example above the same as 150 \\* 3, or is it the same as 100 + 150?Is the addition or the multiplication done first?As in traditional school mathematics, the multiplication is done first.Multiplication (\\*) and division (/) have higher precedence than addition (+) and subtraction (-).And (as in school mathematics) the precedence can be changed by using parentheses:```js\nvar x = (100 + 50) * 3;```When using parentheses, the operations inside the parentheses are computed first. When many operations have the same precedence (like addition and subtraction), they are computed from left to right: ```js\nvar x = 100 + 50 - 3;```",
                "JavaScript Operator Precedence Values": ""
            }
        },
        "assignment": {
            "title": "JS Assignment",
            "url": "https://www.w3schools.com/js/js_assignment.asp",
            "info": {
                "JavaScript Assignment Operators": "Assignment operators assign values to JavaScript variables.",
                "Assignment Examples": "The = assignment operator assigns a value to a variable.```js\nvar x = 10;```The += assignment operator adds a value to a variable.```js\nvar x = 10;\nx += 5;```The -= assignment operator subtracts a value from a variable.```js\nvar x = 10;\nx -= 5;```The \\*= assignment operator multiplies a variable.```js\nvar x = 10;\nx *= 5;```The /= assignment divides a variable.```js\nvar x = 10;\nx /= 5;```The %= assignment operator assigns a remainder to a variable.```js\nvar x = 10;\nx %= 5;```"
            }
        },
        "datatypes": {
            "title": "JS Data Types",
            "url": "https://www.w3schools.com/js/js_datatypes.asp",
            "info": {
                "JavaScript Data Types": "JavaScript variables can hold many data types: numbers, strings, objects and more:```js\nvar length = 16;                               // Number\n\r\nvar lastName = \"Johnson\";                      // String\nvar \r\n x = {firstName:\"John\", lastName:\"Doe\"};    // Object```",
                "The Concept of Data Types": "In programming, data types is an important concept.To be able to operate on variables, it is important to know something about the type.Without data types, a computer cannot safely solve this:```js\nvar x = 16 + \"Volvo\";```Does it make any sense to add \"Volvo\" to sixteen? Will it produce an error or will it produce a result?JavaScript will treat the example above as:```js\nvar x =\r\n \"16\" + \"Volvo\";``````js\nvar x = 16 + \"Volvo\";``````js\nvar x = \"Volvo\" + 16;```JavaScript evaluates expressions from left to right. Different sequences can produce different results:```js\nvar x = 16 + 4 + \"Volvo\";``````js\nvar x = \"Volvo\" + 16 + 4;```In the first example, JavaScript treats 16 and 4 as numbers, until it reaches \"Volvo\".In the second example, since the first operand is a string, all operands are treated as strings.",
                "JavaScript Types are Dynamic": "JavaScript has dynamic types. This means that the same variable can be used to hold different data types:```js\nvar x;           // Now x is undefined\n\r\nx = 5;           // Now x is a Number\n\r\nx = \"John\";      // Now x is a String```",
                "JavaScript Strings": "A string (or a text string) is a series of characters like \"John Doe\".Strings are written with quotes. You can use single or double quotes:```js\nvar\r\ncarName1 = \"Volvo XC60\";   // Using double quotes\n\r\nvar\r\ncarName2 = 'Volvo XC60';   // Using single quotes```You can use quotes inside a string, as long as they don't match the quotes surrounding the string:```js\nvar answer1 = \"It's alright\";             \r\n// Single quote inside double quotes\n\r\nvar answer2 = \"He is called 'Johnny'\";   \r\n// Single quotes inside double quotes\n\r\nvar answer3 = 'He is called \"Johnny\"';   \r\n// Double quotes inside single quotes```You will learn more about strings later in this tutorial.",
                "JavaScript Numbers": "JavaScript has only one type of numbers.Numbers can be written with, or without decimals:```js\nvar x1 = 34.00;     // Written with decimals\n\r\nvar x2 = 34;        // Written without decimals```Extra large or extra small numbers can be written with scientific (exponential) notation:```js\nvar y = 123e5;      // 12300000\n\r\nvar z = 123e-5;     // 0.00123```You will learn more about numbers later in this tutorial.",
                "JavaScript Booleans": "Booleans can only have two values: true or false.```js\nvar x = 5;\nvar y = 5;\nvar z = 6;\n(x == y)       // Returns true\n(x == z)       // Returns false```Booleans are often used in conditional testing.You will learn more about conditional testing later in this tutorial.",
                "JavaScript Arrays": "JavaScript arrays are written with square brackets.Array items are separated by commas.The following code declares (creates) an array called cars, containing three items (car names):```js\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];```Array indexes are zero-based, which means the first item is [0], second is [1], and so on.You will learn more about arrays later in this tutorial.",
                "JavaScript Objects": "JavaScript objects are written with curly braces {}.Object properties are written as name:value pairs, separated by commas.```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};```The object (person) in the example above has 4 properties: firstName, lastName, age, and eyeColor.You will learn more about objects later in this tutorial.",
                "The typeof Operator": "You can use the JavaScript typeof operator to find the type of a JavaScript variable.The typeof operator returns the type of a variable or an expression:```js\ntypeof \"\"             // Returns \r\n \"string\"\n\r\ntypeof \"John\"         // Returns \r\n \"string\"\n\r\ntypeof \"John Doe\"     // Returns \r\n \"string\"``````js\ntypeof 0              // Returns \r\n \"number\"\ntypeof 314            // Returns \r\n \"number\"\ntypeof 3.14           // Returns \r\n \"number\"\ntypeof (3)            // Returns \r\n \"number\"\ntypeof (3 + 4)        // Returns \r\n \"number\"```",
                "Undefined": "In JavaScript, a variable without a value, has the value undefined. The type is also undefined.```js\nvar car;    // Value is undefined,   type is undefined```Any variable can be emptied, by setting the value to undefined. The type will also be undefined.```js\ncar = undefined;    // Value is undefined,   type is undefined```",
                "Empty Values ": "An empty value has nothing to do with undefined.An empty string has both a legal value and a type.```js\nvar car = \"\";    //   The value is   \"\", the typeof is \"string\"```",
                "Null": "In JavaScript null is \"nothing\". It is supposed to be something that doesn't exist.Unfortunately, in JavaScript, the data type of null is an object.You can empty an object by setting it to null:```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nperson = null;    // Now value is null,   but type is still an object```You can also empty an object by setting it to undefined:```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\nperson = undefined;   // Now both value and type is undefined```",
                "Difference Between Undefined and Null": "undefined and null are equal in value but different in type:```js\ntypeof undefined             // undefined\ntypeof null                  // object\nnull === undefined           // false\nnull == undefined            // true```",
                "Primitive Data": "A primitive data value is a single simple data value with no additional properties and methods.The typeof operator can return one of these primitive types:```js\ntypeof \"John\"              // Returns \r\n \"string\" \n\r\ntypeof 3.14                // Returns \r\n \"number\"\n\r\ntypeof true                // Returns \r\n \"boolean\"\ntypeof false               // Returns \r\n \"boolean\"\ntypeof x                   // Returns \"undefined\" (if x has no value)```",
                "Complex Data": "The typeof operator can return one of two complex types:The typeof operator returns \"object\" for objects, arrays, and null.The typeof operator does not return \"object\" for functions.```js\ntypeof {name:'John', age:34} // Returns \"object\"\n\r\ntypeof [1,2,3,4]            \r\n// Returns \"object\" (not \"array\", see note below)\n\r\ntypeof null                  // Returns \"object\"\ntypeof function myFunc(){}   // Returns \"function\"```"
            }
        },
        "functions": {
            "title": "JS Functions",
            "url": "https://www.w3schools.com/js/js_functions.asp",
            "info": {
                "JavaScript Function Syntax": "A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).The parentheses may include parameter names separated by commas:(parameter1, parameter2, ...)The code to be executed, by the function, is placed inside curly brackets: {}```js\nfunction\r\nname(parameter1, parameter2, parameter3) {\n  // code to be executed\n\r\n}```Function parameters are listed inside the parentheses () in the function definition.Function arguments are the values received by the function when it is invoked.Inside the function, the arguments (the parameters) behave as local variables.",
                "Function Invocation": "The code inside the function will execute when \"something\" invokes (calls) the function:You will learn a lot more about function invocation later in this tutorial.",
                "Function Return": "When JavaScript reaches a return statement, the function will stop executing.If the function was invoked from a statement, JavaScript will \"return\" to execute the code after the invoking statement.Functions often compute a return value. The return value is \"returned\" back to the \"caller\":```js\nvar x = myFunction(4, 3);   // Function is called, return value will end up in x\n\r\nfunction myFunction(a, b) {\n  return a * b;            \r\n// Function returns the product of a and b\n\r\n}```",
                "Why Functions?": "You can reuse code: Define the code once, and use it many times.You can use the same code many times with different arguments, to produce different results.```js\nfunction toCelsius(fahrenheit) {\n  return (5/9) * (fahrenheit-32);\n\r\n}\ndocument.getElementById(\"demo\").innerHTML = toCelsius(77);```",
                "The () Operator Invokes the Function": "Using the example above, toCelsius refers to the function object, and toCelsius() refers to the function result.Accessing a function without () will return the function object instead of the function result.```js\nfunction toCelsius(fahrenheit) {\n  return (5/9) * (fahrenheit-32);\n\r\n}\ndocument.getElementById(\"demo\").innerHTML = toCelsius;```",
                "Functions Used as Variable Values": "Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.```js\nvar x = toCelsius(77);\nvar text = \"The temperature is \" + x + \" Celsius\";```",
                "Local Variables": "Variables declared within a JavaScript function, become LOCAL to the function.Local variables can only be accessed from within the function.```js\n// code here can NOT use carName\n\r\nfunction myFunction() {\nvar carName = \"Volvo\";\n// code here CAN use carName\n\r\n}\n\r\n// code here can NOT use carName```Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.Local variables are created when a function starts, and deleted when the function is completed."
            }
        },
        "objects": {
            "title": "JS Objects",
            "url": "https://www.w3schools.com/js/js_objects.asp",
            "info": {
                "Real Life Objects, Properties, and Methods": "In real life, a car is an object. A car has properties like weight and color, and methods like start and stop:All cars have the same properties, but the property values differ from car to car.All cars have the same methods, but the methods are performed at different times.",
                "JavaScript Objects": "You have already learned that JavaScript variables are containers for data values.This code assigns a simple value (Fiat) to a variable named car: ```js\nvar car = \"Fiat\";```Objects are variables too. But objects can contain many values. This code assigns many values (Fiat, 500, white) to avariable named car:```js\nvar car = {type:\"Fiat\", model:\"500\", color:\"white\"};```The values are written as name:value pairs (name and value separated by a colon).",
                "Object Definition": "You define (and create) a JavaScript object with an object literal:```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};```Spaces and line breaks are not important. An object definition can span multiple lines: ```js\nvar person = {\n  firstName: \"John\",\n  lastName: \"Doe\",\nage: 50,\neyeColor: \"blue\"\n\r\n};```",
                "Object Properties": "The name:values pairs in JavaScript objects are called properties:",
                "Accessing Object Properties": "You can access object properties in two ways: ```js\nobjectName.propertyName```or```js\nobjectName[\"propertyName\"]``````js\nperson.lastName;``````js\nperson[\"lastName\"];```",
                "Object Methods": "Objects can also have methods.Methods are actions that can be performed on objects.Methods are stored in properties as function definitions.```js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  id       : 5566,\n  fullName : function() {\n  return this.firstName + \" \" + this.lastName;\n  }\n\r\n};```",
                "The this Keyword": "In a function definition, this refers to the \"owner\" of the function.In the example above, this is the person object that \"owns\" the fullName function.In other words, this.firstName means the firstName property of this object.Read more about the this keyword at JS this Keyword.",
                "Accessing Object Methods": "You access an object method with the following syntax:```js\nobjectName.methodName()``````js\nname = person.fullName();```If you access a method without the () parentheses, it will return the function definition:```js\nname = person.fullName;```",
                "Do Not Declare Strings, Numbers, and Booleans as Objects!": "When a JavaScript variable is declared with the keyword \"new\", the variable is created as an object: ```js\nvar x = new String();        // Declares x as a String object\n\r\nvar y = new Number();        // Declares y as a Number object\n\r\nvar z = new Boolean();       // Declares z as a Boolean object```Avoid String, Number, and Boolean objects. They complicate your code and slow down  execution speed."
            }
        },
        "events": {
            "title": "JS Events",
            "url": "https://www.w3schools.com/js/js_events.asp",
            "info": {
                "HTML Events": "An HTML event can be something the browser does, or something a user does.Here are some examples of HTML events:Often, when events happen, you may want to do something.JavaScript lets you execute code when events are detected.HTML allows event handler attributes, with JavaScript code, to be added to HTML elements.With single quotes:With double quotes:In the following example, an onclick attribute (with code), is added to a <button> element:```js\n<button onclick=\"document.getElementById('demo').innerHTML = Date()\">The time is?</button>```In the example above, the JavaScript code changes the content of the element with id=\"demo\".In the next example, the code changes the content of its own element (using this.innerHTML): ```js\n<button onclick=\"this.innerHTML = Date()\">The time is?</button>``````js\n<button onclick=\"displayDate()\">The time is?</button>```",
                "Common HTML Events": "Here is a list of some common HTML events:The list is much longer: W3Schools JavaScript Reference HTML DOM Events.",
                "What can JavaScript Do?": "Event handlers can be used to handle, and verify, user input, user actions, and browser actions:Many different methods can be used to let JavaScript work with events:"
            }
        },
        "strings": {
            "title": "JS Strings",
            "url": "https://www.w3schools.com/js/js_strings.asp",
            "info": {
                "JavaScript Strings": "A JavaScript string is zero or more characters written inside quotes.```js\nvar x = \"John Doe\";```You can use single or double quotes:```js\nvar carName1 = \"Volvo XC60\";  // Double quotes\n\r\nvar carName2 = 'Volvo XC60';  // Single quotes```You can use quotes inside a string, as long as they don't match the quotes surrounding the string:```js\nvar answer1 = \"It's alright\";\n\r\nvar answer2 = \"He is called 'Johnny'\";\n\r\nvar answer3 = 'He is called \"Johnny\"';```",
                "String Length": "To find the length of a string, use the built-in length property:```js\nvar txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nvar sln = txt.length;```",
                "Escape Character": "Because strings must be written within quotes, JavaScript will misunderstand this string:```js\nvar x = \"We are the so-called \"Vikings\" from the north.\";```The string will be chopped to \"We are the so-called \".The solution to avoid this problem, is to use the backslash escape character.The backslash (\\) escape character turns special characters into string characters:The sequence \\\"\u00a0 inserts a double quote in a string:```js\nvar x = \"We are the so-called \\\"Vikings\\\" from the north.\";```The sequence \\'\u00a0 inserts a single quote in a string:```js\nvar x = 'It\\'s alright.';```The sequence \\\\\u00a0 inserts a backslash in a string:```js\nvar x = \"The character \\\\ is called backslash.\";```Six other escape sequences are valid in JavaScript:",
                "Breaking Long Code Lines": "For best readability, programmers often like to avoid code lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it is after an operator:```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Hello Dolly!\";```You can also break up a code line within a text string with a single backslash:```js\ndocument.getElementById(\"demo\").innerHTML = \r\n\"Hello \\\nDolly!\";```A safer way to break up a string, is to use string addition:```js\ndocument.getElementById(\"demo\").innerHTML = \"Hello \" + \n\"Dolly!\";```You cannot break up a code line with a backslash:```js\ndocument.getElementById(\"demo\").innerHTML = \\ \n\"Hello Dolly!\";```",
                "Strings Can be Objects": "Normally, JavaScript strings are primitive values, created from literals:var firstName = \"John\";But strings can also be defined as objects with the keyword new:var firstName = new String(\"John\");```js\nvar x = \"John\";\n\r\nvar y = new String(\"John\");\n\r\n// typeof x will return string\n// typeof y will return object``` When using the == operator, equal strings are equal:```js\nvar x = \"John\";             \n\r\nvar y = new String(\"John\");\n\r\n// (x == y) is true because x and y have equal values```When using the === operator, equal strings are not equal, because the === operator expects equality in both type and value.```js\nvar x = \"John\";             \n\r\nvar y = new String(\"John\");\n\r\n// (x === y) is false because x and y have different types\r\n (string and object)```Or even worse. Objects cannot be compared:```js\nvar x = new String(\"John\");             \n\r\nvar y = new String(\"John\");\n\r\n// (x == y) is false because x and y are different objects```"
            }
        },
        "stringmethods": {
            "title": "JS String Methods",
            "url": "https://www.w3schools.com/js/js_string_methods.asp",
            "info": {
                "String Methods and Properties": "Primitive values, like \"John Doe\", cannot have properties or methods (because they are not objects). But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.",
                "String Length": "The length property returns the length of a string:```js\nvar txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nvar sln = txt.length;```",
                "Finding a String in a String": "The indexOf() method returns the index of (the position of) the first occurrence of a specified text in a string:```js\nvar str = \"Please locate where 'locate' occurs!\";\n\r\nvar pos = str.indexOf(\"locate\");```The lastIndexOf() method returns the index of the last occurrence of a specified text in a string:```js\nvar str = \"Please locate where 'locate' occurs!\";\n\r\nvar pos = str.lastIndexOf(\"locate\");```Both indexOf(), and lastIndexOf() return -1 if the text is not found.```js\nvar str = \"Please locate where 'locate' occurs!\";\n\r\nvar pos = str.lastIndexOf(\"John\");```Both methods accept a second parameter as the starting position for the search:```js\nvar str = \"Please locate where 'locate' occurs!\";\n\r\nvar pos = str.indexOf(\"locate\", 15);```The lastIndexOf() methods searches backwards (from the end to the beginning), meaning:if the second parameter is 15, the search starts at position 15, and searches to the beginning of the string.",
                "Searching for a String in a String": "The search() method searches a string for a specified value and returns the position of the match:```js\nvar str = \"Please locate where 'locate' occurs!\";\n\r\nvar pos = str.search(\"locate\");```",
                "Did You Notice?": "The two methods, indexOf() and search(), are equal?They accept the same arguments (parameters), and return the same value?The two methods are NOT equal. These are the differences:You will learn more about regular expressions in a later chapter.",
                "Extracting String Parts": "There are 3 methods for extracting a part of a string:",
                "The slice() Method": "slice() extracts a part of a string and returns the extracted part in a new string.The method takes 2 parameters: the start position, and the end position (end not included).This example slices out a portion of a string from position 7 to position 12 (13-1):```js\nvar str = \"Apple, Banana, Kiwi\";\n\r\nvar res = str.slice(7, 13);```If a parameter is negative, the position is counted from the end of the string.This example slices out a portion of a string from position -12 to position -6: ```js\nvar str = \"Apple, Banana, Kiwi\";\n\r\nvar res = str.slice(-12, -6);```If you omit the second parameter, the method will slice out the rest of the string:```js\nvar res = str.slice(7);```or, counting from the end:```js\nvar res = str.slice(-12);```",
                "The substring() Method": "substring() is similar to slice().The difference is that substring() cannot accept negative indexes.```js\nvar str = \"Apple, Banana, Kiwi\";\n\r\nvar res = str.substring(7, 13);```If you omit the second parameter, substring() will slice out the rest of the string.",
                "The substr() Method": "substr() is similar to slice().The difference is that the second parameter specifies the length of the extracted part.```js\nvar str = \"Apple, Banana, Kiwi\";\n\r\nvar res = str.substr(7, 6);```If you omit the second parameter, substr() will slice out the rest of the string.```js\nvar str = \"Apple, Banana, Kiwi\";\n\r\nvar res = str.substr(7);```If the first parameter is negative, the position counts from the end of the string.```js\nvar str = \"Apple, Banana, Kiwi\";\n\r\nvar res = str.substr(-4);```",
                "Replacing String Content": "The replace() method replaces a specified value with another value in a string:```js\nstr = \"Please visit Microsoft!\";\n\r\nvar n = str.replace(\"Microsoft\", \"W3Schools\");```By default, the replace() method replaces only the first match:```js\nstr = \"Please visit Microsoft and Microsoft!\";\n\r\nvar n = str.replace(\"Microsoft\", \"W3Schools\");```By default, the replace() method is case sensitive. Writing MICROSOFT (with upper-case) will not work:```js\nstr = \"Please visit Microsoft!\";\n\r\nvar n = str.replace(\"MICROSOFT\", \"W3Schools\");```To replace case insensitive, use a regular expression with an /i flag (insensitive):```js\nstr = \"Please visit Microsoft!\";\n\r\nvar n = str.replace(/MICROSOFT/i, \"W3Schools\");```To replace all matches, use a regular expression with a /g flag (global match):```js\nstr = \"Please visit Microsoft and Microsoft!\";\n\r\nvar n = str.replace(/Microsoft/g, \"W3Schools\");```",
                "Converting to Upper and Lower Case": "A string is converted to upper case with toUpperCase():```js\nvar text1 = \"Hello World!\";       // String\n\r\nvar text2 = text1.toUpperCase();  // text2 is text1 converted to upper```A string is converted to lower case with toLowerCase():```js\nvar text1 = \"Hello World!\";       // String\n\r\nvar text2 = text1.toLowerCase();  // text2 is text1 \r\nconverted to lower```",
                "The concat() Method": "concat() joins two or more strings:```js\nvar text1 = \"Hello\";\n\r\nvar text2 = \"World\";\n\r\nvar text3 = text1.concat(\" \", text2);```The concat() method can be used instead of the plus operator. These two lines do the same:```js\nvar text = \"Hello\" + \" \" + \"World!\";\n\r\nvar text = \"Hello\".concat(\" \", \"World!\");```",
                "String.trim()": "The trim() method removes whitespace from both sides of a string:```js\nvar str = \"       Hello World!        \";\nalert(str.trim());```If you need to support IE 8, you can use replace() with a regular expression instead:```js\nvar str = \"       Hello World!        \";\nalert(str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''));```You can also use the replace solution above to add a trim function to the JavaScript String.prototype:```js\nif (!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n  };\n}\nvar str = \"       Hello World!        \";\nalert(str.trim());```",
                "Extracting String Characters": "There are 3 methods for extracting string characters:",
                "The charAt() Method": "The charAt() method returns the character at a specified index (position) in a string:```js\nvar str = \"HELLO WORLD\";\n\r\nstr.charAt(0);            // returns H```",
                "The charCodeAt() Method": "The charCodeAt() method returns the unicode of the character at a specified index in a string:The method returns a UTF-16 code (an integer between 0 and 65535).```js\nvar str = \"HELLO WORLD\";\n\r\nstr.charCodeAt(0);         // returns 72```",
                "Property Access": "ECMAScript 5 (2009) allows property access [ ] on strings:```js\nvar str = \"HELLO WORLD\";\n\r\nstr[0];                   // returns H``````js\nvar str = \"HELLO WORLD\";\n\r\nstr[0] = \"A\";            // Gives no error, but does not work\n\r\nstr[0];                   // returns H```",
                "Converting a String to an Array": "A string can be converted to an array with the split() method:```js\nvar txt = \"a,b,c,d,e\";   // String\n\r\ntxt.split(\",\");          // Split on commas\n\r\ntxt.split(\" \");          // Split on spaces\n\r\ntxt.split(\"|\");          // Split on pipe```If the separator is omitted, the returned array will contain the whole string in index [0].If the separator is \"\", the returned array will be an array of single characters:```js\nvar txt = \"Hello\";       // String\n\r\ntxt.split(\"\");           // Split in characters```",
                "Complete String Reference": "For a complete reference, go to our Complete JavaScript String Reference.The reference contains descriptions and examples of all string properties and methods."
            }
        },
        "numbers": {
            "title": "JS Numbers",
            "url": "https://www.w3schools.com/js/js_numbers.asp",
            "info": {
                "JavaScript Numbers are Always 64-bit Floating Point": "Unlike many other programming languages, JavaScript does not define different types of numbers, like integers, short, long, floating-point etc.JavaScript numbers are always stored as double precision floating point numbers, following the international IEEE 754 standard. This format stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 to 51, the exponent in bits 52 to 62, and the sign in bit 63:",
                "Precision": "Integers (numbers without a period or exponent notation) are accurate up to 15 digits.```js\nvar x = 999999999999999;   // x will be 999999999999999\n\r\nvar y = 9999999999999999;  // y will be 10000000000000000```The maximum number of decimals is 17, but floating point arithmetic is not always 100% accurate:```js\nvar x = 0.2 + 0.1;         // x will be 0.30000000000000004```To solve the problem above, it helps to multiply and divide:```js\nvar x = (0.2 * 10 + 0.1 * 10) / 10;       // x will be 0.3```",
                "Adding Numbers and Strings": "If you add two numbers, the result will be a number:```js\nvar x = 10;\n\r\nvar y = 20;\n\r\nvar z = x + y;           // z will be 30 (a number)```If you add two strings, the result will be a string concatenation:```js\nvar x = \"10\";\n\r\nvar y = \"20\";\n\r\nvar z = x + y;           // z will be 1020 (a string)```If you add a number and a string, the result will be a string concatenation:```js\nvar x = 10;\n\r\nvar y = \"20\";\n\r\nvar z = x + y;           // z will be 1020 (a string)```If you add a string and a number, the result will be a string concatenation:```js\nvar x = \"10\";\n\r\nvar y = 20;\n\r\nvar z = x + y;           // z will be 1020 (a string)```A common mistake is to expect this result to be 30:```js\nvar x = 10;\n\r\nvar y = 20;\n\r\nvar z = \"The result is: \" + x + y;```A common mistake is to expect this result to be 102030:```js\nvar x = 10;\n\r\nvar y = 20;\n\r\nvar z = \"30\";\n\r\nvar result = x + y + z;```",
                "Numeric Strings": "JavaScript strings can have numeric content:```js\nvar x = 100;         // x is a number\n\nvar y = \"100\";       // y is a \r\nstring```JavaScript will try to convert strings to numbers in all numeric operations:This will work:```js\nvar x = \"100\";\n\r\nvar y = \"10\";\n\r\nvar z = x / y;        // z will be 10```This will also work:```js\nvar x = \"100\";\n\r\nvar y = \"10\";\n\r\nvar z = x * y;        // z will be 1000```And this will work:```js\nvar x = \"100\";\n\r\nvar y = \"10\";\n\r\nvar z = x - y;        // z will be 90```But this will not work:```js\nvar x = \"100\";\n\r\nvar y = \"10\";\n\r\nvar z = x + y;        // z will not be 110 (It will be 10010)```",
                "NaN - Not a Number": "NaN is a JavaScript reserved word indicating that a number is not a legal number.Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):```js\nvar x = 100 / \"Apple\"; \r\n// x will be NaN (Not a Number)```However, if the string contains a numeric value , the result will be a number:```js\nvar x = 100 / \"10\";    \r\n// x will be 10```You can use the global JavaScript function isNaN() to find out if a value is a number:```js\nvar x = 100 / \"Apple\";\nisNaN(x);               // returns true because x is Not a Number```Watch out for NaN. If you use NaN in a mathematical operation, the result will also be NaN:```js\nvar x = NaN;\n\r\nvar y = 5;\n\r\nvar z = x + y;         \r\n// z will be NaN```Or the result might be a concatenation: ```js\nvar x = NaN;\n\r\nvar y = \"5\";\n\r\nvar z = x + y;         // z will be NaN5```NaN is a number: typeof NaN returns number:```js\ntypeof NaN;            // returns \"number\"```",
                "Infinity": "Infinity (or -Infinity) is the value JavaScript will return if you calculate a number outside the largest possible number.```js\nvar\r\n myNumber = 2;\nwhile (myNumber != Infinity) {   // Execute until Infinity\n  myNumber = myNumber * myNumber;\n}```Division by 0 (zero) also generates Infinity:```js\nvar x =  2 / 0;      \r\n// x will be Infinity\n\r\nvar y = -2 / 0;       // y will be -Infinity```Infinity is a number: typeof Infinity returns number.```js\ntypeof Infinity;     // returns \"number\"```",
                "Hexadecimal": "JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.```js\nvar x = 0xFF;        // x will be 255```By default, JavaScript displays numbers as base 10 decimals.But you can use the toString() method to output numbers from base 2 to base 36.Hexadecimal is base 16. Decimal is base 10. Octal is base 8. Binary is base 2.```js\nvar myNumber = 32;\nmyNumber.toString(10);  // returns 32\nmyNumber.toString(32);  // returns 10\nmyNumber.toString(16);  // returns 20\n\r\nmyNumber.toString(8);   // returns 40\n\r\nmyNumber.toString(2);   // returns 100000```",
                "Numbers Can be Objects": "Normally JavaScript numbers are primitive values created from literals:var x = 123;But numbers can also be defined as objects with the keyword new:var y = new Number(123);```js\nvar x = 123;\n\r\nvar y = new Number(123);\n\r\n //\r\ntypeof x returns number\n\r\n //\r\ntypeof y returns object``` When using the == operator, equal numbers are equal:```js\nvar x = 500;             \n\r\nvar y = new Number(500);\n\r\n// (x == y) is true because x and y have equal values```When using the === operator, equal numbers are not equal, because the === operator expects equality in both type and value.```js\nvar x = 500;             \n\r\nvar y = new Number(500);\n\r\n// (x === y) is false because x and y have different types```Or even worse. Objects cannot be compared:```js\nvar x = new Number(500);             \n\r\nvar y = new Number(500);\n\r\n// (x == y) is false because objects cannot be compared```"
            }
        },
        "numbermethods": {
            "title": "JS Number Methods",
            "url": "https://www.w3schools.com/js/js_number_methods.asp",
            "info": {
                "Number Methods and Properties": "Primitive values (like 3.14 or 2014), cannot have properties and methods (because they are not objects). But with JavaScript, methods and properties are also available to primitive values, because JavaScript treats primitive values as objects when executing methods and properties.",
                "The toString() Method": "The toString() method returns a number as a string.All number methods can be used on any type of numbers (literals, variables, or expressions):```js\nvar x = 123;\n\r\nx.toString();            // returns 123 from variable x\n\r\n(123).toString();        // returns 123 from literal 123\n\r\n(100 + 23).toString();   // returns 123 from expression 100 + 23```",
                "The toExponential() Method": "toExponential() returns a string, with a number rounded and written using exponential notation.A parameter defines the number of characters behind the decimal point:```js\nvar x = 9.656;\n\r\nx.toExponential(2);     // returns 9.66e+0\n\r\nx.toExponential(4);     // returns 9.6560e+0\n\r\nx.toExponential(6);     // returns 9.656000e+0```The parameter is optional. If you don't specify it, JavaScript will not round the number.",
                "The toFixed() Method": "toFixed() returns a string, with the number written with a specified number of decimals:```js\nvar x = 9.656;\n\r\nx.toFixed(0);           // returns 10\n\r\nx.toFixed(2);           // returns 9.66\n\r\nx.toFixed(4);           // returns 9.6560\n\r\nx.toFixed(6);           // returns 9.656000```",
                "The toPrecision() Method": "toPrecision() returns a string, with a number written with a specified length:```js\nvar x = 9.656;\n\r\nx.toPrecision();        // returns 9.656\n\r\nx.toPrecision(2);       // returns 9.7\n\r\nx.toPrecision(4);       // returns 9.656\n\r\nx.toPrecision(6);       // returns 9.65600```",
                "The valueOf() Method": "valueOf() returns a number as a number.```js\nvar x = 123;\n\r\nx.valueOf();            // returns 123 from variable x\n\r\n(123).valueOf();        // returns 123 from literal 123\n\r\n(100 + 23).valueOf();   // returns 123 from expression 100 + 23```In JavaScript, a number can be a primitive value (typeof = number) or an object (typeof = object).The valueOf() method is used internally in JavaScript to convert Number objects to primitive values.There is no reason to use it in your code.",
                "Converting Variables to Numbers": "There are 3 JavaScript methods that can be used to convert variables to numbers:These methods are not number methods, but global JavaScript methods.",
                "Global JavaScript Methods": "JavaScript global methods can be used on all JavaScript data types.These are the most relevant methods, when working with numbers:",
                "The Number() Method": "Number() can be used to convert JavaScript variables to numbers:```js\nNumber(true);          // returns 1\nNumber(false);         // returns 0\nNumber(\"10\");          // returns 10\nNumber(\"  10\");        // returns 10\nNumber(\"10  \");        // returns 10\nNumber(\" 10  \");       // returns 10\nNumber(\"10.33\");       // returns 10.33\nNumber(\"10,33\");       // returns NaN\nNumber(\"10 33\");       // returns NaN \nNumber(\"John\");        // returns NaN```",
                "The Number() Method Used on Dates": "Number() can also convert a date to a number:```js\nNumber(new Date(\"2017-09-30\"));    // returns 1506729600000```",
                "The parseInt() Method": "parseInt() parses a string and returns a whole number. Spaces are allowed. Only the first number is returned:```js\nparseInt(\"10\");         // returns 10\n\r\nparseInt(\"10.33\");      // returns 10\n\r\nparseInt(\"10 20 30\");   // returns 10\n\r\nparseInt(\"10 years\");   // returns 10\nparseInt(\"years 10\");   // returns NaN```If the number cannot be converted, NaN (Not a Number) is returned.",
                "The parseFloat() Method": "parseFloat() parses a string and returns a number. Spaces are allowed. Only the first number is returned:```js\nparseFloat(\"10\");        // returns 10\n\r\nparseFloat(\"10.33\");     // returns 10.33\n\r\nparseFloat(\"10 20 30\");  // returns 10\n\r\nparseFloat(\"10 years\");  // returns 10\nparseFloat(\"years 10\");  // returns NaN```If the number cannot be converted, NaN (Not a Number) is returned.",
                "Number Properties": "",
                "JavaScript MIN_VALUE and MAX_VALUE": "MAX\\_VALUE returns the largest possible number in JavaScript.```js\nvar x = Number.MAX_VALUE;```MIN\\_VALUE returns the lowest possible number in JavaScript.```js\nvar x = Number.MIN_VALUE;```",
                "JavaScript POSITIVE_INFINITY": "```js\nvar x = Number.POSITIVE_INFINITY;```POSITIVE\\_INFINITY is returned on overflow:```js\nvar x = 1 / 0;```",
                "JavaScript NEGATIVE_INFINITY": "```js\nvar x = Number.NEGATIVE_INFINITY;```NEGATIVE\\_INFINITY is returned on overflow:```js\nvar x = -1 / 0;```",
                "JavaScript NaN - Not a Number": "```js\nvar x = Number.NaN;```NaN is a JavaScript reserved word indicating that a number is not a legal number.Trying to do arithmetic with a non-numeric string will result in NaN (Not a Number):```js\nvar x = 100 / \"Apple\"; \r\n// x will be NaN (Not a Number)```",
                "Number Properties Cannot be Used on Variables": "Number properties belongs to the JavaScript's number object wrapper called Number.These properties can only be accessed as Number.MAX\\_VALUE.Using myNumber.MAX\\_VALUE, where myNumber is a variable, expression, or value, will return undefined:```js\nvar x = 6;\nvar y = x.MAX_VALUE;    // y becomes undefined```",
                "Complete JavaScript Number Reference": "For a complete reference, go to our Complete JavaScript Number Reference.The reference contains descriptions and examples of all Number  properties and methods."
            }
        },
        "arrays": {
            "title": "JS Arrays",
            "url": "https://www.w3schools.com/js/js_arrays.asp",
            "info": {
                "What is an Array?": "An array is a special variable, which can hold more than one value at a time.If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?The solution is an array!An array can hold many values under a single name, and you can access the values by referring to an index number.",
                "Creating an Array": "Using an array literal is the easiest way to create a JavaScript Array.Syntax: ```js\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];```Spaces and line breaks are not important. A declaration can span multiple lines: ```js\nvar cars = [\n\"Saab\",\n  \"Volvo\",\n  \"BMW\"\n\r\n];```",
                "Using the JavaScript Keyword new": "The following example also creates an Array, and assigns values to it:```js\nvar cars = new Array(\"Saab\", \"Volvo\", \"BMW\");```",
                "Access the Elements of an Array": "You access an array element by referring to the index number.This statement accesses the value of the first element in cars:```js\nvar name = cars[0];``````js\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = cars[0];```",
                "Changing an Array Element": "This statement changes the value of the first element in cars:```js\ncars[0] = \"Opel\";``````js\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\r\ncars[0] = \"Opel\";\ndocument.getElementById(\"demo\").innerHTML = cars[0];```",
                "Access the Full Array": "With JavaScript, the full array can be accessed by referring to the array name:```js\nvar cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = cars;```",
                "Arrays are Objects": "Arrays are a special type of objects. The typeof operator in JavaScript returns \"object\" for arrays.But, JavaScript arrays are best described as arrays.Arrays use numbers to access its \"elements\". In this example, person[0] returns John:```js\nvar person = [\"John\", \"Doe\", 46];```Objects use names to access its \"members\". In this example, person.firstName returns John:```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:46};```",
                "Array Elements Can Be Objects": "JavaScript variables can be objects. Arrays are special kinds of objects.Because of this, you can have variables of different types in the same Array.You can have objects in an Array. You can have functions in an Array. You can have arrays in an Array:",
                "Array Properties and Methods": "The real strength of JavaScript arrays are the built-in array properties and methods:```js\nvar x = cars.length;   // The length property returns the number of elements\n\r\nvar y = cars.sort();   // The sort() method sorts arrays```Array methods are covered in the next chapters.",
                "The length Property": "The length property of an array returns the length of an array (the number of array elements).```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.length;   // the length of fruits is 4```",
                "Accessing the First Array Element": "```js\nfruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar first = fruits[0];```",
                "Accessing the Last Array Element": "```js\nfruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar last = fruits[fruits.length - 1];```",
                "Looping Array Elements": "The safest way to loop through an array, is using a for loop:```js\nvar fruits, text, fLen, i;\nfruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfLen = fruits.length;\ntext = \"<ul>\";\nfor (i = 0; i < fLen; i++) {\n  text += \"<li>\" + fruits[i] + \"</li>\";\n}\ntext += \"</ul>\";```You can also use the Array.forEach() function:```js\nvar fruits, text;\nfruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\ntext = \"<ul>\";\nfruits.forEach(myFunction);\ntext += \"</ul>\";\n\nfunction myFunction(value) {\n  \r\n text += \"<li>\" + value + \"</li>\";\n}```",
                "Adding Array Elements": "The easiest way to add a new element to an array is using the push() method:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.push(\"Lemon\");    // adds a new element (Lemon) to fruits```New element can also be added to an array using the length property:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits[fruits.length] = \"Lemon\";    // adds a new element (Lemon) to fruits``````js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits[6] = \"Lemon\";    // adds a new element (Lemon) to fruits```",
                "Associative Arrays": "Many programming languages support arrays with named indexes.Arrays with named indexes are called associative arrays (or hashes).JavaScript does not support arrays with named indexes.In JavaScript, arrays always use numbered indexes.\u00a0\u00a0 ```js\nvar person = [];\n\r\nperson[0] = \"John\";\n\r\nperson[1] = \"Doe\";\n\r\nperson[2] = 46;\nvar x = person.length;     \r\n // person.length will return 3\nvar y = person[0];         \r\n // person[0] will return \"John\"``````js\nvar person = [];\n\r\nperson[\"firstName\"] = \"John\";\n\r\nperson[\"lastName\"] = \"Doe\";\n\r\nperson[\"age\"] = 46;\nvar x = person.length;     // person.length will \r\n return 0\nvar y = person[0];         \r\n // person[0] will return undefined```",
                "The Difference Between Arrays and Objects": "In JavaScript, arrays use numbered indexes.\u00a0\u00a0 In JavaScript, objects use named indexes.",
                "When to Use Arrays. When to use Objects.": "",
                "Avoid new Array()": "There is no need to use the JavaScript's built-in array constructor new Array().Use [] instead.These two different statements both create a new empty array named points:```js\nvar points = new Array();     // Bad\n\r\nvar points = [];              // Good```These two different statements both create a new array containing 6 numbers:```js\nvar points = new Array(40, 100, 1, 5, 25, 10); // Bad\n\r\nvar points = [40, 100, 1, 5, 25, 10];          // Good```The new keyword only complicates the code. It can also produce some unexpected results:```js\nvar points = new Array(40, 100);  // Creates an array with two elements (40 and 100)```What if I remove one of the elements?```js\nvar points = new Array(40);  // Creates an array with 40 undefined elements !!!!!```",
                "How to Recognize an Array": "A common question is: How do I know if a variable is an array?The problem is that the JavaScript operator typeof returns \"object\":```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\ntypeof fruits;    // returns object```The typeof operator returns object because a JavaScript array is an object. To solve this problem ECMAScript 5 defines a new method Array.isArray():```js\nArray.isArray(fruits);   // returns true```The problem with this solution is that ECMAScript 5 is not supported in older browsers.To solve this problem you can create your own isArray() function:```js\nfunction isArray(x) {\n  return x.constructor.toString().indexOf(\"Array\") > -1;\n}```The function above always returns true if the argument is an array.Or more precisely: it returns true if the object prototype contains the word \"Array\".The instanceof operator returns true if an object is created by a given constructor:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\nfruits instanceof Array;   // returns true```"
            }
        },
        "arraymethods": {
            "title": "JS Array Methods",
            "url": "https://www.w3schools.com/js/js_array_methods.asp",
            "info": {
                "Converting Arrays to Strings": "The JavaScript method toString() converts an array to a string of (comma separated) array values.```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();```The join() method also joins all array elements into a string.It behaves just like toString(), but in addition you can specify the separator:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = fruits.join(\" * \");```",
                "Popping and Pushing": "When you work with arrays, it is easy to remove elements and add new elements.This is what popping and pushing is:Popping items out of an array, or pushing items into an array.",
                "Popping": "The pop() method removes the last element from an array: ```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.pop();              \r\n// Removes the last element (\"Mango\") from fruits```The pop() method returns the value that was \"popped out\":```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\n var x =\r\nfruits.pop();      \r\n// the value of x is \"Mango\"```",
                "Pushing": "The push() method adds a new element to an array (at the end):```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\n fruits.push(\"Kiwi\");       //  Adds a new element (\"Kiwi\") to fruits```The push() method returns the new array length:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\n var x =\r\n fruits.push(\"Kiwi\");   //  the value of x is 5```",
                "Shifting Elements": "Shifting is equivalent to popping, working on the first element instead of the last.The shift() method removes the first array element and \"shifts\" all other elements to a lower index.```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.shift();           \r\n// Removes the first element \"Banana\" from fruits```The shift() method returns the string that was \"shifted out\":```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nvar x =\r\nfruits.shift();    // the value of x is \"Banana\"```The unshift() method adds a new element to an array (at the beginning), and \"unshifts\" older elements: ```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.unshift(\"Lemon\");   \r\n// Adds a new element \"Lemon\" to fruits```The unshift() method returns the new array length.```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.unshift(\"Lemon\");   \r\n// Returns 5```",
                "Changing Elements": "Array elements are accessed using their index number:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits[0] = \"Kiwi\";       \r\n// Changes the first element of fruits to \"Kiwi\"```The length property provides an easy way to append a new element to an array:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits[fruits.length] = \"Kiwi\";         \r\n// Appends \"Kiwi\" to fruits```",
                "Deleting Elements": "Since JavaScript arrays are objects, elements can be deleted by using the JavaScript operator delete:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\ndelete fruits[0];          \r\n// Changes the first element in fruits to undefined```",
                "Splicing an Array": "The splice() method can be used to add new items to an array: ```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.splice(2, 0, \"Lemon\", \"Kiwi\");```The first parameter (2) defines the position where new elements should be added (spliced in).The second parameter (0) defines how many elements should beremoved.The rest of the parameters (\"Lemon\" , \"Kiwi\") define the new elements to beadded.The splice() method returns an array with the deleted items: ```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.splice(2, 2, \"Lemon\", \"Kiwi\");```",
                "Using splice() to Remove Elements": "With clever parameter setting, you can use splice() to remove elements without leaving \"holes\" in the array: ```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.splice(0, 1);       \r\n// Removes the first element of fruits```The first parameter (0) defines the position where new elements should be added (spliced in).The second parameter (1) defines how many elements should beremoved.The rest of the parameters are omitted. No new elements will be added.",
                "Merging (Concatenating) Arrays": "The concat() method creates a new array by merging (concatenating) existing arrays:```js\nvar myGirls = [\"Cecilie\", \"Lone\"];\n\r\nvar myBoys = [\"Emil\", \"Tobias\", \"Linus\"];\nvar myChildren = myGirls.concat(myBoys);  \r\n// Concatenates (joins) myGirls and myBoys```The concat() method can take any number of array arguments:```js\nvar arr1 = [\"Cecilie\", \"Lone\"];\n\r\nvar arr2 = [\"Emil\", \"Tobias\", \"Linus\"];\n\r\nvar arr3 = [\"Robin\", \"Morgan\"];\n\r\nvar myChildren = arr1.concat(arr2, arr3);   // Concatenates arr1 with arr2 and arr3```The concat() method can also take strings as arguments:```js\nvar arr1 = [\"Emil\", \"Tobias\", \"Linus\"];\n\r\nvar myChildren = arr1.concat(\"Peter\");```",
                "Slicing an Array": "The slice() method slices out a piece of an array into a new array.This example slices out a part of an array starting from array element 1 (\"Orange\"):```js\nvar fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\n\r\nvar citrus = fruits.slice(1);```This example slices out a part of an array starting from array element 3 (\"Apple\"):```js\nvar fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\n\r\nvar citrus = fruits.slice(3);```The slice() method can take two arguments like slice(1, 3).The method then selects elements from the start argument, and up to (but not including) the end argument.```js\nvar fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\n\r\nvar citrus = fruits.slice(1, 3);```If the end argument is omitted, like in the first examples, the slice() method slices out the rest of the array.```js\nvar fruits = [\"Banana\", \"Orange\", \"Lemon\", \"Apple\", \"Mango\"];\n\r\nvar citrus = fruits.slice(2);```",
                "Automatic toString()": "JavaScript automatically converts an array to a comma separated string when a primitive value is expected.This is always the case when you try to output an array. These two examples will produce the same result:```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = fruits.toString();``````js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = fruits;```",
                "Finding Max and Min Values in an Array": "There are no built-in functions for finding the highest or lowest value in a JavaScript array.You will learn how you solve this problem in the next chapter of this tutorial.",
                "Sorting Arrays": "Sorting arrays are covered in the next chapter of this tutorial.",
                "Complete Array Reference": "For a complete reference, go to our Complete JavaScript Array Reference.The reference contains descriptions and examples of all Array properties and methods."
            }
        },
        "arraysort": {
            "title": "JS Array Sort",
            "url": "https://www.w3schools.com/js/js_array_sort.asp",
            "info": {
                "Sorting an Array": "The sort() method sorts an array alphabetically: ```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.sort();        // Sorts the elements of fruits```",
                "Reversing an Array": "The reverse() method reverses the elements in an array.You can use it to sort an array in descending order: ```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nfruits.sort();       \r\n// First sort the elements of fruits \n\r\nfruits.reverse();     \r\n// Then reverse the order of the elements```",
                "Numeric Sort": "By default, the sort() function sorts values as strings.This works well for strings (\"Apple\" comes before \"Banana\").However, if numbers are sorted as strings, \"25\" is bigger than \"100\", because \"2\" is bigger than \"1\".Because of this, the sort() method will produce incorrect result when sorting numbers.You can fix this by providing a compare function:```js\nvar points = [40, 100, 1, 5, 25, 10];\n\r\npoints.sort(function(a, b){return a - b});```Use the same trick to sort an array descending:```js\nvar points = [40, 100, 1, 5, 25, 10];\n\r\npoints.sort(function(a, b){return b - a});```",
                "The Compare Function": "The purpose of the compare function is to define an alternative sort order.The compare function should return a negative, zero, or positive value, depending on the arguments:```js\nfunction(a, b){return a - b}```When the sort() function compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.If the result is negative a is sorted beforeb.If the result is positive b is sorted before a.If the result is 0 no changes are done with the sort order of the two values.Example:The compare function compares all the values in the array, two values at a time (a, b).When comparing 40 and 100, the sort() method calls the compare function(40, 100).The function calculates 40 - 100 (a - b), and since the result is negative (-60),\u00a0 the sort function will sort 40 as a value lower than 100.You can use this code snippet to experiment with numerically and alphabetically sorting:",
                "Sorting an Array in Random Order": "```js\nvar points = [40, 100, 1, 5, 25, 10];\n\r\npoints.sort(function(a, b){return 0.5 - Math.random()});```",
                "The Fisher Yates Method": "The above example, array.sort(), is not accurate, it will favor some numbers over the others.The most popular correct method, is called the Fisher Yates shuffle, and was introduced in data science as early as 1938!In JavaScript the method can be translated to this:```js\nvar points = [40, 100, 1, 5, 25, 10];\nfor (i = points.length -1; i > 0; i--) {\n  j = Math.floor(Math.random() * i)\n  k = points[i]\n  points[i] = points[j]\n  points[j] = k\n}```",
                "Find the Highest (or Lowest) Array Value": "There are no built-in functions for finding the max or min value in an array.However, after you have sorted an array, you can use the index to obtain the highest and lowest values.Sorting ascending:```js\nvar points = [40, 100, 1, 5, 25, 10];\n\r\npoints.sort(function(a, b){return a - b});\n\r\n// now points[0] contains the lowest value\n\r\n// and points[points.length-1] contains the highest value```Sorting descending:```js\nvar points = [40, 100, 1, 5, 25, 10];\n\r\npoints.sort(function(a, b){return b - a});\n\r\n// now points[0] contains the highest value\n\r\n// and points[points.length-1] contains the lowest value```",
                "Using Math.max() on an Array": "You can use Math.max.apply to find the highest number in an array:```js\nfunction myArrayMax(arr) {\n  return Math.max.apply(null, arr);\n}```Math.max.apply(null, [1, 2, 3]) is equivalent to Math.max(1, 2, 3).",
                "Using Math.min() on an Array": "You can use Math.min.apply to find the lowest number in an array:```js\nfunction myArrayMin(arr) {\nreturn Math.min.apply(null, arr);\n}```Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).",
                "My Min / Max JavaScript Methods": "The fastest solution is to use a \"home made\" method.This function loops through an array comparing each value with the highest value found: ```js\nfunction myArrayMax(arr) {\n  var len = arr.length;\n  var max = -Infinity;\n  while (len--) {\n      if (arr[len] > max) {\n      max = arr[len];\n    }\n  }\n  return max;\n}```This function loops through an array comparing each value with the lowest value found: ```js\nfunction myArrayMin(arr) {\n  var len = arr.length;\n  var min = Infinity;\n  while (len--) {\n    if (arr[len] < min) {\n      min = arr[len];\n    }\n  }\n  return min;\n}```",
                "Sorting Object Arrays": "JavaScript arrays often contain objects:```js\nvar cars = [\n\r\n {type:\"Volvo\", year:2016},\n\r\n {type:\"Saab\", year:2001},\n\r\n {type:\"BMW\", year:2010}\n];```Even if objects have properties of different data types, the sort() method can be used to sort the array. The solution is to write a compare function to compare the property values:```js\ncars.sort(function(a, b){return a.year - b.year});```Comparing string properties is a little more complex:```js\ncars.sort(function(a, b){\n  var x = a.type.toLowerCase();\n  var y = b.type.toLowerCase();\n  if (x < y) {return -1;}\n  \r\n if (x > y) {return 1;}\n  return 0;\n});```"
            }
        },
        "arrayiteration": {
            "title": "JS Array Iteration",
            "url": "https://www.w3schools.com/js/js_array_iteration.asp",
            "info": {
                "Array.forEach()": "The forEach() method calls a function (a callback function) once for each array element.```js\nvar txt = \"\";\nvar numbers = [45, 4, 9, 16, 25];\n\r\nnumbers.forEach(myFunction);\n\r\nfunction myFunction(value, index, array) {\n \r\ntxt = txt + value + \"<br>\"; \n\r\n}```Note that the function takes 3 arguments:The example above uses only the value parameter. The example can be rewritten to:```js\nvar txt = \"\";\nvar numbers = [45, 4, 9, 16, 25];\n\r\nnumbers.forEach(myFunction);\n\r\nfunction myFunction(value) {\n \r\ntxt = txt + value + \"<br>\"; \n\r\n}```Array.forEach() is supported in all browsers except Internet Explorer 8 or earlier:",
                "Array.map()": "The map() method creates a new array by performing a function on each array element.The map() method does not execute the function for array elements without values.The map() method does not change the original array.This example multiplies each array value by 2: ```js\nvar numbers1 = [45, 4, 9, 16, 25];\n\r\nvar numbers2 = numbers1.map(myFunction);\n\n\r\nfunction myFunction(value, index, array) {\n  return value * 2;\n\r\n}```Note that the function takes 3 arguments:When a callback function uses only the value parameter, the index and array parameters can be omitted: ```js\nvar numbers1 = [45, 4, 9, 16, 25];\n\r\nvar numbers2 = numbers1.map(myFunction);\n\n\r\nfunction myFunction(value) {\n  return value * 2;\n\r\n}```Array.map() is supported in all browsers except Internet Explorer 8 or earlier.",
                "Array.filter()": "The filter() method creates a new array with array elements that passes a test.This example creates a new array from elements with a value larger than 18:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar over18 = numbers.filter(myFunction);\nfunction myFunction(value, index, array) {\n  return value > 18;\n}```Note that the function takes 3 arguments:In the example above, the callback function does not use the index and array parameters, so they can be omitted:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar over18 = numbers.filter(myFunction);\nfunction myFunction(value) {\n  return value > 18;\n}```Array.filter() is supported in all browsers except Internet Explorer 8 or earlier.",
                "Array.reduce()": "The reduce() method runs a function on each array element to produce (reduce it to) a single value.The reduce() method works from left-to-right in the array. See also reduceRight().This example finds the sum of all numbers in an array:```js\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduce(myFunction);\n\nfunction myFunction(total, value, index, array) {\n  return total + value;\n}```Note that the function takes 4 arguments:The example above does not use the index and array parameters. It can be rewritten to:```js\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduce(myFunction);\n\nfunction myFunction(total, value) {\n  return total + value;\n}```The reduce() method can accept an initial value:```js\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduce(myFunction, 100);\n\nfunction myFunction(total, value) {\n  return total + value;\n}```Array.reduce() is supported in all browsers except Internet Explorer 8 or earlier.",
                "Array.reduceRight()": "The reduceRight() method runs a function on each array element to produce (reduce it to) a single value.The reduceRight() works from right-to-left in the array. See also reduce().This example finds the sum of all numbers in an array:```js\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduceRight(myFunction);\n\nfunction myFunction(total, value, index, array) {\n  return total + value;\n}```Note that the function takes 4 arguments:The example above does not use the index and array parameters. It can be rewritten to:```js\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduceRight(myFunction);\n\nfunction myFunction(total, value) {\n  return total + value;\n}```Array.reduceRight() is supported in all browsers except Internet Explorer 8 or earlier.",
                "Array.every()": "The every() method check if all array values pass a test.This example check if all array values are larger than 18:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar allOver18 = numbers.every(myFunction);\nfunction myFunction(value, index, array) {\n  return value > 18;\n}```Note that the function takes 3 arguments:When a callback function uses the first parameter only (value), the other parameters can be omitted:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar allOver18 = numbers.every(myFunction);\nfunction myFunction(value) {\n  return value > 18;\n}```Array.every() is supported in all browsers except Internet Explorer 8 or earlier.",
                "Array.some()": "The some() method check if some array values pass a test.This example check if some array values are larger than 18:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar someOver18 = numbers.some(myFunction);\nfunction myFunction(value, index, array) {\n  return value > 18;\n}```Note that the function takes 3 arguments:Array.some() is supported in all browsers except Internet Explorer 8 or earlier.",
                "Array.indexOf()": "The indexOf() method searches an array for an element value and returns its position.Note: The first item has position 0, the second item has position 1, and so on.```js\nvar fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nvar a = fruits.indexOf(\"Apple\");```Array.indexOf() is supported in all browsers except Internet Explorer 8 or earlier.Array.indexOf() returns -1 if the item is not found.If the item is present more than once, it returns the position of the first occurrence.",
                "Array.lastIndexOf()": "Array.lastIndexOf() is the same as Array.indexOf(), but returns the position of the last occurrence of the specified element.```js\nvar fruits = [\"Apple\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nvar a = fruits.lastIndexOf(\"Apple\");```Array.lastIndexOf() is supported in all browsers except Internet Explorer 8 or earlier.",
                "Array.find()": "The find() method returns the value of the first array element that passes a test function.This example finds (returns the value of) the first element that is larger than 18:```js\nvar numbers = [4, 9, 16, 25, 29];\nvar first = numbers.find(myFunction);\nfunction myFunction(value, index, array) {\n  return value > 18;\n}```Note that the function takes 3 arguments:Array.find() is not supported in older browsers. The first browser versions with full support is listed below.",
                "Array.findIndex()": "The findIndex() method returns the index of the first array element that passes a test function.This example finds the index of the first element that is larger than 18:```js\nvar numbers = [4, 9, 16, 25, 29];\nvar first = numbers.findIndex(myFunction);\nfunction myFunction(value, index, array) {\n  return value > 18;\n}```Note that the function takes 3 arguments:Array.findIndex() is not supported in older browsers. The first browser versions with full support is listed below."
            }
        },
        "dates": {
            "title": "JS Dates",
            "url": "https://www.w3schools.com/js/js_dates.asp",
            "info": {
                "JavaScript Date Output": "By default, JavaScript will use the browser's time zone and display a date as a full text string:",
                "Creating Date Objects": "Date objects are created with the new Date() constructor.There are 4 ways to create a new date object:```js\nnew Date()\nnew Date(year, month, day, hours, minutes, seconds, milliseconds)\nnew Date(milliseconds)\n\r\nnew Date(date string)```",
                "new Date()": "new Date() creates a new date object with the current date and time:```js\nvar d = new Date();```",
                "new Date(year, month, ...)": "new Date(year, month, ...) creates a new date object with a specified date and time.7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):```js\nvar d = new Date(2018, 11, 24, 10, 33, 30, 0);```6 numbers specify year, month, day, hour, minute, second:```js\nvar d = new Date(2018, 11, 24, 10, 33, 30);```5 numbers specify year, month, day, hour, and minute:```js\nvar d = new Date(2018, 11, 24, 10, 33);```4 numbers specify year, month, day, and hour:```js\nvar d = new Date(2018, 11, 24, 10);```3 numbers specify year, month, and day:```js\nvar d = new Date(2018, 11, 24);```2 numbers specify year and month:```js\nvar d = new Date(2018, 11);``````js\nvar d = new Date(2018);```",
                "Previous Century": "One and two digit years will be interpreted as 19xx:```js\nvar d = new Date(99, 11, 24);``````js\nvar d = new Date(9, 11, 24);```",
                "new Date(dateString)": "new Date(dateString) creates a new date object from a date string:```js\nvar d = new Date(\"October 13, 2014 11:13:00\");```",
                "JavaScript Stores Dates as Milliseconds": "JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).Now the time is:  milliseconds past January 01, 1970",
                "new Date(milliseconds)": "new Date(milliseconds) creates a new date object as zero time plus milliseconds:```js\nvar d = new Date(0);```01 January 1970 plus 100 000 000 000 milliseconds is approximately 03 March 1973:```js\nvar d = new Date(100000000000);```January 01 1970 minus 100 000 000 000 milliseconds is approximately October 31 1966:```js\nvar d = new Date(-100000000000);``````js\nvar d = new Date(86400000);```",
                "Date Methods": "When a Date object is created, a number of methods allow you to operate on it.Date methods allow you to get and set the year, month, day, hour, minute, second, and millisecond of date objects, using either local time or UTC (universal, or GMT) time.",
                "Displaying Dates": "JavaScript will (by default) output dates in full text string format:```js\n```When you display a date object in HTML, it is automatically converted to a string, with the toString() method.```js\nd = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d;```The toUTCString() method converts a date to a UTC string (a date display standard).```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.toUTCString();```The toDateString() method converts a date to a more readable format:```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.toDateString();```The toISOString() method converts a date to a string, using the ISO standard format:```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.toISOString();```"
            }
        },
        "dateformats": {
            "title": "JS Date Formats",
            "url": "https://www.w3schools.com/js/js_date_formats.asp",
            "info": {
                "JavaScript Date Input": "There are generally 3 types of JavaScript date input formats:",
                "JavaScript Date Output": "Independent of input format, JavaScript will (by default) output dates in full text string format:```js\n```",
                "JavaScript ISO Dates": "ISO 8601 is the international standard for the representation of dates and times.The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:```js\nvar d = new Date(\"2015-03-25\");```",
                "ISO Dates (Year and Month)": "ISO dates can be written without specifying the day (YYYY-MM):```js\nvar d = new Date(\"2015-03\");```",
                "ISO Dates (Only Year)": "ISO dates can be written without month and day (YYYY):```js\nvar d = new Date(\"2015\");```",
                "ISO Dates (Date-Time)": "ISO dates can be written with added hours, minutes, and seconds (YYYY-MM-DDTHH:MM:SSZ):```js\nvar d = new Date(\"2015-03-25T12:00:00Z\");```Date and time is separated with a capital T.UTC time is defined with a capital letter Z.If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM instead: ```js\nvar d = new Date(\"2015-03-25T12:00:00-06:30\");```",
                "Time Zones": "When setting a date, without specifying the time zone, JavaScript will use the browser's time zone.When getting a date, without specifying the time zone, the result is converted to the browser's time zone.In other words: If a date/time is created in GMT (Greenwich Mean Time), the date/time will be converted to CDT (Central US Daylight Time) if a user browses from central US.",
                "JavaScript Short Dates.": "Short dates are written with an \"MM/DD/YYYY\" syntax like this:```js\nvar d = new Date(\"03/25/2015\");```",
                "WARNINGS !": "```js\nvar d = new Date(\"2015-3-25\");``````js\nvar d = new Date(\"2015/03/25\");``````js\nvar d = new Date(\"25-03-2015\");```",
                "JavaScript Long Dates.": "Long dates are most often written with a \"MMM DD YYYY\" syntax like this: ```js\nvar d = new Date(\"Mar 25 2015\");```Month and day can be in any order:```js\nvar d = new Date(\"25 Mar 2015\");```And, month can be written in full (January), or abbreviated (Jan):```js\nvar d = new Date(\"January 25 2015\");``````js\nvar d = new Date(\"Jan 25 2015\");```Commas are ignored. Names are case insensitive:```js\nvar d = new Date(\"JANUARY, 25, 2015\");```",
                "Date Input - Parsing Dates": "If you have a valid date string, you can use the Date.parse() method to convert it to milliseconds.Date.parse() returns the number of milliseconds between the date and January 1, 1970:```js\nvar msec = Date.parse(\"March 21, 2012\");\n\r\ndocument.getElementById(\"demo\").innerHTML = msec;```You can then use the number of milliseconds to convert it to a date object:```js\nvar msec = Date.parse(\"March 21, 2012\");\n\r\nvar d = new Date(msec);\n\r\ndocument.getElementById(\"demo\").innerHTML = d;```"
            }
        },
        "dategetmethods": {
            "title": "JS Date Get Methods",
            "url": "https://www.w3schools.com/js/js_date_methods.asp",
            "info": {
                "The getTime() Method": "The getTime() method returns the number of milliseconds since January 1, 1970:```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getTime();```",
                "The getFullYear() Method": "The getFullYear() method returns the year of a date as a four digit number:```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getFullYear();```",
                "The getMonth() Method": "The getMonth() method returns the month of a date as a number (0-11):```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getMonth();```You can use an array of names, and getMonth() to return the month as a name:```js\nvar d = new Date();\n\r\nvar months = [\"January\", \"February\", \"March\", \"April\", \"May\",\r\n\"June\", \"July\", \"August\", \"September\", \"October\",\r\n\"November\", \"December\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = months[d.getMonth()];```",
                "The getDate() Method": "The getDate() method returns the day of a date as a number (1-31):```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getDate();```",
                "The getHours() Method": "The getHours() method returns the hours of a date as a number (0-23):```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getHours();```",
                "The getMinutes() Method": "The getMinutes() method returns the minutes of a date as a number (0-59):```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getMinutes();```",
                "The getSeconds() Method": "The getSeconds() method returns the seconds of a date as a number (0-59):```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getSeconds();```",
                "The getMilliseconds() Method": "The getMilliseconds() method returns the milliseconds of a date as a number (0-999):```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getMilliseconds();```",
                "The getDay() Method": "The getDay() method returns the weekday of a date as a number (0-6):```js\nvar d = new Date();\n\r\ndocument.getElementById(\"demo\").innerHTML = d.getDay();```You can use an array of names, and getDay() to return the weekday as a name:```js\nvar d = new Date();\n\r\nvar days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\r\n\"Thursday\", \"Friday\", \"Saturday\"];\n\r\ndocument.getElementById(\"demo\").innerHTML = days[d.getDay()];```",
                "UTC Date Methods": "UTC date methods are used for working with UTC dates (Universal Time Zone dates):",
                "Complete JavaScript Date Reference": "For a complete reference, go to our Complete JavaScript Date Reference.The reference contains descriptions and examples of all Date properties and methods."
            }
        },
        "datesetmethods": {
            "title": "JS Date Set Methods",
            "url": "https://www.w3schools.com/js/js_date_methods_set.asp",
            "info": {
                "Set Date Methods": "Set Date methods are used for setting a part of a date:",
                "The setFullYear() Method": "The setFullYear() method sets the year of a date object. In this example to 2020:```js\n<script>\n\r\n var d = new Date();\n\r\n d.setFullYear(2020);\n\r\ndocument.getElementById(\"demo\").innerHTML = d;\n\r\n</script>```The setFullYear() method can optionally set month and day:```js\n<script>\n\r\n var d = new Date();\n\r\n d.setFullYear(2020, 11, 3);\n\r\ndocument.getElementById(\"demo\").innerHTML = d;\n\r\n</script>```",
                "The setMonth() Method": "The setMonth() method sets the month of a date object (0-11):```js\n<script>\n\r\nvar d = new Date();\n\r\nd.setMonth(11);\n\r\ndocument.getElementById(\"demo\").innerHTML = d;\n\r\n</script>```",
                "The setDate() Method": "The setDate() method sets the day of a date object (1-31):```js\n<script>\n\r\n var d = new Date();\n\r\n d.setDate(15);\ndocument.getElementById(\"demo\").innerHTML = d;\n</script>```The setDate() method can also be used to add days to a date:```js\n<script>\n\r\n var d = new Date();\n\r\n d.setDate(d.getDate() + 50);\ndocument.getElementById(\"demo\").innerHTML = d;\n</script>```",
                "The setHours() Method": "The setHours() method sets the hours of a date object (0-23):```js\n<script>\n\r\nvar d = new Date();\n\r\nd.setHours(22);\n\r\ndocument.getElementById(\"demo\").innerHTML = d;\n\r\n</script>```",
                "The setMinutes() Method": "The setMinutes() method sets the minutes of a date object (0-59):```js\n<script>\n\r\nvar d = new Date();\n\r\nd.setMinutes(30);\n\r\ndocument.getElementById(\"demo\").innerHTML = d;\n\r\n</script>```",
                "The setSeconds() Method": "The setSeconds() method sets the seconds of a date object (0-59):```js\n<script>\n\r\nvar d = new Date();\n\r\nd.setSeconds(30);\n\r\ndocument.getElementById(\"demo\").innerHTML = d;\n\r\n</script>```",
                "Compare Dates": "Dates can easily be compared.The following example compares today's date with January 14, 2100:```js\nvar today, someday, text;\ntoday = new Date();\nsomeday = new Date();\n\r\n someday.setFullYear(2100, 0, 14);\nif (someday > today) {\n  text = \"Today is before January 14, 2100.\";\n} else {\n  text = \"Today is after January 14, 2100.\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;```",
                "Complete JavaScript Date Reference": "For a complete reference, go to our Complete JavaScript Date Reference.The reference contains descriptions and examples of all Date properties and methods."
            }
        },
        "math": {
            "title": "JS Math",
            "url": "https://www.w3schools.com/js/js_math.asp",
            "info": {
                "Math.round()": "Math.round(x) returns the value of x rounded to its nearest integer:```js\nMath.round(4.7);    // returns 5\nMath.round(4.4); // returns 4```",
                "Math.pow()": "Math.pow(x, y) returns the value of x to the power of y:```js\nMath.pow(8, 2);      // returns 64```",
                "Math.sqrt()": "Math.sqrt(x) returns the square root of x:```js\nMath.sqrt(64);      // returns 8```",
                "Math.abs()": "Math.abs(x) returns the absolute (positive) value of x:```js\nMath.abs(-4.7);     // returns 4.7```",
                "Math.ceil()": "Math.ceil(x) returns the value of x rounded up to its nearest integer:```js\nMath.ceil(4.4);     // returns 5```",
                "Math.floor()": "Math.floor(x) returns the value of x rounded down to its nearest integer:```js\nMath.floor(4.7);    // returns 4```",
                "Math.sin()": "Math.sin(x) returns the sine (a value between -1 and 1) of the angle x (given in radians).If you want to use degrees instead of radians, you have to convert degrees to radians:Angle in radians = Angle in degrees x PI / 180.```js\nMath.sin(90 * Math.PI / 180);     // returns 1 (the sine of 90 degrees)```",
                "Math.cos()": "Math.cos(x) returns the cosine (a value between -1 and 1) of the angle x (given in radians).If you want to use degrees instead of radians, you have to convert degrees to radians:Angle in radians = Angle in degrees x PI / 180.```js\nMath.cos(0 * Math.PI / 180);     // returns 1 (the cos of 0 degrees)```",
                "Math.min() and Math.max()": "Math.min() and Math.max() can be used to find the lowest or highest value in a list of arguments:```js\nMath.min(0, 150, 30, 20, -8, -200);  // returns -200``````js\nMath.max(0, 150, 30, 20, -8, -200);  // returns 150```",
                "Math.random()": "Math.random() returns a random number between 0 (inclusive), and 1 (exclusive):```js\nMath.random();     // returns a random number```",
                "Math Properties (Constants)": "JavaScript provides 8 mathematical constants that can be accessed with the Math object:```js\nMath.E        // returns Euler's number\n\r\nMath.PI       // returns PI\n\r\nMath.SQRT2    // returns the square root of 2\n\r\nMath.SQRT1_2  // returns the square root of 1/2\n\r\nMath.LN2      // returns the natural logarithm of 2\n\r\nMath.LN10     // returns the natural logarithm of 10\n\r\nMath.LOG2E    // returns base 2 logarithm of E\n\r\nMath.LOG10E   // returns base 10 logarithm of E```",
                "Math Constructor": "Unlike other global objects, the Math object has no constructor. Methods and properties are static.All methods and properties (constants) can be used without creating a Math object first.",
                "Math Object Methods": "",
                "Complete Math Reference": "For a complete reference, go to our complete Math object reference.The reference contains descriptions and examples of all Math properties and methods."
            }
        },
        "random": {
            "title": "JS Random",
            "url": "https://www.w3schools.com/js/js_random.asp",
            "info": {
                "Math.random()": "Math.random() returns a random number between 0 (inclusive),\u00a0 and 1 (exclusive):```js\nMath.random();              // returns a random number```",
                "JavaScript Random Integers": "Math.random() used with Math.floor() can be used to return random integers.```js\nMath.floor(Math.random() * 10);     // returns a random integer from 0 to 9``````js\nMath.floor(Math.random() * 11);      // returns a random integer from 0 to 10``````js\nMath.floor(Math.random() * 100);     // returns a random integer from 0 to 99``````js\nMath.floor(Math.random() * 101);     // returns a random integer from 0 to 100``````js\nMath.floor(Math.random() * 10) + 1;  // returns a random integer from 1 to 10``````js\nMath.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100```",
                "A Proper Random Function": "As you can see from the examples above, it might be a good idea to create a proper random functionto use for all random integer purposes.This JavaScript function always returns a random number between min (included) and max (excluded):```js\nfunction getRndInteger(min, max) {\nreturn Math.floor(Math.random() * (max - min) ) + min;\n\r\n}```This JavaScript function always returns a random number between min and max (both included):```js\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) ) + min;\n\r\n}```"
            }
        },
        "booleans": {
            "title": "JS Booleans",
            "url": "https://www.w3schools.com/js/js_booleans.asp",
            "info": {
                "Boolean Values": "Very often, in programming, you will need a data type that can only have one of two values, likeFor this, JavaScript has a Boolean data type. It can only take the values true or false.",
                "The Boolean() Function": "You can use the Boolean() function to find out if an expression (or a variable) is true:```js\nBoolean(10 > 9)        // returns true```Or even easier:```js\n(10 > 9)              // also returns true\n\r\n10 > 9                // also returns true```",
                "Comparisons and Conditions": "The chapter JS Comparisons gives a full overview of comparison operators.The chapter JS Conditions gives a full overview of conditional statements.Here are some examples:",
                "Everything With a \"Value\" is True": "```js\n100\n\r\n3.14\n\r\n-15\n\r\n\"Hello\"\n\r\n\"false\"\n\r\n7 + 1 + 3.14```",
                "Everything Without a \"Value\" is False": "```js\nvar x = 0;\n\r\nBoolean(x);       // returns false``````js\nvar x = -0;\n\r\nBoolean(x);       // returns  false``````js\nvar x = \"\";\n\r\nBoolean(x);       // returns false``````js\nvar x;\n\r\nBoolean(x);       // returns false``````js\nvar x = null;\n\r\nBoolean(x);       // returns false``````js\nvar x = false;\n\r\nBoolean(x);       // returns false``````js\nvar x = 10 / \"H\";\n\r\nBoolean(x);       // returns false```",
                "Booleans Can be Objects": "Normally JavaScript booleans are primitive values created from literals:var x = false;But booleans can also be defined as objects with the keyword new:var y = new Boolean(false);```js\nvar x = false;\n\r\nvar y = new Boolean(false);\n\r\n //\r\ntypeof x returns boolean\n\r\n //\r\ntypeof y returns object``` When using the == operator, equal booleans are equal:```js\nvar x = false;             \n\r\nvar y = new Boolean(false);\n\r\n// (x == y) is true because x and y have equal values```When using the === operator, equal booleans are not equal, because the === operator expects equality in both type and value.```js\nvar x = false;             \n\r\nvar y = new Boolean(false);\n\r\n// (x === y) is false because x and y have different types```Or even worse. Objects cannot be compared:```js\nvar x = new Boolean(false);             \n\r\nvar y = new Boolean(false);\n\r\n// (x == y) is false because objects cannot be compared```",
                "Complete Boolean Reference": "For a complete reference, go to our Complete JavaScript Boolean Reference.The reference contains descriptions and examples of all Boolean properties and methods."
            }
        },
        "comparisons": {
            "title": "JS Comparisons",
            "url": "https://www.w3schools.com/js/js_comparisons.asp",
            "info": {
                "Comparison Operators": "Comparison operators are used in logical statements to determine equality or difference between variables or values. Given that x = 5, the table below explains the comparison operators:",
                "How Can it be Used": "Comparison operators can be used in conditional statements to compare values and take action depending on the result:```js\nif (age < 18) text = \"Too young\";```You will learn more about the use of conditional statements in the next chapter of this tutorial.",
                "Logical Operators": "Logical operators are used to determine the logic between variables or values.Given that x = 6 and y = 3, the table below explains the logical operators: ",
                "Conditional (Ternary) Operator": "JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.```js\nvar\r\nvoteable = (age < 18) ? \"Too young\":\"Old enough\";```If the variable age is a value below 18, the value of the variable voteable will be \"Too young\", otherwise the value of voteable will be \"Old enough\".",
                "Comparing Different Types": "Comparing data of different types may give unexpected results.When comparing a string with a number, JavaScript will convert the string to a number when doing the comparison. An empty string converts to 0. A non-numeric string converts to NaN which is always false.When comparing two strings, \"2\" will be greater than \"12\", because (alphabetically) 1 is less than 2.To secure a proper result, variables should be converted to the proper type before comparison:```js\nage = Number(age);\n\r\nif (isNaN(age)) {\nvoteable = \"Input is not a number\";\n\r\n} else {\n  voteable = (age < 18) ? \"Too young\" : \"Old enough\";\n\r\n}```"
            }
        },
        "conditions": {
            "title": "JS Conditions",
            "url": "https://www.w3schools.com/js/js_if_else.asp",
            "info": {
                "Conditional Statements": "Very often when you write code, you want to perform different actions for different decisions.You can use conditional statements in your code to do this.In JavaScript we have the following conditional statements:",
                "The if Statement": "Use the if statement to specify a block of JavaScript code to be executed if a condition is true.```js\nif (hour < 18) {\n  greeting = \"Good day\";\n\r\n }```",
                "The else Statement": "Use the else statement to specify a block of code to be executed if the condition is false.```js\nif (hour < 18) {\n  greeting = \"Good day\";\n\r\n }\r\nelse {\n  greeting = \"Good evening\";\n\r\n }```",
                "The else if\u00a0Statement": "Use the else if statement to specify a new condition if the first condition is false.```js\nif (time < 10) {\n  greeting = \"Good morning\";\n\r\n }\r\nelse if (time < 20) {\n  greeting = \"Good day\";\n\r\n }\r\nelse {\n  greeting = \"Good evening\";\n\r\n }```",
                "More Examples": "Random linkThis example will write a link to either W3Schools or to the World Wildlife Foundation (WWF). By using a random number, there is a 50% chance for each of the links."
            }
        },
        "switch": {
            "title": "JS Switch",
            "url": "https://www.w3schools.com/js/js_switch.asp",
            "info": {
                "The JavaScript Switch Statement": "Use the switch statement to select one of many code blocks to be executed.This is how it works:```js\nswitch (new Date().getDay()) {\ncase 0:\n  day = \"Sunday\";\n  break;\ncase 1:\n    day = \"Monday\";\n   break;\ncase 2:\n     day = \"Tuesday\";\n    break;\ncase 3:\n  day = \"Wednesday\";\n    break;\ncase 4:\n    day = \"Thursday\";\n   break;\ncase 5:\n    day = \"Friday\";\n    break;\ncase 6:\n  day = \"Saturday\";\n\r\n}```",
                "The break Keyword": "When JavaScript reaches a break keyword, it breaks out of the switch block.This will stop the execution of inside the block.It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway.",
                "The default Keyword": "The default keyword specifies the code to run if there is no case match:```js\nswitch (new Date().getDay()) {\n \r\ncase 6:\n    text = \"Today is Saturday\";\n  break; \ncase 0:\n    text = \"Today is Sunday\";\n    break; \n \r\ndefault: \n    text = \"Looking forward to the Weekend\";\n}```The default case does not have to be the last case in a switch block:```js\nswitch (new Date().getDay()) {\ndefault: \n      text = \"Looking forward to the Weekend\";\n    break;\n  case 6:\n      text = \"Today is Saturday\";\n      break; \ncase 0:\n      text = \"Today is Sunday\";\n}```",
                "Common Code Blocks": "Sometimes you will want different switch cases to use the same code.In this example case 4 and 5 share the same code block, and 0 and 6 share another code block:```js\nswitch (new Date().getDay()) {\ncase 4:\n  case 5:\n  text = \"Soon it is Weekend\";\n    break; \ncase 0:\ncase 6:\n    text = \"It is Weekend\";\n    break;\n  default: \n  text = \"Looking forward to the Weekend\";\n}```",
                "Switching Details": "If multiple cases matches a case value, the first case is selected.If no matching cases are found, the program continues to the default label.If no default label is found, the program continues to the statement(s) after the switch.",
                "Strict Comparison": "Switch cases use strict comparison (===).The values must be of the same type to match.A strict comparison can only be true if the operands are of the same type.In this example there will be no match for x: ```js\nvar x = \"0\";\nswitch (x) {\n  case 0:\n    text = \"Off\";\n    break;\n  case 1:\n    text = \"On\";\n    break;\n  default:\n    text = \"No value found\";\n}```"
            }
        },
        "loopfor": {
            "title": "JS Loop For",
            "url": "https://www.w3schools.com/js/js_loop_for.asp",
            "info": {
                "JavaScript Loops": "Loops are handy, if you want to run the same code over and over again, each time with a different value.Often this is the case when working with arrays:```js\ntext += cars[0] + \"<br>\"; \ntext += cars[1] + \"<br>\"; \n\r\n text += cars[2] + \"<br>\"; \ntext += cars[3] + \"<br>\"; \n\r\n text += cars[4] + \"<br>\"; \ntext += cars[5] + \"<br>\";```",
                "Different Kinds of Loops": "JavaScript supports different kinds of loops:",
                "The For Loop": "The for loop has the following syntax:Statement 1 is executed (one time) before the execution of the code block.Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.```js\nfor (i = 0; i < 5; i++) {\n text += \"The number is \" + i + \"<br>\";\n\r\n}```From the example above, you can read:Statement 1 sets a variable before the loop starts (var i = 0).Statement 2 defines the condition for the loop to run (i must be less than 5).Statement 3 increases a value (i++) each time the code block in the loop has been executed.",
                "Statement 1": "Normally you will use statement 1 to initialize the variable used in the loop (i = 0).This is not always the case, JavaScript doesn't care. Statement 1 is optional.You can initiate many values in statement 1 (separated by comma):```js\nfor (i = 0, len = cars.length, text = \"\"; i < len; i++) { \n  text += cars[i] + \"<br>\";\n\r\n }```And you can omit statement 1 (like when your values are set before the loop starts):```js\nvar i = 2;\nvar len = cars.length;\nvar text = \"\";\nfor (; i < len; i++) { \n  text += cars[i] + \"<br>\";\n\r\n }```",
                "Statement 2": "Often statement 2 is used to evaluate the condition of the initial variable.This is not always the case, JavaScript doesn't care. Statement 2 is also optional.If statement 2 returns true, the loop will start over again, if it returns false, the loop will end.",
                "Statement 3": "Often statement 3 increments the value of the initial variable.This is not always the case, JavaScript doesn't care, and statement 3 is optional.Statement 3 can do anything like negative increment (i--), positive increment (i = i + 15), or anything else.Statement 3 can also be omitted (like when you increment your values inside the loop): ```js\nvar i = 0;\nvar len = cars.length;\nfor (; i < len; ) { \n  text += cars[i] + \"<br>\";\n \r\n i++;\n}```",
                "The For/In Loop": "The JavaScript for/in statement loops through the properties of an object:```js\nvar person = {fname:\"John\", lname:\"Doe\", age:25}; \n\n\r\n var text = \"\";\nvar x;\nfor (x in person) {\n  text += person[x];\n\r\n }```",
                "The For/Of Loop": "The JavaScript for/of statement loops through the values of an iterable objects for/of lets you loop over data structures that are iterable such as Arrays, Strings, Maps, NodeLists, and more.The for/of loop has the following syntax:variable - For every iteration the value of the next property is assigned to the variable. Variable can be declared withconst, let, or var.iterable - An object that has iterable properties.```js\nvar cars = ['BMW', 'Volvo', 'Mini'];\nvar x;\nfor (x of cars) {\n document.write(x + \"<br >\");\n}``````js\nvar txt = 'JavaScript';\nvar x;\nfor (x of txt) {\n  document.write(x + \"<br >\");\n}```",
                "The While Loop": "The while loop and the do/while loop will be explained in the next chapter."
            }
        },
        "loopwhile": {
            "title": "JS Loop While",
            "url": "https://www.w3schools.com/js/js_loop_while.asp",
            "info": {
                "The While Loop": "The while loop loops through a block of code as long as a specified condition is true.In the following example, the code in the loop will run, over and over again, as long as a variable (i) is less than 10:```js\nwhile (i < 10) {\n  text += \"The number is \" + i;\n  i++;\n}```",
                "The Do/While Loop": "The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:```js\ndo {\n  text += \"The number is \" + i;\n  i++;\n\r\n }\n\r\nwhile (i < 10);```Do not forget to increase the variable used in the condition, otherwise the loop will never end!",
                "Comparing For and While": "If you have read the previous chapter, about the for loop, you will discover that a while loop is much the same as a for loop, with statement 1 and statement 3 omitted.The loop in this example uses a for loop to collect the car names from the cars array:```js\nvar\r\ncars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\n\r\nvar i = 0;\nvar text = \"\";\n\r\nfor (;cars[i];) {\n  text += cars[i] + \"<br>\";\n \r\ni++;\n\r\n}```The loop in this example uses a while loop to collect the car names from the cars array:```js\nvar\r\ncars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\n\r\nvar i = 0;\nvar text = \"\";\n\n\r\n while (cars[i]) {\n  text += cars[i] + \"<br>\";\n \r\ni++;\n\r\n}```"
            }
        },
        "break": {
            "title": "JS Break",
            "url": "https://www.w3schools.com/js/js_break.asp",
            "info": {
                "The Break Statement": "You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch() statement.The break statement can also be used to jump out of a loop.\u00a0\u00a0 The break statement breaks the loop and continues executing the code after the loop (if any):```js\nfor (i = 0; i < 10; i++) {\n \r\nif (i === 3) { break; }\n  text += \"The number is \" + i + \"<br>\";\n\r\n }```",
                "The Continue Statement": "The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.This example skips the value of 3: ```js\nfor (i = 0; i < 10; i++) {\n  if (i === 3) { continue; }\n  text += \"The number is \" + i + \"<br>\";\n\r\n}```",
                "JavaScript Labels": "To label JavaScript statements you precede the statements with a label name and a colon:```js\nlabel:\nstatements```The break and the continue statements are the only JavaScript statements that can \"jump out of\" a code block.Syntax:```js\nbreak labelname; \ncontinue labelname;```The continue statement (with or without a label reference) can only be used to skip one loop iteration.The break statement, without a label reference, can only be used to jump out of a loop or a switch.With a label reference, the break statement can be used to jump out of any code block: ```js\nvar\r\n cars = [\"BMW\", \"Volvo\", \"Saab\", \"Ford\"];\nlist: {\n  text += cars[0] + \"<br>\"; \n  text += cars[1] + \"<br>\"; \n  break list;\n  text += cars[2] + \"<br>\"; \n  text += cars[3] + \"<br>\"; \n}```"
            }
        },
        "typeconversion": {
            "title": "JS Type Conversion",
            "url": "https://www.w3schools.com/js/js_type_conversion.asp",
            "info": {
                "JavaScript Data Types": "In JavaScript there are 5 different data types that can contain values:There are 6 types of objects:And 2 data types that cannot contain values:",
                "The typeof Operator": "You can use the typeof operator to find the data type of a JavaScript variable.```js\ntypeof \"John\"                 \r\n// Returns \"string\" \n\r\ntypeof 3.14                   \r\n// Returns \"number\"\n\r\ntypeof NaN                    \r\n// Returns \"number\"\n\r\ntypeof false                 \r\n// Returns \"boolean\"\n\r\ntypeof [1,2,3,4]              // Returns \r\n \"object\"\n\r\ntypeof {name:'John', age:34} \r\n// Returns \"object\"\ntypeof new Date()             \r\n// Returns \"object\"\ntypeof function () {}         // Returns \r\n \"function\"\n\r\ntypeof myCar                  \r\n// Returns \"undefined\" *\n\r\ntypeof null                   \r\n// Returns \"object\"```Please observe:",
                "The Data Type of typeof": "The typeofoperator is not a variable. It is an operator. Operators ( + - \\* / ) do not have any data type. But, the typeof operator always returns a string (containing the type of the operand).",
                "The constructor Property": "The constructor property returns the constructor function for all JavaScript variables.```js\n\"John\".constructor                \r\n// Returns function String()  {[native code]}\n\r\n(3.14).constructor                \r\n// Returns function Number()  {[native code]}\n\r\nfalse.constructor                 // Returns function Boolean() {[native code]}\n\r\n[1,2,3,4].constructor            \r\n// Returns function Array()   {[native code]}\n\r\n{name:'John',age:34}.constructor \r\n// Returns function Object()  {[native code]}\n\r\n new Date().constructor           \r\n// Returns function Date()    {[native code]}\n\r\nfunction () {}.constructor        // Returns function Function(){[native code]}```You can check the constructor property to find out if an object is an Array (contains the word \"Array\"):```js\nfunction isArray(myArray) {\n  return myArray.constructor.toString().indexOf(\"Array\") > -1;\n\r\n}```Or even simpler, you can check if the object is an Array function:```js\nfunction isArray(myArray) {\n  return myArray.constructor === Array;\n\r\n}```You can check the constructor property to find out if an object is a Date (contains the word \"Date\"):Or even simpler, you can check if the object is a Date function:",
                "JavaScript Type Conversion": "JavaScript variables can be converted to a new variable and another data type:",
                "Converting Numbers to Strings": "The global method String() can convert numbers to strings.It can be used on any type of numbers, literals, variables, or expressions:```js\nString(x)         // returns a string from a number variable x\n\r\n String(123)       // returns a string from a number literal 123\n\r\n String(100 + 23)  // returns a string from a number from an expression```The Number method toString() does the same.```js\nx.toString()\n(123).toString()\n(100 + 23).toString()```In the chapter Number Methods, you will find more methods that can be used to convert numbers to strings:",
                "Converting Booleans to Strings": "The global method String() can convert booleans to strings.```js\nString(false)      // returns \"false\"\n\r\nString(true)       // returns \"true\"```The Boolean method toString() does the same.```js\nfalse.toString()   // returns \"false\"\ntrue.toString()    // returns \"true\"```",
                "Converting Dates to Strings": "The global method String() can convert dates to strings.```js\nString(Date())  // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"```The Date method toString() does the same.```js\nDate().toString()  // returns \"Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)\"```In the chapter Date Methods, you will find more methods that can be used to convert dates to strings:",
                "Converting Strings to Numbers": "The global method Number() can convert strings to numbers.Strings containing numbers (like \"3.14\") convert to numbers (like 3.14).Empty strings convert to 0.Anything else converts to NaN (Not a Number).```js\nNumber(\"3.14\")    // returns 3.14\n\r\nNumber(\" \")       // returns 0 \n\r\nNumber(\"\")         // returns 0\n\r\nNumber(\"99 88\")   // returns NaN```In the chapter Number Methods, you will find more methods that can be used to convert strings to numbers:",
                "The Unary + Operator": "The unary + operator can be used to convert a variable to a number:```js\nvar y = \"5\";     \r\n// y is a string\n\r\nvar x = + y;      \r\n// x is a number```If the variable cannot be converted, it will still become a number, but with the value NaN (Not a Number):```js\nvar y = \"John\";  \r\n// y is a string\n\r\nvar x = + y;      // x is a number (NaN)```",
                "Converting Booleans to Numbers": "The global method Number() can also convert booleans to numbers.```js\nNumber(false)     // returns 0\n\r\nNumber(true)      // returns 1```",
                "Converting Dates to Numbers": "The global method Number() can be used to convert dates to numbers.```js\nd = new Date();\nNumber(d)          // returns 1404568027739```The date method getTime()  does the same.```js\nd = new Date();\nd.getTime()        // returns 1404568027739```",
                "Automatic Type Conversion": "When JavaScript tries to operate on a \"wrong\" data type, it will try to convert the value to a \"right\" type.The result is not always what you expect:```js\n5 + null    // returns 5         because null is converted to 0\n\"5\" + null  // returns \"5null\"   because null is converted to \"null\"\n\"5\" + 2     // returns   \"52\"      because 2 is converted to \"2\"\n\r\n \"5\" - 2     // returns 3         because \"5\" is converted to 5\n\"5\" * \"2\"   // returns   10        because \"5\" and \"2\" are   converted to 5 and 2```",
                "Automatic String Conversion": "JavaScript automatically calls the variable's toString() function when you try to \"output\" an object or a variable:```js\ndocument.getElementById(\"demo\").innerHTML = myVar;\n\r\n// if myVar = {name:\"Fjohn\"}  // toString converts to \"[object Object]\"\n\r\n// if myVar = [1,2,3,4]       // toString converts to \"1,2,3,4\"\n\r\n// if myVar = new Date()      // toString converts to \"Fri Jul 18 2014 09:08:55 GMT+0200\"```Numbers and booleans are also converted, but this is not very visible:```js\n// if myVar = 123             // toString converts to \"123\"\n\r\n// if myVar = true            // toString converts to \"true\"\n\r\n// if myVar = false           // toString converts to \"false\"```",
                "JavaScript Type Conversion Table": "This table shows the result of converting different JavaScript values to Number, String, and Boolean:Values in quotes indicate string values.Red values indicate values (some) programmers might not expect."
            }
        },
        "bitwise": {
            "title": "JS Bitwise",
            "url": "https://www.w3schools.com/js/js_bitwise.asp",
            "info": {
                "JavaScript Bitwise Operators": "",
                "Examples": "",
                "JavaScript Uses 32 bits Bitwise Operands": "JavaScript stores numbers as 64 bits floating point numbers, but all bitwise operations are performed on 32 bits binary numbers. Before a bitwise operation is performed, JavaScript converts numbers to 32 bits signed integers.After the bitwise operation is performed, the result is converted back to 64 bits JavaScript numbers.",
                "Bitwise AND": "When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.",
                "Bitwise OR": "When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits are 1:",
                "Bitwise XOR": "When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:",
                "JavaScript Bitwise AND (&)": "Bitwise AND returns 1 only if both bits are 1:```js\nvar x = 5 & 1;```",
                "JavaScript Bitwise OR (|)": "Bitwise OR returns 1 if one of the bits are 1:```js\nvar x = 5 | 1;```",
                "JavaScript Bitwise XOR (^)": "Bitwise XOR returns 1 if the bits are different:```js\nvar x = 5 ^ 1;```",
                "JavaScript Bitwise NOT (~)": "```js\nvar x = ~5;```",
                "JavaScript (Zero Fill) Bitwise Left Shift (<<)": "This is a zero fill left shift. One or more zero bits are pushed in from the right,and the leftmost bits fall off:```js\nvar x = 5 << 1;```",
                "JavaScript (Sign Preserving) Bitwise Right Shift (>>)": "This is a sign preserving right shift. Copies of the leftmost bit are pushed in from the left, and the rightmost bits fall off:```js\nvar x = -5 >> 1;```",
                "JavaScript (Zero Fill) Right Shift (>>>)": "This is a zero fill right shift. One or more zero bits are pushed in from the left,and the rightmost bits fall off:```js\nvar x = 5 >>> 1;```",
                "Binary Numbers": "Binary numbers with only one bit set is easy to understand:Setting a few more bits reveals the binary pattern:JavaScript binary numbers are stored in two's complement format.This means that a negative number is the bitwise NOT of the number plus 1:",
                "Converting Decimal to Binary": "```js\nfunction dec2bin(dec){\nreturn (dec >>> 0).toString(2);\n\r\n}```",
                "Converting Binary to Decimal": "```js\nfunction bin2dec(bin){\n  return parseInt(bin, 2).toString(10);\n\r\n}```"
            }
        },
        "regexp": {
            "title": "JS RegExp",
            "url": "https://www.w3schools.com/js/js_regexp.asp",
            "info": {
                "What Is a Regular Expression?": "A regular expression is a sequence of characters that forms a search pattern.When you search for data in a text, you can use this search pattern to describe what you are searching for.A regular expression can be a single character, or a more complicated pattern.Regular expressions can be used to perform all types of text search and text replace operations.",
                "Syntax": "```js\nvar patt = /w3schools/i;```Example explained:/w3schools/i\u00a0 is a regular expression.w3schools\u00a0 is a pattern (to be used in a search).i\u00a0 is a modifier (modifies the search to be case-insensitive).",
                "Using String Methods": "In JavaScript, regular expressions are often used with the two string methods: search() and replace().The search() method uses an expression to search for a match, and returns the position of the match.The replace() method returns a modified string where the pattern is replaced.",
                "Using String search() With a String": "The search() method searches a string for a specified value and returns the position of the match:```js\nvar str = \"Visit W3Schools!\";\n\r\nvar n = str.search(\"W3Schools\");```",
                "Using String search() With a Regular Expression": "```js\nvar str = \"Visit W3Schools\";\n\r\nvar n = str.search(/w3schools/i);```",
                "Using String replace() With a String": "The replace() method replaces a specified value with another value in a string:```js\nvar str = \"Visit Microsoft!\";\n\r\nvar res = str.replace(\"Microsoft\", \"W3Schools\");```",
                "Use String replace() With a Regular Expression": "```js\nvar str = \"Visit Microsoft!\";\n\r\nvar res = str.replace(/microsoft/i, \"W3Schools\");```",
                "Did You Notice?": "",
                "Regular Expression Modifiers": "Modifiers can be used to perform case-insensitive more global searches:",
                "Regular Expression Patterns": "Brackets are used to find a range of characters:Metacharacters are characters with a special meaning:Quantifiers define quantities:",
                "Using the RegExp Object": "In JavaScript, the RegExp object is a regular expression object with predefined properties and methods.",
                "Using test()": "The test() method is a RegExp expression method.It searches a string for a pattern, and returns true or false, depending on the result.The following example searches a string for the character \"e\":```js\nvar patt = /e/;\n\r\npatt.test(\"The best things in life are free!\");```",
                "Using exec()": "The exec() method is a RegExp expression method.It searches a string for a specified pattern, and returns the found text as an object. If no match is found, it returns an empty (null) object.The following example searches a string for the character \"e\":```js\n/e/.exec(\"The best things in life are free!\");```",
                "Complete RegExp Reference": "For a complete reference, go to our Complete JavaScript RegExp Reference.The reference contains descriptions and examples of all RegExp properties and methods."
            }
        },
        "errors": {
            "title": "JS Errors",
            "url": "https://www.w3schools.com/js/js_errors.asp",
            "info": {
                "Errors Will Happen!": "When executing JavaScript code, different errors can occur. Errors can be coding errors made by the programmer, errors due to wrong input, and other unforeseeable things.```js\n<p id=\"demo\"></p>\n<script>\n\r\ntry {\n  adddlert(\"Welcome guest!\");\n}\ncatch(err) {\n  \r\ndocument.getElementById(\"demo\").innerHTML = err.message;\n}\n</script>```",
                "JavaScript try and catch": "The try statement allows you to define a block of code to be tested for errors while it is being executed.The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.The JavaScript statements try and catch come in pairs:```js\ntry {\n  Block of code to try\n}\n\r\ncatch(err) {\n  Block of code to handle errors\n}```",
                "JavaScript Throws Errors": "When an error occurs, JavaScript will normally stop and generate an error message.The technical term for this is: JavaScript will throw an exception (throw an error).",
                "The throw Statement": "The throw statement allows you to create a custom error.Technically you can throw an exception (throw an error).The exception can be a JavaScript String, a Number, a Boolean or an Object:```js\nthrow \"Too big\";    // throw a text\n\r\nthrow 500;          // throw a number```If you use throw together with try and catch, you can control program flow and generate custom error messages.",
                "Input Validation Example": "This example examines input. If the value is wrong, an exception (err) is thrown.The exception (err) is caught by the catch statement and a custom error message is displayed:```js\n<!DOCTYPE html>\n<html>\n<body>\n<p>Please input a number between \r\n5 and 10:</p>\n<input id=\"demo\" type=\"text\">\n<button type=\"button\" \r\nonclick=\"myFunction()\">Test Input</button>\n<p id=\"p01\"></p>\n\r\n<script>\nfunction myFunction() {\n  var message, x;\n  message = \r\ndocument.getElementById(\"p01\");\n  message.innerHTML = \"\";\nx = \r\ndocument.getElementById(\"demo\").value;\n  \r\ntry { \n    if(x == \"\") throw \"empty\";\n    \r\n if(isNaN(x)) throw \"not a number\";\n    \r\n x = Number(x);\n    if(x < 5) throw \r\n \"too low\";\n    if(x > 10) throw \"too \r\n high\";\n  }\n  catch(err) {\n    message.innerHTML = \r\n\"Input is \" + err;\n  }\n}\n</script>\n</body>\n</html>```",
                "HTML Validation": "The code above is just an example.Modern browsers will often use a combination of JavaScript and built-in HTML validation, using predefined validation rules defined in HTML attributes: ```js\n<input id=\"demo\" type=\"number\" min=\"5\" max=\"10\" step=\"1\">```You can read more about forms validation in a later chapter of this tutorial.",
                "The finally Statement": "The finally statement lets you execute code, after try and catch, regardless of the result:```js\ntry {\n  Block of code to try\n}\n\r\ncatch(err) {\n  Block of code to handle errors\n}\r\nfinally {\n  Block of code to be executed regardless of the try / catch result\n}``````js\nfunction myFunction() {\n  var message, x;\n  message = \r\ndocument.getElementById(\"p01\");\n  message.innerHTML = \"\";\nx = \r\ndocument.getElementById(\"demo\").value;\n  \r\ntry { \n    \r\nif(x == \"\") throw \"is empty\";\n    if(isNaN(x)) \r\nthrow \"is not a number\";\n      x = Number(x);\n    if(x > \r\n10) throw \"is too high\";\n    if(x < \r\n5) throw \"is too low\";\n  }\n  catch(err) \r\n{\n    message.innerHTML = \"Error: \" + \r\nerr + \".\";\n  }\n  finally {\n    document.getElementById(\"demo\").value = \"\";\n  }\n}```",
                "The Error Object": "JavaScript has a built in error object that provides error information when an error occurs. The error object provides two useful properties: name and message.",
                "Error Object Properties": "",
                "Error Name Values": "Six different values can be returned by the error name property:The six different values are described below.",
                "Eval Error": "An EvalError indicates an error in the eval() function.",
                "Range Error": "A RangeError is thrown if you use a number that is outside the range of legal values.For example: You cannot set the number of significant digits of a number to 500. ```js\nvar num = 1;\n\r\ntry {\n  num.toPrecision(500);   // A number cannot have 500 \r\n significant digits\n\r\n}\n\r\ncatch(err) {\n  document.getElementById(\"demo\").innerHTML = err.name;\n\r\n}```",
                "Reference Error": "A ReferenceError is thrown if you use (reference) a variable that has not been declared:```js\nvar x;\ntry {\nx = y + 1;   // y cannot be referenced (used)\n\r\n}\n\r\ncatch(err) {\n  document.getElementById(\"demo\").innerHTML = err.name;\n\r\n}```",
                "Syntax Error": "A SyntaxError is thrown if you try to evaluate code with a syntax error.```js\ntry {\n  eval(\"alert('Hello)\");   // \r\n Missing ' will produce an error\n}\ncatch(err) {\n  document.getElementById(\"demo\").innerHTML = err.name;\n}```",
                "Type Error": "A TypeError is thrown if you use a value that is outside the range of expected types:```js\nvar num = 1;\n\r\ntry {\nnum.toUpperCase();   // You cannot convert a number \r\n to upper case\n\r\n}\n\r\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n\r\n}```",
                "URI (Uniform Resource Identifier) Error": "A URIError is thrown if you use illegal characters in a URI function:```js\ntry {\n  decodeURI(\"%%%\");   // You cannot URI decode percent signs\n\r\n}\n\r\ncatch(err) {\ndocument.getElementById(\"demo\").innerHTML = err.name;\n\r\n}```",
                "Non-Standard Error Object Properties": "",
                "Complete Error Reference": "For a complete reference of the Error object, go to our Complete JavaScript Error Reference."
            }
        },
        "scope": {
            "title": "JS Scope",
            "url": "https://www.w3schools.com/js/js_scope.asp",
            "info": {
                "JavaScript Function Scope": "In JavaScript there are two types of scope:JavaScript has function scope: Each function creates a new scope. Scope determines the accessibility (visibility) of these variables.Variables defined inside a function are not accessible (visible) from outside the function.",
                "Local JavaScript Variables": "Variables declared within a JavaScript function, become LOCAL to the function.Local variables have Function scope: They can only be accessed from within the function.```js\n// code here can NOT use carName\nfunction myFunction() {\nvar carName = \"Volvo\";\n  // code here CAN use carName\n}```Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.Local variables are created when a function starts, and deleted when the function is completed.",
                "Global JavaScript Variables": "A variable declared outside a function, becomes GLOBAL.A global variable has global scope: All scripts and functions on a web page can access it.\u00a0```js\nvar carName = \"Volvo\";\n\r\n// code here can use carName\n\r\nfunction myFunction() {\n// code here can also use carName \n}```",
                "JavaScript Variables": "In JavaScript, objects and functions are also variables.",
                "Automatically Global": "If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.This code example will declare a global variable carName, even if the value is assigned inside a function.```js\nmyFunction();\n// code here can use carName\r\n \nfunction myFunction() {\n  carName = \"Volvo\";\n}```",
                "Strict Mode": "All modern browsers support running JavaScript in \"Strict Mode\".You will learn more about how to use strict mode in a later chapter of this tutorial.",
                "Global Variables in HTML": "With JavaScript, the global scope is the complete JavaScript environment. In HTML, the global scope is the window object. All global variables belong to the window object.```js\nvar carName = \"Volvo\";\n// code here \r\n can use window.carName```",
                "Warning": "",
                "The Lifetime of JavaScript Variables": "The lifetime of a JavaScript variable starts when it is declared.Local variables are deleted when the function is completed.In a web browser, global variables are deleted when you close the browser window (or tab).",
                "Function Arguments": "Function arguments (parameters) work as local variables inside functions."
            }
        },
        "hoisting": {
            "title": "JS Hoisting",
            "url": "https://www.w3schools.com/js/js_hoisting.asp",
            "info": {
                "JavaScript Declarations are Hoisted": "In JavaScript, a variable can be declared after it has been used.In other words; a variable can be used before it has been declared.Example 1 gives the same result as Example 2:```js\nx = 5; // Assign 5 to x\n\n\r\nelem = document.getElementById(\"demo\"); // Find an element \n\r\nelem.innerHTML = x;                     \r\n// Display x in the element\nvar x; // Declare x``````js\nvar x; // Declare x\n\r\nx = 5; // Assign 5 to x\n\r\nelem = document.getElementById(\"demo\"); // Find an element \nelem.innerHTML = x;                     \r\n// Display x in the element```To understand this, you have to understand the term \"hoisting\".Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).",
                "The let and const Keywords": "",
                "JavaScript Initializations are Not Hoisted": "JavaScript only hoists declarations, not initializations.Example 1 does not give the same result asExample 2:```js\nvar x = 5; // Initialize x\nvar y = 7; // Initialize y\nelem = document.getElementById(\"demo\"); // Find an element \n\r\nelem.innerHTML = x + \" \" + y;           // Display x and y``````js\nvar x = 5; // Initialize x\n\n\r\nelem = document.getElementById(\"demo\"); // Find an element \n\r\nelem.innerHTML = x + \" \" + y;           // Display x and y\n\n\r\nvar y = 7; // Initialize y```Does it make sense that y is undefined in the last example?This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.Because of hoisting, y has been declared before it is used, but because initializations are not hoisted, the value of y is undefined.Example 2 is the same as writing:```js\nvar x = 5; // Initialize x\n\r\nvar y;     // Declare y\n\n\r\nelem = document.getElementById(\"demo\"); // Find an element \n\r\nelem.innerHTML = x + \" \" + y;           // Display x and y\n\n\r\ny = 7;    // Assign 7 to y```",
                "Declare Your Variables At the Top !": "Hoisting is (to many developers) an unknown or overlooked behavior of  JavaScript.If a developer doesn't understand hoisting, programs may contain bugs (errors).To avoid bugs, always declare all variables at the beginning of every scope.Since this is how JavaScript interprets the code, it is always a good rule."
            }
        },
        "strictmode": {
            "title": "JS Strict Mode",
            "url": "https://www.w3schools.com/js/js_strict.asp",
            "info": {
                "The \"use strict\" Directive": "The \"use strict\" directive was new in ECMAScript version 5.It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.The purpose of \"use strict\" is to indicate that the code should be executed in \"strict mode\".With strict mode, you can not, for example, use undeclared variables.All modern browsers support \"use strict\" except Internet Explorer 9 and lower:The numbers in the table specify the first browser version that fully supports the directive.",
                "Declaring Strict Mode": "Strict mode is declared by adding \"use strict\"; to the beginning of a script or a function.Declared at the beginning of a script, it has global scope (all code in the script will execute in strict mode):```js\n\"use strict\";\nx = 3.14;       // This will cause an error \r\n because x is not declared``````js\n\"use strict\";\nmyFunction();\n\r\nfunction myFunction() {\n y = 3.14;   // This will also cause an error \r\n because y is not declared\n}```Declared inside a function, it has local scope (only the code inside the function is in strict mode):```js\nx = 3.14;       // This will not cause an error.\r\n \nmyFunction();\nfunction \r\n myFunction() {\n\"use strict\";\n  y = 3.14;   // This will cause an error\n}```",
                "The \"use strict\"; Syntax": "The syntax, for declaring strict mode, was designed to be compatible with older versions of JavaScript.Compiling a numeric literal (4 + 5;) or a string literal (\"John Doe\";) in a JavaScript program has no side effects. It simply compiles to a non existing variable and dies.So \"use strict\"; only matters to new compilers that \"understand\" the meaning of it.",
                "Why Strict Mode?": "Strict mode makes it easier to write \"secure\" JavaScript.Strict mode changes previously accepted \"bad syntax\" into real errors.As an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable.In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties. In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.",
                "Not Allowed in Strict Mode": "Using a variable, without declaring it, is not allowed:```js\n\"use strict\";\n\r\n x = 3.14;                // This will cause an error```Using an object, without declaring it, is not allowed:```js\n\"use strict\";\n\r\n x = {p1:10, p2:20};      // This will cause an error```Deleting a variable (or object) is not allowed.```js\n\"use strict\";\nvar x = 3.14;\n\r\ndelete x;                // This \r\nwill cause an error```Deleting a function is not allowed.```js\n\"use strict\";\nfunction x(p1, p2) {}; \ndelete x;                \r\n // This will cause an error```Duplicating a parameter name is not allowed:```js\n\"use strict\";\nfunction x(p1, p1) {};   // This will cause an error```Octal numeric literals are not allowed:```js\n\"use strict\";\nvar x = 010;             // This \r\nwill cause an error```Octal escape characters are not allowed:```js\n\"use strict\";\n\r\nvar x = \"\\010\";            // This will cause an error```Writing to a read-only property is not allowed:Writing to a get-only property is not allowed:Deleting an undeletable property is not allowed:The word eval cannot be used as a variable:The word arguments cannot be used as a variable:The with statement is not allowed:For security reasons, eval() is not allowed to create  variables in the scope from which it was called:The this keyword in functions behaves differently in strict mode.The this keyword refers to the object that called the function.If the object is not specified, functions in strict mode will return undefined and functions in normal mode will return the global object (window):",
                "Future Proof!": "Keywords reserved for future JavaScript versions can NOT be used as variable names in strict mode.These are:```js\n\"use strict\";\nvar public = 1500;      // This will cause an error```"
            }
        },
        "thiskeyword": {
            "title": "JS this Keyword",
            "url": "https://www.w3schools.com/js/js_this.asp",
            "info": {
                "What is this?": "The JavaScript this keyword refers to the object it belongs to. ",
                "this in a Method": "In an object method, this refers to the \"owner\" of the method.In the example on the top of this page, this refers to the person object.The person object is the owner of the fullName method.```js\nfullName : function() {\n  return this.firstName + \" \" + this.lastName;\n}```",
                "this Alone": "When used alone, the owner is the Global object, so this refers to the Global object.In a browser window the Global object is [object Window]:```js\nvar x = this;```\u00a0In strict mode, when used alone, this also refers to the Global object [object Window]:```js\n\"use strict\";\nvar x = this;```",
                "this in a Function (Default) ": "In a JavaScript function, the owner of the function is the default binding for this.So, in a function, this refers to the Global object [object Window].```js\nfunction myFunction() {\n  return this;\n\r\n}```",
                "this in a Function (Strict) ": "JavaScript strict mode does not allow default binding.So, when used in a function, in strict mode, this is undefined.```js\n\"use strict\";\nfunction myFunction() {\n  return this;\n\r\n}```",
                "this in Event Handlers": "In HTML event handlers, this refers to the HTML element that received the event:```js\n<button onclick=\"this.style.display='none'\">\n  Click to Remove Me!\n</button>```",
                "Object Method Binding": "In these examples, this is the person object(The person object is the \"owner\" of the function):```js\nvar person = {\n  firstName  : \"John\",\n  lastName   : \"Doe\",\n  id         : 5566,\n  myFunction : function() {\n  return this;\n  }\n\r\n};``````js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  id       : 5566,\n  fullName : function() {\n  return this.firstName + \" \" + \r\nthis.lastName;\n  }\n\r\n};```In other words: this.firstName means the firstName property of this (person) object.",
                "Explicit Function Binding": "The call() and apply() methods are predefined JavaScript methods.They can both be used to call an object method with another object as argument.In the example below, when calling person1.fullName with person2 as argument, this will refer to person2, even if it is a method of person1:```js\nvar person1 = {\n  fullName: function() {\n    return this.firstName + \" \" + this.lastName;\n  }\n}\n\r\nvar person2 = {\n  firstName:\"John\",\n  lastName: \"Doe\",\n\r\n}\n\r\nperson1.fullName.call(person2);  // Will return \"John Doe\"```"
            }
        },
        "let": {
            "title": "JS Let",
            "url": "https://www.w3schools.com/js/js_let.asp",
            "info": {
                "ECMAScript 2015": "ES2015 introduced two important new JavaScript keywords: let and const.These two keywords provide Block Scope variables (and constants) in JavaScript.Before ES2015, JavaScript had only two types of scope: Global Scope and Function Scope.\u00a0 ",
                "Global Scope": "Variables declared with var and let are quite similar when declared outside a block.They will both have Global Scope:```js\nvar x = 2;       // Global scope``````js\nlet x = 2;       // Global scope```",
                "Function Scope": "Variables declared with var and let are quite similar when declared inside a function.They will both have Function Scope:```js\nfunction myFunction() {\n  var carName = \"Volvo\";   // Function Scope\n\r\n}```",
                "JavaScript Block Scope": "Variables declared with the var keyword cannot have Block Scope.Variables declared inside a block {} can be accessed from outside the block. ```js\n{ \nvar x = 2; \n}\n\r\n// x CAN be used here```Before ES2015 JavaScript did not have Block Scope.Variables declared with the let keyword can have Block Scope.Variables declared inside a block {} cannot be accessed from outside the block:```js\n{ \nlet x = 2;\n}\n\r\n// x can NOT be used here```",
                "Redeclaring Variables": "Redeclaring a variable using the var keyword can impose problems.Redeclaring a variable inside a block will also redeclare the variable outside the block:```js\nvar x = 10;\n\r\n// Here x is 10\n\r\n{ \nvar x = 2;\n  // Here x is 2\n}\n\r\n// Here x is 2```Redeclaring a variable using the let keyword can solve this problem.Redeclaring a variable inside a block will not redeclare the variable outside the block:```js\nvar x = 10;\n\r\n// Here x is 10\n\r\n{ \nlet x = 2;\n// Here x is 2\n}\n\r\n// Here x is 10```",
                "Browser Support": "The let keyword is not fully supported in Internet Explorer 11 or earlier.The following table defines the first browser versions with full support for the let keyword: ",
                "Loop Scope": "Using var in a loop:```js\nvar i = 5;\n\r\nfor (var i = 0; i < 10; i++) {\n// some statements\n}\n\r\n// Here i is 10```Using let in a loop:```js\nlet i = 5;\n\r\nfor (let i = 0; i < 10; i++) {\n  // some statements\n}\n\r\n// Here i is 5```In the first example, using var, the variable declared in the loop redeclares the variable outside the loop. In the second example, using let, the variable declared in the loop does not redeclare the variable outside the loop. When let is used to declare the i variable in a loop, the i variable will only be visible within the loop. ",
                "Global Variables in HTML": "With JavaScript, the global scope is the JavaScript environment. In HTML, the global scope is the window object.Global variables defined with the var keyword belong to the window object:```js\nvar carName = \"Volvo\";\n\r\n// code here can use window.carName```Global variables defined with the let keyword do not belong to the window object:```js\nlet carName = \"Volvo\";\n\r\n// code here cannot use window.carName```",
                "Redeclaring": "Redeclaring a JavaScript variable with var is allowed anywhere in a program:```js\nvar x = 2;\n// Now x is 2\n\r\n \nvar x = 3;\n\n// Now x is 3```Redeclaring a var variable with let, in the same scope, or in the same block, is not allowed:```js\nvar x = 2;       // Allowed\nlet x = 3;       // Not allowed\n{\n  var x = 4;   // Allowed\n let x = 5   // Not allowed\n}```Redeclaring a let variable with let, in the same scope, or in the same block, is not allowed:```js\nlet x = 2;       // Allowed\nlet x = 3;       // Not allowed\n{\n let x = 4;   // Allowed\n let x = 5;   // Not allowed\n}```Redeclaring a let variable with var, in the same scope, or in the same block, is not allowed:```js\nlet x = 2;       // Allowed\nvar x = 3;       // Not allowed\n{\n  let x = 4;   // Allowed\n var x = 5;   // Not allowed\n}```Redeclaring a variable with let, in another scope, or in another block, is allowed:```js\nlet x = 2;       // Allowed\n{\n let x = 3;   // Allowed\n}\n\n{\n let x = 4;   // Allowed\n}```",
                "Hoisting": "Variables defined with var are hoisted to the top (if you don't know what Hoisting is, read our Hoisting Chapter).You can use a variable before it is declared:```js\n// you CAN use carName here\nvar carName;```Variables defined with let are not hoisted to the top.Using a let variable before it is declared will result in a ReferenceError.The variable is in a \"temporal dead zone\" from the start of the block until it is declared:```js\n// you can NOT use carName here\nlet carName;```"
            }
        },
        "const": {
            "title": "JS Const",
            "url": "https://www.w3schools.com/js/js_const.asp",
            "info": {
                "ECMAScript 2015": "ES2015 introduced two important new JavaScript keywords: let and const.Variables defined with const behave like let variables, except they cannot be reassigned:```js\nconst PI = 3.141592653589793;\n\r\nPI = 3.14;      // This will give an error\n\r\nPI = PI + 10;   // This will also give an error```",
                "Block Scope": "Declaring a variable with const is similar to let when it comes to Block Scope.The x declared in the block, in this example, is not the same as the x declared outside the block:```js\nvar x = 10;\n\r\n// Here x is 10\n\r\n{ \nconst x = 2;\n  // Here x is 2\n}\n\r\n// Here x is 10```You can learn more about Block Scope in the previous chapter:JavaScript Let.",
                "Assigned when Declared": "JavaScript const variables must be assigned a value when they are declared:```js\nconst PI;\n\r\nPI = 3.14159265359;``````js\nconst PI = 3.14159265359;```",
                "Not Real Constants": "The keyword const is a little misleading.It does NOT define a constant value. It defines a constant reference to a value.Because of this, we cannot change constant primitive values, but we can change the properties of constant objects.",
                "Primitive Values": "If we assign a primitive value to a constant, we cannot change the  primitive value:\u00a0 ```js\nconst PI = 3.141592653589793;\n\r\nPI = 3.14;      // This will give an error\n\r\nPI = PI + 10;   // This will also give an error```",
                "Constant Objects can Change": "You can change the properties of a constant object:```js\n// You can create a const object:\n\r\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\n\r\n// You can change a property:\n\r\ncar.color = \"red\";\n\r\n// You can add a property:\n\r\ncar.owner = \"Johnson\";```But you can NOT reassign a constant object:```js\nconst car = {type:\"Fiat\", model:\"500\", color:\"white\"};\ncar = {type:\"Volvo\", model:\"EX60\", color:\"red\"};    // ERROR```",
                "Constant Arrays can Change": "You can change the elements of a constant array:```js\n// You can create a constant array:\n\r\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\n\r\n// You can change an element:\n\r\ncars[0] = \"Toyota\";\n\r\n// You can add an element:\n\r\ncars.push(\"Audi\");```But you can NOT reassign a constant array:```js\nconst cars = [\"Saab\", \"Volvo\", \"BMW\"];\ncars = [\"Toyota\", \"Volvo\", \"Audi\"];    // ERROR```",
                "Browser Support": "The const keyword is not supported in Internet Explorer 10 or earlier.The following table defines the first browser versions with full support for the const keyword: ",
                "Redeclaring": "Redeclaring a JavaScript var variable is allowed anywhere in a program:```js\nvar x = 2;    //  Allowed\nvar x = 3;    //  Allowed\nx = 4;        //  Allowed```Redeclaring or reassigning an existing var or let variable to const, in the same scope, or in the same block, is not allowed:```js\nvar x = 2;         // Allowed\nconst x = 2;       // Not allowed\n{\n let x = 2;     // Allowed\n const x = 2;   // Not allowed\n}```Redeclaring or reassigning an existing const variable, in the same scope, or in the same block, is not allowed:```js\nconst x = 2;       // Allowed\nconst x = 3;       // Not allowed\nx = 3;             // Not allowed\nvar x = 3;         // Not allowed\nlet x = 3;         // Not allowed\n\n{\n const x = 2;   // Allowed\n const x = 3;   // Not allowed\n  x = 3;         // Not allowed\n  var x = 3;     // Not allowed\n  let x = 3;     // Not allowed\n}```Redeclaring a variable with const, in another scope, or in another block, is allowed:",
                "Hoisting": "Variables defined with var are hoisted to the top (if you don't know what Hoisting is, read our Hoisting Chapter).You can use a var variable before it is declared:```js\ncarName = \"Volvo\";    // You CAN use carName here\nvar carName;```Variables defined with const are not hoisted to the top.A const variable cannot be used before it is declared:```js\ncarName = \"Volvo\";    // You can NOT use carName here\n  const carName = \"Volvo\";```"
            }
        },
        "arrowfunction": {
            "title": "JS Arrow Function",
            "url": "https://www.w3schools.com/js/js_arrow_function.asp",
            "info": {
                "What About this?": "The handling of this is also different in arrow functions compared to regular functions.In short, with arrow functions there are no binding ofthis.In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.With arrow functions the this keyword always represents the object that defined the arrow function.Let us take a look at two examples to understand the difference.Both examples call a method twice, first when the page loads, and once again when the user clicks a button.The first example uses a regular function, and the second example uses an arrow function.The result shows that the first example returns two different objects (window and button), and the second example returns the window object twice, because the window object is the \"owner\" of the function.Remember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions.",
                "Browser Support": "The following table defines the first browser versions with full support for Arrow Functions in JavaScript: "
            }
        },
        "debugging": {
            "title": "JS Debugging",
            "url": "https://www.w3schools.com/js/js_debugging.asp",
            "info": {
                "Code Debugging": "Programming code might contain syntax errors, or logical errors.Many of these errors are difficult to diagnose.Often, when programming code contains errors, nothing will happen. There are no error messages, and you will get no indications where to search for errors.Searching for (and fixing) errors in programming code is called code debugging.",
                "JavaScript Debuggers": "Debugging is not easy. But fortunately, all modern browsers have a built-in JavaScript debugger.Built-in debuggers can be turned on and off, forcing errors to be reported to the user.With a debugger, you can also set breakpoints (places where code execution can be stopped), and examine variables while the code is executing.Normally, otherwise follow the steps at the bottom of this page, you activate debugging in your browser with the F12 key, and select \"Console\" in the debugger menu.",
                "The console.log() Method": "If your browser supports debugging, you can use console.log() to display JavaScript values in the debugger window:```js\n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Web Page</h1>\n\r\n<script>\na = 5;\nb = 6;\nc = a + b;\nconsole.log(c);\n</script>\n\n</body>\n</html>```",
                "Setting Breakpoints": "In the debugger window, you can set breakpoints in the JavaScript code.At each breakpoint, JavaScript will stop executing, and let you examine JavaScript values.After examining values, you can resume the execution of code (typically with a play button).",
                "The debugger Keyword": "The debugger keyword stops the execution of JavaScript, and calls (if available) the debugging function.This has the same function as setting a breakpoint in the debugger.If no debugging is available, the debugger statement has no effect.With the debugger turned on, this code will stop executing before it executes the third line.```js\nvar x = 15 * 5;\ndebugger;\ndocument.getElementById(\"demo\").innerHTML = x;```",
                "Major Browsers' Debugging Tools": "Normally, you activate debugging in your browser with F12, and select \"Console\" in the debugger menu.Otherwise follow these steps:",
                "Chrome": "",
                "Firefox": "",
                "Edge": "",
                "Opera": "",
                "Safari": "",
                "Did You Know?": ""
            }
        },
        "styleguide": {
            "title": "JS Style Guide",
            "url": "https://www.w3schools.com/js/js_conventions.asp",
            "info": {
                "JavaScript Coding Conventions": "Coding conventions are style guidelines for programming. They typically cover:Coding conventions secure quality:Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.",
                "Variable Names": "At W3schools we use camelCase for identifier names (variables and functions).All names start with a letter.At the bottom of this page, you will find a wider discussion about naming rules.```js\nfirstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\n\r\n tax = 0.20;\nfullPrice = price + (price * tax);```",
                "Spaces Around Operators": "Always put spaces around operators ( = + - \\* / ), and after commas:```js\nvar x = y + z;\nvar values = [\"Volvo\", \"Saab\", \r\n \"Fiat\"];```",
                "Code Indentation": "Always use 2 spaces for indentation of code blocks:```js\nfunction toCelsius(fahrenheit) {\n  return (5 / 9) * (fahrenheit - 32);\n\r\n}```",
                "Statement Rules": "General rules for simple statements:```js\nvar values = [\"Volvo\", \"Saab\", \r\n \"Fiat\"];\nvar person = {\n  firstName: \"John\",\n  \r\n lastName: \"Doe\",\n  age: 50,\n  eyeColor: \r\n \"blue\"\n};```General rules for complex (compound) statements:```js\nfunction toCelsius(fahrenheit) {\nreturn (5 / 9) * (fahrenheit - 32);\n\r\n}``````js\nfor (i = 0; i < 5; i++) {\n  x += i;\n}``````js\nif (time < 20) {\n  greeting = \"Good day\";\n} else {\n  \r\n greeting = \"Good evening\";\n}```",
                "Object Rules": "General rules for object definitions:```js\nvar person = {\n  firstName: \"John\",\n  \r\n lastName: \"Doe\",\n  age: 50,\n  eyeColor: \r\n \"blue\"\n};```Short objects can be written compressed, on one line, using spaces only between properties, like this:```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};```",
                "Line Length < 80": "For readability, avoid lines longer than 80 characters.If a JavaScript statement does not fit on one line, the best place to break it, is after an operator or a comma.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Hello Dolly.\";```",
                "Naming Conventions": "Always use the same naming convention for all your code. For example:Should you use hyp-hens, camelCase, orunder\\_scores in variable names?This is a question programmers often discuss. The answer depends on who you ask:Hyphens in HTML and CSS:HTML5 attributes can start with data- (data-quantity, data-price).CSS uses hyphens in property-names (font-size).Underscores:Many programmers prefer to use underscores (date\\_of\\_birth), especially in SQL databases.Underscores are often used in PHP documentation.PascalCase:PascalCase is often preferred by C programmers.camelCase:camelCase is used by JavaScript itself, by jQuery, and other JavaScript libraries.",
                "Loading JavaScript in HTML": "Use simple syntax for loading external scripts (the type attribute is not necessary):```js\n<script src=\"myscript.js\"></script>```",
                "Accessing HTML Elements": "A consequence of using \"untidy\" HTML styles, might result in JavaScript errors.These two JavaScript statements will produce different results:```js\nvar obj =\r\n getElementById(\"Demo\")\nvar obj = getElementById(\"demo\")```If possible, use the same naming convention (as JavaScript) in HTML. Visit the HTML Style Guide.",
                "File Extensions": "HTML files should have a .html extension (not .htm).CSS files should have a .css extension.JavaScript files should have a .js extension.",
                "Use Lower Case File Names": "Most web servers (Apache, Unix) are case sensitive about file names:london.jpg cannot be accessed as London.jpg. Other web servers (Microsoft, IIS) are not case sensitive:london.jpg can be accessed as London.jpg or london.jpg.If you use a mix of upper and lower case, you have to be extremely consistent.If you move from a case insensitive, to a case sensitive server, even small errors can break your web site.To avoid these problems, always use lower case file names (if possible). ",
                "Performance": "Coding conventions are not used by computers. Most rules have little impact on the execution of programs.Indentation and extra spaces are not significant in small scripts.For code in development, readability should be preferred. Larger production scripts should be minified.\u00a0 "
            }
        },
        "bestpractices": {
            "title": "JS Best Practices",
            "url": "https://www.w3schools.com/js/js_best_practices.asp",
            "info": {
                "Avoid Global Variables": "Minimize the use of global variables.This includes all data types, objects, and functions.Global variables and functions can be overwritten by other scripts.Use local variables instead, and learn how to use closures. ",
                "Always Declare Local Variables": "All variables used in a function should be declared as local variables. Local variables must be declared with the var keyword or the let keyword, otherwise they will become global variables.",
                "Declarations on Top": "It is a good coding practice to put all declarations at the top of each script or function.This will:```js\n// Declare at the beginning\nvar firstName, lastName, price, discount, fullPrice;\n\n// Use later\nfirstName = \"John\";\nlastName = \"Doe\";\nprice = 19.90;\n\r\ndiscount = 0.10;\nfullPrice = price - discount;```This also goes for loop variables:```js\n// Declare at the beginning\nvar i;\n// Use later\nfor (i = 0; i < 5; i++) \r\n {```",
                "Initialize Variables": "It is a good coding practice to initialize variables when you declare them.This will:```js\n// Declare and initiate at the beginning\nvar firstName = \"\",\nlastName = \"\",\nprice = 0,\ndiscount = 0,\nfullPrice = 0,\nmyArray = [],\nmyObject = {};```",
                "Never Declare Number, String, or Boolean Objects": "Always treat numbers, strings, or booleans as primitive values. Not as objects.Declaring these types as objects, slows down execution speed, and produces nasty side effects:```js\nvar x = \"John\";             \n\r\nvar y = new String(\"John\");\n\r\n(x === y) // is false because x is a string and y is an object.```Or even worse:```js\nvar x = new String(\"John\");             \n\r\nvar y = new String(\"John\");\n\r\n(x == y) // is false because you cannot compare objects.```",
                "Don't Use new Object()": "```js\nvar x1 = {};           // new object\n\r\nvar x2 = \"\";           // new primitive string\n\r\nvar x3 = 0;            // new primitive number\n\r\nvar x4 = false;        // new primitive boolean\n\r\nvar x5 = [];           // new array object\n\r\nvar x6 = /()/;         // new regexp object\n\r\nvar x7 = function(){}; // new function object```",
                "Beware of Automatic Type Conversions": "Beware that numbers can accidentally be converted to strings or NaN (Not a Number).JavaScript is loosely typed. A variable can contain different data types, and a variable can change its data type:```js\nvar x = \"Hello\";     // typeof x is a string\n\r\nx = 5;               // changes typeof x to a number```When doing mathematical operations, JavaScript can convert numbers to strings:```js\nvar x = 5 + 7;       // x.valueOf() is 12,  typeof x is a number\n\r\nvar x = 5 + \"7\";     // x.valueOf() is 57,  typeof x is a string\n\r\nvar x = \"5\" + 7;     // x.valueOf() is 57,  typeof x is a string\n\r\nvar x = 5 - 7;       // x.valueOf() is -2,  typeof x is a number\n\r\nvar x = 5 - \"7\";     // x.valueOf() is -2,  typeof x is a number\n\r\nvar x = \"5\" - 7;     // x.valueOf() is -2,  typeof x is a number\n\r\nvar x = 5 - \"x\";     // x.valueOf() is NaN, typeof x is a number```Subtracting a string from a string, does not generate an error but returns NaN (Not a Number):```js\n\"Hello\" - \"Dolly\"    // returns NaN```",
                "Use === Comparison": "The == comparison operator always converts (to matching types) before comparison.The === operator forces comparison of values and type: ```js\n0 == \"\";        // true\n\r\n1 == \"1\";       // true\n\r\n1 == true;      // true\n\r\n0 === \"\";       // false\n\r\n1 === \"1\";      // false\n\r\n1 === true;     \r\n// false```",
                "Use Parameter Defaults": "If a function is called with a missing argument, the value of the missing argument is set toundefined.Undefined values can break your code. It is a good habit to assign default values to arguments.```js\nfunction myFunction(x, y) {\n  if (y === undefined) {\n    y = 0;\n   }\n\r\n}``````js\nfunction (a=1, b=1) { /*function code*/  }```Read more about function parameters and arguments at Function Parameters",
                "End Your Switches with Defaults": "Always end your switch statements with a default. Even if you think there is no need for it.```js\nswitch (new Date().getDay()) {\n \r\ncase 0:\n    day = \"Sunday\";\n    break;\ncase 1:\n    day = \"Monday\";\n    break;\ncase 2:\n  day = \"Tuesday\";\n   break;\n \r\ncase 3:\n  day = \"Wednesday\";\n    break;\n \r\ncase 4:\n  day = \"Thursday\";\n   break;\ncase 5:\n    day = \"Friday\";\n    break;\ncase 6:\n  day = \"Saturday\";\n    break;\ndefault:\n    day = \r\n \"Unknown\";\n}```",
                "Avoid Using eval()": "The eval() function is used to run text as code. In almost all cases, it should not be necessary to use it.Because it allows arbitrary code to be run, it also represents a security problem."
            }
        },
        "mistakes": {
            "title": "JS Mistakes",
            "url": "https://www.w3schools.com/js/js_mistakes.asp",
            "info": {
                "Accidentally Using the Assignment Operator ": "JavaScript programs may generate unexpected results if a programmer accidentally uses an assignment operator (=), instead of a comparison operator (==) in an if statement. This if statement returns false (as expected) because x is not equal to 10:```js\nvar x = 0;\nif (x == 10)```This if statement returns true (maybe not as expected), because 10 is  true:```js\nvar x = 0;\nif (x = 10)```This if statement returns false (maybe not as expected), because 0 is  false:```js\nvar x = 0;\nif (x = 0)```",
                "Expecting Loose Comparison": "In regular comparison, data type does not matter. This if statement returns true:```js\nvar x = 10;\nvar y = \"10\";\nif (x == y)```In strict comparison, data type does matter. This if statement returns false:```js\nvar x = 10;\nvar y = \"10\";\nif (x === y)```It is a common mistake to forget that switch statements use strict comparison:This case switch will display an alert:```js\nvar x = 10;\nswitch(x) {\n  case 10: alert(\"Hello\");\n  }```This case switch will not display an alert:```js\nvar x = 10;\nswitch(x) {\n  case \"10\": alert(\"Hello\");\n  }```",
                "Confusing Addition & Concatenation ": "Addition is about adding numbers.Concatenation is about adding strings.In JavaScript both operations use the same + operator.Because of this, adding a number as a number will produce a different result from adding a number as a string:```js\nvar x = 10 + 5;          //   the result in x is 15\nvar x = 10 + \"5\";          // the result in x is \"105\"```When adding two variables, it can be difficult to anticipate the result:```js\nvar x = 10;\nvar y = 5;\nvar z = x + y;             // the result in z is 15\nvar x = 10;\nvar y = \"5\";\nvar z =   x + y;             // the result in z is \"105\"```",
                "Misunderstanding Floats ": "All numbers in JavaScript are stored as 64-bits Floating point numbers (Floats).All programming languages, including JavaScript, have difficulties with precise floating point values:```js\nvar x = 0.1;\nvar y = 0.2;\nvar z = x + y              // the result in z will not be 0.3```To solve the problem above, it helps to multiply and divide:```js\nvar z = (x * 10 + y * 10) / 10;       // z will be 0.3```",
                "Breaking a JavaScript String": "JavaScript will allow you to break a statement into two lines:```js\nvar x =\n\"Hello World!\";```But, breaking a statement in the middle of a string will not work:```js\nvar x = \"Hello\nWorld!\";```You must use a \"backslash\" if you must break a statement in a string:```js\nvar x = \"Hello \\\nWorld!\";```",
                "Misplacing Semicolon": "Because of a misplaced semicolon, this code block will execute regardless of the value of x:```js\nif (x == 19);\n{\n  // code block  \n}```",
                "Breaking a Return Statement": "It is a default JavaScript behavior to close a statement automatically at the end of a line.Because of this, these two examples will return the same result:```js\nfunction myFunction(a) {\n  var power = 10  \n  return a * power\n}``````js\nfunction myFunction(a) {\n  var power = 10;\n  return a * power;\n}```JavaScript will also allow you to break a statement into two lines.Because of this, example 3 will also return the same result:```js\nfunction myFunction(a) {\n  var\n  power = 10;  \n  return a * power;\n}```But, what will happen if you break the return statement in two lines like this:```js\nfunction myFunction(a) {\n  var\n  power = 10;  \n  return\n  a * power;\n}```The function will return undefined!Why? Because JavaScript thought you meant:```js\nfunction myFunction(a) {\n  var\n  power = 10;  \n  return;\n  a * power;\n}```",
                "Explanation": "If a statement is incomplete like:```js\nvar```JavaScript will try to complete the statement by reading the next line:```js\npower = 10;```But since this statement is complete: ```js\nreturn```JavaScript will automatically close it like this:```js\nreturn;```This happens because closing (ending) statements with semicolon is optional in JavaScript.JavaScript will close the return statement at the end of the line, because it is a complete statement.",
                "Accessing Arrays with Named Indexes": "Many programming languages support arrays with named indexes.Arrays with named indexes are called associative arrays (or hashes).JavaScript does not support arrays with named indexes.In JavaScript, arrays use numbered indexes:\u00a0\u00a0 ```js\nvar person = [];\n\r\nperson[0] = \"John\";\n\r\nperson[1] = \"Doe\";\n\r\nperson[2] = 46;\nvar x = person.length;       \r\n // person.length will return 3\nvar y = person[0];           \r\n // person[0] will return \"John\"```In JavaScript, objects use named indexes. If you use a named index, when accessing an array, JavaScript will redefine the array to a standard object.After the automatic redefinition, array methods and properties will produce undefined or incorrect results:```js\nvar person = [];\n\r\nperson[\"firstName\"] = \"John\";\n\r\nperson[\"lastName\"] = \"Doe\";\n\r\nperson[\"age\"] = 46;\nvar x = person.length;      // person.length will \r\n return 0\nvar y = person[0];          \r\n // person[0] will return undefined```",
                "Ending Definitions with a Comma": "Trailing commas in object and array definition are legal in ECMAScript 5.```js\nperson = {firstName:\"John\", lastName:\"Doe\", age:46,}``````js\npoints = [40, 100, 1, 5, 25, 10,];``````js\nperson = {\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46}``````js\npoints = [40, 100, 1, 5, 25, 10];```",
                "Undefined is Not Null": "JavaScript objects, variables, properties, and methods can be undefined.In addition, empty JavaScript objects can have the value null.This can make it a little bit difficult to test if an object is empty.You can test if an object exists by testing if the type is  undefined:```js\nif (typeof myObj === \"undefined\")```But you cannot test if an object is null, because this will throw an error if the object is undefined:```js\nif (myObj === null)```To solve this problem, you must test if an object is not null, and not undefined.But this can still throw an error:```js\nif (myObj !== null && typeof myObj !== \"undefined\")```Because of this, you must test for not undefined before you can test for not null:```js\nif (typeof myObj !== \"undefined\" && myObj !== null)```"
            }
        },
        "performance": {
            "title": "JS Performance",
            "url": "https://www.w3schools.com/js/js_performance.asp",
            "info": {
                "Reduce Activity in Loops": "Loops are often used in programming.Each statement in a loop, including the for statement, is executed for each iteration of the loop.Statements or assignments that can be placed outside the loop will make the loop run faster. ```js\nvar i;\nfor (i = 0; i < arr.length; i++) {``````js\nvar i;\nvar\r\nl = arr.length;\nfor (i = 0; i < l; i++) {```The bad code accesses the length property of an array each time the loop is iterated.The better code accesses the length property outside the loop and makes the loop run faster.",
                "Reduce DOM Access": "Accessing the HTML DOM is very slow, compared to other JavaScript statements.If you expect to access a DOM element several times, access it once, and use it as a local variable:```js\nvar obj;\nobj = document.getElementById(\"demo\");\nobj.innerHTML = \"Hello\";```",
                "Reduce DOM Size": "Keep the number of elements in the HTML DOM small.This will always improve page loading, and speed up rendering (page display), especially on smaller devices.Every attempt to search the DOM (like getElementsByTagName) will benefit from a smaller DOM.",
                "Avoid Unnecessary Variables": "Don't create new variables if you don't plan to save values.Often you can replace code like this:```js\nvar fullName = firstName + \" \" + lastName;\n\r\ndocument.getElementById(\"demo\").innerHTML = fullName;```With this:```js\ndocument.getElementById(\"demo\").innerHTML = firstName + \" \" + lastName;```",
                "Delay JavaScript Loading": "Putting your scripts at the bottom of the page body lets the browser load the page first.While a script is downloading, the browser will not start any other downloads. In addition all parsing and rendering activity might be blocked.An alternative is to use defer=\"true\" in the script tag. The defer attribute specifies that the script should be executed after the page has finished parsing, but it only works for external scripts.If possible, you can add your script to the page by code, after the page has loaded:```js\n<script>\nwindow.onload = function() {\n  \r\nvar element = document.createElement(\"script\");\n  \r\nelement.src = \"myScript.js\";\n  \r\ndocument.body.appendChild(element);\n};\n</script>```",
                "Avoid Using with": "Avoid using the with keyword. It has a negative effect on speed. It also clutters up JavaScript scopes.The with keyword is not allowed in strict mode."
            }
        },
        "reservedwords": {
            "title": "JS Reserved Words",
            "url": "https://www.w3schools.com/js/js_reserved.asp",
            "info": {
                "Removed Reserved Words ": "",
                "JavaScript Objects, Properties, and Methods": "",
                "Java Reserved Words": "",
                "Other Reserved Words": "JavaScript can be used as the programming language in many applications.",
                "HTML Event Handlers": "In addition you should avoid using the name of all HTML event handlers."
            }
        },
        "versions": {
            "title": "JS Versions",
            "url": "https://www.w3schools.com/js/js_versions.asp",
            "info": {
                "ECMAScript Editions": "",
                "Browser Support": "ECMAScript 3 is fully supported in all browsers.ECMAScript 5 is fully supported in all modern browsers.",
                "Browser Support for ES5 (2009)": "",
                "Browser Support for ES6 (ECMAScript 2015)": "",
                "Browser Support for ES7 (ECMAScript 2016)": "",
                "JavaScript / ECMAScript": "JavaScript was developed for Netscape.Netscape 2 was the first browser to run JavaScript.After Netscape the Mozilla foundation continued to develop JavaScript for the Firefox browser.The latest JavaScript version was 1.8.5. (Identical to ECMAScript 5).ECMAScript was developed by ECMA International after the organization adopted JavaScript.The first edition of ECMAScript was released in 1997. This list compares the version numbers of the different products: IE 4 was the first browser to support ECMAScript 1 (1997).IE 5 was the first browser to support ECMAScript 2 (1999).IE 5.5 was the first browser to support ECMAScript 3 (2000).IE 9\\* was the first browser to support ECMAScript 5 (2011).Chrome 23, IE 10, and Safari 6 were the first browsers to fully support ECMAScript 5:"
            }
        },
        "versiones5": {
            "title": "JS Version ES5",
            "url": "https://www.w3schools.com/js/js_es5.asp",
            "info": {
                "What is ECMAScript 5?": "ECMAScript 5 is also known as ES5 and ECMAScript 2009This chapter introduces some of the most important features of ES5.",
                "ECMAScript 5 Features": "These were the new features released in 2009:",
                "ECMAScript 5 Syntactical Changes": "",
                "The \"use strict\" Directive": "\"use strict\" defines that the JavaScript code should be executed in \"strict mode\".With strict mode you can, for example, not use undeclared variables.Read more in JS Strict Mode.",
                "String.trim()": "String.trim() removes whitespace from both sides of a string.```js\nvar str = \"       Hello World!        \";\nalert(str.trim());```Read more in JS String Methods.",
                "Array.isArray()": "The isArray() method checks whether an object is an array.```js\nfunction myFunction() {\n  var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n  var x = document.getElementById(\"demo\");\n  x.innerHTML = Array.isArray(fruits);\n}```Read more in JS Arrays.",
                "Array.forEach()": "The forEach() method calls a function once for each array element.```js\nvar txt = \"\";\nvar numbers = [45, 4, 9, 16, 25];\n\r\nnumbers.forEach(myFunction);\n\r\nfunction myFunction(value) {\n \r\ntxt = txt + value + \"<br>\"; \n\r\n}```Learn more in JS Array Iteration Methods.",
                "Array.map()": "This example multiplies each array value by 2: ```js\nvar numbers1 = [45, 4, 9, 16, 25];\n\r\nvar numbers2 = numbers1.map(myFunction);\n\n\r\nfunction myFunction(value) {\nreturn value * 2;\n\r\n}```Learn more in JS Array Iteration Methods.",
                "Array.filter()": "This example creates a new array from elements with a value larger than 18:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar over18 = numbers.filter(myFunction);\nfunction myFunction(value) {\n  return value > 18;\n}```Learn more in JS Array Iteration Methods.",
                "Array.reduce()": "This example finds the sum of all numbers in an array:```js\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduce(myFunction);\n\nfunction myFunction(total, value) {\n  return total + value;\n}```Learn more in JS Array Iteration Methods.",
                "Array.reduceRight()": "This example also finds the sum of all numbers in an array:```js\nvar numbers1 = [45, 4, 9, 16, 25];\nvar sum = numbers1.reduceRight(myFunction);\n\nfunction myFunction(total, value) {\n  return total + value;\n}```Learn more in JS Array Iteration Methods.",
                "Array.every()": "This example checks if all values are over 18:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar allOver18 = numbers.every(myFunction);\nfunction myFunction(value) {\n  return value > 18;\n}```Learn more in JS Array Iteration Methods.",
                "Array.some()": "This example checks if some values are over 18:```js\nvar numbers = [45, 4, 9, 16, 25];\nvar allOver18 = numbers.some(myFunction);\nfunction myFunction(value) {\n  return value > 18;\n}```Learn more in JS Array Iteration Methods.",
                "Array.indexOf()": "Search an array for an element value and returns its position.```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nvar a = fruits.indexOf(\"Apple\");```Learn more in JS Array Iteration Methods.",
                "Array.lastIndexOf()": "Array.lastIndexOf() is the same as Array.indexOf(), but searches from the end of the array.```js\nvar fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\n\r\nvar a = fruits.lastIndexOf(\"Apple\");```Learn more in JS Array Iteration Methods.",
                "JSON.parse()": "A common use of JSON is to receive data from a web server.Imagine you received this text string from a web server:```js\n'{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}'```The JavaScript function JSON.parse() is used to convert the text into a JavaScript object:```js\nvar obj = JSON.parse('{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}');```Read more in our JSON Tutorial.",
                "JSON.stringify()": "A common use of JSON is to send data to a web server.When sending data to a web server, the data has to be a string.Imagine we have this object in JavaScript:```js\nvar obj = {name:\"John\", age:30, city:\"New York\"};```Use the JavaScript function JSON.stringify() to convert it into a string.```js\nvar myJSON = JSON.stringify(obj);```myJSON is now a string, and ready to be sent to a server:```js\nvar obj = {name:\"John\", age:30, city:\"New York\"};\n\r\nvar myJSON = JSON.stringify(obj);\ndocument.getElementById(\"demo\").innerHTML = myJSON;```Read more in our JSON Tutorial.",
                "Date.now()": "Date.now() returns the number of milliseconds since zero date (January 1. 1970 00:00:00 UTC).```js\nvar timInMSs = Date.now();```Date.now() returns the same as getTime() performed on a Date object.Learn more in JS Dates.",
                "Property Getters and Setters": "ES5 lets you define object methods with a syntax that looks like getting or settinga property.This example creates a getter for a property called fullName:```js\n// Create an object:\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  get fullName() {\n    return this.firstName + \" \" + this.lastName;\n  }\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.fullName;```This example creates a setter and a getter for the language property:```js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  language : \"NO\",\n  get lang() {\n    return this.language;\n  },\n  set lang(value) {\n    this.language = value;\n  }\n};\n// Set an object property using a setter:\nperson.lang = \"en\";\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.lang;```This example uses a setter to secure upper case updates of language:Learn more about Gettes and Setters in JS Object Accessors",
                "New Object Property Methods": "Object.defineProperty() is a new Object method in ES5.It lets you define an object property and/or change a property's value and/or metadata.```js\n// Create an Object:\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  language : \"NO\", \n};\n// Change a Property:\nObject.defineProperty(person, \"language\", {\n  value: \"EN\",\n  writable : true,\n  enumerable : true,\n  configurable : true\n});\n// Enumerate Properties\nvar txt = \"\";\nfor (var x in person) {\n  txt += person[x] + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;```Next example is the same code, except it hides the language property from enumeration:```js\n// Create an Object:\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  language : \"NO\", \n};\n// Change a Property:\nObject.defineProperty(person, \"language\", {\n  value: \"EN\",\n  writable : true,\n  enumerable : false,\n  configurable : true\n});\n// Enumerate Properties\nvar txt = \"\";\nfor (var x in person) {\n  txt += person[x] + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = txt;```This example creates a setter and a getter to secure upper case updates of language:ECMAScript 5 added a lot of new Object Methods to JavaScript:Learn more in Object ECMAScript5.",
                "Property Access on Strings": "The charAt() method returns the character at a specified index (position) in a string:```js\nvar str = \"HELLO WORLD\";\n\r\nstr.charAt(0);            // returns H```ECMAScript 5 allows property access on strings:```js\nvar str = \"HELLO WORLD\";\n\r\nstr[0];                   // returns H```",
                "Trailing Commas": "ECMAScript 5 allows trailing commas in object and array definitions:```js\nperson = {\nfirstName: \"John\",\nlastName: \"\r\nDoe\",\n\r\n \r\nage: 46,\n\r\n}``````js\npoints = [\n1,\n5,\n10,\n25,\n40,\n100,\n\r\n];``````js\n//Allowed:\nvar person = '{\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46}'\nJSON.parse(person)\n// Not allowed:\nvar person = '{\"firstName\":\"John\", \"lastName\":\"Doe\", \"age\":46,}'\nJSON.parse(person)```",
                "Strings Over Multiple Lines": "```js\n\"Hello \\\nDolly!\";```A safer way to break up a string literal, is to use string addition:```js\n\"Hello \" + \n\"Dolly!\";```",
                "Reserved Words as Property Names": "ECMAScript 5 allows reserved words as property names:```js\nvar obj = {name: \"John\", new: \"yes\"}```",
                "Browser Support for ES5 (ECMAScript 5)": "Chrome 23, IE 10, and Safari 6 were the first browsers to fully support ECMAScript 5:"
            }
        },
        "versiones6": {
            "title": "JS Version ES6",
            "url": "https://www.w3schools.com/js/js_es6.asp",
            "info": {
                "What is ECMAScript 6?": "ECMAScript 6 is also known as ES6 and ECMAScript 2015.Some people call it JavaScript 6.This chapter will introduce some of the new features in ES6.",
                "Browser Support for ES6 (ECMAScript 2015)": "Safari 10 and Edge 14 were the first browsers to fully support ES6:",
                "JavaScript let": "The let statement allows you to declare a variable with block scope.```js\nvar x = 10;\n\r\n// Here x is 10\n\r\n{ \nlet x = 2;\n  // Here x is 2\n}\n\r\n// Here x is 10```Read more about let in the JavaScript Let chapter.",
                "JavaScript const": "The const statement allows you to declare a constant (a JavaScript variable with a constant value).Constants are similar to let variables, except that the value cannot be changed.```js\nvar x = 10;\n\r\n// Here x is 10\n\r\n{ \nconst x = 2;\n  // Here x is 2\n}\n\r\n// Here x is 10```Read more about const in the JavaScript Const chapter.",
                "Arrow Functions": "Arrow functions allows a short syntax for writing function expressions.You don't need the function keyword, the return keyword, and the curly brackets.```js\n// ES5\n\r\nvar x = function(x, y) {\n    return x * y;\n\r\n}\n\r\n// ES6\n\r\nconst x = (x, y) => x * y;```Arrow functions do not have their own this.They are not well suited for defining object methods.Arrow functions are not hoisted. They must be defined before they are used.Using constis safer than using var, because a function expression is always constant value.You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:```js\nconst x = (x, y) => { return x * y };```Learn more about Arrow Functions in our JavaScript Arrow Function chapter.",
                "Classes": "ES6 introduced classes.A class is a type of function, but instead of using the keywordfunction to initiate it, we use the keywordclass, and the properties are assigned inside aconstructor() method.Use the keyword class to create a class, and always add a constructor method.The constructor method is called each time the class object is initialized.```js\nclass Car {\n constructor(brand) {\n    this.carname = brand;\n }\n}```Now you can create objects using the Car class:```js\nclass Car {\n constructor(brand) {\n    this.carname = brand;\n }\n}\nmycar = new Car(\"Ford\");```Learn more about classes in our JavaScript Classes chapter.",
                "Default Parameter Values": "ES6 allows function parameters to have default values.```js\nfunction myFunction(x, y = 10) {\n // y is 10 if not passed or undefined\n return x + y;\n}\nmyFunction(5); // will return 15```",
                "Array.find()": "The find() method returns the value of the first array element that passes a test function.This example finds (returns the value of ) the first element that is larger than 18:```js\nvar numbers = [4, 9, 16, 25, 29];\nvar first = numbers.find(myFunction);\nfunction myFunction(value, index, array) {\n  return value > 18;\n}```Note that the function takes 3 arguments:",
                "Array.findIndex()": "The findIndex() method returns the index of the first array element that passes a test function.This example finds the index of the first element that is larger than 18:```js\nvar numbers = [4, 9, 16, 25, 29];\nvar first = numbers.findIndex(myFunction);\nfunction myFunction(value, index, array) {\n  return value > 18;\n}```Note that the function takes 3 arguments:",
                "New Number Properties": "ES6 added the following properties to the Number object:```js\nvar x = Number.EPSILON;``````js\nvar x = Number.MIN_SAFE_INTEGER;``````js\nvar x = Number.MAX_SAFE_INTEGER;```",
                "New Number Methods": "ES6 added 2 new methods to the Number object:",
                "The Number.isInteger() Method": "The Number.isInteger() method returns true if the argument is an integer.```js\nNumber.isInteger(10);        // returns true\n\r\nNumber.isInteger(10.5);      // returns false```",
                "The Number.isSafeInteger() Method": "A safe integer is an integer that can be exactly represented as a double precision number.The Number.isSafeInteger() method returns true if the argument is a safe integer.```js\nNumber.isSafeInteger(10);    // returns true\n\r\nNumber.isSafeInteger(12345678901234567890);  // returns false```",
                "New Global Methods": "ES6 also added 2 new global number methods:",
                "The isFinite() Method": "The global isFinite() method returns false if the argument is Infinity or NaN.Otherwise it returns true:```js\nisFinite(10/0);       // returns false\n\r\nisFinite(10/1);       // returns true```",
                "The isNaN() Method": "The global isNaN() method returns true if the argument is NaN. Otherwise it returns false:```js\nisNaN(\"Hello\");       // returns true```",
                "Exponentiation Operator": "The exponentiation operator (\\*\\*) raises the first operand to the power of the second operand.```js\nvar x = 5;\nvar z =\r\n x ** 2;          // result is 25```x \\*\\* y produces the same result as Math.pow(x,y):```js\nvar x = 5;\nvar z =Math.pow(x,2);   // result is 25```"
            }
        },
        "on": {
            "title": "JS JSON",
            "url": "https://www.w3schools.com/js/js_json.asp",
            "info": {
                "What is JSON?": "\\* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. Code for reading and generating JSON data can be written in any programming language.",
                "JSON Example": "This JSON syntax defines an employees object: an array of 3 employee records (objects):```js\n{\n\"employees\":[\n{\"firstName\":\"John\", \"lastName\":\"Doe\"}, \n{\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n  {\"firstName\":\"Peter\", \"lastName\":\"Jones\"}\n\r\n]\n}```",
                "The JSON Format Evaluates to JavaScript Objects": "The JSON format is syntactically identical to the code for creating JavaScript objects.Because of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects.",
                "JSON Syntax Rules": "",
                "JSON Data - A Name and a Value": "JSON data is written as name/value pairs, just like JavaScript object properties.A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:",
                "JSON Objects": "JSON objects are written inside curly braces.Just like in JavaScript, objects can contain multiple name/value pairs:",
                "JSON Arrays": "JSON arrays are written inside square brackets.Just like in JavaScript, an array can contain objects:In the example above, the object \"employees\" is an array. It contains three objects.Each object is a record of a person (with a first name and a last name).",
                "Converting a JSON Text to a JavaScript Object": "A common use of JSON is to read data from a web server, and display the data in a web page.For simplicity, this can be demonstrated using a string as input.First, create a JavaScript string containing JSON syntax:```js\nvar text = '{ \"employees\" : [' +\n\r\n'{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' +\n\r\n'{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' +\n\r\n'{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}';```Then, use the JavaScript built-in function JSON.parse() to convert the string into a JavaScript object:```js\nvar obj = JSON.parse(text);```Finally, use the new JavaScript object in your page:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML =\n\r\nobj.employees[1].firstName + \" \" + obj.employees[1].lastName;\n\r\n</script>```"
            }
        },
        "forms": {
            "title": "JS Forms",
            "url": "https://www.w3schools.com/js/js_validation.asp",
            "info": {
                "JavaScript Form Validation": "HTML form validation can be done by JavaScript.If a form field (fname) is empty, this function alerts a message, and returns false, to prevent the form from being submitted:```js\nfunction validateForm() {\nvar\r\nx = document.forms[\"myForm\"][\"fname\"].value;\n \r\nif (x == \"\") {\n    alert(\"Name must be filled out\");\n    return false;\n  }\n\r\n}```The function can be called when the form is submitted:```js\n<form name=\"myForm\" action=\"/action_page.php\" onsubmit=\"return validateForm()\" \r\nmethod=\"post\">\n\r\n Name: <input type=\"text\" name=\"fname\">\n\r\n<input type=\"submit\" value=\"Submit\">\n\r\n</form>```",
                "JavaScript Can Validate Numeric Input": "JavaScript is often used to validate numeric input:",
                "Automatic HTML Form Validation": "HTML form validation can be performed automatically by the browser:If a form field (fname) is empty, the required attribute prevents this form from being submitted: ```js\n<form action=\"/action_page.php\" method=\"post\">\n<input type=\"text\" name=\"fname\" required>\n\r\n \r\n<input type=\"submit\" value=\"Submit\">\n\r\n</form>```",
                "Data Validation": "Data validation is the process of ensuring that user input is clean, correct, and useful.Typical validation tasks are:Most often, the purpose of data validation is to ensure correct user input.Validation can be defined by many different methods, and deployed in many different ways.Server side validation is performed by a web server, after input has been sent to the server.Client side validation is performed by a web browser, before input is sent to a web server.",
                "HTML Constraint Validation": "HTML5 introduced a new HTML validation concept called constraint validation.HTML constraint validation is based on:",
                "Constraint Validation HTML Input Attributes": "For a full list, go to HTML Input Attributes.",
                "Constraint Validation CSS Pseudo Selectors": "For a full list, go to CSS Pseudo Classes."
            }
        },
        "formsapi": {
            "title": "Forms API",
            "url": "https://www.w3schools.com/js/js_validation_api.asp",
            "info": {
                "Constraint Validation DOM Methods": "If an input field contains invalid data, display a message:```js\n<input id=\"id1\" type=\"number\" min=\"100\" max=\"300\"   required>\n<button onclick=\"myFunction()\">OK</button>\n<p id=\"demo\"></p>\n<script>\n\r\n function myFunction() {\n  var inpObj = document.getElementById(\"id1\");\n  if (!inpObj.checkValidity()) {\n    document.getElementById(\"demo\").innerHTML = inpObj.validationMessage;\n  }\n}\n</script>```",
                "Constraint Validation DOM Properties": "",
                "Validity Properties": "The validity property of an input element contains a number of properties related to the validity of data: ",
                "Examples": "If the number in an input field is greater than 100 (the input's max attribute), display a message:```js\n<input id=\"id1\" type=\"number\" max=\"100\">\n<button onclick=\"myFunction()\">OK</button>\n\r\n<p id=\"demo\"></p>\n\r\n<script>\n\r\nfunction myFunction() {\n  var txt = \"\";\n  if (document.getElementById(\"id1\").validity.rangeOverflow) {\n    txt = \"Value too large\";\n  }\n  document.getElementById(\"demo\").innerHTML = txt;\n\r\n}\n\r\n</script>```If the number in an input field is less than 100 (the input's min attribute), display a message:```js\n<input id=\"id1\" type=\"number\" min=\"100\">\n<button onclick=\"myFunction()\">OK</button>\n<p id=\"demo\"></p>\n<script>\nfunction myFunction() {\n  var txt = \"\";\n  if (document.getElementById(\"id1\").validity.rangeUnderflow) {\n    txt = \"Value too small\";\n  }\n  document.getElementById(\"demo\").innerHTML = txt;\n\r\n}\n</script>```"
            }
        },
        "objectdefinitions": {
            "title": "Object Definitions",
            "url": "https://www.w3schools.com/js/js_object_definition.asp",
            "info": {
                "JavaScript Primitives": "A primitive value is a value that has no properties or methods.A primitive data type is data that has a primitive value.JavaScript defines 5 types of primitive data types:Primitive values are immutable (they are hardcoded and therefore cannot be changed).",
                "Objects are Variables": "JavaScript variables can contain single values:```js\nvar person = \"John Doe\";```Objects are variables too. But objects can contain many values. The values are written as name : value pairs (name and value separated by a colon).```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};```",
                "Object Properties": "The named values, in JavaScript objects, are called properties.Objects written as name value pairs are similar to:",
                "Object Methods": "Methods are actions that can be performed on objects.Object properties can be both primitive values, other objects, and functions.An object method is an object property containing a function definition.You will learn more about methods in the next chapters.",
                "Creating a JavaScript Object": "With JavaScript, you can define and create your own objects.There are different ways to create new objects:",
                "Using an Object Literal": "This is the easiest way to create a JavaScript Object.Using an object literal, you both define and create an object in one statement.An object literal is a list of name:value pairs (like age:50) inside curly braces {}.The following example creates a new JavaScript object with four properties:```js\nvar\r\nperson = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};```Spaces and line breaks are not important. An object definition can span multiple lines:```js\nvar person = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  age: 50,\n  eyeColor: \"blue\"\n};```",
                "Using the JavaScript Keyword new": "The following example also creates a new JavaScript object with four properties:```js\nvar\r\nperson = new Object();\n\r\nperson.firstName = \"John\";\n\r\nperson.lastName = \"Doe\";\n\r\nperson.age = 50;\n\r\nperson.eyeColor = \"blue\";```",
                "JavaScript Objects are Mutable": "Objects are mutable: They are addressed by reference, not by value.If person is an object, the following statement will not create a copy of person:```js\nvar x = person;  // This will not create a copy of person.```The object x is not a copy of person. It is person. Both x and person are the same object.Any changes to x will also change person, because x and person are the same object. ```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}\n\nvar x = person;\n\r\nx.age = 10;           // This will change both x.age and person.age```"
            }
        },
        "objectproperties": {
            "title": "Object Properties",
            "url": "https://www.w3schools.com/js/js_object_properties.asp",
            "info": {
                "JavaScript Properties": "Properties are the values associated with a JavaScript object.A JavaScript object is a collection of unordered properties.Properties can usually be changed, added, and deleted, but some are read only.",
                "Accessing JavaScript Properties": "The syntax for accessing the property of an object is:oror```js\nperson.firstname + \" is \" + person.age + \" years old.\";``````js\nperson[\"firstname\"] + \" is \" + person[\"age\"] + \" years old.\";```",
                "JavaScript for...in Loop": "The JavaScript for...in statement loops through the properties of an object.The block of code inside of the for...in loop will be executed once for each property.Looping through the properties of an object:```js\nvar person = {fname:\"John\", lname:\"Doe\", age:25}; \n\n\r\nfor (x in person) {\n  txt += person[x];\n\r\n }```",
                "Adding New Properties": "You can add new properties to an existing object by simply giving it a value. Assume that the person object already exists -you can then give it new properties:```js\nperson.nationality = \"English\";```",
                "Deleting Properties": "The delete keyword deletes a property from an object:```js\nvar person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};\n  delete person.age;   // or delete person[\"age\"];```The delete keyword deletes both the value of the property and the property itself.After deletion, the property cannot be used before it is added back again.The delete operator is designed to be used on object properties. It has no effect on variables or functions. The delete operator should not be used on predefined JavaScript object properties. It can crash your application.",
                "Property Attributes": "All properties have a name. In addition they also have a value.The value is one of the property's attributes.Other attributes are: enumerable, configurable, and writable.These attributes define how the property can be accessed (is it readable?, is it writable?)In JavaScript, all attributes can be read, but only the value attribute can be changed (and only if the property is writable).( ECMAScript 5 has methods for both getting and setting all property attributes)",
                "Prototype Properties": "JavaScript objects inherit the properties of their prototype. The delete keyword does not delete inherited properties, but if you delete a prototype property, it will affect all objects inherited from the prototype."
            }
        },
        "objectmethods": {
            "title": "Object Methods",
            "url": "https://www.w3schools.com/js/js_object_methods.asp",
            "info": {
                "The this Keyword": "In a function definition, this refers to the \"owner\" of the function.In the example above, this is the person object that \"owns\" the fullName function.In other words, this.firstName means the firstName property of this object.Read more about the this keyword at JS this Keyword.",
                "JavaScript Methods": "JavaScript methods are actions that can be performed on objects.A JavaScript method is a property containing a function definition.",
                "Accessing Object Methods": "You access an object method with the following syntax:You will typically describe fullName() as a method of the person object, and fullName as a property. The fullName property will execute (as a function) when it is invoked with ().This example accesses the fullName() method of a person object:```js\nname = person.fullName();```If you access the fullName property, without (), it will return the function definition:```js\nname = person.fullName;```",
                "Using Built-In Methods": "This example uses the toUpperCase() method of the String object, to convert a text to uppercase:The value of x, after execution of the code above will be:",
                "Adding a Method to an Object": "Adding a new method to an object is easy: ```js\nperson.name = function () {\n  return this.firstName + \" \" + this.lastName;\n};```"
            }
        },
        "objectdisplay": {
            "title": "Object Display",
            "url": "https://www.w3schools.com/js/js_object_display.asp",
            "info": {
                "How to Display JavaScript Objects?": "Displaying a JavaScript object will output [object Object].```js\nvar person = {name:\"John\", age:30, city:\"New York\"};\n\r\ndocument.getElementById(\"demo\").innerHTML = person;```Some common solutions to display JavaScript objects are:",
                "Displaying Object Properties": "The properties of an object can be displayed as a string:```js\nvar person = {name:\"John\", age:30, city:\"New York\"};\n\r\ndocument.getElementById(\"demo\").innerHTML =\n\r\nperson.name + \",\" + person.age + \",\" + person.city;```",
                "Displaying the Object in a Loop": "The properties of an object can be collected in a loop:```js\nvar x, txt = \"\";\n\r\nvar person = {name:\"John\", age:30, city:\"New York\"};\n\r\nfor (x in person) {\n\r\ntxt += person[x] + \" \";\n\r\n};\n\r\ndocument.getElementById(\"demo\").innerHTML = txt;```",
                "Using Object.values()": "Any JavaScript object can be converted to an array using Object.values():```js\nvar person = {name:\"John\", age:30, city:\"New York\"};\n\r\nvar myArray = Object.values(person);```myArray is now a JavaScript array, ready to be displayed:```js\nvar person = {name:\"John\", age:50, city:\"New York\"};\n\r\nvar myArray = Object.values(person);\n\r\ndocument.getElementById(\"demo\").innerHTML = myArray;```Object.values() is supported in all major browsers since 2016.",
                "Using JSON.stringify()": "Any JavaScript object can be stringified (converted to a string) with the JavaScript functionJSON.stringify():```js\nvar person = {name:\"John\", age:30, city:\"New York\"};\n\r\nvar myString = JSON.stringify(person);```myString is now a JavaScript string, ready to be displayed:```js\nvar person = {name:\"John\", age:30, city: \"New York\"};\n\r\nvar myString = JSON.stringify(person);\n\r\ndocument.getElementById(\"demo\").innerHTML = myString;```JSON.stringify() is included in JavaScript and supported in all major browsers.",
                "Stringify Dates": "JSON.stringify converts dates into strings:```js\nvar person =  {name:\"John\", today:new Date()};\n\r\nvar myString = JSON.stringify(person);\n\r\ndocument.getElementById(\"demo\").innerHTML = myString;```",
                "Stringify Functions": "JSON.stringify will not stringify functions:```js\nvar person = {name:\"John\", age:function () {return 30;}};\n\r\nvar myString = JSON.stringify(person);\n\r\ndocument.getElementById(\"demo\").innerHTML = myString;```This can be \"fixed\" if you convert the functions into strings before stringifying.```js\nvar person = {name:\"John\", age:function () {return 30;}};\n\r\nperson.age = person.age.toString();\n\r\nvar myString = JSON.stringify(person);\n\r\ndocument.getElementById(\"demo\").innerHTML = myString;```",
                "Stringify Arrays": "It is also possible to stringify JavaScript arrays:```js\nvar arr = [\"John\", \"Peter\", \"Sally\", \"Jane\"];\n\r\nvar myString = JSON.stringify(arr);\n\r\ndocument.getElementById(\"demo\").innerHTML = myString;```"
            }
        },
        "objectaccessors": {
            "title": "Object Accessors",
            "url": "https://www.w3schools.com/js/js_object_accessors.asp",
            "info": {
                "JavaScript Accessors (Getters and Setters)": "ECMAScript 5 (2009) introduced Getter and Setters.Getters and setters allow you to define Object Accessors (Computed Properties).",
                "JavaScript Getter (The get Keyword)": "This example uses a lang property to get the value of the language property.```js\n// Create an object:\n\r\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  language : \"en\",\n  get lang() {\n  return this.language;\n  }\n};\n\r\n// Display data from the object using a getter:\n\r\ndocument.getElementById(\"demo\").innerHTML = person.lang;```",
                "JavaScript Setter (The set Keyword)": "This example uses a lang property to set the value of the language property.```js\nvar person = {\n  firstName: \"John\",\nlastName : \"Doe\",\nlanguage : \"\",\n  set lang(lang) {\n  this.language = lang;\n  }\n};\n\r\n// Set an object \r\nproperty using a setter:\n\r\nperson.lang = \"en\";\n\r\n// Display data from the object:\n\r\ndocument.getElementById(\"demo\").innerHTML = person.language;```",
                "JavaScript Function or Getter?": "What is the differences between these two examples?```js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  fullName : function() {\n  return this.firstName + \" \" + \r\nthis.lastName;\n  }\n\r\n};\n// Display data from the object using a method:\ndocument.getElementById(\"demo\").innerHTML = person.fullName();``````js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  get fullName() {\n    return this.firstName + \" \" + \r\nthis.lastName;\n  }\n\r\n};\n// Display data from the object using a getter:\ndocument.getElementById(\"demo\").innerHTML = person.fullName;```Example 1 access fullName as a function: person.fullName().Example 2 access fullName as a property: person.fullName.The second example provides simpler syntax.",
                "Data Quality": "JavaScript can secure better data quality when using getters and setters.Using the lang property, in this example, returns the value of the language property in upper case:```js\n// Create an object:\n\r\nvar person = {\n  firstName: \"John\",\nlastName : \"Doe\",\n  language : \"en\",\n  get lang() {\n  return this.language.toUpperCase();\n  }\n};\n\r\n// Display data from the object using a getter:\n\r\ndocument.getElementById(\"demo\").innerHTML = person.lang;```Using the lang property, in this example, stores an upper case value in the language property:```js\nvar person = {\n  firstName: \"John\",\nlastName : \"Doe\",\n  language : \"\",\nset lang(lang) {\n    this.language = lang.toUpperCase();\n  }\n};\n\r\n// Set an object \r\nproperty using a setter:\n\r\nperson.lang = \"en\";\n\r\n// Display data from the object:\n\r\ndocument.getElementById(\"demo\").innerHTML = person.language;```",
                "Why Using Getters and Setters?": "",
                "Object.defineProperty()": "The Object.defineProperty() method can also be used to add Getters and Setters:```js\n// Define object\n\r\nvar obj = {counter : 0};\n\r\n// Define setters\n\r\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\n\r\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\n\r\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\n\r\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\n\r\nObject.defineProperty(obj, \"subtract\", {\nset : function (value) {this.counter -= value;}\n});\n\r\n// Play with the counter:\n\r\nobj.reset;\n\r\nobj.add = 5;\n\r\nobj.subtract = 1;\n\r\nobj.increment;\n\r\nobj.decrement;```",
                "Browser Support": "Getters and Setters are not supported in Internet Explorer 8 or earlier:"
            }
        },
        "objectconstructors": {
            "title": "Object Constructors",
            "url": "https://www.w3schools.com/js/js_object_constructors.asp",
            "info": {
                "Object Types (Blueprints) (Classes)": "The examples from the previous chapters are limited. They only create single objects.Sometimes we need a \"blueprint\" for creating many objects of the same \"type\".The way to create an \"object type\", is to use an object constructor function.In the example above, function Person() is an object constructor function.Objects of the same type are created by calling the constructor function with the new keyword:```js\nvar myFather = new Person(\"John\", \"Doe\", 50, \"blue\");\n\r\nvar myMother = new Person(\"Sally\", \"Rally\", 48, \"green\");```",
                "The this Keyword": "In JavaScript, the thing called this is the object that \"owns\" the code.The value of this, when used in an object, is the object itself.In a constructor function this does not have a value.It is a substitute for the new object. The value of this will become the new object when a new object is created.",
                "Adding a Property to an Object": "Adding a new property to an existing object is easy: ```js\nmyFather.nationality = \"English\";```The property will be added to myFather. Not to myMother. (Not to any other person objects).",
                "Adding a Method to an Object": "Adding a new method to an existing object is easy: ```js\nmyFather.name = function () {\n  return this.firstName + \" \" + this.lastName;\n};```The method will be added to myFather. Not to myMother. (Not to any other person objects).",
                "Adding a Property to a Constructor": "You cannot add a new property to an object constructor the same way you add a new property to an existing object:```js\nPerson.nationality = \"English\";```To add a new property to a constructor, you must add it to the constructor function:```js\nfunction Person(first, last, age, eyecolor) {\n \r\nthis.firstName = first;\n \r\nthis.lastName = last;\n \r\nthis.age = age;\nthis.eyeColor = eyecolor;\n  this.nationality = \"English\";\n\r\n}```",
                "Adding a Method to a Constructor": "Your constructor function can also define methods:```js\nfunction Person(first, last, age, eyecolor) {\n \r\nthis.firstName = first;\n \r\nthis.lastName = last;\n \r\nthis.age = age;\n \r\nthis.eyeColor = eyecolor;\n  this.name = function() {return this.firstName + \" \" + this.lastName;};\n\r\n}```You cannot add a new method to an object constructor the same way you add a new method to an existing object.Adding methods to an object constructor must be done inside the constructor function:```js\nfunction Person(firstName, lastName, age, eyeColor) {\nthis.firstName = firstName;  \n \r\nthis.lastName = lastName;\n \r\nthis.age = age;\nthis.eyeColor = eyeColor;\nthis.changeName = function (name) {\n   \r\nthis.lastName = name;\n};\n\r\n}```The changeName() function assigns the value of name to the person's lastName property.```js\nmyMother.changeName(\"Doe\");```JavaScript knows which person you are talking about by \"substituting\" this with myMother.",
                "Built-in JavaScript Constructors": "JavaScript has built-in constructors for native objects:```js\nvar x1 = new Object();    // A new Object object\n\r\nvar x2 = new String();    // A new String object\n\r\nvar x3 = new Number();    // A new Number object\n\r\nvar x4 = new Boolean();   // A new Boolean object\n\r\nvar x5 = new Array();     // A new Array object\n\r\nvar x6 = new RegExp();    // A new RegExp object\n\r\nvar x7 = new Function();  // A new Function object\n\r\nvar x8 = new Date();      // A new Date object```The Math() object is not in the list. Math is a global object. The new keyword cannot be used on Math.",
                "Did You Know?": "As you can see above, JavaScript has object versions of the primitive data types String, Number, and Boolean. But there is no reason to create complex objects. Primitive values are much faster.ALSO:Use object literals {} instead of new Object().Use string literals \"\" instead of new String().Use number literals 12345 instead of new Number().Use boolean literals true / false instead of new Boolean().Use array literals [] instead of new Array().Use pattern literals /()/ instead of new RegExp().Use function expressions () {} instead of new Function().```js\nvar x1 = {};            // new object\n\r\nvar x2 = \"\";            // new primitive string\n\r\nvar x3 = 0;             // new primitive number\n\r\nvar x4 = false;         // new primitive boolean\n\r\nvar x5 = [];            // new array object\n\r\nvar x6 = /()/           // new regexp object\n\r\nvar x7 = function(){};  // new function object```",
                "String Objects": "Normally, strings are created as primitives: var firstName = \"John\"But strings can also be created as objects using the new keyword: var firstName = new String(\"John\")Learn why strings should not be created as object in the chapterJS Strings. ",
                "Number Objects": "Normally, numbers are created as primitives: var x = 123But numbers can also be created as objects using the new keyword: var x = new Number(123)Learn why numbers should not be created as object in the chapterJS Numbers. ",
                "Boolean Objects": "Normally, booleans are created as primitives: var x = falseBut booleans can also be created as objects using the new keyword: var x = new Boolean(false)Learn why booleans should not be created as object in the chapterJS Booleans. "
            }
        },
        "objectprototypes": {
            "title": "Object Prototypes",
            "url": "https://www.w3schools.com/js/js_object_prototypes.asp",
            "info": {
                "Prototype Inheritance": "All JavaScript objects inherit properties and methods from a prototype:The Object.prototype is on the top of the prototype inheritance chain:Date objects, Array objects, and Person objects inherit from Object.prototype.",
                "Adding Properties and Methods to Objects": "Sometimes you want to add new properties (or methods) to all existing objects of a given type.Sometimes you want to add new properties (or methods) to an object constructor.",
                "Using the prototype Property": "The JavaScript prototype property allows you to add new properties to object constructors:```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\n  this.eyeColor = eyecolor;\n\r\n}\n\r\n Person.prototype.nationality = \"English\";```The JavaScript prototype property also allows you to add new methods to objects constructors:```js\nfunction Person(first, last, age, eyecolor) {\n  this.firstName = first;\n  this.lastName = last;\n  this.age = age;\nthis.eyeColor = eyecolor;\n\r\n}\n\r\n Person.prototype.name = function() {\n  return this.firstName + \" \" + this.lastName;\n\r\n};```"
            }
        },
        "objectecmascript5": {
            "title": "Object ECMAScript 5",
            "url": "https://www.w3schools.com/js/js_object_es5.asp",
            "info": {
                "Changing a Property Value": "```js\nObject.defineProperty(object, property, {value : value})```This example changes a property value:```js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  language : \"EN\" \n};\n// Change a property\nObject.defineProperty(person, \"language\", {value : \"NO\"});```",
                "Changing Meta Data": "ES5 allows the following property meta data to be changed:```js\nwritable : true      // Property value can be changed\n\r\nenumerable : true    // Property can be enumerated\n\r\nconfigurable : true  // Property can be reconfigured``````js\nwritable : false     // Property value can not be changed\n\r\nenumerable : false   // Property can be not enumerated\n\r\nconfigurable : false // Property can be not reconfigured```ES5 allows getters and setters to be changed:```js\n// Defining a getter\n\r\nget: function() { return language }\n\r\n// Defining a setter\n\r\nset: function(value) { language = value }```This example makes language read-only:```js\nObject.defineProperty(person, \"language\", {writable:false});```This example makes language not enumerable:```js\nObject.defineProperty(person, \"language\", {enumerable:false});```",
                "Listing All Properties": "This example list all properties of an object:```js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\"\n  language : \"EN\" \n};\nObject.defineProperty(person, \"language\", {enumerable:false});\nObject.getOwnPropertyNames(person);  // Returns an array of properties```",
                "Listing Enumerable Properties": "This example list only the enumerable properties of an object:```js\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\"\n  language : \"EN\" \n};\nObject.defineProperty(person, \"language\", {enumerable:false});\nObject.keys(person);  // Returns an array of enumerable  properties```",
                "Adding a Property": "This example adds a new property to an object:```js\n// Create an object:\nvar person = {\n  firstName: \"John\",\n  lastName : \"Doe\",\n  language : \"EN\"\n};\n// Add a property\nObject.defineProperty(person, \"year\", {value:\"2008\"});```",
                "Adding Getters and Setters": "The Object.defineProperty() method can also be used to add Getters and Setters:```js\n//Create an object\nvar person = {firstName:\"John\", lastName:\"Doe\"};\n// Define a getter\nObject.defineProperty(person, \"fullName\", {\n  get : function () {return this.firstName + \" \" + this.lastName;}\n});```",
                "A Counter Example": "```js\n// Define object\n\r\nvar obj = {counter:0};\n\r\n// Define setters\n\r\nObject.defineProperty(obj, \"reset\", {\nget : function () {this.counter = 0;}\n});\n\r\nObject.defineProperty(obj, \"increment\", {\nget : function () {this.counter++;}\n});\n\r\nObject.defineProperty(obj, \"decrement\", {\nget : function () {this.counter--;}\n});\n\r\nObject.defineProperty(obj, \"add\", {\nset : function (value) {this.counter += value;}\n});\n\r\nObject.defineProperty(obj, \"subtract\", {\nset : function (i) {this.counter -= i;}\n});\n\r\n// Play with the counter:\n\r\nobj.reset;\n\r\nobj.add = 5;\n\r\nobj.subtract = 1;\n\r\nobj.increment;\n\r\nobj.decrement;```"
            }
        },
        "objectclasses": {
            "title": "Object Classes",
            "url": "https://www.w3schools.com/js/js_object_classes.asp",
            "info": {
                "ECMAScript 2015": "ES6, also known as ECMAScript2015, introduced classes.A class is a type of function, but instead of using the keywordfunction to initiate it, we use the keywordclass, and the properties are assigned inside aconstructor() method.",
                "Class Definition": "Use the keyword class to create a class, and always add the constructor() method.The constructor method is called each time the class object is initialized.```js\nclass Car {\n constructor(brand) {\n    this.carname = brand;\n }\n}```Now you can create objects using the Car class:```js\nclass Car {\n constructor(brand) {\n    this.carname = brand;\n }\n}\nmycar = new Car(\"Ford\");```",
                "Methods": "The constructor method is special, it is where you initialize properties, it is called automatically when a class is initiated, and it has to have the exact name \"constructor\", in fact, if you do not have a constructor method, JavaScript will add an invisible and empty constructor method.You are also free to make your own methods, the syntax should be familiar:```js\nclass Car {\n constructor(brand) {\n    this.carname = brand;\n }\n  present() {\n     return \"I have a \" + this.carname;\n }\n}\nmycar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = mycar.present();```As you can see in the example above, you call the method by referring to the object's method name followed by parentheses (any parameters would go inside the parentheses).```js\nclass Car {\n constructor(brand) {\n    this.carname = brand;\n }\n  present(x) {\n     return x + \", I have a \" + this.carname;\n }\n}\nmycar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = mycar.present(\"Hello\");```",
                "Static Methods": "Static methods are defined on the class itself, and not on the prototype.That means you cannot call a static method on the object (mycar), but on the class (Car):```js\nclass Car {\n  constructor(brand) {\n    this.carname = brand;\n }\n  static hello() {\n    return \"Hello!!\";\n }\n}\nmycar = new Car(\"Ford\");\n//Call 'hello()' on the class Car:\ndocument.getElementById(\"demo\").innerHTML = Car.hello();\n//and NOT on the 'mycar' object:\n//document.getElementById(\"demo\").innerHTML = mycar.hello();\n//this would raise an error.```If you want to use the mycar object inside the static method, you can send it as a parameter:```js\nclass Car {\n  constructor(brand) {\n    this.carname = brand;\n }\n  static hello(x) {\n    return \"Hello \" + x.carname;\n }\n}\nmycar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = Car.hello(mycar);```",
                "Inheritance": "To create a class inheritance, use the extends keyword.A class created with a class inheritance inherits all the methods from another class:```js\nclass Car {\n  constructor(brand) {\n    this.carname = brand;\n }\n  present() {\n    return 'I have a ' + this.carname;\n }\n}\nclass Model extends Car {\n constructor(brand, mod) {\n    super(brand);\n    this.model = mod;\n }\n  show() {\n       return this.present() + ', it is a ' + this.model;\n }\n}\nmycar = new Model(\"Ford\", \"Mustang\");\ndocument.getElementById(\"demo\").innerHTML = mycar.show();```The super() method refers to the parent class.By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.",
                "Getters and Setters": "Classes also allows you to use getters and setters.It can be smart to use getters and setters for your properties, especially if you want to do something special with the value before returning them, or before you set them.To add getters and setters in the class, use the get and set keywords.```js\nclass Car {\n  constructor(brand) {\n    this.carname = brand;\n  }\n  get cnam() {\n    return this.carname;\n  }\n  set cnam(x) {\n    this.carname = x;\n  }\n}\nmycar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = mycar.cnam;```The name of the getter/setter method cannot be the same as the name of the property, in this case carname.Many programmers use an underscore character \\_ before the property name to separate the getter/setter from the actual property:```js\nclass Car {\n  constructor(brand) {\n    this._carname = brand;\n  }\n  get carname() {\n    return this._carname;\n  }\n  set carname(x) {\n    this._carname = x;\n  }\n}\nmycar = new Car(\"Ford\");\ndocument.getElementById(\"demo\").innerHTML = mycar.carname;```To use a setter, use the same syntax as when you set a property value, without parentheses:",
                "Hoisting": "Unlike functions, and other JavaScript declarations, class declarations are not hoisted.That means that you must declare a class before you can use it:```js\n//You cannot use the class yet.\n//mycar = new Car(\"Ford\")\n//This would raise an error.\nclass Car {\n constructor(brand) {\n    this.carname = brand;\n }\n}\n//Now you can use the class:\nmycar = new Car(\"Ford\")```",
                "\"use strict\"": "The syntax in classes must be written in \"strict mode\".You will get an error if you do not follow the \"strict mode\" rules.```js\nclass Car {\n constructor(brand) {\n    i = 0;\n    this.carname = brand;\n }\n}\nvar mycar = new Car(\"Ford\");```Learn more about \"strict mode\" in our JavaScript Strict Mode chapter.",
                "Browser Support": "The following table defines the first browser version with full support for Classes in JavaScript: "
            }
        },
        "functiondefinitions": {
            "title": "Function Definitions",
            "url": "https://www.w3schools.com/js/js_function_definition.asp",
            "info": {
                "Function Declarations": "Earlier in this tutorial, you learned that functions are declared with the following syntax:Declared functions are not executed immediately. They are \"saved for later use\", and will be executed later, when they are invoked (called upon).```js\nfunction myFunction(a, b) {\n return a * b;\n}```",
                "Function Expressions": "A JavaScript function can also be defined using an expression.A function expression can be stored in a variable:```js\nvar x = function (a, b) {return a * b};```After a function expression has been stored in a variable, the variable can be used as a function:```js\nvar x = function (a, b) {return a * b};\n\r\nvar z = x(4, 3);```The function above is actually an anonymous function (a function without a name).Functions stored in variables do not need function names. They are always invoked (called) using the variable name.",
                "The Function() Constructor": "As you have seen in the previous examples, JavaScript functions are defined with the function keyword.Functions can also be defined with a built-in JavaScript function constructor called Function().```js\nvar myFunction = new Function(\"a\", \"b\", \"return a * b\");\n\r\n var x = myFunction(4, 3);```You actually don't have to use the function constructor. The example above is the same as writing:```js\nvar myFunction = function (a, b) {return a * b};\n\r\n var x = myFunction(4, 3);```",
                "Function Hoisting": "Earlier in this tutorial, you learned about \"hoisting\" (JavaScript Hoisting).Hoisting is JavaScript's default behavior of moving declarations to the top of the current scope.Hoisting applies to variable declarations and to function declarations.Because of this, JavaScript functions can be called before they are declared:Functions defined using an expression are not hoisted.",
                "Self-Invoking Functions": "Function expressions can be made \"self-invoking\".A self-invoking expression is invoked (started) automatically, without being called.Function expressions will execute automatically if the expression is followed by ().You cannot self-invoke a function declaration.You have to add parentheses around the function to indicate that it is a function expression:```js\n(function () {\nvar x = \"Hello!!\";  // I will invoke myself\n\r\n})();```The function above is actually an anonymous self-invoking function (function without name).",
                "Functions Can Be Used as Values": "JavaScript functions can be used as values:```js\nfunction myFunction(a, b) {\n  return a * b;\n}\n\r\n var x = myFunction(4, 3);```JavaScript functions can be used in expressions:```js\nfunction myFunction(a, b) {\n  return a * b;\n}\n\r\n var x = myFunction(4, 3) * 2;```",
                "Functions are Objects": "The typeof operator in JavaScript returns \"function\" for functions.But, JavaScript functions can best be described as objects.JavaScript functions have both properties and methods.The arguments.length property returns the number of arguments received when the function was invoked:```js\nfunction myFunction(a, b) {\n  return arguments.length;\n}```The toString() method returns the function as a string:```js\nfunction myFunction(a, b) {\n  return a * b;\n}\nvar txt = myFunction.toString();```",
                "Arrow Functions": "Arrow functions allows a short syntax for writing function expressions.You don't need the function keyword, the return keyword, and the curly brackets.```js\n// ES5\n\r\nvar x = function(x, y) {\n   return x * y;\n\r\n}\n\r\n// ES6\n\r\nconst x = (x, y) => x * y;```Arrow functions do not have their own this.They are not well suited for defining object methods.Arrow functions are not hoisted. They must be defined before they are used.Using constis safer than using var, because a function expression is always constant value.You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:```js\nconst x = (x, y) => { return x * y };```"
            }
        },
        "functionparameters": {
            "title": "Function Parameters",
            "url": "https://www.w3schools.com/js/js_function_parameters.asp",
            "info": {
                "Function Parameters and Arguments": "Earlier in this tutorial, you learned that functions can have parameters:```js\nfunction functionName(parameter1, parameter2, parameter3) {\n  // code to be executed\n\r\n}```Function parameters are the names listed in the function definition.Function arguments are the real values passed to (and received by) the function.",
                "Parameter Rules": "JavaScript function definitions do not specify data types for parameters.JavaScript functions do not perform type checking on the passed arguments.JavaScript functions do not check the number of arguments received.",
                "Parameter Defaults": "If a function is called with missing arguments (less than declared), the missing values are set to:undefined Sometimes this is acceptable, but sometimes it is better to assign a default value to the parameter:```js\nfunction myFunction(x, y) {\n  if (y === undefined) {\n  y = 0;\n   }\r\n\r\n}``````js\nfunction (a=1, b=1) {\n  // function code\n}```",
                "The Arguments Object": "JavaScript functions have a built-in object called the arguments object.The argument object contains an array of the arguments used when the function was called (invoked).This way you can simply use a function to find (for instance) the highest value in a list of numbers:```js\nx = findMax(1, 123, 500, 115, 44, 88);\nfunction findMax() {\n  var i;\n  var max = -Infinity;\n  for (i = 0; i < arguments.length; i++) {\n    if (arguments[i] > max) {\n    max = arguments[i];\n    }\n  }\n  return max;\n\r\n}```Or create a function to sum all input values:```js\nx = sumAll(1, 123, 500, 115, 44, 88);\n\r\nfunction sumAll() {\n  var i;\n  var sum = 0;\n  for (i = 0; i < arguments.length; i++) {\n  sum += arguments[i];\n  }\n  return sum;\n\r\n}```",
                "Arguments are Passed by Value": "The parameters, in a function call, are the function's arguments.JavaScript arguments are passed by value: The function only gets to know the values, not the argument's locations.If a function changes an argument's value, it does not change the parameter's original value.Changes to arguments are not visible (reflected) outside the function.",
                "Objects are Passed by Reference": "In JavaScript, object references are values.Because of this, objects will behave like they are passed by reference:If a function changes an object property, it changes the original value.Changes to object properties are visible (reflected) outside the function."
            }
        },
        "functioninvocation": {
            "title": "Function Invocation",
            "url": "https://www.w3schools.com/js/js_function_invocation.asp",
            "info": {
                "Invoking a JavaScript Function": "The code inside a function is not executed when the function is defined.The code inside a function is executed when the function is invoked.It is common to use the term \"call a function\" instead of \"invoke a function\".It is also common to say \"call upon a function\", \"start a function\", or \"execute a function\".In this tutorial, we will use invoke, because a JavaScript function can be invoked without being called.",
                "Invoking a Function as a Function": "```js\nfunction myFunction(a, b) {\nreturn a * b;\n\r\n}\n\r\nmyFunction(10, 2);           // Will return 20```The function above does not belong to any object. But in JavaScript there is always a default global object.In HTML the default global object is the HTML page itself, so the function above \"belongs\" to the HTML page.In a browser the page object is the browser window. The function above automatically becomes a window function.myFunction() and window.myFunction() is the same function:```js\nfunction myFunction(a, b) {\n  return a * b;\n\r\n}\nwindow.myFunction(10, 2);     // Will also return 20```",
                "The this Keyword": "In JavaScript, the thing called this, is the object that \"owns\" the current code.The value of this, when used in a function, is the object that \"owns\" the function. ",
                "The Global Object": "When a function is called without an owner object, the value of this becomes the global object.In a web browser the global object is the browser window.This example returns the window object as the value of this:```js\nvar x = myFunction();         // x will be the window object\n\r\nfunction myFunction() {\nreturn this;\n\r\n}```",
                "Invoking a Function as a Method": "In JavaScript you can define functions as object methods.The following example creates an object (myObject), with two properties (firstName and lastName), and a method (fullName):```js\nvar myObject = {\nfirstName:\"John\",\n  lastName: \"Doe\",\n  fullName: function () {\n  return this.firstName + \" \" + this.lastName;\n  }\n\r\n}\n\r\nmyObject.fullName();         // Will return \"John Doe\"```The fullName method is a function. The function belongs to the object. myObject is the owner of the function.The thing called this, is the object that \"owns\" the JavaScript code. In this case the value of this is myObject. Test it! Change the fullName method to return the value of this:```js\nvar myObject = {\n  firstName:\"John\",\n  lastName: \"Doe\",\n  fullName: function () {\n    return this;\n  }\n}\n\r\nmyObject.fullName();          // Will return [object Object] (the owner object)```",
                "Invoking a Function with a Function Constructor": "If a function invocation is preceded with the new keyword, it is a constructor invocation.It looks like you create a new function, but since JavaScript functions are objects you actually create a new object:```js\n// This is a function constructor:\nfunction myFunction(arg1, arg2) {\n  this.firstName = arg1;\nthis.lastName  = arg2;\n\r\n}\n\n\r\n// This creates a new object\n\r\nvar x = new myFunction(\"John\", \"Doe\");\n\r\nx.firstName;                            \r\n// Will return \"John\"```A constructor invocation creates a new object. The new object inherits the properties and methods from its constructor. "
            }
        },
        "functioncall": {
            "title": "Function Call",
            "url": "https://www.w3schools.com/js/js_function_call.asp",
            "info": {
                "Method Reuse": "With the call() method, you can write a method that can be used on different objects. ",
                "All Functions are Methods": "In JavaScript all functions are object methods.If a function is not a method of a JavaScript object, it is a function of the global object (see previous chapter). The example below creates an object with 3 properties, firstName, lastName, fullName.```js\nvar person = {\nfirstName:\"John\",\nlastName: \"Doe\",\n  fullName: function () {\n  return this.firstName + \" \" + this.lastName;\n  }\n\r\n}\n\r\nperson.fullName();   // Will return \"John Doe\"```",
                "The this Keyword": "In a function definition, this refers to the \"owner\" of the function.In the example above, this is the person object that \"owns\" the fullName function.In other words, this.firstName means the firstNameproperty of this object.Read more about the this keyword at JS this Keyword.",
                "The JavaScript call() Method": "The call() method is a predefined JavaScript method.It can be used to invoke (call) a method with an owner object as an argument (parameter).This example calls the fullName method of person, using it on person1:```js\nvar person = {\n  fullName: function() {\n  return this.firstName + \" \" + this.lastName;\n  }\n}\n\r\nvar person1 = {\nfirstName:\"John\",\n  lastName: \"Doe\"\n}\n\r\nvar person2 = {\nfirstName:\"Mary\",\n  lastName: \"Doe\"\n}\nperson.fullName.call(person1);  // Will return \"John Doe\"```This example calls the fullName method of person, using it onperson2:```js\nvar person = {\n  fullName: function() {\n    return this.firstName + \" \" + this.lastName;\n  }\n}\n\r\nvar person1 = {\nfirstName:\"John\",\n  lastName: \"Doe\"\n}\n\r\nvar person2 = {\n  firstName:\"Mary\",\n  lastName: \"Doe\"\n}\nperson.fullName.call(person2);  // Will return \"Mary Doe\"```",
                "The call() Method with Arguments": "The call() method can accept arguments:```js\nvar person = {\n  fullName: function(city, country) {\n  return this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country;\n  }\n}\n\r\nvar person1 = {\nfirstName:\"John\",\nlastName: \"Doe\"\n\r\n}\n\r\nperson.fullName.call(person1, \"Oslo\", \"Norway\");```"
            }
        },
        "functionapply": {
            "title": "Function Apply",
            "url": "https://www.w3schools.com/js/js_function_apply.asp",
            "info": {
                "Method Reuse": "With the apply() method, you can write a method that can be used on different objects.",
                "The JavaScript apply() Method": "The apply() method is similar to the call() method (previous chapter).In this example the fullName method of person is applied on person1:```js\nvar person = {\n  fullName: function() {\n    return this.firstName + \" \" + this.lastName;\n  }\n}\n\r\nvar person1 = {\nfirstName: \"Mary\",\nlastName: \"Doe\"\n}\nperson.fullName.apply(person1);  // Will return \"Mary Doe\"```",
                "The Difference Between call() and apply()": "The difference is:The call() method takes arguments separately.The apply() method takes arguments as an array.",
                "The apply() Method with Arguments": "The apply() method accepts arguments in an array:```js\nvar person = {\n  fullName: function(city, country) {\n  return this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country;\n  }\n}\n\r\nvar person1 = {\nfirstName:\"John\",\n  lastName: \"Doe\"\n\r\n}\n\r\nperson.fullName.apply(person1, [\"Oslo\", \"Norway\"]);```Compared with the call() method:```js\nvar person = {\nfullName: function(city, country) {\n  return this.firstName + \" \" + this.lastName + \",\" + city + \",\" + country;\n  }\n}\n\r\nvar person1 = {\n  firstName:\"John\",\n  lastName: \"Doe\"\n\r\n}\n\r\nperson.fullName.call(person1, \"Oslo\", \"Norway\");```",
                "Simulate a Max Method on Arrays": "You can find the largest number (in a list of numbers) using the Math.max() method:```js\nMath.max(1,2,3);  // Will return 3```Since JavaScript arrays do not have a max() method, you can apply the Math.max() method instead.```js\nMath.max.apply(null, [1,2,3]); // Will also return 3```The first argument (null) does not matter. It is not used in this example.These examples will give the same result:```js\nMath.max.apply(Math, [1,2,3]); // Will also return 3``````js\nMath.max.apply(\" \", [1,2,3]); // Will also return 3``````js\nMath.max.apply(0, [1,2,3]); // Will also return 3```",
                "JavaScript Strict Mode": "In JavaScript strict mode, if the first argument of the apply() method is not an object,it becomes the owner (object) of the invoked function.In \"non-strict\" mode, it becomes the global object."
            }
        },
        "functionclosures": {
            "title": "Function Closures",
            "url": "https://www.w3schools.com/js/js_function_closures.asp",
            "info": {
                "Global Variables": "A function can access all variables defined inside the function, like this:```js\nfunction myFunction() {\n  var a = 4;\n  return a * a;\n\r\n}```But a function can also access variables defined outside the function, like this:```js\nvar a = 4;\nfunction myFunction() {\n  return a * a;\n\r\n}```In the last example, a is a global variable. In a web page, global variables belong to the window object.Global variables can be used (and changed) by all scripts in the page (and in the window). In the first example, a is a local variable.A local variable can only be used inside the function where it is defined. It is hidden from other functions and other scripting code.Global and local variables with the same name are  different variables. Modifying one, does not modify the other. ",
                "Variable Lifetime": "Global variables live until the page is discarded, like when you navigate to another page or close the window.Local variables have short lives. They are created when the function is invoked, and deleted when the function is finished.",
                "A Counter Dilemma": "Suppose you want to use a variable for counting something, and you want this counter to be available to all functions.You could use a global variable, and a function to increase the counter:```js\n// Initiate counter\nvar counter = 0;\n// Function to increment counter\nfunction add() {\ncounter += 1;\n\r\n}\n// Call add() 3 times\n\r\nadd();\n\r\nadd();\n\r\nadd();\n// The counter should now be 3```There is a problem with the solution above: Any code on the page can change the counter, without calling add().The counter should be local to the add() function, to prevent other code from changing it:```js\n// Initiate counter\nvar counter = 0;\n// Function to increment counter\nfunction add() {\n  var counter = 0; \n  counter += 1;\n}\n// Call add() 3 times\nadd();\nadd();\nadd();\n//The counter should now be 3. But it is 0```It did not work because we display the global counter instead of the local counter.We can remove the global counter and access the local counter by letting the function return it:It did not work because we reset the local counter every time we call the function.\u00a0A JavaScript inner function can solve this.",
                "JavaScript Nested Functions": "All functions have access to the global scope.\u00a0\u00a0 In fact, in JavaScript, all functions have access to the scope \"above\" them.JavaScript supports nested functions. Nested functions have access to the scope \"above\" them. In this example, the inner function plus() has access to the counter variable in the parent function:```js\nfunction add() {\n  var counter = 0;\n  function plus() {counter += 1;}\n  plus();   \r\n \n  return counter; \n}```This could have solved the counter dilemma, if we could reach the plus() function from the outside.We also need to find a way to execute counter = 0 only once.We need a closure.",
                "JavaScript Closures": "Remember self-invoking functions? What does this function do?```js\nvar add = (function () {\n  var counter = 0;\n  return function () {counter += 1; return counter}\n})();\nadd();\n\r\nadd();\n\r\nadd();\n\r\n// the counter is now 3```",
                "Example Explained": "The variable add is assigned the return value of a self-invoking function.The self-invoking function only runs once. It sets the counter to zero (0), and returns a function expression.This way add becomes a function. The \"wonderful\" part is that it can access the counter in the parent scope. This is called a JavaScript closure. It makes it possible for a function to have \"private\" variables.The counter is protected by the scope of the anonymous function, and can only be changed using the add function."
            }
        },
        "domintro": {
            "title": "DOM Intro",
            "url": "https://www.w3schools.com/js/js_htmldom.asp",
            "info": {
                "The HTML DOM (Document Object Model)": "When a web page is loaded, the browser creates a DocumentObject Model of the page. The HTML DOM model is constructed as a tree of Objects:With the object model, JavaScript gets all the power it needs to create dynamic HTML: ",
                "What You Will Learn": "In the next chapters of this tutorial you will learn:",
                "What is the DOM?": "The DOM is a W3C (World Wide Web Consortium) standard.The DOM defines a standard for accessing documents:\"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.\"The W3C DOM standard is separated into 3 different parts:",
                "What is the HTML DOM?": "The HTML DOM is a standard object model and programming interface for HTML. It defines:In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements."
            }
        },
        "dommethods": {
            "title": "DOM Methods",
            "url": "https://www.w3schools.com/js/js_htmldom_methods.asp",
            "info": {
                "The DOM Programming Interface": "The HTML DOM can be accessed with JavaScript (and with other programming languages). In the DOM, all HTML elements are defined as objects.The programming interface is the properties and methods of each object.A property is a value that you can get or set (like changing the content of an HTML element).A method is an action you can do (like add or deleting an HTML element).",
                "Example": "The following example changes the content (the innerHTML) of the <p> element with id=\"demo\":```js\n<html>\n\r\n<body>\n\r\n<p id=\"demo\"></p>\n\r\n<script>\n\r\n document.getElementById(\"demo\").innerHTML = \"Hello World!\";\n\r\n</script>\n\r\n</body>\n\r\n</html>```In the example above, getElementById is a method, while innerHTML is a property.",
                "The getElementById Method": "The most common way to access an HTML element is to use the id of the element.In the example above the getElementById method used id=\"demo\" to find the element.",
                "The innerHTML Property": "The easiest way to get the content of an element is by using the innerHTML property.The innerHTML property is useful for getting or replacing the content of HTML elements."
            }
        },
        "domdocument": {
            "title": "DOM Document",
            "url": "https://www.w3schools.com/js/js_htmldom_document.asp",
            "info": {
                "The HTML DOM Document Object": "The document object represents your web page.If you want to access any element in an HTML page, you always start with accessing the document object.Below are some examples of how you can use the document object to access and manipulate HTML.",
                "Finding HTML Elements": "",
                "Changing HTML Elements": "",
                "Adding and Deleting Elements": "",
                "Adding Events Handlers": "",
                "Finding HTML Objects": "The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.Later, in HTML DOM Level 3, more objects, collections, and properties were added."
            }
        },
        "domelements": {
            "title": "DOM Elements",
            "url": "https://www.w3schools.com/js/js_htmldom_elements.asp",
            "info": {
                "Finding HTML Elements": "Often, with JavaScript, you want to manipulate HTML elements.To do so, you have to find the elements first. There are several ways to do this:",
                "Finding HTML Element by Id": "The easiest way to find an HTML element in the DOM, is by using the element id.This example finds the element with id=\"intro\":```js\nvar myElement = document.getElementById(\"intro\");```If the element is found, the method will return the element as an object (in myElement).If the element is not found, myElement will contain null.",
                "Finding HTML Elements by Tag Name": "This example finds all <p> elements:```js\nvar x = document.getElementsByTagName(\"p\");```This example finds the element with id=\"main\", and then finds all <p> elements inside \"main\":```js\nvar x = document.getElementById(\"main\");\nvar y = x.getElementsByTagName(\"p\");```",
                "Finding HTML Elements by Class Name": "If you want to find all HTML elements with the same class name, use getElementsByClassName().This example returns a list of all elements with class=\"intro\".```js\nvar x = document.getElementsByClassName(\"intro\");```",
                "Finding HTML Elements by CSS Selectors": "If you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.This example returns a list of all <p> elements with class=\"intro\".```js\nvar x = document.querySelectorAll(\"p.intro\");```",
                "Finding HTML Elements by HTML Object Collections": "This example finds the form element with id=\"frm1\", in the forms collection, and displays all element values:```js\nvar x = document.forms[\"frm1\"];\nvar text = \"\";\n\r\n var i;\nfor (i = 0; i < x.length; i++) {\n  text += x.elements[i].value + \"<br>\";\n}\ndocument.getElementById(\"demo\").innerHTML = text;```The following HTML objects (and object collections) are also accessible:"
            }
        },
        "domhtml": {
            "title": "DOM HTML",
            "url": "https://www.w3schools.com/js/js_htmldom_html.asp",
            "info": {
                "Changing the HTML Output Stream": "JavaScript can create dynamic HTML content:Date: In JavaScript, document.write() can be used to write directly to the HTML output stream:```js\n<!DOCTYPE html>\n<html>\n\r\n<body>\n\n\r\n<script>\n\r\ndocument.write(Date());\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```",
                "Changing HTML Content": "The easiest way to modify the content of an HTML element is by using the innerHTML property.To change the content of an HTML element, use this syntax:This example changes the content of a <p> element:```js\n<html>\n\r\n<body>\n\r\n<p id=\"p1\">Hello World!</p>\n\r\n<script>\n\r\ndocument.getElementById(\"p1\").innerHTML = \"New text!\";\n\r\n</script>\n\r\n</body>\n\r\n</html>```Example explained:This example changes the content of an <h1> element:```js\n<!DOCTYPE html>\n<html>\n\r\n<body>\n\n\r\n<h1 id=\"id01\">Old Heading</h1>\n\n\r\n<script>\n\r\nvar element = document.getElementById(\"id01\");\nelement.innerHTML = \"New Heading\";\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```Example explained:",
                "Changing the Value of an Attribute": "To change the value of an HTML attribute, use this syntax: This example changes the value of the src attribute of an <img> element:```js\n<!DOCTYPE html>\n<html>\n\r\n<body>\n\n\r\n<img id=\"myImage\" src=\"smiley.gif\">\n\n\r\n<script>\n\r\ndocument.getElementById(\"myImage\").src = \"landscape.jpg\";\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```Example explained:"
            }
        },
        "domcss": {
            "title": "DOM CSS",
            "url": "https://www.w3schools.com/js/js_htmldom_css.asp",
            "info": {
                "Changing HTML Style": "To change the style of an HTML element, use this syntax:The following example changes the style of a <p> element:```js\n<html>\n\r\n<body>\n\r\n<p id=\"p2\">Hello World!</p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"p2\").style.color = \"blue\";\n\r\n</script>\n\n\r\n<p>The paragraph above was changed by a script.</p>\n\n\r\n</body>\n\r\n</html>```",
                "Using Events": "The HTML DOM allows you to execute code when an event occurs.Events are generated by the browser when \"things happen\" to HTML elements:You will learn more about events in the next chapter of this tutorial.This example changes the style of the HTML element with id=\"id1\", when the user clicks a button:```js\n<!DOCTYPE html>\n<html>\n<body>\n<h1 id=\"id1\">My Heading 1</h1>\n\r\n<button type=\"button\" \nonclick=\"document.getElementById('id1').style.color = 'red'\">\n\r\nClick Me!</button>\n</body>\n</html>```",
                "More Examples": "VisibilityHow to make an element invisible. Do you want to show the element or not?",
                "HTML DOM Style Object Reference": "For all HTML DOM style properties, look at our completeHTML DOM Style Object Reference."
            }
        },
        "domanimations": {
            "title": "DOM Animations",
            "url": "https://www.w3schools.com/js/js_htmldom_animate.asp",
            "info": {
                "A Basic Web Page": "To demonstrate how to create HTML animations with JavaScript, we will use a simple web page:```js\n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First \r\n JavaScript Animation</h1>\n\r\n<div id=\"animation\">My animation will go here</div>\n\r\n</body>\n</html>```",
                "Create an Animation Container": "All animations should be relative to a container element.```js\n<div id =\"container\">\n  <div id =\"animate\">My \r\n animation will go here</div>\n</div>```",
                "Style the Elements": "The container element should be created with style = \"position: relative\".The animation element should be created with style = \"position: absolute\".```js\n#container {\n  width: 400px;\n  height: \r\n 400px;\n  position: relative;\n  \r\n background: yellow;\n\r\n }\n#animate {\n  width: 50px;\n  height: \r\n 50px;\n  position: absolute;\n  \r\n background: red;\n}```",
                "Animation Code": "JavaScript animations are done by programming gradual changes in an element's style.The changes are called by a timer. When the timer interval is small, the animation looks continuous.The basic code is:```js\nvar id = setInterval(frame, 5);\nfunction frame() {\n  if (/* \r\n test for finished */) {\n    clearInterval(id);\n  } else {\n    \r\n /* code to change the element style */  \n  }\n}```",
                "Create the Animation Using JavaScript": "```js\nfunction myMove() {\n  var elem = \r\n document.getElementById(\"animate\"); \n  var pos = 0;\n  var id = setInterval(frame, 5);\n  \r\n function frame() {\n    if (pos == \r\n 350) {\n      \r\n clearInterval(id);\n    } else {\n      \r\n pos++; \n      elem.style.top = pos + 'px'; \n      elem.style.left = pos + 'px'; \n    }\n  }\n}```"
            }
        },
        "domevents": {
            "title": "DOM Events",
            "url": "https://www.w3schools.com/js/js_htmldom_events.asp",
            "info": {
                "Reacting to Events": "A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:Examples of HTML events:In this example, the content of the <h1> element is changed when a user clicks on it:```js\n<!DOCTYPE html>\n<html>\n\r\n<body>\n\r\n<h1 onclick=\"this.innerHTML = 'Ooops!'\">Click on this text!</h1>\n\r\n</body>\n</html>```In this example, a function is called from the event handler:```js\n<!DOCTYPE html>\n<html>\n<body>\n\r\n<h1 onclick=\"changeText(this)\">Click on this text!</h1>\n\n<script>\n\r\nfunction changeText(id) {\r\nid.innerHTML = \"Ooops!\";\n\r\n}\n\r\n</script>\n\r\n</body>\n</html>```",
                "HTML Event Attributes": "To assign events to HTML elements you can use event attributes.```js\n<button onclick=\"displayDate()\">Try it</button>```In the example above, a function named displayDate will be executed when the button is clicked.",
                "Assign Events Using the HTML DOM": "The HTML DOM allows you to assign events to HTML elements using JavaScript: ```js\n<script>\n\r\ndocument.getElementById(\"myBtn\").onclick = displayDate;\n\r\n</script>```In the example above, a function named displayDate is assigned to an HTML element with the id=\"myBtn\".The function will be executed when the button is clicked.",
                "The onload and onunload Events": "The onload and onunload events are triggered when the user enters or leaves the page.The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.The onload and onunload events can be used to deal with cookies.```js\n<body onload=\"checkCookies()\">```",
                "The onchange Event": "The onchange event is often used in combination with validation of input fields.Below is an example of how to use the onchange. The upperCase() function will be called when a user changes the content of an input field.```js\n<input type=\"text\" id=\"fname\"\r\nonchange=\"upperCase()\">```",
                "The onmouseover and onmouseout Events": "The onmouseover and onmouseout events can be used to trigger a function when the user mouses over, or out of, an HTML element:Try it Yourself \u00bb",
                "The onmousedown, onmouseup and onclick Events": "The onmousedown, onmouseup, and onclick events are all parts of a mouse-click. First when a mouse-button is clicked, the onmousedown event is triggered, then, when the mouse-button is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.Try it Yourself \u00bb",
                "More Examples": "onmousedown and onmouseupChange an image when a user holds down the mouse button.onloadDisplay an alert box when the page has finished loading.onfocusChange the background-color of an input field when it gets focus.Mouse EventsChange the color of an element when the cursor moves over it.",
                "HTML DOM Event Object Reference": "For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
            }
        },
        "domeventlistener": {
            "title": "DOM Event Listener",
            "url": "https://www.w3schools.com/js/js_htmldom_eventlistener.asp",
            "info": {
                "The addEventListener() method": "```js\ndocument.getElementById(\"myBtn\").addEventListener(\"click\", displayDate);```The addEventListener() method attaches an event handler to the specified element.The addEventListener() method attaches an event handler to an element without overwriting existing event handlers.You can add many event handlers to one element.You can add many event handlers of the same type to one element, i.e two \"click\" events.You can add event listeners to any DOM object not only HTML elements. i.e the window object.The addEventListener() method makes it easier to control how the event reacts to bubbling.When using the addEventListener() method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.You can easily remove an event listener by using the removeEventListener() method.",
                "Syntax": "The first parameter is the type of the event (like \"click\" or \"mousedown\" or any other HTML DOM Event.)The second parameter is the function we want to call when the event occurs. The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.",
                "Add an Event Handler to an Element": "```js\nelement.addEventListener(\"click\", function(){ alert(\"Hello World!\"); });```You can also refer to an external \"named\" function:```js\nelement.addEventListener(\"click\",  myFunction);\nfunction myFunction() {\n  alert (\"Hello World!\");\n}```",
                "Add Many Event Handlers to the Same Element": "The addEventListener() method allows you to add many events to the same element, without overwriting existing events:```js\nelement.addEventListener(\"click\", myFunction);\nelement.addEventListener(\"click\", mySecondFunction);```You can add events of different types to the same element:```js\nelement.addEventListener(\"mouseover\", myFunction);\nelement.addEventListener(\"click\", mySecondFunction);\nelement.addEventListener(\"mouseout\", myThirdFunction);```",
                "Add an Event Handler to the window Object": "The addEventListener() method allows you to add event listeners on any HTML DOM object such as HTML elements, the HTML document, the window object, or other objects that support events, like the xmlHttpRequest object.```js\nwindow.addEventListener(\"resize\", function(){\ndocument.getElementById(\"demo\").innerHTML = sometext;\n\r\n});```",
                "Passing Parameters": "When passing parameter values, use an \"anonymous function\" that calls the specified function with the parameters:```js\nelement.addEventListener(\"click\", function(){ myFunction(p1, p2); });```",
                "Event Bubbling or Event Capturing?": "There are two ways of event propagation in the HTML DOM, bubbling and capturing.Event propagation is a way of defining the element order when an event occurs.If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's \"click\" event should be handled first?In bubbling the inner most element's event is handled first and then the outer:the <p> element's click event is handled first, then the <div> element's click event.In capturing the outer most element's event is handled first and then the inner:the <div> element's click event will be handled first, then the <p> element's click event.With the addEventListener() method you can specify the propagation type by using the \"useCapture\" parameter:The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.",
                "The removeEventListener() method": "The removeEventListener() method removes event handlers that have been attached with the addEventListener() method:```js\nelement.removeEventListener(\"mousemove\", myFunction);```",
                "Browser Support": "The numbers in the table specifies the first browser version that fully supports these methods.Note: The addEventListener() and removeEventListener() methods are not supported in IE 8 and earlier versions. However, for these specific browser versions, you can use the attachEvent() method to attach an event handlers to the element, and the detachEvent() method to remove it:```js\nvar x = document.getElementById(\"myBtn\");\nif (x.addEventListener) {     // For all major browsers, except IE 8 and earlier\n  x.addEventListener(\"click\", myFunction);\n} else if (x.attachEvent) {   // For IE 8 and earlier versions\n  \r\nx.attachEvent(\"onclick\", myFunction);\n}```",
                "HTML DOM Event Object Reference": "For a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
            }
        },
        "domnavigation": {
            "title": "DOM Navigation",
            "url": "https://www.w3schools.com/js/js_htmldom_navigation.asp",
            "info": {
                "DOM Nodes": "According to the W3C HTML DOM standard, everything in an HTML document is a node:With the HTML DOM, all nodes in the node tree can be accessed by JavaScript.New nodes can be created, and all nodes can be modified or deleted. ",
                "Node Relationships": "The nodes in the node tree have a hierarchical relationship to each other.The terms parent, child, and sibling are used to describe the relationships. From the HTML above you can read:and:",
                "Navigating Between Nodes": "You can use the following node properties to navigate between nodes with JavaScript:",
                "Child Nodes and Node Values": "```js\n<title \r\n id=\"demo\">DOM Tutorial</title>```The element node <title> (in the example above) does not contain text.It contains a text node with the value \"DOM Tutorial\". The value of the text node can be accessed by the node's innerHTML property:```js\nvar myTitle =\r\ndocument.getElementById(\"demo\").innerHTML;```Accessing the innerHTML property is the same as accessing the nodeValue of the first child:```js\nvar myTitle =\r\ndocument.getElementById(\"demo\").firstChild.nodeValue;```Accessing the first child can also be done like this:```js\nvar myTitle =\r\ndocument.getElementById(\"demo\").childNodes[0].nodeValue;```All the (3) following examples retrieves the text of an <h1> element and copies it into a <p> element:```js\n<html>\n\r\n<body>\n<h1 id=\"id01\">My First Page</h1>\n<p id=\"id02\"></p>\n\r\n<script>\n\r\n document.getElementById(\"id02\").innerHTML \r\n = document.getElementById(\"id01\").innerHTML;\n\r\n</script>\n\r\n</body>\n\r\n</html>```",
                "InnerHTML": "In this tutorial we use the innerHTML property to retrieve the content of an HTML element.However, learning the other methods above is useful for understanding the tree structure and the navigation of the DOM.",
                "DOM Root Nodes": "There are two special properties that allow access to the full document:```js\n<html>\n\r\n<body>\n\n\r\n<p>Hello World!</p>\n\r\n<div>\n\r\n<p>The DOM is very useful!</p>\n\r\n<p>This example demonstrates the <b>document.body</b> property.</p>\n\r\n</div>\n\n\r\n<script>\n\r\nalert(document.body.innerHTML);\n\r\n</script>\n\n\r\n</body>\n\r\n</html>``````js\n<html>\n\r\n<body>\n\n\r\n<p>Hello World!</p>\n\r\n<div>\n\r\n<p>The DOM is very useful!</p>\n\r\n<p>This example demonstrates the <b>document.documentElement</b> property.</p>\n\r\n</div>\n\n\r\n<script>\n\r\nalert(document.documentElement.innerHTML);\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```",
                "The nodeName Property": "The nodeName property specifies the name of a node.```js\n<h1 id=\"id01\">My First Page</h1>\n\r\n <p id=\"id02\"></p>\n<script>\ndocument.getElementById(\"id02\").innerHTML \r\n = document.getElementById(\"id01\").nodeName;\n</script>```",
                "The nodeValue Property": "The nodeValue property specifies the value of a node.",
                "The nodeType Property": "The nodeType property is read only. It returns the type of a node.```js\n<h1 id=\"id01\">My First Page</h1>\n\r\n <p id=\"id02\"></p>\n<script>\ndocument.getElementById(\"id02\").innerHTML \r\n = document.getElementById(\"id01\").nodeType;\n</script>```The most important nodeType properties are:"
            }
        },
        "domnodes": {
            "title": "DOM Nodes",
            "url": "https://www.w3schools.com/js/js_htmldom_nodes.asp",
            "info": {
                "Creating New HTML Elements (Nodes)": "To add a new element to the HTML DOM, you must create the element (element node) first, and then append it to an existing element. ```js\n<div id=\"div1\">\n\r\n \r\n<p id=\"p1\">This is a paragraph.</p>\n\r\n \r\n<p id=\"p2\">This is another paragraph.</p>\n\r\n</div>\n<script>\n\r\nvar para = document.createElement(\"p\");\n\r\nvar node = document.createTextNode(\"This is new.\");\n\r\npara.appendChild(node);\n\r\n var\r\nelement = document.getElementById(\"div1\");\n\r\nelement.appendChild(para);\n\r\n</script>```",
                "Example Explained\u00a0": "This HTML document contains a <div> element with two child nodes (two <p> elements):Find the element with id=\"div1\":Find the <p> element with id=\"p1\":Remove the child from the parent:Here is a common workaround: Find the child you want to remove, and use its parentNode property to find the parent:",
                "Creating new HTML Elements - insertBefore()": "The appendChild() method in the previous example, appended the new element as the last child of the parent.If you don't want that you can use the insertBefore() method: ```js\n<div id=\"div1\">\n\r\n \r\n<p id=\"p1\">This is a paragraph.</p>\n\r\n \r\n<p id=\"p2\">This is another paragraph.</p>\n\r\n</div>\n<script>\n\r\n var para = document.createElement(\"p\");\nvar node = document.createTextNode(\"This is new.\");\npara.appendChild(node);\nvar element = document.getElementById(\"div1\");\n\r\n var child = document.getElementById(\"p1\");\nelement.insertBefore(para, child);\n\r\n</script>```",
                "Removing Existing HTML Elements": "To remove an HTML element, use the remove() method:```js\n<div>\n\r\n \r\n<p id=\"p1\">This is a paragraph.</p>\n\r\n \r\n<p id=\"p2\">This is another paragraph.</p>\n\r\n</div>\n<script>\n\r\nvar elmnt = document.getElementById(\"p1\");\nelmnt.remove();\n\r\n</script>```",
                "Removing a Child Node": "For browsers that does not support the remove() method, you have to find the parent node to remove an element:```js\n<div id=\"div1\">\n\r\n \r\n<p id=\"p1\">This is a paragraph.</p>\n\r\n \r\n<p id=\"p2\">This is another paragraph.</p>\n\r\n</div>\n<script>\n\r\nvar parent = document.getElementById(\"div1\");\n\r\nvar child = document.getElementById(\"p1\");\n\r\nparent.removeChild(child);\n\r\n</script>```",
                "Replacing HTML Elements\u00a0": "To replace an element to the HTML DOM, use the replaceChild() method:```js\n<div id=\"div1\">\n\r\n \r\n<p id=\"p1\">This is a paragraph.</p>\n\r\n \r\n<p id=\"p2\">This is another paragraph.</p>\n\r\n</div>\n<script>\n\r\n var para = document.createElement(\"p\");\n\r\nvar node = document.createTextNode(\"This is new.\");\npara.appendChild(node);\n\nvar parent = document.getElementById(\"div1\");\nvar child = document.getElementById(\"p1\");\nparent.replaceChild(para, child);\n\r\n</script>```"
            }
        },
        "domcollections": {
            "title": "DOM Collections",
            "url": "https://www.w3schools.com/js/js_htmldom_collections.asp",
            "info": {
                "The HTMLCollection Object": "The getElementsByTagName() method returns an HTMLCollection object.An HTMLCollection object is an array-like list (collection) of HTML elements.The following code selects all <p> elements in a document:```js\nvar\r\nx = document.getElementsByTagName(\"p\");```Note: The index starts at 0.",
                "HTML HTMLCollection Length": "The length property defines the number of elements in an HTMLCollection:```js\nvar myCollection = document.getElementsByTagName(\"p\");\n\r\ndocument.getElementById(\"demo\").innerHTML = myCollection.length;```Example explained:The length property is useful when you want to loop through the elements in a collection:```js\nvar myCollection = document.getElementsByTagName(\"p\");\n\r\nvar i;\n\r\nfor (i = 0; i < myCollection.length; i++) {\nmyCollection[i].style.color = \"red\";\n\r\n}```"
            }
        },
        "domnodelists": {
            "title": "DOM Node Lists",
            "url": "https://www.w3schools.com/js/js_htmldom_nodelist.asp",
            "info": {
                "The HTML DOM NodeList Object": "A NodeList object is a list (collection) of nodes extracted from a document.A NodeList object is almost the same as an HTMLCollection object.Some (older) browsers return a NodeList object instead of an HTMLCollection for methods like getElementsByClassName().All browsers return a NodeList object for the property childNodes.\u00a0 Most browsers return a NodeList object for the method querySelectorAll().The following code selects all <p> nodes in a document:```js\nvar myNodeList = document.querySelectorAll(\"p\");```Note: The index starts at 0.",
                "HTML DOM Node List Length": "The length property defines the number of nodes in a node list:```js\nvar myNodelist = document.querySelectorAll(\"p\");\n\r\ndocument.getElementById(\"demo\").innerHTML = myNodelist.length;```Example explained:The length property is useful when you want to loop through the nodes in a node list:```js\nvar myNodelist = document.querySelectorAll(\"p\");\n\r\nvar i;\n\r\nfor (i = 0; i < myNodelist.length; i++) {\nmyNodelist[i].style.backgroundColor = \"red\";\n\r\n}```",
                "The Difference Between an HTMLCollection and a NodeList": "An HTMLCollection (previous chapter) is a collection of HTML elements.A NodeList is a collection of document nodes.A NodeList and an HTML collection is very much the same thing. Both an HTMLCollection object and a NodeList object is an array-like list (collection) of objects.Both have a length property defining the number of items in the list (collection).Both provide an index (0, 1, 2, 3, 4, ...) to access each item like an array.HTMLCollection items can be accessed by their name, id, or index number.NodeList items can only be accessed by their index number.Only the NodeList object can contain attribute nodes and text nodes."
            }
        },
        "window": {
            "title": "JS Window",
            "url": "https://www.w3schools.com/js/js_window.asp",
            "info": {
                "The Browser Object Model (BOM)": "There are no official standards for the Browser ObjectModel (BOM).Since modern browsers have implemented (almost) the same methods and properties for JavaScript interactivity, it is often referred to, as methods and properties of the BOM.",
                "The Window Object": "The window object is supported by all browsers. It represents the browser's window.All global JavaScript objects, functions, and variables automatically become members of the window object.Global variables are properties of the window object.Global functions are methods of the window object.Even the document object (of the HTML DOM) is a property of the window object: is the same as:",
                "Window Size": "Two properties can be used to determine the size of the browser window.Both properties return the sizes in pixels:For Internet Explorer 8, 7, 6, 5:A practical JavaScript solution (covering all browsers): ```js\nvar w = window.innerWidth\n|| document.documentElement.clientWidth\n|| document.body.clientWidth;\nvar h = window.innerHeight\n|| document.documentElement.clientHeight\n|| document.body.clientHeight;```The example displays the browser window's height and width: (NOT including toolbars/scrollbars)",
                "Other Window Methods": "Some other methods:"
            }
        },
        "screen": {
            "title": "JS Screen",
            "url": "https://www.w3schools.com/js/js_window_screen.asp",
            "info": {
                "Window Screen": "The window.screen object can be written without the window prefix.Properties:",
                "Window Screen Width": "The screen.width property returns the width of the visitor's screen in pixels.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Screen Width: \" + screen.width;```",
                "Window Screen Height": "The screen.height property returns the height of the visitor's screen in pixels.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Screen Height: \" + screen.height;```",
                "Window Screen Available Width": "The screen.availWidth property returns the width of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Available Screen Width: \" + screen.availWidth;```",
                "Window Screen Available Height": "The screen.availHeight property returns the height of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Available Screen Height: \" + screen.availHeight;```",
                "Window Screen Color Depth": "The screen.colorDepth property returns the number of bits used to display one color.All modern computers use 24 bit or 32 bit hardware for color resolution:Older computers used 16 bits: 65,536 different \"High Colors\" resolution.Very old computers, and old cell phones used 8 bits: 256 different \"VGA colors\".```js\ndocument.getElementById(\"demo\").innerHTML = \n\"Screen Color Depth: \" + screen.colorDepth;```",
                "Window Screen Pixel Depth": "The screen.pixelDepth property returns the pixel depth of the screen.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Screen Pixel Depth: \" + screen.pixelDepth;```"
            }
        },
        "location": {
            "title": "JS Location",
            "url": "https://www.w3schools.com/js/js_window_location.asp",
            "info": {
                "Window Location": "The window.location object can be written without the window prefix.Some examples:",
                "Window Location Href": "The window.location.href property returns the URL of the current page.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Page location is \" + window.location.href;```",
                "Window Location Hostname": "The window.location.hostname property returns the name of the internet host (of the current page).```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Page hostname is \" + window.location.hostname;```",
                "Window Location Pathname": "The window.location.pathname property returns the pathname of the current page.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Page path is \" + window.location.pathname;```",
                "Window Location Protocol": "The window.location.protocol property returns the web protocol of the page.```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Page protocol is \" + window.location.protocol;```",
                "Window Location Port": "The window.location.port property returns the number of the internet host port (of the current page).```js\ndocument.getElementById(\"demo\").innerHTML =\n\"Port number is \" + window.location.port;```",
                "Window Location Assign": "The window.location.assign() method loads a new document.```js\n<html>\n\r\n<head>\n\r\n<script>\n\r\nfunction newDoc() {\n\r\n \r\nwindow.location.assign(\"https://www.w3schools.com\")\n\r\n }\n\r\n</script>\n\r\n</head>\n\r\n<body>\n\n\r\n<input type=\"button\" value=\"Load new document\"\r\nonclick=\"newDoc()\">\n\n\r\n</body>\n\r\n</html>```"
            }
        },
        "history": {
            "title": "JS History",
            "url": "https://www.w3schools.com/js/js_window_history.asp",
            "info": {
                "Window History": "The window.history object can be written without the window prefix.To protect the privacy of the users, there are limitations to how JavaScript can access this object.Some methods:",
                "Window History Back": "The history.back() method loads the previous URL in the history list.This is the same as clicking the Back button in the browser.```js\n<html>\n\r\n<head>\n\r\n<script>\n\r\nfunction goBack() {\nwindow.history.back()\n\r\n }\n\r\n</script>\n\r\n</head>\n\r\n<body>\n\n\r\n<input type=\"button\" value=\"Back\" onclick=\"goBack()\">\n\n\r\n</body>\n\r\n</html>```",
                "Window History Forward": "The history.forward() method loads the next URL in the history list.This is the same as clicking the Forward button in the browser.```js\n<html>\n\r\n<head>\n\r\n<script>\n\r\nfunction goForward() {\nwindow.history.forward()\n\r\n }\n\r\n</script>\n\r\n</head>\n\r\n<body>\n\n\r\n<input type=\"button\" value=\"Forward\" onclick=\"goForward()\">\n\n\r\n</body>\n\r\n</html>```"
            }
        },
        "navigator": {
            "title": "JS Navigator",
            "url": "https://www.w3schools.com/js/js_window_navigator.asp",
            "info": {
                "Window Navigator ": "The window.navigator object can be written without the window prefix.Some examples:",
                "Browser Cookies": "The cookieEnabled property returns true if cookies are enabled, otherwise false:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML =\n\"cookiesEnabled is \" + navigator.cookieEnabled;\n\r\n</script>```",
                "Browser Application Name": "The appName property returns the application name of the browser:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML =\n\"navigator.appName is \" + navigator.appName;\n\r\n</script>```",
                "Browser Application Code Name": "The appCodeName property returns the application code name of the browser:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML =\n\r\n \"navigator.appCodeName is \" + navigator.appCodeName;\n\r\n</script>```",
                "The Browser Engine": "The product property returns the product name of the browser engine:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML =\n\r\n \"navigator.product is \" + navigator.product;\n\r\n</script>```",
                "The Browser Version": "The appVersion property returns version information about the browser:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = navigator.appVersion;\n\r\n</script>```",
                "The Browser Agent": "The userAgent property returns the user-agent header sent by the browser to the server:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = navigator.userAgent;\n\r\n</script>```",
                "Warning !!!": "The information from the navigator object can often be misleading, and should not be used to detect browser versions because:",
                "The Browser Platform": "The platform property returns the browser platform (operating system):```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = navigator.platform;\n\r\n</script>```",
                "The Browser Language": "The language property returns the browser's language:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = navigator.language;\n\r\n</script>```",
                "Is The Browser Online?": "The onLine property returns true if the browser is online:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = navigator.onLine;\n\r\n</script>```",
                "Is Java Enabled?": "The javaEnabled() method returns true if Java is enabled:```js\n<p id=\"demo\"></p>\n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = navigator.javaEnabled();\n\r\n</script>```"
            }
        },
        "popupalert": {
            "title": "JS Popup Alert",
            "url": "https://www.w3schools.com/js/js_popup.asp",
            "info": {
                "Alert Box": "An alert box is often used if you want to make sure information comes through to the user.When an alert box pops up, the user will have to click \"OK\" to proceed. The window.alert() method can be written without the window prefix.```js\nalert(\"I am an alert box!\");```",
                "Confirm Box": "A confirm box is often used if you want the user to verify or accept something.When a confirm box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed. If the user clicks \"OK\", the box returns true. If the user clicks \"Cancel\", the box returnsfalse.The window.confirm() method can be written without the window prefix.```js\nif (confirm(\"Press a button!\")) {\n  txt = \"You pressed OK!\";\n} else {\n  txt = \"You pressed Cancel!\";\n}```",
                "Prompt Box": "A prompt box is often used if you want the user to input a value before entering a page.When a prompt box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed after entering an input value. If the user clicks \"OK\" the box returns the input value. If the user clicks \"Cancel\" the box returns null.The window.prompt() method can be written without the window prefix.```js\nvar person = prompt(\"Please enter your name\", \"Harry Potter\");\nif (person == null || person == \"\") {\n  txt = \"User cancelled the prompt.\";\n} else {\n  txt = \"Hello \" + person + \"! How are you today?\";\n}```",
                "Line Breaks": "To display line breaks inside a popup box, use a back-slash followed by the character n.```js\nalert(\"Hello\\nHow are you?\");```"
            }
        },
        "timing": {
            "title": "JS Timing",
            "url": "https://www.w3schools.com/js/js_timing.asp",
            "info": {
                "Timing Events": "The window object allows execution of code at specified time intervals.These time intervals are called timing events.The two key methods to use with JavaScript are:",
                "The setTimeout() Method": "The window.setTimeout() method can be written without the window prefix.The first parameter is a function to be executed.The second parameter indicates the number of milliseconds before execution. ```js\n<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button>\n  <script>\nfunction myFunction() {\n  alert('Hello');\n  }\n</script>```",
                "How to Stop the Execution?": "The clearInterval() method stops the executions of the function specified in the setInterval() method.The window.clearInterval() method can be written without the window prefix.The clearInterval() method uses the variable returned from setInterval():```js\n<p id=\"demo\"></p>\n<button onclick=\"clearInterval(myVar)\">Stop time</button>\n\n<script>\nvar myVar = setInterval(myTimer, 1000);\n\r\n function myTimer() {\n  var d = new Date();\n  document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n}\n</script>```",
                "The setInterval() Method": "The setInterval() method repeats a given function at every given time-interval.The window.setInterval() method can be written without the window prefix.The first parameter is the function to be executed.The second parameter indicates the length of the time-interval between each execution.This example executes a function called \"myTimer\" once every second (like a digital watch).```js\nvar myVar = setInterval(myTimer, 1000);\n\nfunction myTimer() {\n  var d = new Date();\n  document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n\r\n}```",
                "More Examples": "Another simple timingA clock created with a timing event"
            }
        },
        "cookies": {
            "title": "JS Cookies",
            "url": "https://www.w3schools.com/js/js_cookies.asp",
            "info": {
                "What are Cookies?": "Cookies are data, stored in small text files, on your computer.When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.Cookies were invented to solve the problem \"how to remember information about the user\":Cookies are saved in name-value pairs like:```js\nusername = John Doe```When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server gets the necessary data to \"remember\" information about users.",
                "Create a Cookie with JavaScript": "JavaScript can create, read, and delete cookies with the document.cookie property.With JavaScript, a cookie can be created like this:```js\ndocument.cookie = \"username=John Doe\";```You can also add an expiry date (in UTC time).By default, the cookie is deleted when the browser is closed:```js\ndocument.cookie = \"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC\";```With a path parameter, you can tell the browser what path the cookie belongs to.By default, the cookie belongs to the current page.```js\ndocument.cookie = \"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/\";```",
                "Read a Cookie with JavaScript": "With JavaScript, cookies can be read like this:```js\nvar x = document.cookie;```",
                "Change a Cookie with JavaScript": "With JavaScript, you can change a cookie the same way as you create it:```js\ndocument.cookie = \"username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/\";```The old cookie is overwritten.",
                "Delete a Cookie with JavaScript": "Deleting a cookie is very simple.You don't have to specify a cookie value when you delete a cookie.Just set the expires parameter to a passed date:```js\ndocument.cookie = \"username=; expires=Thu, 01 \r\nJan 1970 00:00:00 UTC; path=/;\";```",
                "The Cookie String": "The document.cookie property looks like a normal text string. But it is not.Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the name-value pair of it.If you set a new cookie, older cookies are not overwritten.The new cookie is added to document.cookie, so if you read document.cookie again you will get something like:cookie1 = value; cookie2 = value;Display All Cookies\u00a0Create Cookie 1\u00a0Create Cookie 2Delete Cookie 1\u00a0Delete Cookie 2If you want to find the value of one specified cookie, you must write a JavaScript function that searches for the cookie value in the cookie string.",
                "JavaScript Cookie Example": "In the example to follow, we will create a cookie that stores the name of a visitor.The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.The next time the visitor arrives at the same page, he/she will get a welcome message.For the example we will create 3 JavaScript functions:",
                "A Function to Set a Cookie": "First, we create a function that stores the name of the visitor in a cookie variable:```js\nfunction setCookie(cname, cvalue, exdays) {\n var d = new Date();\n  d.setTime(d.getTime() + (exdays*24*60*60*1000));\n  var expires = \"expires=\"+ d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}```Example explained:The parameters of the function above are the name of the cookie (cname), the value of the cookie (cvalue), and the number of days until the cookie should expire (exdays).The function sets a cookie by adding together the cookiename, the cookie value, and the expires string.",
                "A Function to Get a Cookie": "Then, we create a function that returns the value of a specified cookie:```js\nfunction getCookie(cname) {\n \r\nvar name = cname + \"=\";\n \r\nvar decodedCookie = decodeURIComponent(document.cookie);\nvar ca = decodedCookie.split(';');\nfor(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    \r\n }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n\r\n}```Function explained:Take the cookiename as parameter (cname).Create a variable (name) with the text to search for (cname + \"=\").Decode the cookie string, to handle cookies with special characters, e.g. '$'Split document.cookie on semicolons into an array called ca (ca = decodedCookie.split(';')).Loop through the ca array (i = 0; i < ca.length; i++), and read out each value c = ca[i]).If the cookie is found (c.indexOf(name) == 0), return the value of the cookie (c.substring(name.length, c.length).If the cookie is not found, return \"\".",
                "A Function to Check a Cookie": "Last, we create the function that checks if a cookie is set.If the cookie is set it will display a greeting.If the cookie is not set, it will display a prompt box, asking for the name of the user,and stores the username cookie for 365 days, by calling the setCookie function:```js\nfunction checkCookie() {\n  var \r\nusername = getCookie(\"username\");\n  if (username != \"\") {\n   alert(\"Welcome again \" + username);\n} else {\n  username = prompt(\"Please enter your name:\", \"\");\n    if (username != \"\" \r\n&& username != null) {\n      setCookie(\"username\", username, 365);\n    }\n  }\n}```",
                "All Together Now": "```js\nfunction setCookie(cname, cvalue, exdays) {\n  var d = new Date();\n \r\nd.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n  var expires = \"expires=\"+d.toUTCString();\ndocument.cookie = cname + \"=\" + cvalue + \r\n\";\" + expires + \";path=/\";\n\r\n}\nfunction getCookie(cname) {\n  var name = cname + \"=\";\n  var ca \r\n= document.cookie.split(';');\n  for(var i = 0; i < ca.length; i++) \r\n{\n    \r\nvar c = ca[i];\n    while (c.charAt(0) == ' \r\n') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) \r\n == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\nfunction \r\ncheckCookie() {\n  var user = getCookie(\"username\");\nif (user != \"\") \r\n{\n    alert(\"Welcome again \" + user);\n} else {\n  user = prompt(\"Please enter your name:\", \"\");\n    if (user != \"\" && \r\nuser != null) {\n    setCookie(\"username\", user, 365);\n    }\n  }\n}```The example above runs the checkCookie() function when the page loads."
            }
        },
        "ajaxintro": {
            "title": "AJAX Intro",
            "url": "https://www.w3schools.com/js/js_ajax_intro.asp",
            "info": {
                "AJAX Example Explained": "```js\n<!DOCTYPE html>\n<html>\n\r\n<body>\n\r\n<div id=\"demo\">\n  <h2>Let AJAX change this text</h2>\n \r\n<button type=\"button\" onclick=\"loadDoc()\">Change Content</button>\n\r\n </div>\n\r\n</body>\n\r\n</html>```The HTML page contains a <div> section and a <button>.The <div> section is used to display information from a server.The <button> calls a function (if it is clicked).The function requests data from a web server and displays it:```js\nfunction loadDoc() {\nvar xhttp = new   XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n    \r\nif (this.readyState == 4 && this.status == 200) {\n     \r\ndocument.getElementById(\"demo\").innerHTML = this.responseText;\n    \r\n}\n  };\n  xhttp.open(\"GET\", \"ajax_info.txt\", true);\n  \r\nxhttp.send();\n\r\n}```",
                "What is AJAX?": "AJAX = Asynchronous JavaScript AndXML.AJAX is not a programming language.AJAX just uses a combination of:AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.This means that it is possible to update parts of a web page, without reloading the whole page.",
                "How AJAX Works": ""
            }
        },
        "ajaxxmlhttp": {
            "title": "AJAX XMLHttp",
            "url": "https://www.w3schools.com/js/js_ajax_http.asp",
            "info": {
                "The XMLHttpRequest Object": "All modern browsers support the XMLHttpRequest object.The XMLHttpRequest object can be used to exchange data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.",
                "Create an XMLHttpRequest Object": "All modern browsers (Chrome, Firefox, IE7+, Edge, Safari, Opera) have a built-in XMLHttpRequest object.Syntax for creating an XMLHttpRequest object:```js\nvar xhttp = new XMLHttpRequest();```",
                "Access Across Domains": "For security reasons, modern browsers do not allow access across domains.This means that both the web page and the XML file it tries to load, must be located on the same server.The examples on W3Schools all open XML files located on the W3Schools domain.If you want to use the example above on one of your own web pages,the XML files you load must be located on your own server.",
                "Older Browsers (IE5 and IE6)": "Old versions of Internet Explorer (5/6) use an ActiveX object instead of the XMLHttpRequest object:To handle IE5 and IE6,  check if the browser supports the XMLHttpRequest object, or else create an ActiveX object:```js\nif (window.XMLHttpRequest) {\n   // code for modern browsers\n   xmlhttp = new XMLHttpRequest();\n\r\n }\r\nelse {\n   // code for old IE browsers\n   xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\r\n }```",
                "XMLHttpRequest Object Methods": "",
                "XMLHttpRequest Object Properties": ""
            }
        },
        "ajaxrequest": {
            "title": "AJAX Request",
            "url": "https://www.w3schools.com/js/js_ajax_http_send.asp",
            "info": {
                "Send a Request To a Server": "To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:",
                "GET or POST?": "GET is simpler and faster than POST, and can be used in most cases.However, always use POST requests when:",
                "GET Requests": "A simple GET request:```js\nxhttp.open(\"GET\", \"demo_get.asp\", true);\n\r\n xhttp.send();```If you want to send information with the GET method, add the information to the URL:```js\nxhttp.open(\"GET\", \"demo_get2.asp?fname=Henry&lname=Ford\", true);\n\r\n xhttp.send();```",
                "POST Requests": "A simple POST request:```js\nxhttp.open(\"POST\", \"demo_post.asp\", true);\n\r\n xhttp.send();```To POST data like an HTML form, add an HTTP header with setRequestHeader(). Specify the data you want to send in the send() method:```js\nxhttp.open(\"POST\", \"ajax_test.asp\", true);\n\r\n xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\r\n xhttp.send(\"fname=Henry&lname=Ford\");```",
                "The url - A File On a Server": "The url parameter of the open() method, is an address to a file on a server:The file can be any kind of file, like .txt and .xml, or server scripting files like .asp and .php (which can perform  actions on the server before sending the response back).",
                "Asynchronous - True or False?": "Server requests should be sent asynchronously.The async parameter of the open() method should be set to true:By sending asynchronously, the JavaScript does not have to wait for the server response, but can instead:",
                "The onreadystatechange Property": "With the XMLHttpRequest object you can define a function to be executed when the request receives an answer.The function is defined in the onreadystatechange property of the XMLHttpRequest object:```js\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\n  document.getElementById(\"demo\").innerHTML = this.responseText;\n}\n\r\n };\n\r\n xhttp.open(\"GET\", \"ajax_info.txt\", true);\n\r\n xhttp.send();```You will learn more about onreadystatechange in a later chapter.",
                "Synchronous Request": "To execute a synchronous request, change the third parameter in the open() method to false:Sometimes async = false are used for quick testing. You will also find synchronous requests in older JavaScript code.Since the code will wait for server completion, there is no need for an onreadystatechange function:```js\nxhttp.open(\"GET\", \"ajax_info.txt\", false);\n\r\nxhttp.send();\n\r\ndocument.getElementById(\"demo\").innerHTML = xhttp.responseText;```"
            }
        },
        "ajaxresponse": {
            "title": "AJAX Response",
            "url": "https://www.w3schools.com/js/js_ajax_http_response.asp",
            "info": {
                "The onreadystatechange Property": "The readyState property holds the status of the XMLHttpRequest.The onreadystatechange property defines a function to be executed when the readyState changes.The status property and the statusText property holds the status of the XMLHttpRequest object.The onreadystatechange function is called every time the readyState changes. When readyState is 4 and status is 200, the response is ready:```js\nfunction loadDoc() {\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n      document.getElementById(\"demo\").innerHTML =\n      this.responseText;\n    }\n};\nxhttp.open(\"GET\", \"ajax_info.txt\", true);\nxhttp.send();\r\n}```",
                "Using a Callback Function": "A callback function is a function passed as a parameter to another function.If you have more than one AJAX task in a website, you should create one function for executing the XMLHttpRequest object, and one callback function for each AJAX task.The function call should contain the URL and what function to call when the response is ready.```js\nloadDoc(\"url-1\", myFunction1);\n\n\r\nloadDoc(\"url-2\", myFunction2);\n\r\nfunction loadDoc(url, cFunction) {\nvar xhttp;\nxhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n      cFunction(this);\n    }\n};\nxhttp.open(\"GET\", url, true);\nxhttp.send();\n\r\n}\n\r\nfunction myFunction1(xhttp) {\n// action goes here\n\r\n}\r\n\r\nfunction myFunction2(xhttp) {\n// action goes here\n\r\n}```",
                "Server Response Properties": "",
                "Server Response Methods": "",
                "The responseText Property": "The responseText property returns the server response as a JavaScript string, and you can use it accordingly:```js\ndocument.getElementById(\"demo\").innerHTML = xhttp.responseText;```",
                "The responseXML Property": "The XMLHttpRequest object has an in-built XML parser.The responseXML property returns the server response as an XML DOM object.Using this property you can parse the response as an XML DOM object:```js\nxmlDoc = xhttp.responseXML;\n\r\ntxt = \"\";\n\r\nx = xmlDoc.getElementsByTagName(\"ARTIST\");\n\r\nfor (i = 0; i < x.length; i++) {\ntxt += x[i].childNodes[0].nodeValue + \"<br>\";\n}\n\r\ndocument.getElementById(\"demo\").innerHTML = txt;\nxhttp.open(\"GET\", \r\n \"cd_catalog.xml\", true);\nxhttp.send();```",
                "The getAllResponseHeaders() Method": "The getAllResponseHeaders() method returns all header information from the server response.```js\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\n  document.getElementById(\"demo\").innerHTML =\n    this.getAllResponseHeaders();\n}\n\r\n};```",
                "The getResponseHeader() Method": "The getResponseHeader() method returns specific header information from the server response.```js\nvar xhttp = new XMLHttpRequest();\nxhttp.onreadystatechange = function() {\nif (this.readyState == 4 && this.status == 200) {\n  document.getElementById(\"demo\").innerHTML =\n    this.getResponseHeader(\"Last-Modified\");\n}\n\r\n};\n\r\nxhttp.open(\"GET\", \"ajax_info.txt\", true);\n\r\nxhttp.send();```"
            }
        },
        "ajaxxmlfile": {
            "title": "AJAX XML File",
            "url": "https://www.w3schools.com/js/js_ajax_xmlfile.asp",
            "info": {
                "AJAX XML Example": "The following example will demonstrate how a web page can fetch information from an XML file with AJAX:",
                "Example Explained": "When a user clicks on the \"Get CD info\" button above, the loadDoc() function is executed.The loadDoc() function creates an XMLHttpRequest object, adds the function to be executed when the server response is ready, and sends the request off to the server.When the server response is ready, an HTML table is built, nodes (elements) are extracted from the XML file, and it finally updates the element \"demo\" with the HTML table filled with XML data:",
                "The XML File": "The XML file used in the example above looks like this: \"cd\\_catalog.xml\"."
            }
        },
        "ajaxphp": {
            "title": "AJAX PHP",
            "url": "https://www.w3schools.com/js/js_ajax_php.asp",
            "info": {
                "AJAX PHP Example": "The following example demonstrates how a web page can communicate with a web server while a user types characters in an input field:",
                "Example Explained": "In the example above, when a user types a character in the input field, a function called showHint() is executed.The function is triggered by the onkeyup event.Here is the HTML code:```js\n<html>\n<body>\n<p><b>Start typing a name in the input field below:</b></p>\n\n<p>Suggestions: <span id=\"txtHint\"></span></p>\n\n<form> \nFirst name: <input type=\"text\" onkeyup=\"showHint(this.value)\">\n</form>\n\n<script>\nfunction showHint(str) {\n  if (str.length == 0) { \n    document.getElementById(\"txtHint\").innerHTML = \"\";\n    return;\n  } else {\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = function() {\n      if (this.readyState == 4 && this.status == 200) {\n        document.getElementById(\"txtHint\").innerHTML = this.responseText;\n      }\n    };\n    xmlhttp.open(\"GET\", \"gethint.php?q=\" + str, true);\n    xmlhttp.send();\n  }\n}\n</script>\n\r\n </body>\n</html>```Code explanation:First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.However, if the input field is not empty, do the following:",
                "The PHP File - \"gethint.php\"": "The PHP file checks an array of names, and returns the corresponding name(s) to the browser:"
            }
        },
        "ajaxasp": {
            "title": "AJAX ASP",
            "url": "https://www.w3schools.com/js/js_ajax_asp.asp",
            "info": {
                "AJAX ASP Example": "The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:",
                "Example Explained": "In the example above, when a user types a character in the input field, a function called showHint() is executed.The function is triggered by the onkeyup event.Here is the HTML code:```js\n<html>\n<head>\n<script>\nfunction showHint(str) {\n  if (str.length == 0) { \n    document.getElementById(\"txtHint\").innerHTML = \"\";\n    return;\n  } else {\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = function() {\n      if (this.readyState == 4 && this.status == 200) {\n        document.getElementById(\"txtHint\").innerHTML = this.responseText;\n      }\n    };\n    xmlhttp.open(\"GET\", \"gethint.asp?q=\" + str, true);\n    xmlhttp.send();\n  }\n}\n</script>\n</head>\n<body>\n<p><b>Start typing a name in the input field below:</b></p>\n<form> \nFirst name: <input type=\"text\" onkeyup=\"showHint(this.value)\">\n</form>\n<p>Suggestions: <span id=\"txtHint\"></span></p>\n\r\n </body>\n</html>```Code explanation:First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.However, if the input field is not empty, do the following:",
                "The ASP File - \"gethint.asp\"": "The ASP file checks an array of names, and returns the corresponding name(s) to the browser:"
            }
        },
        "ajaxdatabase": {
            "title": "AJAX Database",
            "url": "https://www.w3schools.com/js/js_ajax_database.asp",
            "info": {
                "AJAX Database Example": "The following example will demonstrate how a web page can fetch information from a database with AJAX:",
                "Example Explained - The showCustomer() Function": "When a user selects a customer in the dropdown list above, a function called showCustomer() is executed. The function is triggered by the onchange event:```js\nfunction showCustomer(str) {\n  var xhttp; \n  if (str == \"\") {\n    \r\n document.getElementById(\"txtHint\").innerHTML = \"\";\n    \r\n return;\n  }\n  xhttp = new XMLHttpRequest();\n  \r\n xhttp.onreadystatechange = function() {\n    if (this.readyState \r\n == 4 && this.status == 200) {\n    document.getElementById(\"txtHint\").innerHTML \r\n = this.responseText;\n    }\n  };\n  xhttp.open(\"GET\", \r\n \"getcustomer.php?q=\"+str, true);\n  xhttp.send();\n}```The showCustomer() function does the following:",
                "The AJAX Server Page": "The page on the server called by the JavaScript above is a PHP file called \"getcustomer.php\".The source code in \"getcustomer.php\" runs a query against a database, and returns the result in an HTML table:"
            }
        },
        "ajaxapplications": {
            "title": "AJAX Applications",
            "url": "https://www.w3schools.com/js/js_ajax_applications.asp",
            "info": {
                "The XML Document Used": "In this chapter we will use the XML file called \"cd\\_catalog.xml\".",
                "Display XML Data in an HTML Table": "This example loops through each <CD> element, and displays the values of the <ARTIST> and the <TITLE> elements in an HTML table:For more information about using JavaScript and the XML DOM, go toDOM Intro.",
                "Display the First CD in an HTML div Element": "This example uses a function to display the first CD element in an HTML element with id=\"showCD\":```js\ndisplayCD(0);\nfunction displayCD(i) {\n  var xmlhttp \r\n = new XMLHttpRequest();\n  xmlhttp.onreadystatechange = \r\n function() {\n    if (this.readyState \r\n == 4 && this.status == 200) {\n      myFunction(this, i);\n    }\n  };\n  xmlhttp.open(\"GET\", \"cd_catalog.xml\", true);\n  xmlhttp.send();\n}\nfunction myFunction(xml, i) {\n  var xmlDoc = xml.responseXML; \n  x = \r\n xmlDoc.getElementsByTagName(\"CD\");\n  \r\n document.getElementById(\"showCD\").innerHTML =\n  \"Artist: \" \r\n +\n  x[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue \r\n +\n  \"<br>Title: \" +\n  x[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue \r\n +\n  \"<br>Year: \" + \n  x[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;\n\r\n }```",
                "Navigate Between the CDs": "To navigate between the CDs in the example above, create a next() and previous() function:```js\nfunction next()\r\n{\n  // display the next CD, unless you are on the last CD\n\r\n \r\nif (i < len-1) {\n  i++;\n  displayCD(i);\n}\n\r\n}\n\n\r\nfunction previous()\r\n{\n  // display the previous CD, unless you are on the first CD \n\r\n \r\nif (i > 0) {\n  i--;\n  displayCD(i);\n}\n\r\n}```",
                "Show Album Information When Clicking On a CD": "The last example shows how you can show album information when the user clicks on a CD:```js\nfunction displayCD(i) {\n  document.getElementById(\"showCD\").innerHTML =\n \"Artist: \" +\n  x[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n  \"<br>Title: \" +\n x[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n  \"<br>Year: \" + \n  x[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;\n}```"
            }
        },
        "ajaxexamples": {
            "title": "AJAX Examples",
            "url": "https://www.w3schools.com/js/js_ajax_examples.asp",
            "info": {}
        },
        "onintro": {
            "title": "JSON Intro",
            "url": "https://www.w3schools.com/js/js_json_intro.asp",
            "info": {
                "Exchanging Data": "When exchanging data between a browser and a server, the data can only be text.JSON is text, and we can convert any JavaScript object into JSON, and send JSON to the server.We can also convert any JSON received from the server into JavaScript objects.This way we can work with the data as JavaScript objects, with no complicated parsing and translations.",
                "Sending Data": "If you have data stored in a JavaScript object, you can convert the object into JSON, and send it to a server:```js\nvar myObj = {name: \"John\", age: 31, city: \"New York\"};\nvar myJSON = JSON.stringify(myObj);\nwindow.location = \"demo_json.php?x=\" + myJSON;```You will learn more about the JSON.stringify() function later in this tutorial.",
                "Receiving Data": "If you receive data in JSON format, you can convert it into a JavaScript object:```js\nvar myJSON ='{\"name\":\"John\", \"age\":31, \"city\":\"New York\"}';\nvar myObj = JSON.parse(myJSON);\ndocument.getElementById(\"demo\").innerHTML = myObj.name;```You will learn more about the JSON.parse() function later in this tutorial.",
                "Storing Data": "When storing data, the data has to be a certain format, and regardless of where you choose to store it, text is always one of the legal formats.JSON makes it possible to store JavaScript objects as text.```js\n// Storing data:\nmyObj = {name: \"John\", age: 31, city: \"New York\"};\nmyJSON = JSON.stringify(myObj);\nlocalStorage.setItem(\"testJSON\", myJSON);\n// Retrieving data:\ntext = localStorage.getItem(\"testJSON\");\nobj = JSON.parse(text);\ndocument.getElementById(\"demo\").innerHTML = obj.name;```",
                "What is JSON?": "The JSON format was originally specified byDouglas Crockford.",
                "Why use JSON?": "Since the JSON format is text only, it can easily be sent to and from a server, and used as a data format by any programming language.JavaScript has a built in function to convert a string, written in JSON format, into native JavaScript objects:JSON.parse()So, if you receive data from a server, in JSON format, you can use it like any other JavaScript object."
            }
        },
        "onsyntax": {
            "title": "JSON Syntax",
            "url": "https://www.w3schools.com/js/js_json_syntax.asp",
            "info": {
                "JSON Syntax Rules": "JSON syntax is derived from JavaScript object notation syntax:",
                "JSON Data - A Name and a Value": "JSON data is written as name/value pairs.A name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:```js\n\"name\":\"John\"```",
                "JSON - Evaluates to JavaScript Objects": "The JSON format is almost identical to JavaScript objects.In JSON, keys must be strings, written with double quotes:```js\n{ \"name\":\"John\" }```In JavaScript, keys can be strings, numbers, or identifier names:```js\n{ name:\"John\" }```",
                "JSON Values": "In JSON, values must be one of the following data types:In JavaScript values can be all of the above, plus any other valid JavaScript expression, including:In JSON, string values must be written with double quotes:```js\n{ \"name\":\"John\" }```In JavaScript, you can write string values with double or single quotes:```js\n{ name:'John' }```",
                "JSON Uses JavaScript Syntax": "Because JSON syntax is derived from JavaScript object notation, very little extra software is needed to work with JSON within JavaScript.With JavaScript you can create an object and assign data to it, like this:```js\nvar person = { name: \"John\", age: 31, city: \"New York\" };```You can access a JavaScript object like this:```js\n// returns John\nperson.name;```It can also be accessed like this:```js\n// returns John\nperson[\"name\"];```Data can be modified like this:```js\nperson.name = \"Gilbert\";```It can also be modified like this:```js\nperson[\"name\"] = \"Gilbert\";```You will learn how to convert JavaScript objects into JSON later in this tutorial. ",
                "JavaScript Arrays as JSON": "The same way JavaScript objects can be used as JSON, JavaScript arrays can also be used as JSON.You will learn more about arrays as JSON later in this tutorial.",
                "JSON Files": ""
            }
        },
        "onvsxml": {
            "title": "JSON vs XML",
            "url": "https://www.w3schools.com/js/js_json_xml.asp",
            "info": {
                "\u00a0JSON is Like XML Because": "",
                "JSON is Unlike XML Because": "The biggest difference is:\u00a0XML has to be parsed with an XML parser. JSON can be parsed by a standard JavaScript function. ",
                "Why JSON is Better Than XML": "For AJAX applications, JSON is faster and easier than XML:Using XMLUsing JSON"
            }
        },
        "ondatatypes": {
            "title": "JSON Data Types",
            "url": "https://www.w3schools.com/js/js_json_datatypes.asp",
            "info": {
                "Valid Data Types": "In JSON, values must be one of the following data types:",
                "JSON Strings": "Strings in JSON must be written in double quotes.```js\n{\r\n\"name\":\"John\" }```",
                "JSON Numbers": "Numbers in JSON must be an integer or a floating point.```js\n{\r\n\"age\":30 }```",
                "JSON Objects": "Values in JSON can be objects.```js\n{\n\"employee\":{ \"name\":\"John\", \"age\":30, \"city\":\"New York\" }\n}```",
                "JSON Arrays": "Values in JSON can be arrays.```js\n{\n\"employees\":[ \"John\", \"Anna\", \"Peter\" ]\n}```",
                "JSON Booleans": "Values in JSON can be true/false.```js\n{ \"sale\":true }```",
                "JSON null": "Values in JSON can be null.```js\n{ \"middlename\":null }```"
            }
        },
        "onparse": {
            "title": "JSON Parse",
            "url": "https://www.w3schools.com/js/js_json_parse.asp",
            "info": {
                "Example - Parsing JSON": "Imagine we received this text from a web server:```js\n'{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'```Use the JavaScript function JSON.parse() to convert text into a JavaScript object:```js\nvar obj = JSON.parse('{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}');```Use the JavaScript object in your page:```js\n<p id=\"demo\"></p> \n\n\r\n<script>\n\r\ndocument.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.age; \n\r\n</script>```",
                "JSON From the Server": "You can request JSON from the server by using an AJAX requestAs long as the response from the server is written in JSON format, you can parse the string into a JavaScript object.```js\nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    var myObj = JSON.parse(this.responseText);\n    document.getElementById(\"demo\").innerHTML = myObj.name;\n  }\n};\nxmlhttp.open(\"GET\", \"json_demo.txt\", true);\nxmlhttp.send();```",
                "Array as JSON": "When using the JSON.parse() on a JSON derived from an array, the method will return a JavaScript array, instead of a JavaScript object.```js\nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    var myArr = JSON.parse(this.responseText);\n    document.getElementById(\"demo\").innerHTML = myArr[0];\n  }\n};\nxmlhttp.open(\"GET\", \"json_demo_array.txt\", true);\nxmlhttp.send();```",
                "Exceptions": "Date objects are not allowed in JSON.If you need to include a date, write it as a string.You can convert it back into a date object later:```js\nvar text ='{ \"name\":\"John\", \"birth\":\"1986-12-14\", \"city\":\"New York\"}';\nvar obj = JSON.parse(text);\nobj.birth = new Date(obj.birth);\n\ndocument.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.birth;```Or, you can use the second parameter, of the JSON.parse() function, called reviver.The reviver parameter is a function that checks each property, before returning the value.```js\nvar text ='{ \"name\":\"John\", \"birth\":\"1986-12-14\", \"city\":\"New York\"}';\nvar obj = JSON.parse(text, function (key, value) {\n  if (key == \"birth\") {\n    return new Date(value);\n  } else {\n    return value;\n  }\n});\n\ndocument.getElementById(\"demo\").innerHTML = obj.name + \", \" + obj.birth;```Functions are not allowed in JSON.If you need to include a function, write it as a string.You can convert it back into a function later:",
                "Browser Support": "The JSON.parse() function is included in all major browsers and in the latest ECMAScript (JavaScript) standard.The numbers in the table below specifies the first browser version that fully supports the JSON.parse() function:For older browsers, a JavaScript library is available at https://github.com/douglascrockford/JSON-js."
            }
        },
        "onstringify": {
            "title": "JSON Stringify",
            "url": "https://www.w3schools.com/js/js_json_stringify.asp",
            "info": {
                "Stringify a JavaScript Object": "Imagine we have this object in JavaScript:```js\nvar obj = { name: \"John\", age: 30, city: \"New York\" };```Use the JavaScript function JSON.stringify() to convert it into a string.```js\nvar myJSON = JSON.stringify(obj);```myJSON is now a string, and ready to be sent to a server:```js\nvar obj = { name: \"John\", age: 30, city: \"New York\" };\nvar myJSON = JSON.stringify(obj);\ndocument.getElementById(\"demo\").innerHTML = myJSON;```You will learn how to send JSON to the server in the next chapter.",
                "Stringify a JavaScript Array": "It is also possible to stringify JavaScript arrays:Imagine we have this array in JavaScript:```js\nvar arr = [ \"John\", \"Peter\", \"Sally\", \"Jane\" ];```Use the JavaScript function JSON.stringify() to convert it into a string.```js\nvar myJSON = JSON.stringify(arr);```myJSON is now a string, and ready to be sent to a server:```js\nvar arr = [ \"John\", \"Peter\", \"Sally\", \"Jane\" ];\nvar myJSON = JSON.stringify(arr);\ndocument.getElementById(\"demo\").innerHTML = myJSON;```You will learn how to send JSON to the server in the next chapter.",
                "Exceptions": "In JSON, date objects are not allowed. The JSON.stringify() function will convert any dates into strings.```js\nvar obj ={ name: \"John\", today: new Date(), city : \"New York\" };\nvar myJSON = JSON.stringify(obj);\n\ndocument.getElementById(\"demo\").innerHTML = myJSON;```You can convert the string back into a date object at the receiver.In JSON, functions are not allowed as object values.The JSON.stringify() function will remove any functions from a JavaScript object, both the key and the value:```js\nvar obj ={ name: \"John\", age: function () {return 30;}, city: \"New York\"};\nvar myJSON = JSON.stringify(obj);\n\ndocument.getElementById(\"demo\").innerHTML = myJSON;```This can be omitted if you convert your functions into strings before running the JSON.stringify() function.```js\nvar obj ={ name: \"John\", age: function () {return 30;}, city: \"New York\" };\nobj.age = obj.age.toString();\nvar myJSON = JSON.stringify(obj);\n\ndocument.getElementById(\"demo\").innerHTML = myJSON;```",
                "Browser Support": "The JSON.stringify() function is included in JavaScript (ECMAScript)and is supported in all major browsers."
            }
        },
        "onobjects": {
            "title": "JSON Objects",
            "url": "https://www.w3schools.com/js/js_json_objects.asp",
            "info": {
                "Object Syntax": "```js\n{\r\n\"name\":\"John\", \"age\":30, \"car\":null }```JSON objects are surrounded by curly braces {}.JSON objects are written in key/value pairs.Keys must be strings, and values must be a valid JSON data type (string, number, object, array, boolean or null).Keys and values are separated by a colon.Each key/value pair is separated by a comma.",
                "Accessing Object Values": "You can access the object values by using dot (.) notation:```js\nmyObj ={\r\n\"name\":\"John\", \"age\":30, \"car\":null };\nx = myObj.name;```You can also access the object values by using bracket ([]) notation:```js\nmyObj ={\r\n\"name\":\"John\", \"age\":30, \"car\":null };\nx = myObj[\"name\"];```",
                "Looping an Object": "You can loop through object properties by using the for-in loop:```js\nmyObj ={\r\n\"name\":\"John\", \"age\":30, \"car\":null };\nfor (x in myObj) {\n  document.getElementById(\"demo\").innerHTML += x;\n}```In a for-in loop, use the bracket notation to access the property values:```js\nmyObj ={\r\n\"name\":\"John\", \"age\":30, \"car\":null };\nfor (x in myObj) {\n  document.getElementById(\"demo\").innerHTML += myObj[x];\n}```",
                "Nested JSON Objects": "Values in a JSON object can be another JSON object.```js\nmyObj ={\n  \"name\":\"John\",\n  \"age\":30,\n  \"cars\": {\n    \"car1\":\"Ford\",\n    \"car2\":\"BMW\",\n    \"car3\":\"Fiat\"\n  }\n }```You can access nested JSON objects by using the dot notation or bracket notation:```js\nx = myObj.cars.car2;\n// or:\nx = myObj.cars[\"car2\"];```",
                "Modify Values": "You can use the dot notation to modify any value in a JSON object:```js\nmyObj.cars.car2 = \"Mercedes\";```You can also use the bracket notation to modify a value in a JSON object:```js\nmyObj.cars[\"car2\"] = \"Mercedes\";```",
                "Delete Object Properties": "Use the delete keyword to delete properties from a JSON object:```js\ndelete myObj.cars.car2;```"
            }
        },
        "onarrays": {
            "title": "JSON Arrays",
            "url": "https://www.w3schools.com/js/js_json_arrays.asp",
            "info": {
                "Arrays as JSON Objects": "```js\n[ \"Ford\", \"BMW\", \"Fiat\" ]```Arrays in JSON are almost the same as arrays in JavaScript.In JSON, array values must be of type string, number, object, array, boolean or null.In JavaScript, array values can be all of the above, plus any other valid JavaScript expression, including functions, dates, and undefined.",
                "Arrays in JSON Objects": "Arrays can be values of an object property:```js\n{\n\"name\":\"John\",\n\"age\":30,\n\"cars\":[ \"Ford\", \"BMW\", \"Fiat\" ]\n}```",
                "Accessing Array Values": "You access the array values by using the index number:```js\nx = myObj.cars[0];```",
                "Looping Through an Array": "You can access array values by using a for-in loop:```js\nfor (i in myObj.cars) {\n  x += myObj.cars[i];\n}```Or you can use a for loop:```js\nfor (i = 0; i < myObj.cars.length; i++) {\n  x += myObj.cars[i];\n}```",
                "Nested Arrays in JSON Objects": "Values in an array can also be another array, or even another JSON object:```js\nmyObj ={\n  \"name\":\"John\",\n  \"age\":30,\n  \"cars\": [\n    { \"name\":\"Ford\", \"models\":[ \"Fiesta\", \"Focus\", \"Mustang\" ] },\n    { \"name\":\"BMW\", \"models\":[ \"320\", \"X3\", \"X5\" ] },\n    { \"name\":\"Fiat\", \"models\":[ \"500\", \"Panda\" ] }\n  ]\n }```To access arrays inside arrays, use a for-in loop for each array:```js\nfor (i in myObj.cars) {\n  x += \"<h1>\" + myObj.cars[i].name + \"</h1>\";\n  for (j in myObj.cars[i].models) {\n    x += myObj.cars[i].models[j];\n  }\n}```",
                "Modify Array Values": "Use the index number to modify an array:```js\nmyObj.cars[1] = \"Mercedes\";```",
                "Delete Array Items": "Use the delete keyword to delete items from an array:```js\ndelete myObj.cars[1];```"
            }
        },
        "onphp": {
            "title": "JSON PHP",
            "url": "https://www.w3schools.com/js/js_json_php.asp",
            "info": {
                "The PHP File": "PHP has some built-in functions to handle JSON.Objects in PHP can be converted into JSON by using the PHP functionjson\\_encode():```js\n<?php\n$myObj->name = \"John\";\n$myObj->age = 30;\n$myObj->city = \"New York\";\n$myJSON = json_encode($myObj);\necho $myJSON;\n?>```",
                "The Client JavaScript": "Here is a JavaScript on the client, using an AJAX call to request the PHP file from the array example above:```js\nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    var myObj = JSON.parse(this.responseText);\n    document.getElementById(\"demo\").innerHTML = myObj[2];\n  }\n};\nxmlhttp.open(\"GET\", \"demo_file_array.php\", true);\nxmlhttp.send();```",
                "PHP Array": "Arrays in PHP will also be converted into JSON when using the PHP functionjson\\_encode():```js\n<?php\n$myArr = array(\"John\", \"Mary\", \"Peter\", \"Sally\");\n$myJSON = json_encode($myArr);\necho $myJSON;\n?>```",
                "PHP Database": "PHP is a server side programming language, and can be used to access a database.Imagine you have a database on your server, and you want to send a request to it from the client where you ask for the 10 first rows in a table called \"customers\".On the client, make a JSON object that describes the numbers of rows you want to return.Before you send the request to the server, convert the JSON object into a string and send it as a parameter to the url of the PHP page:```js\nobj = { \"limit\":10 };\ndbParam = JSON.stringify(obj);\nxmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    document.getElementById(\"demo\").innerHTML = this.responseText;\n  }\n};\nxmlhttp.open(\"GET\", \"json_demo_db.php?x=\" + dbParam, true);\nxmlhttp.send();```Take a look at the PHP file:",
                "Loop Through the Result": "Convert the result received from the PHP file into a JavaScript object, or in this case, a JavaScript array:```js\n...\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    myObj = JSON.parse(this.responseText);\n    for (x in myObj) {\n      txt += myObj[x].name + \"<br>\";\n    }\n    document.getElementById(\"demo\").innerHTML = txt;\n  }\n};\n...```",
                "PHP Method = POST": "When sending data to the server, it is often best to use the HTTP POST method.To send AJAX requests using the POST method, specify the method, and the correct header.The data sent to the server must now be an argument to the send() method:```js\nobj = { \"limit\":10 };\ndbParam = JSON.stringify(obj);\nxmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    myObj = JSON.parse(this.responseText);\n    for (x in myObj) {\n      txt += myObj[x].name + \"<br>\";\n    }\n    document.getElementById(\"demo\").innerHTML = txt;\n  }\n};\nxmlhttp.open(\"POST\", \"json_demo_db_post.php\", true);\nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxmlhttp.send(\"x=\" + dbParam);```The only difference in the PHP file is the method for getting the transferred data."
            }
        },
        "onhtml": {
            "title": "JSON HTML",
            "url": "https://www.w3schools.com/js/js_json_html.asp",
            "info": {
                "HTML Table": "Make an HTML table with data received as JSON:```js\nobj = { table: \"customers\", limit: 20 };\ndbParam = JSON.stringify(obj);\nxmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    myObj = JSON.parse(this.responseText);\n    txt += \"<table border='1'>\"\n    for (x in myObj) {\n      txt += \"<tr><td>\" + myObj[x].name + \"</td></tr>\";\n    }\n    txt += \"</table>\" \n    document.getElementById(\"demo\").innerHTML = txt;\n  }\n}\nxmlhttp.open(\"POST\", \"json_demo_db_post.php\", true);\nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxmlhttp.send(\"x=\" + dbParam);```",
                "Dynamic HTML Table": "Make the HTML table based on the value of a drop down menu:Choose an option:CustomersProductsSuppliers",
                "HTML Drop Down List": "Make an HTML drop down list with data received as JSON:```js\nobj = { table: \"customers\", limit: 20 };\ndbParam = JSON.stringify(obj);\nxmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = function() {\n  if (this.readyState == 4 && this.status == 200) {\n    myObj = JSON.parse(this.responseText);\n    txt += \"<select>\"\n    for (x in myObj) {\n      txt += \"<option>\" + myObj[x].name;\n    }\n    txt += \"</select>\" \n    document.getElementById(\"demo\").innerHTML = txt;\n  }\n}\nxmlhttp.open(\"POST\", \"json_demo_html_table.php\", true);\nxmlhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nxmlhttp.send(\"x=\" + dbParam);```"
            }
        },
        "ononp": {
            "title": "JSON JSONP",
            "url": "https://www.w3schools.com/js/js_json_jsonp.asp",
            "info": {
                "JSONP Intro": "Requesting a file from another domain can cause problems, due to cross-domain policy.Requesting an external script from another domain does not have this problem.JSONP uses this advantage, and request files using the script tag instead of the XMLHttpRequest object.```js\n<script src=\"demo_jsonp.php\">```",
                "The Server File": "The file on the server wraps the result inside a function call:```js\n<?php\n$myJSON = '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\" }';\n\necho \"myFunc(\".$myJSON.\");\";\n?>```The result returns a call to a function named \"myFunc\" with the JSON data as a parameter.Make sure that the function exists on the client.",
                "The JavaScript function": "The function named \"myFunc\" is located on the client, and ready to handle JSON data:```js\nfunction myFunc(myObj) {\n  document.getElementById(\"demo\").innerHTML = myObj.name;\n}```",
                "Creating a Dynamic Script Tag": "The example above will execute the \"myFunc\" function when the page is loading, based on where you put the script tag, which is not very satisfying.The script tag should only be created when needed:```js\nfunction clickButton() {\n  var s = document.createElement(\"script\");\n  s.src = \"demo_jsonp.php\";\n  document.body.appendChild(s);\n}```",
                "Dynamic JSONP Result": "The examples above are still very static.Make the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on the information it gets.```js\n<?php\nheader(\"Content-Type: application/json; charset=UTF-8\");\n$obj = json_decode($_GET[\"x\"], false);\n\n$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");\n$result = $conn->query(\"SELECT name FROM \".$obj->$table.\" LIMIT \".$obj->$limit);\n$outp = array();\n$outp = $result->fetch_all(MYSQLI_ASSOC);\necho \"myFunc(\".json_encode($outp).\")\";\n?>``````js\nfunction clickButton() {\n  var obj, s\n  obj = { table: \"products\", limit: 10 };\n  s = document.createElement(\"script\");\n  s.src = \"jsonp_demo_db.php?x=\" + JSON.stringify(obj);\n  document.body.appendChild(s);\n}\nfunction myFunc(myObj) {\n  var x, txt = \"\";\n  for (x in myObj) {\n    txt += myObj[x].name + \"<br>\";\n  }\n  document.getElementById(\"demo\").innerHTML = txt;\n}```",
                "Callback Function": "When you have no control over the server file, how do you get the server file to call the correct function?Sometimes the server file offers a callback function as a parameter:```js\nfunction clickButton() {\n  var s = document.createElement(\"script\");\n  s.src = \"jsonp_demo_db.php?callback=myDisplayFunction\";\n  document.body.appendChild(s);\n}```"
            }
        },
        "webapiintro": {
            "title": "Web API Intro",
            "url": "https://www.w3schools.com/js/js_api_intro.asp",
            "info": {
                "What is Web API?": "API stands for Application Programming Interface.A Web API is an application programming interface for the Web.A Browser API can extend the functionality of a web browser.A Server API can extend the functionality of a web server.",
                "Browser APIs": "All browsers have a set of built-in Web APIs to support complex operations, and to help accessing data.For example, the Geolocation API can return the coordinates of where the browser is located.```js\nvar x = document.getElementById(\"demo\");\n\r\nfunction getLocation() {\nif (navigator.geolocation) {\n  navigator.geolocation.getCurrentPosition(showPosition);\n} else { \n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n}\n\r\n}\n\r\nfunction showPosition(position) {\nx.innerHTML = \"Latitude: \" + position.coords.latitude + \n\"<br>Longitude: \" + position.coords.longitude; \n}```",
                "Third Party APIs": "Third party APIs are not built into your browser.To use these APIs, you will have to download the code from the Web.Examples:"
            }
        },
        "webhistoryapi": {
            "title": "Web History API",
            "url": "https://www.w3schools.com/js/js_api_history.asp",
            "info": {
                "The History back() Method": "The back() method loads the previous URL in the windows.history list.It is the same as clicking the \"back arrow\" in your browser.```js\n<button onclick=\"myFunction()\">Go Back</button>\n\n<script>\n\r\nfunction myFunction() {\nwindow.history.back();\n}\n\r\n</script>```Go Back",
                "The History go() Method": "The go() method loads a specific URL from the history list:```js\n<button onclick=\"myFunction()\">Go Back 2 Pages</button>\n\n<script>\n\r\nfunction myFunction() {\nwindow.history.go(-2);\n\r\n }\n\r\n</script>```Go Back 2 Pages",
                "History Object Properties": "",
                "History Object Methods": ""
            }
        },
        "webstorageapi": {
            "title": "Web Storage API",
            "url": "https://www.w3schools.com/js/js_api_web_storage.asp",
            "info": {
                "The localStorage Object": "The localStorage object provides access to a local storage for a particular Web Site.It allows you to store, read, add, modify, and delete data items for that domain.The data is stored with no expiration date, and will not be deleted when the browser is closed.The data will be available for days, weeks, and years.",
                "The setItem() Method": "The sessionStorage.setItem() method stores a data item in a storage.It takes a name and a value as parameters:```js\nsessionStorage.setItem(\"name\", \"John Doe\");```",
                "The getItem() Method": "The sessionStorage.getItem() method retrieves a data item from the storage.It takes a name as parameter:```js\nsessionStorage.getItem(\"name\");```",
                "The sessionStorage Object": "The sessionStorage object is identical to the localStorage object.The difference is that the sessionStorage object stores data for one session.The data is deleted when the browser is closed.```js\nsessionStorage.getItem(\"name\");```",
                "Storage Object Properties and Methods": "",
                "Related Pages for Web Storage API": ""
            }
        },
        "webgeolocationapi": {
            "title": "Web Geolocation API",
            "url": "https://www.w3schools.com/js/js_api_geolocation.asp",
            "info": {
                "Locate the User's Position": "The HTML Geolocation API is used to get the geographical position of a user.Since this can compromise privacy, the position is not available unless the user approves it.Try ItThe Geolocation API is supported in all browsers:",
                "Using the Geolocation API": "The getCurrentPosition() method is used to return the user's position.The example below returns the latitude and longitude of the user's position:```js\n<script>\nvar x = document.getElementById(\"demo\");\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\r\n function showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude + \n  \"<br>Longitude: \" + position.coords.longitude; \n\r\n }\n</script>```Example explained:The example above is a very basic Geolocation script, with no error handling.",
                "Handling Errors and Rejections": "The second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location:```js\nfunction showError(error) {\n  switch(error.code) {\n    case error.PERMISSION_DENIED:\n      x.innerHTML = \"User denied the request for Geolocation.\"\n      break;\n    case error.POSITION_UNAVAILABLE:\n      x.innerHTML = \"Location information is unavailable.\"\n      break;\n    case error.TIMEOUT:\n      x.innerHTML = \"The request to get user location timed out.\"\n      break;\n    case error.UNKNOWN_ERROR:\n      x.innerHTML = \"An unknown error occurred.\"\n      break;\n  }\n\r\n }```",
                "Displaying the Result in a Map": "To display the result in a map, you need access to a map service, like Google Maps.In the example below, the returned latitude and longitude is used to show the location in a Google Map (using a static image):```js\nfunction showPosition(position) {\n  var latlon = position.coords.latitude + \",\" + position.coords.longitude;\n  var img_url = \"https://maps.googleapis.com/maps/api/staticmap?center=\n \"+latlon+\"&zoom=14&size=400x300&sensor=false&key=YOUR_KEY\";\n document.getElementById(\"mapholder\").innerHTML = \"<img src='\"+img_url+\"'>\";\n\r\n }```",
                "Location-specific Information": "This page has demonstrated how to show a user's position on a map.Geolocation is also very useful for location-specific information, like:",
                "The getCurrentPosition() Method - Return Data": "The getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available:",
                "Geolocation Object - Other interesting Methods": "The Geolocation object also has other interesting methods:The example below shows the watchPosition() method. You need an accurate GPS device to test this (like smartphone): ```js\n<script>\nvar x = document.getElementById(\"demo\");\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.watchPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\r\n function showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude + \n  \"<br>Longitude: \" + position.coords.longitude; \n\r\n }\n</script>```"
            }
        },
        "jqueryselectors": {
            "title": "jQuery Selectors",
            "url": "https://www.w3schools.com/js/js_jquery_selectors.asp",
            "info": {
                "jQuery vs JavaScript": "jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
                "Finding HTML Element by Id": "Return the element with id=\"id01\":```js\nvar myElement = $(\"#id01\");``````js\nvar myElement = document.getElementById(\"id01\");```",
                "Finding HTML Elements by Tag Name": "Return all <p> elements:```js\nvar myElements = $(\"p\");``````js\nvar myElements = document.getElementsByTagName(\"p\");```",
                "Finding HTML Elements by Class Name": "Return all elements with class=\"intro\".```js\nvar myElements = $(\".intro\");``````js\nvar myElements = document.getElementsByClassName(\"intro\");```",
                "Finding HTML Elements by CSS Selectors": "Return a list of all <p> elements with class=\"intro\".```js\nvar myElements = $(\"p.intro\");``````js\nvar myElements = document.querySelectorAll(\"p.intro\");```"
            }
        },
        "jqueryhtml": {
            "title": "jQuery HTML",
            "url": "https://www.w3schools.com/js/js_jquery_elements.asp",
            "info": {
                "jQuery vs JavaScript": "jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
                "Set Text Content": "Set the inner text of an HTML element:```js\nmyElement.text(\"Hello Sweden!\");``````js\nmyElement.textContent = \"Hello Sweden!\";```",
                "Get Text Content": "Get the inner text of an HTML element:```js\nvar myText = myElement.text();``````js\nvar myText = myElement.textContent || myElement.innerText;```",
                "Set HTML Content": "Set the HTML content of an element:```js\nvar myElement.html(\"<p>Hello World</p>\");``````js\nvar myElement.innerHTML = \"<p>Hello World</p>\";```",
                "Get HTML Content": "Get the HTML content of an element:```js\nvar content = myElement.html();``````js\nvar content = myElement.innerHTML;```"
            }
        },
        "jquerycss": {
            "title": "jQuery CSS",
            "url": "https://www.w3schools.com/js/js_jquery_css.asp",
            "info": {
                "jQuery vs JavaScript": "jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
                "Hiding HTML Elements": "Hide an HTML Element:```js\nmyElement.hide();``````js\nmyElement.style.display = \"none\";```",
                "Showing HTML Elements": "Show an HTML Element:```js\nmyElement.show();``````js\nmyElement.style.display = \"\";```",
                "Styling HTML Elements": "Change the font size of an HTML element:```js\nmyElement.css(\"font-size\",\"35px\");``````js\nmyElement.style.fontSize = \"35px\";```"
            }
        },
        "jquerydom": {
            "title": "jQuery DOM",
            "url": "https://www.w3schools.com/js/js_jquery_dom.asp",
            "info": {
                "jQuery vs JavaScript": "jQuery was created in 2006 by John Resig. It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.However, after JavaScript Version 5 (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:",
                "Removing Elements": "Remove an HTML element:```js\n$(\"#id\").remove();``````js\nelement.parentNode.removeChild(element);```",
                "Get Parent Element": "Return the parent of an HTML element:```js\nvar myParent = myElement.parent();``````js\nvar myParent = myElement.parentNode;```"
            }
        },
        "htmldom": {
            "title": "JS HTML DOM",
            "url": "https://www.w3schools.com/js/js_dom_examples.asp",
            "info": {
                "The Document Object": "Document Object Explained",
                "\r\nThe Anchors Collection\r\n": "",
                "\r\nThe Links Collection": "",
                "\r\nThe Forms Collection": "",
                "\r\nThe Images Collection": "",
                "CSS Manipulation": ""
            }
        },
        "htmlinput": {
            "title": "JS HTML Input",
            "url": "https://www.w3schools.com/js/js_input_examples.asp",
            "info": {
                "Button Object": "",
                "Form Object": "",
                "Option and Select Objects": ""
            }
        },
        "htmlobjects": {
            "title": "JS HTML Objects",
            "url": "https://www.w3schools.com/js/js_ex_dom.asp",
            "info": {
                "Anchor Object": "",
                "Area Object": "",
                "Base Object": "",
                "IFrame Object": "",
                "Image Object": "",
                "Table Objects": ""
            }
        },
        "htmlevents": {
            "title": "JS HTML Events",
            "url": "https://www.w3schools.com/js/js_events_examples.asp",
            "info": {
                "Input Events": "",
                "Mouse Events": "",
                "Click Events": "",
                "Load Events": "",
                "Others": ""
            }
        },
        "browser": {
            "title": "JS Browser",
            "url": "https://www.w3schools.com/js/js_ex_browser.asp",
            "info": {
                "Window Object": "Window explained",
                "Screen Object": "Screen explained",
                "Location Object": "Location explained",
                "History Object": "History explained",
                "Navigator Object": "Navigator explained",
                "Popup Boxes": "Popup explained",
                "Timing": "Timing explained",
                "Cookies": ""
            }
        },
        "editor": {
            "title": "JS Editor",
            "url": "https://www.w3schools.com/js/js_editor.asp",
            "info": {
                "JavaScript Editor": "With our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.Click on the \"Try it Yourself\" button to see how it works.",
                "JavaScript Editor Explained": "The window to the left is editable - edit the code and click on the \"Run\" button to view the result in the right window.The \"Result Size\" returns the width and the height of the result window in pixels (even when you resize the browser window).You can control the size of a window with the bar in between the windows (draggable gutter).The icons are explained in the table below:"
            }
        }
    },
    "html": {
        "editors": {
            "title": "HTML Editors",
            "url": "https://www.w3schools.com/html/html_editors.asp",
            "info": {
                "Learn HTML Using Notepad or TextEdit": "Web pages can be created and modified by using professional HTML editors.However, for learning HTML we recommend a simple text editor like Notepad (PC) or TextEdit (Mac).We believe in that using a simple text editor is a good way to learn HTML.Follow the steps below to create your first web page with Notepad or TextEdit.",
                "Step 1: Open Notepad (PC)": "Windows 8 or later:Open the Start Screen (the window symbol at the bottom left on your screen). Type Notepad.Windows 7 or earlier:Open Start > Programs > Accessories > Notepad",
                "Step 1: Open TextEdit (Mac)": "Open Finder > Applications > TextEditAlso change some preferences to get the application to save files correctly.In Preferences > Format > choose \"Plain Text\"Then under \"Open and Save\", check the box that says \"Display HTML files as HTML code instead of formatted text\".Then open a new document to place the code.",
                "Step 2: Write Some HTML": "Write or copy the following HTML code into Notepad:```html\n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Heading</h1>\n\r\n<p>My first paragraph.</p>\n</body>\n</html>```",
                "Step 3: Save the HTML Page": "Save the file on your computer. Select File > Save as in the Notepad menu.Name the file \"index.htm\" and set the encoding to UTF-8 (which is the preferred encoding for HTML files).",
                "Step 4: View the HTML Page in Your Browser": "Open the saved HTML file in your favorite browser (double click on the file, or right-click - and choose \"Open with\").The result will look much like this:",
                "W3Schools Online Editor - \"Try it Yourself\"": "With our free online editor, you can edit the HTML code and view the result in your browser.It is the perfect tool when you want to test code fast. It also has color coding and the ability to save and share code with others:```html\n<!DOCTYPE html>\n\r\n<html>\n<head>\n<title>Page Title</title>\n\r\n</head>\n<body>\n<h1>This is a Heading</h1>\n<p>This is a paragraph.</p>\n\r\n</body>\n</html>```Click on the \"Try it Yourself\" button to see how it works."
            }
        },
        "basic": {
            "title": "HTML Basic",
            "url": "https://www.w3schools.com/html/html_basic.asp",
            "info": {
                "HTML Documents": "All HTML documents must start with a document type declaration: <!DOCTYPE html>.The HTML document itself begins with <html> and ends with </html>.The visible part of the HTML document is between <body> and </body>. ```html\n<!DOCTYPE html>\n<html>\n<body>\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n</body>\n</html>```",
                "The <!DOCTYPE> Declaration": "The <!DOCTYPE> declaration represents the document type, and helps browsers to display web pages correctly.It must only appear once, at the top of the page (before any HTML tags). The <!DOCTYPE> declaration is not case sensitive.The <!DOCTYPE> declaration for HTML5 is:```html\n<!DOCTYPE html>```",
                "HTML Headings": "HTML headings are defined with the <h1> to <h6> tags.<h1> defines the most important heading. <h6> defines the least important heading:\u00a0```html\n<h1>This is heading 1</h1>\n\r\n<h2>This is heading 2</h2>\n\r\n<h3>This is heading 3</h3>```",
                "HTML Paragraphs": "HTML paragraphs are defined with the <p> tag:```html\n<p>This is a paragraph.</p>\n\r\n<p>This is another paragraph.</p>```",
                "HTML Links": "HTML links are defined with the <a> tag:```html\n<a href=\"https://www.w3schools.com\">This is a link</a>```The link's destination is specified in the href attribute.\u00a0Attributes are used to provide additional information about HTML elements.You will learn more about attributes in a later chapter.",
                "HTML Images": "HTML images are defined with the <img> tag.The source file (src), alternative text (alt), width, and height are provided as attributes:```html\n<img src=\"w3schools.jpg\" alt=\"W3Schools.com\" width=\"104\" height=\"142\">```",
                "How to View HTML Source?": "Have you ever seen a Web page and wondered \"Hey! How did they do that?\"Right-click in an HTML page and select \"View Page Source\" (in Chrome) or \"View Source\" (in Edge), or similar in other browsers. This will open a window containing the HTML source code of the page.Right-click on an element (or a blank area), and choose \"Inspect\" or \"Inspect Element\" to see what elements are made up of (you will see both the HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the Elements or Styles panel that opens."
            }
        },
        "elements": {
            "title": "HTML Elements",
            "url": "https://www.w3schools.com/html/html_elements.asp",
            "info": {
                "HTML Elements": "An HTML element is defined by a start tag, some content, and an end tag:The HTML element is everything from the start tag to the end tag:",
                "Nested HTML Elements": "HTML elements can be nested (this means that elements can contain other elements).All HTML documents consist of nested HTML elements.The following example contains four HTML elements (<html>, <body>, <h1> and <p>):```html\n<!DOCTYPE html>\n\r\n<html>\n<body>\n\r\n <h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\r\n</body>\n</html>```The <html> element is the root element and it defines the whole HTML document.It has a start tag <html> and an end tag </html>.Then, inside the <html> element there is a <body> element:```html\n<body>\n\r\n <h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\r\n</body>```The <body> element defines the document's body.It has a start tag <body> and an end tag </body>.Then, inside the <body> element there is two other elements:<h1> and <p>:```html\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>```The <h1> element defines a heading.It has a start tag <h1> and an end tag </h1>:```html\n<h1>My First Heading</h1>```The <p> element defines a paragraph.It has a start tag <p> and an end tag </p>:",
                "Never Skip the End Tag": "Some HTML elements will display correctly, even if you forget the end tag:```html\n<html>\n<body>\n\r\n <p>This is a paragraph\n\r\n <p>This is a paragraph\n\n</body>\n</html>```However, never rely on this! Unexpected results and errors may occur if you forget the end tag!",
                "Empty HTML Elements": "HTML elements with no content are called empty elements.The <br> tag defines a line break, and is an empty element without a closing tag:```html\n<p>This is a <br> paragraph with a line break.</p>```",
                "HTML is Not Case Sensitive": "HTML tags are not case sensitive: <P> means the same as <p>.The HTML standard does not require lowercase tags, but W3Crecommends lowercase in HTML, and demands lowercase for stricter document types like XHTML.",
                "HTML Tag Reference": "W3Schools' tag reference contains additional information about these tags and their attributes."
            }
        },
        "attributes": {
            "title": "HTML Attributes",
            "url": "https://www.w3schools.com/html/html_attributes.asp",
            "info": {
                "HTML Attributes": "",
                "The href Attribute": "The <a> tag defines a hyperlink. The href attribute specifies the URL of the page the link goes to:```html\n<a href=\"https://www.w3schools.com\">Visit W3Schools</a>```You will learn more about links in our HTML Linkschapter.",
                "The src Attribute": "The <img> tag is used to embed an image in an HTML page. The src attribute specifies the path to the image to be displayed:```html\n<img src=\"img_girl.jpg\">```",
                "The width and height Attributes": "The <img> tag should also contain thewidth and height attributes, which specifies the width and height of the image (in pixels):```html\n<img src=\"img_girl.jpg\" width=\"500\" height=\"600\">```",
                "The alt Attribute": "The required alt attribute for the <img> tag specifies an alternate text for an image, if the image for some reason cannot be displayed. This can be due to slow connection, or an error in the src attribute, or if the user uses a screen reader.```html\n<img src=\"img_girl.jpg\" alt=\"Girl with a jacket\">``````html\n<img src=\"img_typo.jpg\" alt=\"Girl with a jacket\">```You will learn more about images in our HTML Images chapter.",
                "The style Attribute": "The style attribute is used to add styles to an element, such as color, font, size, and more.```html\n<p style=\"color:red;\">This is a red paragraph.</p>```You will learn more about styles in our HTML Styles chapter.",
                "The lang Attribute": "You should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers.The following example specifies English as the language:```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n...\n</body>\n</html>```Country codes can also be added to the language code in the lang attribute. So, the first two characters define the language of the HTML page, and the last two characters define the country.The following example specifies English as the language and United States as the country:```html\n<!DOCTYPE html>\n<html lang=\"en-US\">\n<body>\n...\n</body>\n</html>```You can see all the language codes in ourHTML Language Code Reference.",
                "The title Attribute": "The title attribute defines some extra information about an element.The value of the title attribute will be displayed as a tooltip when you mouse over the element:```html\n<p title=\"I'm a tooltip\">This is a paragraph.</p>```",
                "We Suggest: Always Use Lowercase Attributes": "The HTML standard does not require lowercase attribute names.The title attribute (and all other attributes) can be written with uppercase or lowercase like title or TITLE.However, W3C recommends lowercase attributes in HTML, and demands lowercase attributes for stricter document types like XHTML.",
                "We Suggest: Always Quote Attribute Values": "The HTML standard does not require quotes around attribute values.However, W3C recommends quotes in HTML, and demands quotes for stricter document types like XHTML.```html\n<a href=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>``````html\n<a href=https://www.w3schools.com/html/>Visit our HTML tutorial</a>```Sometimes you have to use quotes. This example will not display the title attribute correctly, because it contains a space:```html\n<p\r\n title=About W3Schools>```",
                "Single or Double Quotes?": "Double quotes around attribute values are the most common in HTML, but single quotes can also be used.In some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:```html\n<p title='John \"ShotGun\" Nelson'>```Or vice versa:```html\n<p title=\"John 'ShotGun' Nelson\">```",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML Attribute Reference": ""
            }
        },
        "headings": {
            "title": "HTML Headings",
            "url": "https://www.w3schools.com/html/html_headings.asp",
            "info": {
                "HTML Headings": "HTML headings are defined with the <h1> to <h6> tags.<h1> defines the most important heading. <h6> defines the least important heading.```html\n<h1>Heading 1</h1>\n\r\n<h2>Heading 2</h2>\n\r\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>```",
                "Headings Are Important": "Search engines use the headings to index the structure and content of your web pages.Users often skim a page by its headings. It is important to use headings to show the document structure.<h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on.",
                "Bigger Headings": "Each HTML heading has a default size. However, you can specify the size for any heading with the style attribute, using the CSS font-size property:```html\n<h1 style=\"font-size:60px;\">Heading 1</h1>```",
                "HTML Exercises": "",
                "HTML Tag Reference": "W3Schools' tag reference contains additional information about these tags and their attributes."
            }
        },
        "paragraphs": {
            "title": "HTML Paragraphs",
            "url": "https://www.w3schools.com/html/html_paragraphs.asp",
            "info": {
                "HTML Paragraphs": "The HTML <p> element defines a paragraph.A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.```html\n<p>This is a paragraph.</p>\n\r\n<p>This is another paragraph.</p>```",
                "HTML Display": "You cannot be sure how HTML will be displayed.Large or small screens, and resized windows will create different results. With HTML, you cannot change the display by adding extra spaces or extra lines in your HTML code.The browser will automatically remove any extra spaces and lines when the page is displayed:```html\n<p>\nThis paragraph\ncontains a lot of lines\nin the source code,\nbut \r\n the browser \nignores it.\n</p>\n<p>\nThis paragraph\ncontains         \r\n a lot of spaces\nin the source         \r\n code,\nbut the        browser \nignores \r\n it.\n</p>```",
                "HTML Horizontal Rules": "The <hr> tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule.The <hr> element is used to separate content (or define a change) in an HTML page:```html\n<h1>This is heading 1</h1>\n<p>This is some text.</p>\n<hr>\n<h2>This is heading 2</h2>\n<p>This is some other text.</p>\n<hr>```The <hr> tag is an empty tag, which means that it has no end tag.",
                "HTML Line Breaks": "The HTML <br> element defines a line break.Use <br> if you want a line break (a new line) without starting a new paragraph:```html\n<p>This is<br>a paragraph<br>with line breaks.</p>```The <br> tag is an empty tag, which means that it has no end tag.",
                "The Poem Problem": "This poem will display on a single line:```html\n<p>\n  My Bonnie lies over \r\n the ocean.\n  My Bonnie lies over the sea.\n  My Bonnie \r\n lies over the ocean.\n  Oh, bring back my Bonnie to me.\n</p>```",
                "Solution - The HTML <pre> Element": "The HTML <pre> element defines preformatted text.The text inside a <pre> element is displayed in a fixed-width font (usually Courier), and it preserves both spaces and line breaks:```html\n<pre>\n  My Bonnie lies over the ocean.\n\n  My Bonnie lies over the sea.\n  My Bonnie lies over the \r\nocean.\n  Oh, bring back my Bonnie to me.\n</pre>```",
                "HTML Exercises": "",
                "HTML Tag Reference": "W3Schools' tag reference contains additional information about HTML elements and their attributes."
            }
        },
        "styles": {
            "title": "HTML Styles",
            "url": "https://www.w3schools.com/html/html_styles.asp",
            "info": {
                "The HTML Style Attribute": "Setting the style of an HTML element, can be done with the style attribute.The HTML style attribute has the following syntax:```html\n<tagname\r\nstyle=\"property:value;\">```The property is a CSS property. The value is a CSS value.",
                "Background Color": "The CSS background-color property defines the background color for an HTML element.```html\n<body style=\"background-color:powderblue;\">\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n</body>``````html\n<body>\n<h1 style=\"background-color:powderblue;\">This is a heading</h1>\n<p style=\"background-color:tomato;\">This is a paragraph.</p>\n</body>```",
                "Text Color": "The CSS color property defines the text color for an HTML element:```html\n<h1 style=\"color:blue;\">This is a heading</h1>\n\r\n <p style=\"color:red;\">This is a paragraph.</p>```",
                "Fonts": "The CSS font-family property defines the font to be used  for an HTML element:```html\n<h1 style=\"font-family:verdana;\">This is a heading</h1>\n<p style=\"font-family:courier;\">This is a paragraph.</p>```",
                "Text Size": "The CSS font-size property defines the text size for an HTML element:```html\n<h1 style=\"font-size:300%;\">This is a heading</h1>\n<p \r\nstyle=\"font-size:160%;\">This is a paragraph.</p>```",
                "Text Alignment": "The CSS text-align property defines the horizontal text alignment for an HTML element:```html\n<h1 style=\"text-align:center;\">Centered Heading</h1>\n\r\n <p style=\"text-align:center;\">Centered paragraph.</p>```",
                "Chapter Summary": "",
                "HTML Exercises": ""
            }
        },
        "formatting": {
            "title": "HTML Formatting",
            "url": "https://www.w3schools.com/html/html_formatting.asp",
            "info": {
                "HTML Formatting Elements": "Formatting elements were designed to display special types of text:",
                "HTML <b> and <strong> Elements": "The HTML <b> element defines bold text, without any extra importance.```html\n<b>This text is bold</b>```The HTML <strong> element defines text with strong importance. The content inside is typically displayed in bold.```html\n<strong>This text is    important!</strong>```",
                "HTML <i> and <em> Elements": "The HTML <i> element defines a part of text in an alternate voice or mood. The content inside is typically displayed in italic.Tip: The <i> tag is often used to indicate a technical term, a phrase from another language, a thought, a ship name, etc.```html\n<i>This text is italic</i>```The HTML <em> element defines emphasized text. The content inside is typically displayed in italic.Tip: A screen reader will pronounce the words in <em> with an emphasis, using verbal stress.```html\n<em>This text is \r\n emphasized</em>```",
                "HTML <small> Element": "The HTML <small> element defines smaller text:```html\n<small>This is some smaller text.</small>```",
                "HTML <mark> Element": "The HTML <mark> element defines text that should be marked or highlighted:```html\n<p>Do not forget to buy <mark>milk</mark> today.</p>```",
                "HTML <del> Element": "The HTML <del> element defines text that has been deleted from a document. Browsers will usually strike a line through deleted text:```html\n<p>My favorite color is <del>blue</del> red.</p>```",
                "HTML <ins> Element": "The HTML <ins> element defines a text that has been inserted into a document. Browsers will usually underline inserted text:```html\n<p>My favorite color is <del>blue</del> <ins>red</ins>.</p>```",
                "HTML <sub> Element": "The HTML <sub> element defines subscript text. Subscript text appears half a character below the normal line, and is sometimes rendered in a smaller font. Subscript text can be used for chemical formulas, like H2O:```html\n<p>This \r\n is <sub>subscripted</sub> text.</p>```",
                "HTML <sup> Element": "The HTML <sup> element defines superscript text. Superscript text appears half a character above the normal line, and is sometimes rendered in a smaller font. Superscript text can be used for footnotes, like WWW[1]:```html\n<p>This \r\n is <sup>superscripted</sup> text.</p>```",
                "HTML Exercises": "",
                "HTML Text Formatting Elements": ""
            }
        },
        "quotations": {
            "title": "HTML Quotations",
            "url": "https://www.w3schools.com/html/html_quotation_elements.asp",
            "info": {
                "HTML <blockquote> for Quotations": "The HTML <blockquote> element defines a section that is quoted from another source.Browsers usually indent <blockquote> elements.```html\n<p>Here is a quote from WWF's website:</p>\n<blockquote cite=\"http://www.worldwildlife.org/who/index.html\">\n\r\n For 50 years, WWF has been protecting the future of nature.\nThe world's \r\n leading conservation organization,\nWWF works in 100 countries and is \r\n supported by\n1.2 million members in the United States and\nclose to 5 \r\n million globally.\n</blockquote>```",
                "HTML <q> for Short Quotations": "The HTML <q> tag defines a short quotation.Browsers normally insert quotation marks around the quotation.```html\n<p>WWF's goal is to: <q>Build a future where people live in harmony with \r\n nature.</q></p>```",
                "HTML <abbr> for Abbreviations": "The HTML <abbr> tag defines an abbreviation or an acronym, like \"HTML\", \"CSS\", \"Mr.\", \"Dr.\", \"ASAP\", \"ATM\".Marking abbreviations can give useful information to browsers, translation systems and search-engines.Tip: Use the global title attribute to show the description for the abbreviation/acronym when you mouse over the element.\u00a0```html\n<p>The <abbr title=\"World Health Organization\">WHO</abbr> was founded in \r\n 1948.</p>```",
                "HTML <address> for Contact Information": "The HTML <address> tag defines the contact information for the author/owner of a document or an article.The contact information can be an email address, URL, physical address, phone number, social media handle, etc.The text in the <address> element usually renders in italic, and browsers willalways add a line break before and after the <address> element.```html\n<address>\nWritten by John Doe.<br> \nVisit us at:<br>\nExample.com<br>\n\r\n Box 564, Disneyland<br>\nUSA\n</address>```",
                "HTML <cite> for Work Title": "The HTML <cite> tag defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).Note: A person's name is not the title of a work.The text in the <cite> element usually renders in italic.```html\n<p><cite>The Scream</cite> by Edvard Munch. Painted in 1893.</p>```",
                "HTML <bdo> for Bi-Directional Override": "BDO stands for Bi-Directional Override.The HTML <bdo> tag is used to override the current text direction:```html\n<bdo dir=\"rtl\">This text will be written from right to left</bdo>```",
                "HTML Exercises": "",
                "HTML Quotation and Citation Elements": ""
            }
        },
        "comments": {
            "title": "HTML Comments",
            "url": "https://www.w3schools.com/html/html_comments.asp",
            "info": {
                "HTML Comment Tags": "You can add comments to your HTML source by using the following syntax:```html\n<!-- Write your comments here -->```Notice that there is an exclamation point (!) in the start tag, but not in the end tag.With comments you can place notifications and reminders in your HTML code:```html\n<!-- This is a comment -->\n<p>This is a paragraph.</p>\n\n<!-- Remember to add more information here -->```Comments are also great for debugging HTML, because you can comment out HTML lines of code, one at a time, to search for errors:```html\n<!-- Do not display this image at the moment\n\r\n<img border=\"0\" src=\"pic_trulli.jpg\" \r\nalt=\"Trulli\">\n\r\n-->```",
                "HTML Exercises": ""
            }
        },
        "colors": {
            "title": "HTML Colors",
            "url": "https://www.w3schools.com/html/html_colors.asp",
            "info": {
                "Color Names": "In HTML, a color can be specified by using a color name:Try it Yourself \u00bbHTML supports 140 standard color names.",
                "Background Color": "You can set the background color for HTML elements:```html\n<h1 style=\"background-color:DodgerBlue;\">Hello World</h1>\n<p style=\"background-color:Tomato;\">Lorem ipsum...</p>```",
                "Text Color": "You can set the color of text:Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat.Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.```html\n<h1 style=\"color:Tomato;\">Hello World</h1>\n<p style=\"color:DodgerBlue;\">Lorem ipsum...</p>\n<p style=\"color:MediumSeaGreen;\">Ut wisi enim...</p>```",
                "Border Color": "You can set the color of borders:",
                "Hello World": "```html\n<h1 style=\"border:2px solid Tomato;\">Hello World</h1>\n<h1 style=\"border:2px solid DodgerBlue;\">Hello World</h1>\n<h1 style=\"border:2px solid Violet;\">Hello World</h1>```",
                "Color Values": "In HTML, colors can also be specified using RGB values, HEX values, HSL values, RGBA values, and HSLA values.The following three <div> elements have their background color set with RGB, HEX, and HSL values:The following two <div> elements have their background color set with RGBA and HSLA values, which adds an Alpha channel to the color (here we have 50% transparancy):```html\n<h1 style=\"background-color:rgb(255, 99, 71);\">...</h1>\n<h1 style=\"background-color:#ff6347;\">...</h1>\n<h1 style=\"background-color:hsl(9, 100%, 64%);\">...</h1>\n<h1 style=\"background-color:rgba(255, 99, 71, 0.5);\">...</h1>\n<h1 style=\"background-color:hsla(9, 100%, 64%, 0.5);\">...</h1>```"
            }
        },
        "rgb": {
            "title": "RGB",
            "url": "https://www.w3schools.com/html/html_colors_rgb.asp",
            "info": {
                "RGB Color Values": "In HTML, a color can be specified as an RGB value, using this formula:rgb(red, green, blue)Each parameter (red, green, and blue) defines the intensity of the color with a value between 0 and 255.This means that there are 256 x 256 x 256 = 16777216 possible colors!For example, rgb(255, 0, 0) is displayed as red, because red is set to its highest value (255), and the other two (green and blue) are set to 0.Another example, rgb(0, 255, 0) is displayed as green, because green is set to its highest value (255), and the other two (red and blue) are set to 0.To display black, set all color parameters to 0, like this: rgb(0, 0, 0).To display white, set all color parameters to 255, like this: rgb(255, 255, 255). Experiment by mixing the RGB values below:",
                "Shades of Gray": "Shades of gray are often defined using equal values for all three parameters:",
                "RGBA Color Values": "RGBA color values are an extension of RGB color values with an Alpha channel - which specifies the opacity for a color.An RGBA color value is specified with:rgba(red, green, blue, alpha)The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):Experiment by mixing the RGBA values below:"
            }
        },
        "hex": {
            "title": "HEX",
            "url": "https://www.w3schools.com/html/html_colors_hex.asp",
            "info": {
                "HEX Color Values": "In HTML, a color can be specified using a hexadecimal value in the form:#rrggbbWhere rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).For example, #ff0000 is displayed as red, because red is set to its highest value (ff), and the other two (green and blue) are set to 00.Another example, #00ff00 is displayed as green, because green is set to its highest value (ff), and the other two (red and blue) are set to 00.To display black, set all color parameters to 00, like this: #000000.To display white, set all color parameters to ff, like this: #ffffff. Experiment by mixing the HEX values below:",
                "Shades of Gray": "Shades of gray are often defined using equal values for all three parametere:"
            }
        },
        "hsl": {
            "title": "HSL",
            "url": "https://www.w3schools.com/html/html_colors_hsl.asp",
            "info": {
                "HSL Color Values": "In HTML, a color can be specified using hue, saturation, and lightness (HSL) in the form:hsl(hue, saturation, lightness)Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color.Lightness is also a percentage value, 0% is black, and 100% is white.Experiment by mixing the HSL values below:Saturation can be described as the intensity of a color.100% is pure color, no shades of gray50% is 50% gray, but you can still see the color.0% is completely gray, you can no longer see the color.The lightness of a color can be described as how much light you want to give the color, where 0% means no light (black), 50% means 50% light (neither dark nor light) 100% means full lightness (white).",
                "Shades of Gray": "Shades of gray are often defined by setting the hue and saturation to 0, and adjust the lightness from 0% to 100% to get darker/lighter shades:",
                "HSLA Color Values": "HSLA color values are an extension of HSL color values with an Alpha channel - which specifies the opacity for a color.An HSLA color value is specified with:hsla(hue, saturation, lightness, alpha)The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all):Experiment by mixing the HSLA values below:"
            }
        },
        "css": {
            "title": "HTML CSS",
            "url": "https://www.w3schools.com/html/html_css.asp",
            "info": {
                "What is CSS?": "Cascading Style Sheets (CSS) is used to format the layout of a webpage.With CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors to be used, different displays for different devices and screen sizes, and much more!",
                "Using CSS": "CSS can be added to HTML documents in 3 ways:The most common way to add CSS, is to keep the styles in external CSS files. However, in this tutorial we will use inline and internal styles, because this is easier to demonstrate, and easier for you to try it yourself.",
                "Inline CSS": "An inline CSS is used to apply a unique style to a single HTML element.An inline CSS uses the style attribute of an HTML element.The following example sets the text color of the <h1> element to blue, and the text color of the <p> element to red:```html\n<h1 style=\"color:blue;\">A Blue Heading</h1>\n<p style=\"color:red;\">A red paragraph.</p>```",
                "Internal CSS": "An internal CSS is used to define a style for a single HTML page.An internal CSS is defined in the <head> section of an HTML page, within a <style> element.The following example sets the text color of ALL the <h1> elements (on that page) to blue, and the text color of ALL the <p> elements to red. In addition, the page will be displayed with a \"powderblue\" background color:\u00a0```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n\r\n body {background-color: powderblue;}\nh1   {color: blue;}\np    {color: red;}\n\r\n</style>\n</head>\n<body>\n<h1>This is a \r\n heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>```",
                "External CSS": "An external style sheet is used to define the style for many HTML pages.To use an external style sheet, add a link to it in the <head> section of each HTML page:```html\n<!DOCTYPE html>\n<html>\n<head>\n<link rel=\"stylesheet\" href=\"styles.css\">\n\r\n</head>\n<body>\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>```The external style sheet can be written in any text editor. The file must not contain any HTML code, and must be saved with a .css extension.Here is how the \"styles.css\" file looks like:```html\nbody {\n  background-color: powderblue;\n}\nh1 {\n  color: blue;\n}\np {\n  color: red;\n}```",
                "CSS Colors, Fonts and Sizes": "Here, we will demonstrate some commonly used CSS properties. You will learn more about them later.The CSS color property defines the text color to be used.The CSS font-family property defines the font to be used.The CSS font-size  property defines the text size to be used.```html\n<!DOCTYPE html>\n\r\n <html>\n<head>\n<style>\nh1 {\n  color: blue;\n  font-family: verdana;\n  font-size: 300%;\n}\np  {\n  color: red;\n  \r\n font-family: courier;\n  font-size: 160%;\n}\n</style>\n</head>\n<body>\n\r\n <h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>```",
                "CSS Border": "The CSS border property defines a border around an HTML element.Tip: You can define a border for nearly all HTML elements.```html\np {\n  border: 2px \r\nsolid powderblue;\n}```",
                "CSS Padding": "The CSS padding property defines a padding (space) between the text and the border.```html\np {\n  border: 2px \r\nsolid powderblue;\n  padding: 30px;\n}```",
                "CSS Margin": "The CSS margin property defines a margin (space) outside the border.```html\np {\n  border: 2px \r\nsolid powderblue;\n  margin: 50px;\n\r\n }```",
                "Link to External CSS": "External style sheets can be referenced with a full URL or with a path relative to the current web page.```html\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/html/styles.css\">``````html\n<link rel=\"stylesheet\" href=\"/html/styles.css\">``````html\n<link rel=\"stylesheet\" href=\"styles.css\">```",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML Style Tags": ""
            }
        },
        "links": {
            "title": "HTML Links",
            "url": "https://www.w3schools.com/html/html_links.asp",
            "info": {
                "HTML Links - Hyperlinks": "HTML links are hyperlinks.You can click on a link and jump to another document.When you move the mouse over a link, the mouse arrow will turn into a little hand.",
                "HTML Links - Syntax": "The HTML <a> tag defines a hyperlink. It has the following syntax:```html\n<a href=\"url\">link text</a>```The most important attribute of the <a>  element is the href attribute, which indicates the link's destination.The link text is the part that will be visible to the reader.Clicking on the link text, will send the reader to the specified URL address.```html\n<a href=\"https://www.w3schools.com/\">Visit W3Schools.com!</a>```By default, links will appear as follows in all browsers:",
                "HTML Links - The target Attribute": "By default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link.The target attribute specifies where to open the linked document.The target attribute can have one of the following values:```html\n<a href=\"https://www.w3schools.com/\"\r\ntarget=\"_blank\">Visit W3Schools!</a>```",
                "Absolute URLs vs. Relative URLs": "Both examples above are using an absolute URL (a full web address) in the href attribute.A local link (a link to a page within the same website) is specified with a relative URL (without the \"https://www\" part):```html\n<h2>Absolute URLs</h2>\n<p><a href=\"https://www.w3.org/\">W3C</a></p>\n<p><a href=\"https://www.google.com/\">Google</a></p>\n<h2>Relative URLs</h2>\n<p><a href=\"html_images.asp\">HTML Images</a></p>\n<p><a href=\"/css/default.asp\">CSS Tutorial</a></p>```",
                "HTML Links - Use an Image as a Link": "To use an image as a link, just put the <img> tag inside the <a> tag:```html\n<a href=\"default.asp\">\n<img src=\"smiley.gif\" alt=\"HTML tutorial\" style=\"width:42px;height:42px;\">\n</a>```",
                "Link to an Email Address": "Use mailto: inside the href attribute to create a link that opens the user's email program (to let them send a new email):```html\n<a href=\"mailto:someone@example.com\">Send email</a>```",
                "Button as a Link": "To use an HTML button as a link, you have to add some JavaScript code.JavaScript allows you to specify what happens at certain events, such as a click of a button:```html\n<button onclick=\"document.location='default.asp'\">HTML Tutorial</button>```",
                "Link Titles": "The title attribute specifies extra information about an element.The information is most often shown as a tooltip text when the mouse moves over the element.```html\n<a href=\"https://www.w3schools.com/html/\" title=\"Go to W3Schools HTML section\">Visit our HTML Tutorial</a>```",
                "More on Absolute URLs and Relative URLs": "```html\n<a href=\"https://www.w3schools.com/html/default.asp\">HTML tutorial</a>``````html\n<a href=\"/html/default.asp\">HTML tutorial</a>``````html\n<a href=\"default.asp\">HTML tutorial</a>```",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML Link Tags": ""
            }
        },
        "linkcolors": {
            "title": "Link Colors",
            "url": "https://www.w3schools.com/html/html_links_colors.asp",
            "info": {
                "HTML Link Colors": "By default, a link will appear like this (in all browsers):You can change the link state colors, by using CSS:```html\n<style>\na:link {\n  color: green; \n  background-color: transparent; \n  text-decoration: none;\n}\n\r\na:visited {\n  color: pink;\n  background-color: transparent;\n  text-decoration: none;\n}\na:hover {\n  color: red;\n  background-color: transparent;\n  text-decoration: underline;\n}\na:active {\n  color: yellow;\n  background-color: transparent;\n  text-decoration: underline;\n}\n</style>```",
                "Link Buttons": "A link can also be styled as a button, by using CSS:```html\n<style>\na:link, a:visited {\n  background-color: #f44336;\n  color: white;\n  padding: 15px 25px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n}\na:hover, a:active {\n  background-color: red;\n}\n</style>```",
                "HTML Link Tags": ""
            }
        },
        "linkbookmarks": {
            "title": "Link Bookmarks",
            "url": "https://www.w3schools.com/html/html_links_bookmarks.asp",
            "info": {
                "Create a Bookmark in HTML": "Bookmarks can be useful if a web page is very long.To create a bookmark - first create the bookmark, then add a link to it.When the link is clicked, the page will scroll down or up to the location with the bookmark.",
                "Example": "First, use the id attribute to create a bookmark:```html\n<h2 id=\"C4\">Chapter 4</h2>```Then, add a link to the bookmark (\"Jump to Chapter 4\"), from within the same page:```html\n<a href=\"#C4\">Jump to Chapter 4</a>```You can also add a link to a bookmark on another page:```html\n<a href=\"html_demo.html#C4\">Jump to Chapter 4</a>```",
                "Chapter Summary": "",
                "HTML Link Tags": ""
            }
        },
        "images": {
            "title": "HTML Images",
            "url": "https://www.w3schools.com/html/html_images.asp",
            "info": {
                "HTML Images Syntax": "The HTML <img> tag is used to embed an image in a web page.Images are not technically inserted into a web page; images are linked to web pages. The <img> tag creates a holding space for the referenced image.The <img> tag\u00a0is empty, it contains attributes only, and does not have a closing tag.The <img> tag has two required attributes:```html\n<img src=\"url\" alt=\"alternatetext\">```",
                "The src Attribute": "The required src attribute specifies the path (URL) to the image.Note: When a web page loads; it is the browser, at that moment, that gets the image from a web server and inserts it into the page. Therefore, make sure that the image actually stay in the same spot in relation to the web page, otherwise your visitors will get a broken link icon. The broken link icon is shown if the browser cannot find the image.```html\n<img src=\"img_chania.jpg\" alt=\"Flowers in Chania\">```",
                "The alt Attribute": "The required alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).The value of the alt attribute should describe the image:```html\n<img src=\"img_chania.jpg\" alt=\"Flowers in Chania\">```If a browser cannot find an image, it will display the value of the alt attribute:```html\n<img src=\"wrongname.gif\" alt=\"Flowers in Chania\">```",
                "Image Size - Width and Height": "You can use the style attribute to specify the width and height of an image.```html\n<img src=\"img_girl.jpg\" alt=\"Girl in a jacket\" style=\"width:500px;height:600px;\">```Alternatively, you can use the width and height attributes:```html\n<img src=\"img_girl.jpg\" alt=\"Girl in a jacket\" width=\"500\" height=\"600\">```The width and height attributes always define the width and height of the image in pixels.",
                "Width and Height, or Style?": "The width, height, and style attributes are all valid in HTML.However, we suggest using the style attribute. It prevents styles sheets from changing the size of images:```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\nimg { \n  width: 100%; \n}\n\r\n </style>\n</head>\n<body>\n<img src=\"html5.gif\" alt=\"HTML5 Icon\" width=\"128\" height=\"128\">\n<img src=\"html5.gif\" alt=\"HTML5 Icon\" style=\"width:128px;height:128px;\">\n</body>\n</html>```",
                "Images in Another Folder": "If you have your images in a sub-folder, you must include the folder name in the src attribute:```html\n<img src=\"/images/html5.gif\" \r\nalt=\"HTML5 Icon\" style=\"width:128px;height:128px;\">```",
                "Images on Another Server": "Some web sites store their images on another server.Actually, you can access images from any web address in the world:```html\n<img src=\"https://www.w3schools.com/images/w3schools_green.jpg\" alt=\"W3Schools.com\">```",
                "Animated Images": "HTML allows animated GIFs:```html\n<img src=\"programming.gif\" alt=\"Computer Man\" style=\"width:48px;height:48px;\">```",
                "Image as a Link": "To use an image as a link, put the <img> tag inside the <a> tag:```html\n<a href=\"default.asp\">\n  <img src=\"smiley.gif\" alt=\"HTML tutorial\" \r\nstyle=\"width:42px;height:42px;\">\n</a>```",
                "Image Floating": "Use the CSS float property to let the image float to the right or to the left of a text:```html\n<p><img src=\"smiley.gif\" alt=\"Smiley face\"\r\nstyle=\"float:right;width:42px;height:42px;\">\n\r\n The image will float to the right of \r\nthe text.</p>\n<p><img src=\"smiley.gif\" alt=\"Smiley face\"\r\nstyle=\"float:left;width:42px;height:42px;\">\n\r\n The image will float to the left of \r\nthe text.</p>```",
                "Common Image Formats": "Here are the most common image file types, which are supported in all browsers (Chrome, Edge, Firefox, Safari, Opera):",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML Image Tags": ""
            }
        },
        "imagemap": {
            "title": "Image Map",
            "url": "https://www.w3schools.com/html/html_images_imagemap.asp",
            "info": {
                "Image Maps": "The HTML <map> tag defines an image map. An image map is an image with clickable areas. The areas are defined with one or more <area> tags. Try to click on the computer, phone, or the cup of coffee in the image below:```html\n<img src=\"workplace.jpg\" alt=\"Workplace\" usemap=\"#workmap\">\n\n<map name=\"workmap\">\n  <area shape=\"rect\" coords=\"34,44,270,350\" alt=\"Computer\" href=\"computer.htm\">\n  <area shape=\"rect\" coords=\"290,172,333,250\" alt=\"Phone\" href=\"phone.htm\">\n  <area shape=\"circle\" coords=\"337,300,44\" alt=\"Coffee\" href=\"coffee.htm\">\n</map>```",
                "How Does it Work?": "The idea behind an image map is that you should be able to perform different actions depending on where in the image you click.To create an image map you need an image, and some HTML code that describes the clickable areas.",
                "The Image": "The image is inserted using the <img> tag. The only difference from other images is that you must add a usemap attribute:```html\n<img src=\"workplace.jpg\" alt=\"Workplace\" usemap=\"#workmap\">```The usemap value starts with a hash tag# followed by the name of the image map, and is used to create a relationship between the image and the image map.",
                "Create Image Map": "Then, add a <map> element.The <map> element is used to create an image map, and is linked to the image by using the required name attribute:```html\n<map name=\"workmap\">```The name attribute must have the same value as the<img>'s usemap attribute .",
                "The Areas": "Then, add the clickable areas.A clickable area is defined using an <area> element.You must define the shape of the clickable area, and you can choose one of these values:You must also define some coordinates to be able to place the clickable area onto the image.\u00a0The coordinates for shape=\"rect\" come in pairs, one for the x-axis and one for the y-axis.So, the coordinates 34,44 is located 34 pixels from the left margin and 44 pixels from the top:The coordinates 270,350 is located 270 pixels from the left margin and 350 pixels from the top:Now we have enough data to create a clickable rectangular area:```html\n<area shape=\"rect\" coords=\"34, 44, 270, 350\" href=\"computer.htm\">```This is the area that becomes clickable and will send the user to the page \"computer.htm\":To add a circle area, first locate the coordinates of the center of the circle:337,300Then specify the radius of the circle:44 pixelsNow you have enough data to create a clickable circular area:This is the area that becomes clickable and will send the user to the page \"coffee.htm\":The shape=\"poly\" contains several coordinate points, which creates a shape formed with straight lines (a polygon).This can be used to create any shape.Like maybe a croissant shape!How can we make the croissant in the image below become a clickable link?We have to find the x and y coordinates for all edges of the croissant:The coordinates come in pairs, one for the x-axis and one for the y-axis:This is the area that becomes clickable and will send the user to the page \"croissant.htm\":",
                "Image Map and JavaScript": "A clickable area can also trigger a JavaScript function.Add a click event to the <area> elementto execute a JavaScript function:```html\n<map name=\"workmap\">\n <area shape=\"circle\" coords=\"337,300,44\" onclick=\"myFunction()\">\n</map>\n<script>\nfunction myFunction() {\n  alert(\"You clicked the coffee cup!\");\n}\n</script>```",
                "Chapter Summary": "",
                "HTML Image Tags": ""
            }
        },
        "backgroundimages": {
            "title": "Background Images",
            "url": "https://www.w3schools.com/html/html_images_background.asp",
            "info": {
                "Background Image on a HTML element": "To add a background image on an HTML element, use the HTML style attribute and the CSS background-image property:```html\n<div style=\"background-image: url('img_girl.jpg');\">```You can also specify the background image in the <style> element, in the <head> section:```html\n<style>\ndiv {\n  background-image: url('img_girl.jpg');\n}\n</style>```",
                "Background Image on a Page": "If you want the entire page to have a background image, you must specify the background image on the <body> element:```html\n<style>\nbody {\n  background-image: url('img_girl.jpg');\n}\n</style>```",
                "Background Repeat": "If the background image is smaller than the element, the image will repeat itself, horizontally and vertically, until it reaches the end of the element:```html\n<style>\nbody {\n  background-image: url('example_img_girl.jpg');\n}\n</style>```To avoid the background image from repeating itself, set the background-repeat property to no-repeat.```html\n<style>\nbody {\n  background-image: url('example_img_girl.jpg');\n  background-repeat: no-repeat;\n}\n</style>```",
                "Background Cover": "If you want the background image to cover the entire element, you can set the background-size property tocover.Also, to make sure the entire element is always covered, set the background-attachment property to fixed:This way, the background image will cover the entire element, with no stretching (the image will keep its original proportions):```html\n<style>\nbody {\n  background-image: url('img_girl.jpg');\n  background-repeat: no-repeat;\n  background-attachment: fixed; \n  background-size: cover;\n}\n</style>```",
                "Background Stretch": "If you want the background image to stretch to fit the entire element, you can set the background-size property to100% 100%: Try resizing the browser window, and you will see that the image will stretch, but always cover the entire element.```html\n<style>\nbody {\n  background-image: url('img_girl.jpg');\n  background-repeat: no-repeat;\n  background-attachment: fixed; \n  background-size: 100% 100%;\n}\n</style>```",
                "Learn More CSS": "From the examples above you have learned that background images can be styled by using the CSS background properties.To learn more about CSS background properties, study our CSS Background Tutorial."
            }
        },
        "thepictureelement": {
            "title": "The Picture Element",
            "url": "https://www.w3schools.com/html/html_images_picture.asp",
            "info": {
                "The HTML <picture> Element": "The HTML <picture> element gives web developers more flexibility in specifying image resources.The <picture> element contains one or more <source> elements, each referring to different images through the srcset attribute. This way the browser can choose the image that best fits the current view and/or device.Each <source> element has amedia attribute that defines when the image is the most suitable.```html\n<picture>\n  <source media=\"(min-width: 650px)\" srcset=\"img_food.jpg\">\n <source media=\"(min-width: 465px)\" srcset=\"img_car.jpg\">\n  <img src=\"img_girl.jpg\">\n</picture>```",
                "When to use the Picture Element": "There are two main purposes for the <picture> element:If you have a small screen or device, it is not necessary to load a large image file. The browser will use the first <source> element with matching attribute values, and ignore any of the following elements.Some browsers or devices may not support all image formats. By using the<picture> element, you can add images of all formats, and the browser will use the first format it recognizes, and ignore any of the following elements. ```html\n<picture>\n  <source srcset=\"img_avatar.png\">\n  <source srcset=\"img_girl.jpg\">\n  <img src=\"img_beatles.gif\" alt=\"Beatles\" style=\"width:auto;\">\n</picture>```",
                "HTML Image Tags": ""
            }
        },
        "tables": {
            "title": "HTML Tables",
            "url": "https://www.w3schools.com/html/html_tables.asp",
            "info": {
                "Define an HTML Table": "The <table> tag defines an HTML table.Each table row is defined with a <tr> tag. Each table header is defined with a <th> tag. Each table data/cell is defined with a<td> tag.By default, the text in <th> elements are bold and centered. By default, the text in <td> elements are regular and left-aligned.```html\n<table style=\"width:100%\">\n \r\n<tr>\n    <th>Firstname</th>\n  <th>Lastname</th> \n    <th>Age</th>\n\r\n \r\n</tr>\n \r\n<tr>\n    <td>Jill</td>\n  <td>Smith</td> \n    <td>50</td>\n\r\n \r\n</tr>\n  <tr>\n    <td>Eve</td>\n  <td>Jackson</td> \n    <td>94</td>\n</tr>\n</table>```",
                "HTML Table - Add a Border": "To add a border to a table, use the CSS border property:```html\ntable, th, td\r\n{\nborder: 1px solid black;\n\r\n}```",
                "HTML Table - Collapsed Borders": "To let the borders collapse into one border, add the CSS border-collapse property:```html\ntable, th, td {\n  border: 1px solid black;\n \r\n border-collapse: collapse;\n}```",
                "HTML Table - Add Cell Padding": "Cell padding specifies the space between the cell content and its borders.If you do not specify a padding, the table cells will be displayed without padding.To set the padding, use the CSS padding property:```html\nth, td {\n  padding: 15px;\n}```",
                "HTML Table - Left-align Headings": "By default, table headings are bold and centered.To left-align the table headings, use the CSS text-align property:```html\nth {\n  text-align: left;\n}```",
                "HTML Table - Add Border Spacing": "Border spacing specifies the space between the cells.To set the border spacing for a table, use the CSS border-spacing property:```html\ntable {\n  border-spacing: 5px;\n}```",
                "HTML Table - Cell that Span Many Columns": "To make a cell span more than one column, use the colspan attribute:```html\n<table style=\"width:100%\">\n  <tr>\n  <th>Name</th>\n  \r\n<th colspan=\"2\">Telephone</th>\n  </tr>\n<tr>\n    \r\n<td>Bill Gates</td>\n    <td>55577854</td>\n    \r\n<td>55577855</td>\n  </tr>\n</table>```",
                "HTML Table - Cell that Span Many Rows": "To make a cell span more than one row, use the rowspan attribute:```html\n<table style=\"width:100%\">\n  <tr>\n    <th>Name:</th>\n    <td>Bill Gates</td>\n  </tr>\n  \r\n<tr>\n    <th rowspan=\"2\">Telephone:</th>\n    \r\n<td>55577854</td>\n  </tr>\n  <tr>\n    \r\n<td>55577855</td>\n  </tr>\n</table>```",
                "HTML Table - Add a Caption": "To add a caption to a table, use the <caption> tag:```html\n<table style=\"width:100%\">\n  <caption>Monthly savings</caption>\n  <tr>\n    <th>Month</th>\n    <th>Savings</th>\n  </tr>\n  <tr>\n    <td>January</td>\n    <td>$100</td>\n  </tr>\n  <tr>\n    <td>February</td>\n    <td>$50</td>\n  </tr>\n\r\n </table>```",
                "A Special Style for One Table": "To define a special style for one particular table, add an id attribute to the table:```html\n<table id=\"t01\">\n<tr>\n    <th>Firstname</th>\n  <th>Lastname</th> \n    <th>Age</th>\n</tr>\n  <tr>\n    <td>Eve</td>\n  <td>Jackson</td> \n    <td>94</td>\n</tr>\n</table>``````html\n#t01 {\n  width: 100%; \nbackground-color: #f1f1c1;\n}``````html\n#t01 tr:nth-child(even) {\nbackground-color: #eee;\n}\n#t01 tr:nth-child(odd) {\nbackground-color: #fff;\n}\n#t01 th {\n  color: white;\n  background-color: black;\n}```",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML Table Tags": ""
            }
        },
        "lists": {
            "title": "HTML Lists",
            "url": "https://www.w3schools.com/html/html_lists.asp",
            "info": {
                "Unordered HTML List": "An unordered list starts with the <ul> tag. Each list item starts with the <li> tag.The list items will be marked with bullets (small black circles) by default:```html\n<ul>\n\r\n \r\n<li>Coffee</li>\n  <li>Tea</li>\n\r\n \r\n<li>Milk</li>\n\r\n</ul>```",
                "Ordered HTML List": "An ordered list starts with the <ol> tag. Each list item starts with the <li> tag.The list items will be marked with numbers by default:```html\n<ol>\n\r\n \r\n<li>Coffee</li>\n  <li>Tea</li>\n\r\n \r\n<li>Milk</li>\n\r\n</ol>```",
                "HTML Description Lists": "HTML also supports description lists.A description list is a list of terms, with a description of each term.The <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd>  tag describes each term:```html\n<dl>\n\r\n \r\n<dt>Coffee</dt>\n\r\n \r\n<dd>- black hot drink</dd>\n\r\n \r\n<dt>Milk</dt>\n\r\n \r\n<dd>- white cold drink</dd>\n\r\n</dl>```",
                "HTML List Tags": ""
            }
        },
        "unorderedlists": {
            "title": "Unordered Lists",
            "url": "https://www.w3schools.com/html/html_lists_unordered.asp",
            "info": {
                "Unordered HTML List": "An unordered list starts with the <ul> tag. Each list item starts with the <li> tag.The list items will be marked with bullets (small black circles) by default:```html\n<ul>\n\r\n \r\n<li>Coffee</li>\n  <li>Tea</li>\n\r\n \r\n<li>Milk</li>\n\r\n</ul>```",
                "Unordered HTML List - Choose List Item Marker": "The CSS list-style-type property is used to define the style of the list item marker. It can have one of the following values:```html\n<ul style=\"list-style-type:disc;\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ul>``````html\n<ul style=\"list-style-type:circle;\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ul>``````html\n<ul style=\"list-style-type:square;\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ul>``````html\n<ul style=\"list-style-type:none;\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ul>```",
                "Nested HTML Lists": "Lists can be nested (list inside list):```html\n<ul>\n  <li>Coffee</li>\n  <li>Tea\n  <ul>\n      \r\n<li>Black tea</li>\n      <li>Green tea</li>\n  </ul>\n  \r\n</li>\n  <li>Milk</li>\n</ul>```",
                "Horizontal List with CSS": "HTML lists can be styled in many different ways with CSS.One popular way is to style a list horizontally, to create a navigation menu:```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\nul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n  background-color: #333333;\n}\nli {\n  float: left;\n}\nli a {\n  display: block;\n  color: white;\n  text-align: center;\n  padding: 16px;\n  text-decoration: none;\n}\n\nli a:hover {\n  background-color: #111111;\n}\n\r\n </style>\n</head>\n<body>\n<ul>\n  <li><a href=\"#home\">Home</a></li>\n  <li><a href=\"#news\">News</a></li>\n  <li><a href=\"#contact\">Contact</a></li>\n  <li><a href=\"#about\">About</a></li>\n\r\n </ul>\n</body>\n</html>```",
                "Chapter Summary": "",
                "HTML List Tags": ""
            }
        },
        "orderedlists": {
            "title": "Ordered Lists",
            "url": "https://www.w3schools.com/html/html_lists_ordered.asp",
            "info": {
                "Ordered HTML List": "An ordered list starts with the <ol> tag. Each list item starts with the <li> tag.The list items will be marked with numbers by default:```html\n<ol>\n\r\n \r\n<li>Coffee</li>\n  <li>Tea</li>\n\r\n \r\n<li>Milk</li>\n\r\n</ol>```",
                "Ordered HTML List - The Type Attribute": "The type attribute of the <ol> tag, defines the type of the list item marker:```html\n<ol type=\"1\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ol>``````html\n<ol type=\"A\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ol>``````html\n<ol type=\"a\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ol>``````html\n<ol type=\"I\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ol>``````html\n<ol type=\"i\">\n  <li>Coffee</li>\n<li>Tea</li>\n  <li>Milk</li>\n</ol>```",
                "Control List Counting": "By default, an ordered list will start counting from 1. If you want to start counting from a specified number, you can use the start attribute:```html\n<ol start=\"50\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>```",
                "Nested HTML Lists": "Lists can be nested (list inside list):```html\n<ol>\n  <li>Coffee</li>\n  <li>Tea\n  <ol>\n      \r\n<li>Black tea</li>\n      <li>Green tea</li>\n  </ol>\n  \r\n</li>\n  <li>Milk</li>\n</ol>```",
                "Chapter Summary": "",
                "HTML List Tags": ""
            }
        },
        "otherlists": {
            "title": "Other Lists",
            "url": "https://www.w3schools.com/html/html_lists_other.asp",
            "info": {
                "HTML Description Lists": "A description list is a list of terms, with a description of each term.The <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term:```html\n<dl>\n\r\n \r\n<dt>Coffee</dt>\n\r\n \r\n<dd>- black hot drink</dd>\n\r\n \r\n<dt>Milk</dt>\n\r\n \r\n<dd>- white cold drink</dd>\n\r\n</dl>```",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML List Tags": ""
            }
        },
        "block&inline": {
            "title": "HTML Block & Inline",
            "url": "https://www.w3schools.com/html/html_blocks.asp",
            "info": {
                "Block-level Elements": "A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).```html\n<div>Hello World</div>```Here are the block-level elements in HTML:",
                "Inline Elements": "An inline element does not start on a new line and it only takes up as much width as necessary.This is a <span> element inside a paragraph.```html\n<span>Hello World</span>```Here are the inline elements in HTML:",
                "The <div> Element": "The <div> element is often used as a container for other HTML elements.The <div> element has no required attributes, but style, class and id are common.When used together with CSS, the <div> element can be used to style blocks of content:```html\n<div style=\"background-color:black;color:white;padding:20px;\">\n <h2>London</h2>\n  <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>\n\r\n </div>```",
                "The <span> Element": "The <span> element is  an inline container used to mark up a part of a text, or a part of a document.The <span> element has no required attributes, but style, class and id are common.When used together with CSS, the <span> element can be used to style parts of the text:```html\n<p>My mother has <span style=\"color:blue;font-weight:bold\">blue</span> eyes and my father has <span style=\"color:darkolivegreen;font-weight:bold\">dark green</span> eyes.</p>```",
                "Chapter Summary": "",
                "HTML Tags": ""
            }
        },
        "classes": {
            "title": "HTML Classes",
            "url": "https://www.w3schools.com/html/html_classes.asp",
            "info": {
                "Using The class Attribute": "The class attribute is often used to point to a class name in a style sheet. It can also be used by a JavaScript to access and manipulate elements with the specific class name.In the following example we have three <div> elements with a class attribute with the value of \"city\". All of the three <div> elements will be styled equally according to the .city style definition in the head section:```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n.city {\n  background-color: tomato;\n  color: white;\n  border: 2px solid black;\n  margin: 20px;\n  padding: 20px;\n} \n</style>\n\r\n </head>\n<body>\n<div class=\"city\">\n\r\n <h2>London</h2>\n  <p>London is the capital of England.</p>\n\r\n </div>\n<div class=\"city\">\n\r\n <h2>Paris</h2>\n  <p>Paris is the capital of France.</p>\n</div>\n<div class=\"city\">\n\r\n <h2>Tokyo</h2>\n  <p>Tokyo is the capital of Japan.</p>\n</div>\n</body>\n</html>```In the following example we have two <span> elements with a class attribute with the value of \"note\". Both <span> elements will be styled equally according to the .note style definition in the head section:",
                "The Syntax For Class": "To create a class; write a period (.) character, followed by a class name. Then, define the CSS properties within curly braces {}:```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n.city {\n  background-color: tomato;\n  color: white;\n  padding: 10px;\n}\n</style>\n</head>\n<body>\n<h2 class=\"city\">London</h2>\n<p>London is the capital of England.</p>\n<h2 class=\"city\">Paris</h2>\n<p>Paris is the capital of France.</p>\n<h2 class=\"city\">Tokyo</h2>\n<p>Tokyo is the capital of Japan.</p>\n</body>\n</html>```",
                "Multiple Classes": "HTML elements can belong to more than one class.To define multiple classes, separate the class names with a space, e.g. <div class=\"city main\">. The element will be styled according to all the classes specified.In the following example, the first <h2> element belongs to both the city class and also to the main class, and will get the CSS styles from both of the classes:\u00a0```html\n<h2 class=\"city main\">London</h2>\n<h2 class=\"city\">Paris</h2>\n<h2 class=\"city\">Tokyo</h2>```",
                "Different Elements Can Share Same Class": "Different HTML elements can point to the same class name.In the following example, both <h2> and <p> points to the \"city\" class and will share the same style:```html\n<h2 class=\"city\">Paris</h2>\n<p class=\"city\">Paris is the capital of France</p>```",
                "Use of The class Attribute in JavaScript": "The class name can also be used by JavaScript to perform certain tasks for specific elements.JavaScript can access elements with a specific class name with the getElementsByClassName() method:```html\n<script>\nfunction myFunction() {\n  var x = document.getElementsByClassName(\"city\");\n  for (var i = 0; i < x.length; i++) {\n    x[i].style.display = \"none\";\n  }\n}\n</script>```",
                "Chapter Summary": "",
                "HTML Exercises": ""
            }
        },
        "id": {
            "title": "HTML Id",
            "url": "https://www.w3schools.com/html/html_id.asp",
            "info": {
                "Using The id Attribute": "The id attribute specifies a unique id for an HTML element. The value of the id attribute must be unique within the HTML document.The id attribute is used to point to a specific style declaration in a style sheet. It is also used by JavaScript to access and manipulate the element with the specific id.The syntax for id is: write a hash character (#) character, followed by an id name. Then, define the CSS properties within curly braces {}.In the following example we have an <h1> element that points to the id name \"myHeader\". This <h1> element will be styled according to the #myHeader style definition in the head section:```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n#myHeader {\n  background-color: lightblue;\n  color: black;\n  padding: 40px;\n  text-align: center;\n} \n</style>\n</head>\n<body>\n<h1 id=\"myHeader\">My Header</h1>\n</body>\n</html>```",
                "Difference Between Class and ID": "A class name can be used by multiple HTML elements, while an id name must only be used by one HTML element within the page:```html\n<style>\n/* Style the element with the id \"myHeader\" */\n#myHeader {\n  background-color: lightblue;\n  color: black;\n  padding: 40px;\n  text-align: center;\n}\n/* Style all elements with the class name \"city\" */\n.city{\n  background-color: tomato;\n  color: white;\n  padding: 10px;\n} \n</style>\n\n<!-- An element with a unique id -->\n<h1 id=\"myHeader\">My Cities</h1>\n<!-- Multiple elements with same class -->\n<h2 class=\"city\">London</h2>\n<p>London is the capital of England.</p>\n<h2 class=\"city\">Paris</h2>\n<p>Paris is the capital of France.</p>\n<h2 class=\"city\">Tokyo</h2>\n<p>Tokyo is the capital of Japan.</p>```",
                "HTML Bookmarks with ID and Links": "HTML bookmarks are used to allow readers to jump to specific parts of a webpage.Bookmarks can be useful if your page is very long.To use a bookmark, you must first create it, and then add a link to it.Then, when the link is clicked, the page will scroll to the location with the bookmark.",
                "Example": "First, create a bookmark with the id attribute:```html\n<h2 id=\"C4\">Chapter 4</h2>```Then, add a link to the bookmark (\"Jump to Chapter 4\"), from within the same page:```html\n<a href=\"#C4\">Jump to Chapter 4</a>```Or, add a link to the bookmark (\"Jump to Chapter 4\"), from another page:```html\n<a href=\"html_demo.html#C4\">Jump to Chapter 4</a>```",
                "Using The id Attribute in JavaScript": "The id attribute can also be used by JavaScript to perform some tasks for that specific element.JavaScript can access an element with a specific id with the getElementById() method:```html\n<script>\nfunction displayResult() {\n  document.getElementById(\"myHeader\").innerHTML = \"Have a nice day!\";\n}\n</script>```",
                "Chapter Summary": "",
                "HTML Exercises": ""
            }
        },
        "iframes": {
            "title": "HTML Iframes",
            "url": "https://www.w3schools.com/html/html_iframe.asp",
            "info": {
                "HTML Iframe Syntax": "The HTML <iframe> tag specifies an inline frame.An inline frame is used to embed another document within the current HTML document.```html\n<iframe src=\"url\" title=\"description\">```Tip: It is a good practice to always include a title attribute for the <iframe>. This is used by screen readers to read out what the content of the iframe is.",
                "Iframe - Set Height and Width": "Use the height and width attributes to specify the size of the iframe.The height and width are specified in pixels by default:```html\n<iframe src=\"demo_iframe.htm\" height=\"200\" width=\"300\" title=\"Iframe Example\"></iframe>```Or you can add the style attribute and use the CSS height and width properties:```html\n<iframe src=\"demo_iframe.htm\" style=\"height:200px;width:300px;\" title=\"Iframe Example\"></iframe>```",
                "Iframe - Remove the Border": "By default, an iframe has a border around it. To remove the border, add the style attribute and use the CSS border property:```html\n<iframe src=\"demo_iframe.htm\" style=\"border:none;\" title=\"Iframe Example\"></iframe>```With CSS, you can also change the size, style and color of the iframe's border:```html\n<iframe src=\"demo_iframe.htm\" style=\"border:2px solid red;\" title=\"Iframe Example\"></iframe>```",
                "Iframe - Target for a Link": "An iframe can be used as the target frame for a link.The target attribute of the link must refer to the name attribute of the iframe:```html\n<iframe src=\"demo_iframe.htm\" name=\"iframe_a\" title=\"Iframe Example\"></iframe>\n\r\n <p><a href=\"https://www.w3schools.com\" target=\"iframe_a\">W3Schools.com</a></p>```",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML iframe Tag": ""
            }
        },
        "javascript": {
            "title": "HTML JavaScript",
            "url": "https://www.w3schools.com/html/html_scripts.asp",
            "info": {
                "The HTML <script> Tag": "The HTML <script> tag is used to define a client-side script (JavaScript).The <script> element either contains script statements, or it points to an external script file through the src attribute.Common uses for JavaScript are image manipulation, form validation, and dynamic changes of content.To select an HTML element, JavaScript most often uses the document.getElementById() method.This JavaScript example writes \"Hello JavaScript!\" into an HTML element with id=\"demo\":```html\n<script>\n\r\n document.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n\r\n</script>```",
                "A Taste of JavaScript": "Here are some examples of what JavaScript can do:```html\ndocument.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";``````html\ndocument.getElementById(\"demo\").style.fontSize = \"25px\";\ndocument.getElementById(\"demo\").style.color = \"red\";\ndocument.getElementById(\"demo\").style.backgroundColor = \"yellow\";``````html\ndocument.getElementById(\"image\").src = \"picture.gif\";```",
                "The HTML <noscript> Tag": "The HTML <noscript> tag defines an alternate content to be displayed to users that have disabled scripts in their browser or have a browser that doesn't support scripts:```html\n<script>\n\r\n document.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n\r\n</script>\n<noscript>Sorry, your browser does not support JavaScript!</noscript>```",
                "HTML Exercises": "",
                "HTML Script Tags": ""
            }
        },
        "filepaths": {
            "title": "HTML File Paths",
            "url": "https://www.w3schools.com/html/html_filepaths.asp",
            "info": {
                "File Path Examples": "",
                "HTML File Paths": "A file path describes the location of a file in a web site's folder structure.File paths are used when linking to external files, like:",
                "Absolute File Paths": "An absolute file path is the full URL to a file:```html\n<img src=\"https://www.w3schools.com/images/picture.jpg\" alt=\"Mountain\">```",
                "Relative File Paths": "A relative file path points to a file relative to the current page.In the following example, the file path points to a file in the images folder located at the root of the current web:```html\n<img src=\"/images/picture.jpg\" \r\nalt=\"Mountain\">```In the following example, the file path points to a file in the images folder located in the current folder:```html\n<img src=\"images/picture.jpg\" \r\nalt=\"Mountain\">```In the following example, the file path points to a file in the images folder located in the folder one level up from the current folder:```html\n<img src=\"../images/picture.jpg\" \r\nalt=\"Mountain\">```",
                "Best Practice": "It is best practice to use relative file paths (if possible).When using relative file paths, your web pages will not be bound to your current base URL. All links will work on your own computer (localhost) as well as on your current public domain and your future public domains."
            }
        },
        "head": {
            "title": "HTML Head",
            "url": "https://www.w3schools.com/html/html_head.asp",
            "info": {
                "The HTML <head> Element": "The <head> element is a container for metadata (data about data) and is placed between the <html> tag and the <body> tag.HTML metadata is data about the HTML document. Metadata is not displayed.Metadata typically define the document title, character set, styles, scripts, and other meta information.",
                "The HTML <title> Element": "The <title> element defines the title of the document. The title must be text-only, and it is shown in the browser's title bar or in the page's tab.The <title> tag is required in HTML documents!The contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.The <title> element:So, try to make the title as accurate and meaningful as possible!A simple HTML document:```html\n<!DOCTYPE html>\n\r\n<html>\n<head>\n\r\n \r\n<title>A Meaningful Page \r\n Title</title>\n\r\n </head>\n\r\n<body>\n\nThe content of the document......\n\n</body>\n\r\n</html>```",
                "The HTML <style> Element": "The <style> element is used to define style information for a single HTML page:```html\n<style>\n body {background-color: powderblue;}\n  h1 {color: red;}\n p {color: blue;}\n\r\n</style>```",
                "The HTML <link> Element": "The <link> element defines the relationship between the current document and an external resource.The <link> tag is most often used to link to external style sheets:```html\n<link rel=\"stylesheet\" href=\"mystyle.css\">```",
                "The HTML <meta> Element": "The <meta> element is typically used to specify the character set, page description, keywords, author of the document, and viewport settings.The metadata will not be displayed on the page, but are used by browsers (how to display content or reload page), by search engines (keywords), and other web services.",
                "Examples": "Define the character set used:Define keywords for search engines:Define a description of your web page:Define the author of a page:Refresh document every 30 seconds:Setting the viewport to make your website look good on all devices:Example of <meta> tags:```html\n<meta charset=\"UTF-8\">\n<meta name=\"description\" content=\"Free Web tutorials\">\n<meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\n<meta name=\"author\" content=\"John Doe\">```",
                "Setting The Viewport": "The viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.You should include the following <meta> element in all your web pages:This gives the browser instructions on how to control the page's dimensions and scaling.The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:",
                "The HTML <script> Element": "The <script> element is used to define client-side JavaScripts.The following JavaScript writes \"Hello JavaScript!\" into an HTML element with id=\"demo\":```html\n<script>\nfunction myFunction() {\n \r\n document.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\";\n\r\n }\n</script>```",
                "The HTML <base> Element": "The <base> element specifies the base URL and/or target for all relative URLs in a page.The <base> tag must have either an href or a target attribute present, or both.There can only be one single <base> element in a document!```html\n<head>\n<base href=\"https://www.w3schools.com/\" target=\"_blank\">\n</head>\n\n<body>\n<img src=\"images/stickman.gif\" width=\"24\" height=\"39\"  alt=\"Stickman\">\n<a href=\"tags/tag_base.asp\">HTML base Tag</a>\n</body>```",
                "Chapter Summary": "",
                "HTML head Elements": ""
            }
        },
        "layout": {
            "title": "HTML Layout",
            "url": "https://www.w3schools.com/html/html_layout.asp",
            "info": {
                "HTML Layout Elements": "HTML has several semantic elements that define the different parts of a web page:",
                "HTML Layout Techniques": "There are four different techniques to create multicolumn layouts. Each technique has its pros and cons:",
                "CSS Frameworks": "If you want to create your layout fast, you can use a CSS framework, likeW3.CSS or Bootstrap.",
                "CSS Float Layout": "It is common to do entire web layouts using the CSS float property. Float is easy to learn - you just need to remember how the float and clear properties work. Disadvantages: Floating elements are tied to the document flow, which may harm the flexibility. Learn more about float in our CSS Float and Clear chapter.",
                "CSS Flexbox Layout": "Use of flexbox ensures that elements behave predictably when the page layout must accommodate different screen sizes and different display devices. Learn more about flexbox in ourCSS Flexbox chapter.",
                "CSS Grid Layout": "The CSS Grid Layout Module offers a grid-based layout system, with rows and columns,making it easier to design web pages without having to use floats and positioning.Learn more about CSS grids in ourCSS Grid View chapter."
            }
        },
        "responsive": {
            "title": "HTML Responsive",
            "url": "https://www.w3schools.com/html/html_responsive.asp",
            "info": {
                "What is Responsive Web Design?": "Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge,a website, to make it look good on all devices (desktops, tablets, and phones):Try it Yourself \u00bb",
                "Setting The Viewport": "To create a responsive website, add the following <meta> tag to all your web pages:```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">```This will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling.Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:",
                "Responsive Images": "Responsive images are images that scale nicely to fit any browser size.If the CSS width property is set to 100%, the image will be responsive and scale up and down:```html\n<img src=\"img_girl.jpg\" style=\"width:100%;\">```Notice that in the example above, the image can be scaled up to be larger than its original size.A better solution, in many cases, will be to use the max-width property instead.If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:```html\n<img src=\"img_girl.jpg\" style=\"max-width:100%;height:auto;\">```The HTML <picture> element allows you to define different images for different browser window sizes.Resize the browser window to see how the image below change depending on the width:```html\n<picture>\n  <source srcset=\"img_smallflower.jpg\" media=\"(max-width: 600px)\">\n  <source srcset=\"img_flowers.jpg\" media=\"(max-width: 1500px)\">\n  <source srcset=\"flowers.jpg\">\n  <img src=\"img_smallflower.jpg\" alt=\"Flowers\">\n</picture>```",
                "Responsive Text Size": "The text size can be set with a \"vw\" unit, which means the \"viewport width\".That way the text size will follow the size of the browser window:```html\n<h1 style=\"font-size:10vw\">Hello World</h1>```",
                "Media Queries": "In addition to resize text and images, it is also common to use media queries in responsive web pages.With media queries you can define completely different styles for different browser sizes.Example: resize the browser window to see that the three div elements below will display horizontally on large screens and stacked vertically on small screens:```html\n<style>\n.left, .right {\n  float: left;\n  width: 20%; /* The width is 20%, by default */\n}\n.main {\n  float: left;\n  width: 60%; /* The width is 60%, by default */\n}\n/* Use a media query to add a breakpoint at 800px: */\n@media screen and (max-width: 800px) {\n  .left, .main, .right {\n    width: 100%; /* The width is 100%, when the viewport is 800px or smaller */\n  }\n}\n</style>```",
                "Responsive Web Page - Full Example": "A responsive web page should look good on large desktop screens and on small mobile phones.Try it Yourself \u00bb",
                "Responsive Web Design - Frameworks": "All popular CSS Frameworks offer responsive design.They are free, and easy to use.",
                "W3.CSS": "W3.CSS is a modern CSS framework with support for desktop, tablet, and mobile design by default.W3.CSS is smaller and faster than similar CSS frameworks.W3.CSS is designed to be a high quality alternative to Bootstrap.W3.CSS is designed to be independent of jQuery or any other JavaScript library.To learn more about W3.CSS, read our W3.CSS Tutorial.",
                "Bootstrap": "Another popular CSS framework is Bootstrap. Bootstrap uses HTML, CSS and jQuery to make responsive web pages.```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<title>Bootstrap \r\nExample</title>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" \r\ncontent=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" \r\nhref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n\r\n<script \r\nsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.0/jquery.min.js\"></script>\n\r\n<script \r\nsrc=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n\r\n</head>\n<body>\n<div class=\"container\">\n  <div \r\nclass=\"jumbotron\">\n    <h1>My First Bootstrap Page</h1>\n  \r\n</div>\n  <div class=\"row\">\n    <div \r\nclass=\"col-sm-4\">\n      ...\n    \r\n</div>\n    <div class=\"col-sm-4\">\n      \r\n...\n    </div>\n    <div \r\nclass=\"col-sm-4\">\n    ...\n    </div>\n  \r\n</div>\n</div>\n</body>\n</html>```To learn more about Bootstrap, go to our Bootstrap Tutorial."
            }
        },
        "computercode": {
            "title": "HTML Computercode",
            "url": "https://www.w3schools.com/html/html_computercode_elements.asp",
            "info": {
                "HTML <kbd> For Keyboard Input": "The HTML <kbd> element is used to define keyboard input. The content inside is displayed in the browser's default monospace font.```html\n<p>Save the document by pressing <kbd>Ctrl + S</kbd></p>```",
                "HTML <samp> For Program Output": "The HTML <samp> element is used to define sample output from a computer program. The content inside is displayed in the browser's default monospace font.```html\n<p>Message from my computer:</p>\n<p><samp>File not found.<br>Press F1 to continue</samp></p>```",
                "HTML <code> For Computer Code": "The HTML <code> element\u00a0 is used to define a piece of computer code. The content inside is displayed in the browser's default monospace font.```html\n<code>\nx = 5;\ny = 6;\nz = x + y;\n</code>```Notice that the <code> element does not preserve extra whitespace and line-breaks.To fix this, you can put the <code> element inside a <pre> element:```html\n<pre>\n<code>\nx = 5;\ny = 6;\nz = x + y;\n</code>\n</pre>```",
                "HTML <var> For Variables": "The HTML <var> element\u00a0 is used to defines a variable in programming or in a mathematical expression. The content inside is typically displayed in italic.```html\n<p>The area of a triangle is: 1/2 x <var>b</var> x <var>h</var>, where <var>b</var> is the base, and <var>h</var> is the vertical height.</p>```",
                "Chapter Summary": "",
                "HTML Exercises": "",
                "HTML Computer Code Elements": ""
            }
        },
        "semantics": {
            "title": "HTML Semantics",
            "url": "https://www.w3schools.com/html/html5_semantic_elements.asp",
            "info": {
                "What are Semantic Elements?": "A semantic element clearly describes its meaning to both the browser and the developer.Examples of non-semantic elements: <div> and <span> - Tells nothing about its content.Examples of semantic elements: <form>, <table>, and <article> - Clearly defines its content.",
                "Semantic Elements in HTML": "Below is a list of some of the semantic elements in HTML.",
                "HTML <section> Element": "The <section> element defines a section in a document.According to W3C's HTML documentation: \"A section is a thematic grouping of content, typically with a heading.\"A web page could normally be split into sections for introduction, content, and contact information.```html\n<section>\n<h1>WWF</h1>\n<p>The World Wide Fund for Nature (WWF) is an   international organization working on issues regarding the conservation,   research and restoration of the environment, formerly named the World   Wildlife Fund. WWF was founded in 1961.</p>\n</section>\n<section>\n  <h1>WWF's Panda symbol</h1>\n<p>The Panda has become the symbol of WWF.   The well-known panda logo of WWF originated from a panda named Chi Chi that   was transferred from the Beijing Zoo to the London Zoo in the same year of   the establishment of WWF.</p>\n</section>```",
                "HTML <article> Element": "The <article> element specifies independent, self-contained content.An article should make sense on its own, and it should be possible to distribute it independently from the rest of the web site.Examples of where an <article> element can be used:```html\n<article>\n<h2>Google Chrome</h2>\n<p>Google Chrome is a web browser   developed by Google, released in 2008. Chrome is the world's most popular   web browser today!</p>\n</article>\n<article>\n<h2>Mozilla   Firefox</h2>\n<p>Mozilla Firefox is an open-source web browser developed   by Mozilla. Firefox has been the second most popular web browser since   January, 2018.</p>\n</article>\n<article>\n<h2>Microsoft Edge</h2>\n  <p>Microsoft Edge is a web browser developed by Microsoft, released in 2015.   Microsoft Edge replaced Internet Explorer.</p>\n</article>```",
                "Nesting <article> in <section> or Vice Versa?": "The <article> element specifies independent, self-contained content.The <section> element defines section in a document.Can we use the definitions to decide how to nest those elements? No, we cannot!So, you will find HTML pages with <section> elements containing <article> elements, and <article> elements containing <section> elements.",
                "HTML <header> Element": "The <header> element represents a container for introductory content or a set of navigational links.A <header> element typically contains:Note: You can have several <header> elements in one HTML document. However, <header> cannot be placed within a <footer>, <address> or another <header> element.```html\n<article>\n<header>\n  \r\n <h1>What Does WWF Do?</h1>\n  <p>WWF's mission:</p>\n</header>\n <p>WWF's mission is to stop the degradation of our planet's natural environment,\n  and build a future in which humans live in harmony with nature.</p>\n\r\n </article>```",
                "HTML <footer> Element": "The <footer> element defines a footer for a document or section.A <footer> element typically contains:You can have several <footer> elements in one document.```html\n<footer>\n<p>Author: Hege Refsnes</p>\n<p><a href=\"mailto:hege@example.com\">hege@example.com</a></p>\n\r\n </footer>```",
                "HTML <nav> Element": "The <nav> element defines a set of navigation links.```html\n<nav>\n\r\n <a href=\"/html/\">HTML</a> |\n\r\n <a href=\"/css/\">CSS</a> |\n\r\n <a href=\"/js/\">JavaScript</a> |\n\r\n <a href=\"/jquery/\">jQuery</a>\n\r\n </nav>```",
                "HTML <aside> Element": "The <aside> element defines some content aside from the content it is placed in (like a sidebar).The <aside> content should be indirectly related to the surrounding content.```html\n<p>My family and I visited The Epcot center this summer. The weather was   nice, and Epcot was amazing! I had a great summer together with my   family!</p>\n<aside>\n<h4>Epcot Center</h4>\n<p>Epcot is a theme   park at Walt Disney World Resort featuring exciting attractions,   international pavilions, award-winning fireworks and seasonal special   events.</p>\n</aside>```",
                "HTML <figure> and <figcaption> Elements": "The <figure> tag specifies self-contained content, like illustrations, diagrams, photos, code listings, etc.The <figcaption> tag defines a caption for a <figure> element. The <figcaption> element can be placed as the first or last child of the <figure> element.```html\n<figure>\n<img src=\"pic_trulli.jpg\" alt=\"Trulli\">\n<figcaption>Fig1. - Trulli, Puglia, Italy.</figcaption>\n\r\n</figure>```The <img> element defines the image, the <figcaption> element defines the caption.",
                "Why Semantic Elements?": "According to the W3C: \"A semantic Web allows data to be shared and reused across applications, enterprises, and communities.\""
            }
        },
        "styleguide": {
            "title": "HTML Style Guide",
            "url": "https://www.w3schools.com/html/html5_syntax.asp",
            "info": {
                "Always Declare Document Type": "Always declare the document type as the first line in your document.The correct document type for HTML is:```html\n<!DOCTYPE html>```",
                "Use Lowercase Element Names": "HTML allows mixing uppercase and lowercase letters in element names.However, we recommend using lowercase element names, because:```html\n<body>\n\r\n<p>This is a paragraph.</p>\n\r\n</body>``````html\n<BODY>\n\r\n<P>This is a paragraph.</P>\n\r\n</BODY>```",
                "Close All HTML Elements": "In HTML, you do not have to close all elements (for example the <p> element). However, we strongly recommend closing all HTML elements, like this:```html\n<section>\n  <p>This is a paragraph.</p>\n  <p>This is a paragraph.</p>\n  </section>``````html\n<section>\n  <p>This is a paragraph.\n  <p>This is a paragraph.\n  </section>```",
                "Use Lowercase Attribute Names": "HTML allows mixing uppercase and lowercase letters in attribute names.However, we recommend using lowercase attribute names, because:```html\n<a href=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>``````html\n<a HREF=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>```",
                "Always Quote Attribute Values": "HTML allows attribute values without quotes.However, we recommend quoting attribute values, because:```html\n<table   class=\"striped\">``````html\n<table class=striped>``````html\n<table class=table striped>```",
                "Always Specify alt, width, and height for Images": "Always specify the alt attribute for images. This attribute is important if the image for some reason cannot be displayed.Also, always define the width and height of images. This reduces flickering, because the browser can reserve space for the image before loading.```html\n<img   src=\"html5.gif\" alt=\"HTML5\" style=\"width:128px;height:128px\">``````html\n<img   src=\"html5.gif\">```",
                "Spaces and Equal Signs": "HTML allows spaces around equal signs. But space-less is easier to read and groups entities better together.```html\n<link rel=\"stylesheet\" href=\"styles.css\">``````html\n<link   rel = \"stylesheet\" href = \"styles.css\">```",
                "Avoid Long Code Lines": "When using an HTML editor, it is NOT convenient to scroll right and left to read the HTML code.Try to avoid too long code lines.",
                "Blank Lines and Indentation": "Do not add blank lines, spaces, or indentations without a reason.For readability, add blank lines to separate large or logical code blocks.For readability, add two spaces of indentation. Do not use the tab key.```html\n<body>\n<h1>Famous Cities</h1>\n<h2>Tokyo</h2>\n  <p>Tokyo is the capital of Japan, the   center of the Greater Tokyo Area,\nand the most   populous metropolitan area in the world.\nIt is the   seat of the Japanese government and the Imperial Palace,\n\r\nand the home of the Japanese Imperial Family.</p>\n</body>``````html\n<body>\n  <h1>Famous Cities</h1>\n  <h2>Tokyo</h2>\n\n  <p>\n    Tokyo is the capital of Japan, the   center of the Greater Tokyo Area,\n    and the most   populous metropolitan area in the world.\n    It is the   seat of the Japanese government and the Imperial Palace,\n      and the home of the Japanese Imperial Family.\n  </p>\n</body>``````html\n<ul>\n  <li>London</li>\n  <li>Paris</li>\n      <li>Tokyo</li>\n</ul>```",
                "Never Skip the <title> Element": "The <title> element is required in HTML.The contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.The <title> element:So, try to make the title as accurate and meaningful as possible:\u00a0```html\n<title>HTML   Style Guide and Coding Conventions</title>```",
                "Omitting <html> and <body>?": "An HTML page will validate without the <html> and <body> tags:```html\n<!DOCTYPE html>\n<head>\n  <title>Page Title</title>\n  </head>\n\n\r\n <h1>This is a heading</h1>\n<p>This is a paragraph.</p>```However, we strongly recommend to always add the <html> and <body> tags!Omitting <body> can produce errors in older browsers.Omitting <html> and <body> can also crash DOM and XML software.",
                "Omitting <head>?": "The HTML <head> tag can also be omitted.Browsers will add all elements before <body>, to a default <head> element.```html\n<!DOCTYPE html>\n<html>\n<title>Page Title</title>\n  <body>\n<h1>This is a heading</h1>\n<p>This is a paragraph.</p>\n\n</body>\n</html>```However, we recommend using the <head> tag.",
                "Close Empty HTML Elements?": "In HTML, it is optional to close empty elements.```html\n<meta   charset=\"utf-8\">``````html\n<meta charset=\"utf-8\" />```If you expect XML/XHTML software to access your page, keep the closing slash (/), because it is required in XML and XHTML.",
                "Add the lang Attribute": "You should always include the lang attribute inside the <html> tag, to declare the language of the Web page. This is meant to assist search engines and browsers.```html\n<!DOCTYPE html>\n<html lang=\"en-us\">\n<head>\n  <title>Page Title</title>\n  </head>\n<body>\n<h1>This is a   heading</h1>\n<p>This is a paragraph.</p>\n</body>\n</html>```",
                "Meta Data": "To ensure proper interpretation and correct search engine indexing, both the language and the character encoding <meta charset=\"charset\"> should be defined as early as possible in an HTML document:```html\n<!DOCTYPE html>\n<html   lang=\"en-us\">\n<head>\n  <meta charset=\"UTF-8\">\n \r\n <title>Page Title</title>\n</head>```",
                "Setting The Viewport": "The viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.You should include the following <meta> element in all your web pages:This gives the browser instructions on how to control the page's dimensions and scaling.The width=device-width part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).The initial-scale=1.0 part sets the initial zoom level when the page is first loaded by the browser.Here is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:",
                "HTML Comments": "Short comments should be written on one line, like this:```html\n<!-- This is a comment -->```Comments that spans more than one line, should be written like this:```html\n<!-- \n  This is a long comment example. This is a long comment example.\n  This is a long comment example. This is a long comment example.\n-->```Long comments are easier to observe if they are indented with two spaces.",
                "Using Style Sheets": "Use simple syntax for linking to style sheets (the type attribute is not necessary):```html\n<link rel=\"stylesheet\" href=\"styles.css\">```Short CSS rules can be written compressed, like this:```html\np.intro {font-family:Verdana;font-size:16em;}```Long CSS rules should be written over multiple lines:```html\nbody {\n  background-color: lightgrey;\n  font-family: \"Arial \r\nBlack\", Helvetica, sans-serif;\n  font-size: 16em;\n  color: \r\nblack;\n}```",
                "Loading JavaScript in HTML": "Use simple syntax for loading external scripts (the type attribute is not necessary):```html\n<script src=\"myscript.js\">```",
                "Accessing HTML Elements with JavaScript": "Using \"untidy\" HTML code can result in JavaScript errors.These two JavaScript statements will produce different results:```html\ngetElementById(\"Demo\").innerHTML = \"Hello\";\ngetElementById(\"demo\").innerHTML = \"Hello\";```Visit the JavaScript Style Guide.",
                "Use Lower Case File Names": "Some web servers (Apache, Unix) are case sensitive about file names: \"london.jpg\" cannot be accessed as \"London.jpg\". Other web servers (Microsoft, IIS) are not case sensitive: \"london.jpg\" can be accessed as \"London.jpg\".If you use a mix of uppercase and lowercase, you have to be aware of this.If you move from a case-insensitive to a case-sensitive server, even small errors will break your web!To avoid these problems, always use lowercase file names!",
                "File Extensions": "HTML files should have a .html or .htm extension.CSS files should have a .css extension.JavaScript files should have a .js extension.",
                "Differences Between .htm and .html?": "There is no difference between the .htm and .html file extensions!Both will be treated as HTML by any web browser and web server.",
                "Default Filenames": "When a URL does not specify a filename at the end (like \"https://www.w3schools.com/\"), the server just adds a default filename, such as \"index.html\", \"index.htm\", \"default.html\", or \"default.htm\".If your server is configured only with \"index.html\" as the default filename, your file must be named \"index.html\", and not \"default.html.\"However, servers can be configured with more than one default filename; usually you can set up as many default filenames as you want."
            }
        },
        "entities": {
            "title": "HTML Entities",
            "url": "https://www.w3schools.com/html/html_entities.asp",
            "info": {
                "HTML Entities": "Some characters are reserved in HTML.If you use the less than (<) or greater than (>) signs in your text, the browser might mix them with tags.Character entities are used to display reserved characters in HTML.A character entity looks like this:```html\n&entity_name;\r\nOR\r\n&#entity_number;```To display a less than sign (<) we must write: &lt; or &#60;",
                "Non-breaking Space": "A commonly used entity in HTML is the non-breaking space: &nbsp;A non-breaking space is a space that will not break into a new line.Two words separated by a non-breaking space will stick together (not break into a new line). This is handy when breaking the words might be disruptive.Examples:Another common use of the non-breaking space is to prevent browsers from truncating spaces in HTML pages.If you write 10 spaces in your text, the browser will remove 9 of them. To add real spaces to your text, you can use the &nbsp; character entity.",
                "Some Useful HTML Character Entities": "",
                "Combining Diacritical Marks": "A diacritical mark is a \"glyph\" added to a letter.Some diacritical marks, like grave (\u00a0 \u0300) and acute (\u00a0 \u0301) are called accents. Diacritical marks can appear both above and below a letter, inside a letter, and between two letters.Diacritical marks can be used in combination with alphanumeric characters to produce a character that is not present in the character set (encoding) used in the page.Here are some examples:You will see more HTML symbols in the next chapter of this tutorial."
            }
        },
        "symbols": {
            "title": "HTML Symbols",
            "url": "https://www.w3schools.com/html/html_symbols.asp",
            "info": {
                "HTML Symbol Entities": "HTML entities were described in the previous chapter.Many mathematical, technical, and currency symbols, are not present on a normal keyboard.To add such symbols to an HTML page, you can use an HTML entity name.If no entity name exists, you can use an entity number, a decimal, or hexadecimal reference.```html\n<p>I will display &euro;</p>\n\r\n<p>I will display &#8364;</p>\n\r\n<p>I will display &#x20AC;</p>```",
                "Some Mathematical Symbols Supported by HTML": "Full Math Reference",
                "Some Greek Letters Supported by HTML": "Full Greek Reference",
                "Some Other Entities Supported by HTML": "Full Currency ReferenceFull Arrows ReferenceFull Symbols Reference"
            }
        },
        "emojis": {
            "title": "HTML Emojis",
            "url": "https://www.w3schools.com/html/html_emojis.asp",
            "info": {
                "What are Emojis?": "Emojis look like images, or icons, but they are not.They are letters (characters) from the UTF-8 (Unicode) character set.",
                "The HTML charset Attribute": "To display an HTML page correctly, a web browser must know the character set used in the page.This is specified in the <meta> tag:```html\n<meta charset=\"UTF-8\">```",
                "UTF-8 Characters": "Many UTF-8 characters cannot be typed on a keyboard,but they can always be displayed using numbers (called entity numbers):```html\n<!DOCTYPE html>\n\r\n<html>\n<head>\n<meta charset=\"UTF-8\">\n</head>\n\r\n<body>\n\r\n<p>I will display A B C</p>\n\r\n<p>I will display &#65; &#66; &#67;</p>\n\r\n</body>\n\r\n</html>```The <meta charset=\"UTF-8\"> element defines the character set.The characters A, B, and C, are displayed by the numbers 65, 66, and 67.To let the browser understand that you are displaying a character, you must start the entity numberwith &# and end it with ; (semicolon).",
                "Emoji Characters": "Emojis are also characters from the UTF-8 alphabet:```html\n<!DOCTYPE html>\n\r\n<html>\n<head>\n<meta charset=\"UTF-8\">\n</head>\n\r\n<body>\n\r\n<h1>My First Emoji</h1>\n\r\n<p>&#128512;</p>\n\r\n</body>\n</html>```Since Emojis are characters, they can be copied, displayed,and sized just like any other character in HTML.```html\n<!DOCTYPE html>\n\r\n<html>\n<head>\n<meta charset=\"UTF-8\">\n</head>\n\r\n<body>\n\r\n<h1>Sized Emojis</h1>\n<p style=\"font-size:48px\">\n&#128512; &#128516; &#128525; &#128151;\n</p>\n\r\n</body>\n</html>```",
                "Some Emoji Symbols in UTF-8": "For a full list, please go to our HTML Emoji Reference."
            }
        },
        "charset": {
            "title": "HTML Charset",
            "url": "https://www.w3schools.com/html/html_charset.asp",
            "info": {
                "What is Character Encoding?": "ASCII was the first character encoding standard. ASCII defined 128 different characters that could be used on the internet: numbers (0-9), English letters (A-Z), and some special characters like ! $ + - ( ) @ < > .ISO-8859-1 was the default character set for HTML 4. This character set supported 256 different character codes. HTML 4 also supported UTF-8.ANSI (Windows-1252) was the original Windows character set. ANSI is identical to ISO-8859-1, except that ANSI has 32 extra characters.The default character set for HTML5 is UTF-8, which covers almost all of the characters and symbols in the world!",
                "The HTML charset Attribute": "To display an HTML page correctly, a web browser must know the character set used in the page. This is specified in the <meta> tag:```html\n<meta charset=\"UTF-8\">```",
                "Differences Between Character Sets": "The following table displays the differences between the character sets described above:",
                "The ASCII Character Set": "ASCII uses the values from 0 to 31 (and 127) for control characters.ASCII uses the values from 32 to 126 for letters, digits, and symbols.ASCII does not use the values from 128 to 255.",
                "The ANSI Character Set (Windows-1252)": "ANSI is identical to ASCII for the values from 0 to 127.ANSI has a proprietary set of characters for the values from 128 to 159.ANSI is identical to UTF-8 for the values from 160 to 255.",
                "The ISO-8859-1 Character Set": "ISO-8859-1 is identical to ASCII for the values from 0 to 127.ISO-8859-1 does not use the values from 128 to 159.ISO-8859-1 is identical to UTF-8 for the values from 160 to 255.",
                "The UTF-8 Character Set": "UTF-8 is identical to ASCII for the values from 0 to 127.UTF-8 does not use the values from 128 to 159.\u00a0 UTF-8 is identical to both ANSI and 8859-1 for the values from 160 to 255.UTF-8 continues from the value 256 with more than 10 000 different characters.For a closer look, study our Complete HTML Character Set Reference."
            }
        },
        "urlencode": {
            "title": "HTML URL Encode",
            "url": "https://www.w3schools.com/html/html_urlencode.asp",
            "info": {
                "URL - Uniform Resource Locator": "Web browsers request pages from web servers by using a URL.A Uniform Resource Locator (URL) is used to address a document (or other data) on the web.A web address like https://www.w3schools.com/html/default.asp follows these syntax rules:```html\nscheme://prefix.domain:port/path/filename```Explanation:",
                "Common URL Schemes": "The table below lists some common schemes:",
                "URL Encoding": "URLs can only be sent over the Internet using theASCII character-set. If a URL contains characters outside the ASCII set, the URL has to be converted.URL encoding converts non-ASCII characters into a format that can be transmitted over the Internet.URL encoding replaces non-ASCII characters with a \"%\" followed by hexadecimal digits.URLs cannot contain spaces. URL encoding normally replaces a space with a plus (+) sign, or %20.",
                "Try It Yourself": "If you click \"Submit\", the browser will URL encode the input before it is sent to the server.A page at the server will display the received input.Try some other input and click Submit again.",
                "ASCII Encoding Examples": "Your browser will encode input, according to the character-set used in your page.The default character-set in HTML5 is UTF-8.For a complete reference of all URL encodings, visit ourURL Encoding Reference."
            }
        },
        "vs.x": {
            "title": "HTML vs. XHTML",
            "url": "https://www.w3schools.com/html/html_xhtml.asp",
            "info": {
                "What is XHTML?": "",
                "Why XHTML?": "XML is a markup language where all documents must be marked up correctly (be \"well-formed\").XHTML was developed to make HTML more extensible and flexible to work with other data formats (such as XML). In addition, browsers ignore errors in HTML pages, and try to display the website even if it has some errors in the markup. So XHTML comes with a much stricter error handling.If you want to study XML, please read our XML Tutorial.",
                "The Most Important Differences from HTML": "",
                "XHTML - <!DOCTYPE ....> Is Mandatory": "An XHTML document must have an XHTML <!DOCTYPE> declaration.The <html>, <head>, <title>, and <body> elements must also be present, and the xmlns attribute in <html> must specify the xml namespace for the document.```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\r\n<head>\n\r\n \r\n<title>Title of document</title>\n\r\n</head>\n\r\n<body>\n  some content here... \n\n</body>\n\r\n</html>```",
                "XHTML Elements Must be Properly Nested": "In XHTML, elements must always be properly nested within each other, like this:```html\n<b><i>Some text</i></b>``````html\n<b><i>Some text</b></i>```",
                "XHTML Elements Must Always be Closed": "In XHTML, elements must always be closed, like this:```html\n<p>This is a paragraph</p>\n\r\n<p>This is another paragraph</p>``````html\n<p>This is a paragraph\n\r\n<p>This is another paragraph```",
                "XHTML Empty Elements Must Always be Closed": "In XHTML, empty elements must always be closed, like this:```html\nA break: <br />\n\r\nA horizontal rule: <hr />\n\r\nAn image: <img src=\"happy.gif\" alt=\"Happy face\" />``````html\nA break: <br>\n\r\nA horizontal rule: <hr>\n\r\nAn image: <img src=\"happy.gif\" alt=\"Happy face\">```",
                "XHTML Elements Must be in Lowercase": "In XHTML, element names must always be in lowercase, like this:```html\n<body>\n\r\n<p>This is a paragraph</p>\n\r\n</body>``````html\n<BODY>\n\r\n<P>This is a paragraph</P>\n\r\n</BODY>```",
                "XHTML Attribute Names Must be in Lowercase": "In XHTML, attribute names must always be in lowercase, like this:```html\n<a href=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>``````html\n<a HREF=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>```",
                "XHTML Attribute Values Must be Quoted": "In XHTML, attribute values must always be quoted, like this:```html\n<a href=\"https://www.w3schools.com/html/\">Visit our HTML tutorial</a>``````html\n<a href=https://www.w3schools.com/html/>Visit our HTML tutorial</a>```",
                "XHTML Attribute Minimization is Forbidden": "In XHTML, attribute minimization is forbidden:```html\n<input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked=\"checked\" />\n<input type=\"text\" name=\"lastname\" disabled=\"disabled\" />``````html\n<input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked />\n<input type=\"text\" name=\"lastname\" disabled />```",
                "Validate HTML With The W3C Validator": ""
            }
        },
        "forms": {
            "title": "HTML Forms",
            "url": "https://www.w3schools.com/html/html_forms.asp",
            "info": {
                "The <form> Element": "The HTML <form> element is used to create an HTML form for user input:```html\n<form>\n\r\n .\nform elements\n\r\n .\n\r\n </form>```Form elements are different types of input elements, like: text fields, checkboxes, radio buttons, submit buttons, and more.Allthe different form elements are covered in the next chapter:HTML Form Elements.",
                "The <input> Element": "The <input> element is the most important form element. An <input> element can be displayed in many ways, depending on the type attribute.Here are some examples:",
                "Text Fields": "<input type=\"text\"> defines a single-line input field for text input.```html\n<form>\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\">\n</form>```This is how it will look like in a browser:",
                "The <label> Element": "Notice the use of the <label> element in the example above. The <label> tag defines a label for many form elements.The <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user is focused on the input element.The <label> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox.The for attribute of the <label> tag should be equal to the id attribute of the <input>  element to bind them together. ",
                "Radio Buttons": "<input type=\"radio\"> defines a radio button.Radio buttons let a user select ONE of a limited number of choices.```html\n<form>\n  <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n  <label for=\"male\">Male</label><br>\n  <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n  <label for=\"female\">Female</label><br>\n  <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\">\n  <label for=\"other\">Other</label>\n</form>```This is how the HTML code above will be displayed in a browser:",
                "The Submit Button": "<input type=\"submit\"> defines a button for submitting the form data to a form-handler.The form-handler is typically a page on the server with a script for processing input data.The form-handler is specified in the form's action attribute.```html\n<form action=\"/action_page.php\">\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>```This is how the HTML code above will be displayed in a browser:",
                "The Action Attribute": "The action attribute defines the action to be performed when the form is submitted.Usually, the form data is sent to a page on the server when the user clicks on the submit button.In the example above, the form data is sent to a page on the server called \"/action\\_page.php\". This page contains a server-side script that handles the form data:```html\n<form action=\"/action_page.php\">```If the action attribute is omitted, the action is set to the current page.",
                "The Target Attribute": "The target attribute specifies if the submitted result will open in a new browser tab, a frame, or in the current window.The default value is \"\\_self\" which means the form will be submitted in the current window.To make the form result open in a new browser tab, use the value \"\\_blank\".```html\n<form action=\"/action_page.php\" target=\"_blank\">```Other legal values are \"\\_parent\", \"\\_top\", or a name representing the name of an iframe.",
                "The Method Attribute": "The method attribute specifies the HTTP method (GET or POST) to be used when submitting the form data.```html\n<form action=\"/action_page.php\" method=\"get\">```or:```html\n<form action=\"/action_page.php\" method=\"post\">```",
                "When to Use GET?": "The default HTTP method when submitting form data is GET.However, when GET is used, the form data will be visible in the page's address field:```html\n/action_page.php?firstname=John&lastname=Doe```Notes on GET: ",
                "When to Use POST?": "Always use POST if the form data contains sensitive or personal information. The POST method does not display the form data in the page address field.Notes on POST: ",
                "The Name Attribute": "Each input field must have a name attribute to be submitted.If the name attribute is omitted, the data of that input field will not be sent at all.```html\n<form action=\"/action_page.php\">\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" value=\"John\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>```",
                "HTML Exercises": "",
                "List of All <form> Attributes": ""
            }
        },
        "formelements": {
            "title": "HTML Form Elements",
            "url": "https://www.w3schools.com/html/html_form_elements.asp",
            "info": {
                "The HTML <form> Elements": "The <form> element can contain one or more of the following form elements:",
                "The <input> Element": "One of the most used form element is the <input> element. The <input> element can be displayed in several ways, depending on the type attribute.```html\n<label for=\"fname\">First name:</label>\n<input type=\"text\" id=\"firstname\" name=\"firstname\">```Allthe different input types are covered in the next chapter:HTML Input Types.",
                "The <label> Element": "Notice the use of the <label> element in the example above. The <label> tag defines a label for many form elements.The <label> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user is focused on the input element.The <label> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the <label> element, it toggles the radio button/checkbox.The for attribute of the <label> tag should be equal to the id attribute of the <input>  element to bind them together. ",
                "The <select> Element": "The <select> element defines a drop-down list:```html\n<label for=\"cars\">Choose a car:</label>\n<select id=\"cars\" name=\"cars\">\n  <option value=\"volvo\">Volvo</option>\n\r\n <option value=\"saab\">Saab</option>\n  <option value=\"fiat\">Fiat</option>\n\r\n <option value=\"audi\">Audi</option>\n</select>```The <option> elements defines an option that can be selected.By default, the first item in the drop-down list is selected.To define a pre-selected option, add the selected attribute to the option: ```html\n<option value=\"fiat\" selected>Fiat</option>```Use the size attribute to specify the number of visible values:```html\n<label for=\"cars\">Choose a car:</label>\n<select id=\"cars\" name=\"cars\" size=\"3\">\n  <option value=\"volvo\">Volvo</option>\n\r\n <option value=\"saab\">Saab</option>\n  <option value=\"fiat\">Fiat</option>\n\r\n <option value=\"audi\">Audi</option>\n</select>```Use the multiple attribute to allow the user to select more than one value:",
                "The <textarea> Element": "The <textarea> element defines a multi-line input field (a text area):```html\n<textarea name=\"message\" rows=\"10\" cols=\"30\">\nThe cat was playing in the garden.\n</textarea>```The rows attribute specifies the visible number of lines in a text area.The cols attribute specifies the visible width of a text area.This is how the HTML code above will be displayed in a browser:You can also define the size of the text area by using CSS:```html\n<textarea name=\"message\" style=\"width:200px; height:600px;\">\nThe cat was playing in the garden.\n</textarea>```",
                "The <button> Element": "The <button> element defines a clickable button:```html\n<button type=\"button\" \r\n onclick=\"alert('Hello World!')\">Click Me!</button>```This is how the HTML code above will be displayed in a browser:",
                "The <fieldset> and <legend> Elements": "The <fieldset> element is used to group related data in a form.The <legend> element defines a caption for the <fieldset>element.```html\n<form action=\"/action_page.php\">\n  <fieldset>\n    <legend>Personalia:</legend>\n    <label for=\"fname\">First name:</label><br>\n    <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n    <label for=\"lname\">Last name:</label><br>\n    <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n  </fieldset>\n</form>```This is how the HTML code above will be displayed in a browser:",
                "The <datalist> Element": "The <datalist> element specifies a list of pre-defined options for an <input> element.Users will see a drop-down list of the pre-defined options as they input data.The list attribute of the <input> element, must refer to theid attribute of the <datalist> element.```html\n<form action=\"/action_page.php\">\n  <input list=\"browsers\">\n\r\n <datalist id=\"browsers\">\n   <option value=\"Internet Explorer\">\n\r\n <option value=\"Firefox\">\n  <option value=\"Chrome\">\n\r\n <option value=\"Opera\">\n  <option value=\"Safari\">\n\r\n </datalist> \n</form>```",
                "The <output> Element": "The <output> element represents the result of a calculation (like one performed by a script).```html\n<form action=\"/action_page.php\"\n  oninput=\"x.value=parseInt(a.value)+parseInt(b.value)\">\n  0\n     <input type=\"range\"  id=\"a\" name=\"a\" value=\"50\">\n  100 +\n     <input type=\"number\" id=\"b\" name=\"b\" value=\"50\">\n  =\n     <output name=\"x\" for=\"a b\"></output>\n  <br><br>\n  <input type=\"submit\">\n\r\n </form>```",
                "HTML Exercises": "",
                "HTML Form Elements": ""
            }
        },
        "inputtypes": {
            "title": "HTML Input Types",
            "url": "https://www.w3schools.com/html/html_form_input_types.asp",
            "info": {
                "HTML Input Types": "Here are the different input types you can use in HTML:",
                "Input Type Text": "<input type=\"text\"> defines a single-line text input field:```html\n<form>\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\">\n\r\n</form>```This is how the HTML code above will be displayed in a browser:",
                "Input Type Password": "<input type=\"password\"> defines a password field:```html\n<form>\n <label for=\"username\">Username:</label><br>\n  <input type=\"text\" id=\"username\" name=\"username\"><br>\n  <label for=\"pwd\">Password:</label><br>\n  <input type=\"password\" id=\"pwd\" name=\"pwd\">\n\r\n</form>```This is how the HTML code above will be displayed in a browser:",
                "Input Type Submit": "<input type=\"submit\"> defines a button for submitting form data to a form-handler.The form-handler is typically a server page with a script for processing input data.The form-handler is specified in the form's action attribute:```html\n<form action=\"/action_page.php\">\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n</form>```This is how the HTML code above will be displayed in a browser:If you omit the submit button's value attribute, the button will get a default text:```html\n<form action=\"/action_page.php\">\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n  <input type=\"submit\">\n</form>```",
                "Input Type Reset": "<input type=\"reset\"> defines a reset button that will reset all form values to their default values:```html\n<form action=\"/action_page.php\">\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n  <input type=\"reset\">\n</form>```This is how the HTML code above will be displayed in a browser:",
                "Input Type Radio": "<input type=\"radio\"> defines a radio button.Radio buttons let a user select ONLY ONE of a limited number of choices:```html\n<form>\n  <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\n  <label for=\"male\">Male</label><br>\n  <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\n  <label for=\"female\">Female</label><br>\n  <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\">\n  <label for=\"other\">Other</label>\n</form>```This is how the HTML code above will be displayed in a browser:",
                "Input Type Checkbox": "<input type=\"checkbox\"> defines a checkbox.Checkboxes let a user select ZERO or MORE options of a limited number of choices.```html\n<form>\n  <input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" value=\"Bike\">\n  <label for=\"vehicle1\"> I have a bike</label><br>\n  <input type=\"checkbox\" id=\"vehicle2\" name=\"vehicle2\" value=\"Car\">\n  <label for=\"vehicle2\"> I have a car</label><br>\n  <input type=\"checkbox\" id=\"vehicle3\" name=\"vehicle3\" value=\"Boat\">\n  <label for=\"vehicle3\"> I have a boat</label>\n\r\n </form>```This is how the HTML code above will be displayed in a browser:",
                "Input Type Button": "<input type=\"button\"> defines a button:```html\n<input type=\"button\" onclick=\"alert('Hello World!')\" value=\"Click Me!\">```This is how the HTML code above will be displayed in a browser:",
                "Input Type Color": "The <input type=\"color\"> is used for input fields that should contain a color.Depending on browser support, a color picker can show up in the input field.```html\n<form>\n  <label for=\"favcolor\">Select your favorite color:</label>\n  <input type=\"color\" id=\"favcolor\" name=\"favcolor\">\n\r\n </form>```",
                "Input Type Date": "The <input type=\"date\"> is used for input fields that should contain a date.Depending on browser support, a date picker can show up in the input field.```html\n<form>\n  <label for=\"birthday\">Birthday:</label>\n  <input type=\"date\" id=\"birthday\" name=\"birthday\">\n</form>```You can also use the min and max attributes to add restrictions to dates:```html\n<form>\n  <label for=\"datemax\">Enter a date before 1980-01-01:</label>\n  <input type=\"date\" id=\"datemax\" name=\"datemax\" max=\"1979-12-31\"><br><br>\n  <label for=\"datemin\">Enter a date after 2000-01-01:</label>\n  <input type=\"date\" id=\"datemin\" name=\"datemin\" min=\"2000-01-02\">\n</form>```",
                "Input Type Datetime-local": "The <input type=\"datetime-local\"> specifies a date and time input field, with no time zone.Depending on browser support, a date picker can show up in the input field.```html\n<form>\n  <label for=\"birthdaytime\">Birthday (date and time):</label>\n  <input type=\"datetime-local\" id=\"birthdaytime\" name=\"birthdaytime\">\n\r\n </form>```",
                "Input Type Email": "The <input type=\"email\"> is used for input fields that should contain an e-mail address.Depending on browser support, the e-mail address can be automatically validated when submitted.Some smartphones recognize the email type, and add \".com\" to the keyboard to match email input.```html\n<form>\n  <label for=\"email\">Enter your email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\">\n\r\n </form>```",
                "Input Type File": "The <input type=\"file\"> defines a file-select field and a \"Browse\" button for file uploads.```html\n<form>\n  <label for=\"myfile\">Select a file:</label>\n  <input type=\"file\" id=\"myfile\" name=\"myfile\">\n</form>```",
                "Input Type Month": "The <input type=\"month\"> allows the user to select a month and year.Depending on browser support, a date picker can show up in the input field.```html\n<form>\n  <label for=\"bdaymonth\">Birthday (month and year):</label>\n  <input type=\"month\" id=\"bdaymonth\" name=\"bdaymonth\">\n\r\n </form>```",
                "Input Type Number": "The <input type=\"number\"> defines a numeric input field.You can also set restrictions on what numbers are accepted.The following example displays a numeric input field, where you can enter a value from 1 to 5:```html\n<form>\n  <label for=\"quantity\">Quantity (between 1 and 5):</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\">\n</form>```",
                "Input Restrictions": "Here is a list of some common input restrictions:You will learn more about input restrictions in the next chapter.The following example displays a numeric input field, where you can enter a value from 0 to 100, in steps of 10. The default value is 30:```html\n<form>\n  <label for=\"quantity\">Quantity:</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"0\" max=\"100\" step=\"10\" value=\"30\">\n</form>```",
                "Input Type Range": "The <input type=\"range\"> defines a control for entering a number whose exact value is not important (like a slider control). Default range is 0 to 100. However, you can set restrictions on what numbers are accepted with the min, max, and step attributes:```html\n<form>\n  <label for=\"vol\">Volume (between 0 and 50):</label>\n    <input type=\"range\" id=\"vol\" name=\"vol\" min=\"0\" max=\"50\">\n\r\n </form>```",
                "Input Type Search": "The <input type=\"search\"> is used for search fields (a search field behaves like a regular text field).```html\n<form>\n  <label for=\"gsearch\">Search Google:</label>\n  <input type=\"search\" id=\"gsearch\" name=\"gsearch\">\n\r\n </form>```",
                "Input Type Tel": "The <input type=\"tel\"> is used for input fields that should contain a telephone number.```html\n<form>\n  <label for=\"phone\">Enter your phone number:</label>\n    <input type=\"tel\" id=\"phone\" name=\"phone\"   pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\">\n</form>```",
                "Input Type Time": "The <input type=\"time\"> allows the user to select a time (no time zone).Depending on browser support, a time picker can show up in the input field.```html\n<form>\n  <label for=\"appt\">Select a time:</label>\n  <input type=\"time\" id=\"appt\" name=\"appt\">\n\r\n </form>```",
                "Input Type Url": "The <input type=\"url\"> is used for input fields that should contain a URL address.Depending on browser support, the url field can be automatically validated when submitted.Some smartphones recognize the url type, and adds \".com\" to the keyboard to match url input.```html\n<form>\n  <label for=\"homepage\">Add your homepage:</label>\n  <input type=\"url\" id=\"homepage\" name=\"homepage\">\n\r\n </form>```",
                "Input Type Week": "The <input type=\"week\"> allows the user to select a week and year.Depending on browser support, a date picker can show up in the input field.```html\n<form>\n  <label for=\"week\">Select a week:</label>\n  <input type=\"week\" id=\"week\" name=\"week\">\n\r\n </form>```",
                "HTML Exercises": "",
                "HTML Input Type Attribute": ""
            }
        },
        "inputattributes": {
            "title": "HTML Input Attributes",
            "url": "https://www.w3schools.com/html/html_form_attributes.asp",
            "info": {
                "The value Attribute": "The input value attribute specifies an initial value for an input field:```html\n<form>\n<label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\">\n</form>```",
                "The readonly Attribute": "The input readonly attribute specifies that an input field is read-only.A read-only input field cannot be modified (however, a user can tab to it, highlight it, and copy the text from it).The value of a read-only input field will be sent when submitting the form!```html\n<form>\n<label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\" readonly><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\">\n</form>```",
                "The disabled Attribute": "The input disabled attribute specifies that an input field should be disabled.A disabled input field is unusable and un-clickable.The value of a disabled input field will not be sent when submitting the form!```html\n<form>\n<label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\" disabled><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\">\n</form>```",
                "The size Attribute": "The input size attribute specifies the visible width, in characters, of an input field.The default value for size is 20.Note: The size attribute works with the following input types: text, search, tel, url, email, and password.```html\n<form>\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" size=\"50\"><br>\n  <label for=\"pin\">PIN:</label><br>\n  <input type=\"text\" id=\"pin\" name=\"pin\" size=\"4\">\n</form>```",
                "The maxlength Attribute": "The input maxlength attribute specifies the maximum number of characters allowed in an input field.Note: When a maxlength is set, the input field will not accept more than the specified number of characters. However, this attribute does not provide any feedback. So, if you want to alert the user, you must write JavaScript code.```html\n<form>\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" size=\"50\"><br>\n  <label for=\"pin\">PIN:</label><br>\n  <input type=\"text\" id=\"pin\" name=\"pin\" maxlength=\"4\" size=\"4\">\n</form>```",
                "The min and max Attributes": "The input min and max attributes specify the minimum and maximum values for an input field.The min and max attributes work with the following input types: number, range, date, datetime-local, month, time and week.Tip: Use the max and min attributes together to create a range of legal values.```html\n<form>\n  <label for=\"datemax\">Enter a date before 1980-01-01:</label>\n  <input type=\"date\" id=\"datemax\" name=\"datemax\" max=\"1979-12-31\"><br><br>\n  <label for=\"datemin\">Enter a date after 2000-01-01:</label>\n  <input type=\"date\" id=\"datemin\" name=\"datemin\" min=\"2000-01-02\"><br><br>\n  <label for=\"quantity\">Quantity (between 1 and 5):</label>\n  <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\">\n</form>```",
                "The multiple Attribute": "The input multiple attribute specifies that the user is allowed to enter more than one value in an input field.The multiple attribute works with the following input types: email, and file.```html\n<form>\n  <label for=\"files\">Select files:</label>\n  <input type=\"file\" id=\"files\" name=\"files\" multiple>\n</form>```",
                "The pattern Attribute": "The input pattern attribute specifies a regular expression that the input field's value is checked against, when the form is submitted.The pattern attribute works with the following input types: text, date, search, url, tel, email, and password.Tip: Use the global title attribute to describe the pattern to help the user.Tip: Learn more about regular expressions in our JavaScript tutorial.```html\n<form>\n  <label for=\"country_code\">Country code:</label>\n  <input type=\"text\" id=\"country_code\" name=\"country_code\"\n  pattern=\"[A-Za-z]{3}\" title=\"Three letter country code\">\n</form>```",
                "The placeholder Attribute": "The input placeholder attribute specifies short a hint that describes the expected value of an input field (a sample value or a short description of the expected format).The short hint is displayed in the input field before the user enters a value.The placeholder attribute works with the following input types: text, search, url, tel, email, and password.```html\n<form>\n  <label for=\"phone\">Enter a phone number:</label>\n  <input type=\"tel\" id=\"phone\" name=\"phone\"\n  placeholder=\"123-45-678\"\n  pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{3}\">\n</form>```",
                "The required Attribute": "The input required attribute specifies that an input field must be filled out before submitting the form.The required attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.```html\n<form>\n  <label for=\"username\">Username:</label>\n  <input type=\"text\" id=\"username\" name=\"username\" required>\n</form>```",
                "The step Attribute": "The input step attribute specifies the legal number intervals for an input field.Example: if step=\"3\", legal numbers could be -3, 0, 3, 6, etc.Tip: This attribute can be used together with the max and min attributes to create a range of legal values.The step attribute works with the following input types: number, range, date, datetime-local, month, time and week.```html\n<form>\n  <label for=\"points\">Points:</label>\n  <input type=\"number\" id=\"points\" name=\"points\" step=\"3\">\n</form>```",
                "The autofocus Attribute": "The input autofocus attribute specifies that an input field should automatically get focus when the page loads.```html\n<form>\n  <label for=\"fname\">First name:</label><br>\n  <input type=\"text\" id=\"fname\" name=\"fname\" autofocus><br>\n  <label for=\"lname\">Last name:</label><br>\n  <input type=\"text\" id=\"lname\" name=\"lname\">\n</form>```",
                "The height and width Attributes": "The input height and width attributes specify the height and width of an <input type=\"image\"> element.```html\n<form>\n  <label for=\"fname\">First name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n  <label for=\"lname\">Last name:</label>\n  <input type=\"text\" id=\"lname\" name=\"lname\"><br><br>\n  <input type=\"image\" src=\"img_submit.gif\" alt=\"Submit\" width=\"48\" height=\"48\">\n</form>```",
                "The list Attribute": "The input list attribute refers to a <datalist> element that contains pre-defined options for an <input> element.```html\n<form>\n \r\n<input list=\"browsers\">\n \r\n <datalist id=\"browsers\">\n   <option value=\"Internet Explorer\">\n\r\n <option value=\"Firefox\">\n\r\n <option value=\"Chrome\">\n\r\n <option value=\"Opera\">\n\r\n <option value=\"Safari\">\n\r\n </datalist>\n</form>```",
                "The autocomplete Attribute": "The input autocomplete attribute specifies whether a form or an input field should have autocomplete on or off.Autocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values.The autocomplete attribute works with <form> and the following <input> types: text, search, url, tel, email, password, datepickers, range, and color.```html\n<form action=\"/action_page.php\" autocomplete=\"on\">\n  <label for=\"fname\">First   name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n    <label for=\"lname\">Last name:</label>\n  <input type=\"text\" id=\"lname\"   name=\"lname\"><br><br>\n  <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" autocomplete=\"off\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>```Tip: In some browsers you may need to activate an autocomplete function for this to work (Look under \"Preferences\" in the browser's menu).",
                "HTML Exercises": "",
                "HTML Form and Input Elements": ""
            }
        },
        "inputformattributes": {
            "title": "HTML Input Form Attributes",
            "url": "https://www.w3schools.com/html/html_form_attributes_form.asp",
            "info": {
                "The form Attribute": "The input form attribute specifies the form the <input> element belongs to.The value of this attribute must be equal to the id attribute of the <form> element it belongs to.```html\n<form action=\"/action_page.php\" id=\"form1\">\n  <label for=\"fname\">First   name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n</form>\n<label for=\"lname\">Last   name:</label>\n<input type=\"text\" id=\"lname\"   name=\"lname\" form=\"form1\">```",
                "The formaction Attribute": "The input formaction attribute specifies the URL of the file that will process the input when the form is submitted.Note: This attribute overrides the action attribute of the <form> element.The formaction attribute works with the following input types: submit and image.```html\n<form action=\"/action_page.php\">\n  <label for=\"fname\">First   name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n    <label for=\"lname\">Last name:</label>\n  <input type=\"text\" id=\"lname\"   name=\"lname\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n    <input type=\"submit\" formaction=\"/action_page2.php\" value=\"Submit as Admin\">\n  </form>```",
                "The formenctype Attribute": "The input formenctype  attribute specifies how the form-data should be encoded when submitted (only for forms with method=\"post\").Note: This attribute overrides the enctype attribute of the <form> element.The formenctype attribute works with the following input types: submit and image.```html\n<form action=\"/action_page_binary.asp\" method=\"post\">\n  <label for=\"fname\">First   name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n  <input type=\"submit\"   formenctype=\"multipart/form-data\"\n  value=\"Submit as   Multipart/form-data\">\n</form>```",
                "The formmethod Attribute": "The input formmethod  attribute defines the HTTP method for sending form-data to the action URL.Note: This attribute overrides the method  attribute of the <form> element.The formmethod attribute works with the following input types: submit and image.The form-data can be sent as URL variables (method=\"get\") or as an HTTP post transaction (method=\"post\").Notes on the \"get\" method:Notes on the \"post\" method:```html\n<form action=\"/action_page.php\" method=\"get\">\n  <label for=\"fname\">First   name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n    <label for=\"lname\">Last name:</label>\n  <input type=\"text\" id=\"lname\"   name=\"lname\"><br><br>\n  <input type=\"submit\" value=\"Submit using   GET\">\n  <input type=\"submit\" formmethod=\"post\" value=\"Submit using   POST\">\n</form>```",
                "The formtarget Attribute": "The input formtarget a attribute specifies a name or a keyword that indicates where to display the response that is received after submitting the form.Note: This attribute overrides the target attribute of the <form> element.The formtarget attribute works with the following input types: submit and image.```html\n<form action=\"/action_page.php\">\n  <label for=\"fname\">First   name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\"><br><br>\n    <label for=\"lname\">Last name:</label>\n  <input type=\"text\" id=\"lname\"   name=\"lname\"><br><br>\n  <input type=\"submit\" value=\"Submit\">\n    <input type=\"submit\" formtarget=\"_blank\" value=\"Submit to a new window/tab\">\n  </form>```",
                "The formnovalidate Attribute": "The input formnovalidate attribute specifies that an <input> element should not be validated when submitted.Note: This attribute overrides the novalidate attribute of the <form> element.The formnovalidate attribute works with the following input types: submit.```html\n<form action=\"/action_page.php\">\n  <label for=\"email\">Enter your   email:</label>\n  <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n    <input type=\"submit\" value=\"Submit\">\n  <input type=\"submit\"   formnovalidate=\"formnovalidate\"\n  value=\"Submit without validation\">\n  </form>```",
                "The novalidate Attribute": "The novalidate attribute is a <form> attribute.When present, novalidate specifies that all of the form-data should not be validated when submitted.```html\n<form action=\"/action_page.php\" novalidate>\n  <label   for=\"email\">Enter your email:</label>\n  <input type=\"email\"   id=\"email\" name=\"email\"><br><br>\n  <input type=\"submit\"   value=\"Submit\">\n</form>```",
                "HTML Form and Input Elements": ""
            }
        },
        "canvas": {
            "title": "HTML Canvas",
            "url": "https://www.w3schools.com/html/html5_canvas.asp",
            "info": {
                "What is HTML Canvas?": "The HTML <canvas> element is used to draw graphics, on the fly, via JavaScript.The <canvas> element is only a container for graphics. You must use  JavaScript to actually draw the graphics.Canvas has several methods for drawing paths, boxes, circles, text, and adding images.",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the <canvas> element.",
                "Canvas Examples": "A canvas is a rectangular area on an HTML page. By default, a canvas has no border and no content.The markup looks like this:Note: Always specify an id attribute (to be referred to in a script), and a width and height attribute to define the size of the canvas. To add a border, use the style attribute.Here is an example of a basic, empty canvas:```html\n<canvas id=\"myCanvas\" width=\"200\" height=\"100\"\r\nstyle=\"border:1px solid \r\n#000000;\">\n\r\n</canvas>``````html\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\n\r\n ctx.moveTo(0, 0);\nctx.lineTo(200, 100);\n\r\n ctx.stroke();``````html\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\n\r\n ctx.beginPath();\nctx.arc(95, 50, 40, 0, 2 * Math.PI);\nctx.stroke();``````html\nvar c = document.getElementById(\"myCanvas\");\nvar ctx = c.getContext(\"2d\");\n\r\n ctx.font = \"30px Arial\";\nctx.fillText(\"Hello World\", 10, 50);```",
                "HTML Canvas Tutorial": "To learn more about <canvas>, please read our HTML Canvas Tutorial."
            }
        },
        "svg": {
            "title": "HTML SVG",
            "url": "https://www.w3schools.com/html/html5_svg.asp",
            "info": {
                "What is SVG?": "",
                "The HTML <svg> Element": "The HTML <svg> element is a container for SVG graphics.SVG has several methods for drawing paths, boxes, circles, text, and graphic images.",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the <svg> element.",
                "SVG Circle": "```html\n<!DOCTYPE html>\n<html>\n<body>\n<svg \r\n width=\"100\" height=\"100\">\n  <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"green\" \r\n stroke-width=\"4\" fill=\"yellow\" />\n</svg>\n</body>\n</html>```",
                "SVG Rectangle": "```html\n<svg width=\"400\" height=\"100\">\n  <rect width=\"400\" height=\"100\" style=\"fill:rgb(0,0,255);stroke-width:10;stroke:rgb(0,0,0)\" \r\n />\n</svg>```",
                "SVG Rounded Rectangle": "```html\n<svg width=\"400\" height=\"180\">\n  <rect x=\"50\" y=\"20\" rx=\"20\" ry=\"20\" \r\n width=\"150\" height=\"150\"\n  \r\n style=\"fill:red;stroke:black;stroke-width:5;opacity:0.5\" />\n</svg>```",
                "SVG Star": "```html\n<svg width=\"300\" height=\"200\">\n<polygon points=\"100,10 40,198 190,78 10,78 160,198\"\n style=\"fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;\" />\n\r\n</svg>```",
                "SVG Logo": "```html\n<svg height=\"130\" width=\"500\">\n  <defs>\n    <linearGradient id=\"grad1\" x1=\"0%\" \r\n y1=\"0%\" x2=\"100%\" y2=\"0%\">\n      <stop offset=\"0%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" \r\n />\n      <stop offset=\"100%\" style=\"stop-color:rgb(255,0,0);stop-opacity:1\" />\n  \r\n </linearGradient>\n  </defs>\n  <ellipse cx=\"100\" cy=\"70\" rx=\"85\" ry=\"55\" \r\n fill=\"url(#grad1)\" />\n  <text fill=\"#ffffff\" font-size=\"45\" \r\n font-family=\"Verdana\" x=\"50\" y=\"86\">SVG</text>\n  Sorry, your browser does not \r\n support inline SVG.\n</svg>```",
                "Differences Between SVG and Canvas": "SVG is a language for describing 2D graphics in XML.Canvas draws 2D graphics, on the fly (with a JavaScript).SVG is XML based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers for an element.In SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape.Canvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic.",
                "Comparison of Canvas and SVG": "The table below shows some important differences between Canvas and SVG:",
                "SVG Tutorial": "To learn more about SVG, please read our SVG Tutorial."
            }
        },
        "media": {
            "title": "HTML Media",
            "url": "https://www.w3schools.com/html/html_media.asp",
            "info": {
                "What is Multimedia?": "Multimedia comes in many different formats. It can be almost anything you can hear or see, like images, music, sound, videos, records, films, animations, and more.Web pages often contain multimedia elements of different types and formats.",
                "Browser Support": "The first web browsers had support for text only, limited to a single font in a single color.Later came browsers with support for colors, fonts, images, and multimedia!",
                "Multimedia Formats": "Multimedia elements (like audio or video) are stored in media files. The most common way to discover the type of a file, is to look at the file extension.Multimedia files have formats and different extensions like: .wav, .mp3, .mp4, .mpg, .wmv, and .avi.",
                "Common Video Formats": "",
                "Common Audio Formats": "MP3 is the best format for compressed recorded music. The term MP3 has become synonymous with digital music.If your website is about recorded music, MP3 is the choice."
            }
        },
        "video": {
            "title": "HTML Video",
            "url": "https://www.w3schools.com/html/html5_video.asp",
            "info": {
                "The HTML <video> Element": "To show a video in HTML, use the <video> element:```html\n<video width=\"320\" height=\"240\" controls>\n<source src=\"movie.mp4\" type=\"video/mp4\">\n<source src=\"movie.ogg\" type=\"video/ogg\">\n\r\nYour browser does not support the video tag.\n\r\n</video>```",
                "How it Works": "The controls attribute adds video controls, like play, pause, and volume.It is a good idea to always include width and height attributes. If height and width are not set, the page might flicker while the video loads.The <source> element allows you to specify alternative video files which the browser may choose from. The browser will use the first recognized format.The text between the <video> and </video> tags will only be displayed in browsers that do not support the <video> element.",
                "HTML <video> Autoplay": "To start a video automatically use the autoplay attribute:```html\n<video width=\"320\" height=\"240\" autoplay>\n<source src=\"movie.mp4\" type=\"video/mp4\">\n<source src=\"movie.ogg\" type=\"video/ogg\">\n\r\nYour browser does not support the video tag.\n\r\n</video>```",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the <video> element.",
                "HTML Video Formats": "There are three supported video formats: MP4, WebM, and Ogg. The browser support for the different formats is:",
                "HTML Video - Media Types": "",
                "HTML Video - Methods, Properties, and Events": "HTML defines DOM methods, properties, and events for the <video> element.This allows you to load, play, and pause videos, as well as setting duration and volume.There are also DOM events that can notify you when a video begins to play, is paused, etc.For a full DOM reference, go to our HTML Audio/Video DOM Reference.",
                "HTML Video Tags": ""
            }
        },
        "audio": {
            "title": "HTML Audio",
            "url": "https://www.w3schools.com/html/html5_audio.asp",
            "info": {
                "The HTML <audio> Element": "To play an audio file in HTML, use the <audio> element:```html\n<audio controls>\n<source src=\"horse.ogg\" type=\"audio/ogg\">\n<source src=\"horse.mp3\" type=\"audio/mpeg\">\n\r\n Your browser does not support the audio element.\n\r\n </audio>```",
                "HTML Audio - How It Works": "The controls attribute adds audio controls, like play, pause, and volume.The <source> element allows you to specify alternative audio files which the browser may choose from. The browser will use the first recognized format.The text between the <audio> and </audio> tags will only be displayed in browsers that do not support the <audio> element.",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports the <audio> element.",
                "HTML Audio Formats": "There are three supported audio formats: MP3, WAV, and OGG. The browser support for the different formats is:\u00a0",
                "HTML Audio - Media Types": "",
                "HTML Audio - Methods, Properties, and Events": "HTML defines DOM methods, properties, and events for the <audio> element.This allows you to load, play, and pause audios, as well as set duration and volume.There are also DOM events that can notify you when an audio begins to play, is paused, etc.For a full DOM reference, go to our HTML Audio/Video DOM Reference.",
                "HTML Audio Tags": ""
            }
        },
        "plug-ins": {
            "title": "HTML Plug-ins",
            "url": "https://www.w3schools.com/html/html_object.asp",
            "info": {
                "Plug-ins": "Plug-ins were designed to be used for many different purposes:",
                "The <object> Element": "The <object> element is supported by all browsers.The <object> element defines an embedded object within an HTML document.It was designed to embed plug-ins (like Java applets, PDF readers, and Flash Players) in web pages,but can also be used to include HTML in HTML:```html\n<object width=\"100%\" height=\"500px\" data=\"snippet.html\"></object>```Or images if you like:```html\n<object data=\"audi.jpeg\"></object>```",
                "The <embed> Element": "The <embed> element is supported in all major browsers.The <embed> element also defines an embedded object within an HTML document.Web browsers have supported the <embed> element for a long time. However, it has not been a part of the HTML  specification before HTML5.```html\n<embed src=\"audi.jpeg\">```The <embed> element can also be used to include HTML in HTML:```html\n<embed width=\"100%\" height=\"500px\" src=\"snippet.html\">```"
            }
        },
        "youtube": {
            "title": "HTML YouTube",
            "url": "https://www.w3schools.com/html/html_youtube.asp",
            "info": {
                "Struggling with Video Formats?": "Earlier in this tutorial, you have seen that you might have to convert your videos to different formats to make them play in all browsers.Converting videos to different formats can be difficult and time-consuming.An easier solution is to let YouTube play the videos in your web page.",
                "YouTube Video Id": "YouTube will display an id (like tgbNymZ7vqY), when you save (or play) a video.You can use this id, and refer to your video in the HTML code.",
                "Playing a YouTube Video in HTML": "To play your video on a web page, do the following:```html\n<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY\">\n\r\n</iframe>```",
                "YouTube Autoplay": "You can have your video start playing automatically when a user visits that page by adding a simple parameter to your YouTube URL.Value 0 (default): The video will not play automatically when the player loads.Value 1: The video will play automatically when the player loads.```html\n<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?autoplay=1\">\n\r\n</iframe>```",
                "YouTube Playlist": "A comma separated list of videos to play (in addition to the original URL).",
                "YouTube Loop": "Value 0 (default): The video will play only once.Value 1: The video will loop (forever).```html\n<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?playlist=tgbNymZ7vqY&loop=1\">\n\r\n</iframe>```",
                "YouTube Controls": "Value 0: Player controls does not display.Value 1 (default): Player controls display.```html\n<iframe width=\"420\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?controls=0\">\n\r\n</iframe>```"
            }
        },
        "geolocation": {
            "title": "HTML Geolocation",
            "url": "https://www.w3schools.com/html/html5_geolocation.asp",
            "info": {
                "Locate the User's Position": "The HTML Geolocation API is used to get the geographical position of a user.Since this can compromise privacy, the position is not available unless the user approves it.Try It",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports Geolocation.",
                "Using HTML Geolocation": "The getCurrentPosition() method is used to return the user's position.The example below returns the latitude and longitude of the user's position:```html\n<script>\nvar x = document.getElementById(\"demo\");\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\r\n function showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude + \n  \"<br>Longitude: \" + position.coords.longitude; \n\r\n }\n</script>```Example explained:The example above is a very basic Geolocation script, with no error handling.",
                "Handling Errors and Rejections": "The second parameter of the getCurrentPosition() method is used to handle errors. It specifies a function to run if it fails to get the user's location:```html\nfunction showError(error) {\n  switch(error.code) {\n    case error.PERMISSION_DENIED:\n      x.innerHTML = \"User denied the request for Geolocation.\"\n      break;\n    case error.POSITION_UNAVAILABLE:\n      x.innerHTML = \"Location information is unavailable.\"\n      break;\n    case error.TIMEOUT:\n      x.innerHTML = \"The request to get user location timed out.\"\n      break;\n    case error.UNKNOWN_ERROR:\n      x.innerHTML = \"An unknown error occurred.\"\n      break;\n  }\n\r\n }```",
                "Displaying the Result in a Map": "To display the result in a map, you need access to a map service, like Google Maps.In the example below, the returned latitude and longitude is used to show the location in a Google Map (using a static image):```html\nfunction showPosition(position) {\n  var latlon = position.coords.latitude + \",\" + position.coords.longitude;\n  var img_url = \"https://maps.googleapis.com/maps/api/staticmap?center=\n \"+latlon+\"&zoom=14&size=400x300&sensor=false&key=YOUR_KEY\";\n document.getElementById(\"mapholder\").innerHTML = \"<img src='\"+img_url+\"'>\";\n\r\n }```",
                "Location-specific Information": "This page has demonstrated how to show a user's position on a map.Geolocation is also very useful for location-specific information, like:",
                "The getCurrentPosition() Method - Return Data": "The getCurrentPosition() method returns an object on success. The latitude, longitude and accuracy properties are always returned. The other properties are returned if available:",
                "Geolocation Object - Other interesting Methods": "The Geolocation object also has other interesting methods:The example below shows the watchPosition() method. You need an accurate GPS device to test this (like smartphone): ```html\n<script>\nvar x = document.getElementById(\"demo\");\nfunction getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.watchPosition(showPosition);\n  } else {\n    x.innerHTML = \"Geolocation is not supported by this browser.\";\n  }\n}\n\r\n function showPosition(position) {\n  x.innerHTML = \"Latitude: \" + position.coords.latitude + \n  \"<br>Longitude: \" + position.coords.longitude; \n\r\n }\n</script>```"
            }
        },
        "drag/drop": {
            "title": "HTML Drag/Drop",
            "url": "https://www.w3schools.com/html/html5_draganddrop.asp",
            "info": {
                "Example": "Drag the W3Schools image into the rectangle.",
                "Drag and Drop": "Drag and drop is a very common feature. It is when you \"grab\" an object and drag it to a different location.",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports Drag and Drop.",
                "HTML Drag and Drop Example": "The example below is a simple drag and drop example:```html\n<!DOCTYPE HTML>\n\r\n <html>\n\r\n <head>\n\r\n <script>\n\r\n function allowDrop(ev)\r\n {\n ev.preventDefault();\n\r\n }\n\n\r\n function drag(ev)\r\n {\n \r\n ev.dataTransfer.setData(\"text\", ev.target.id);\n\r\n }\n\n\r\n function drop(ev)\r\n {\n \r\n ev.preventDefault();\n var data = ev.dataTransfer.getData(\"text\");\n ev.target.appendChild(document.getElementById(data));\n\r\n }\n\r\n </script>\n\r\n </head>\n\r\n <body>\n\n\r\n <div id=\"div1\" ondrop=\"drop(event)\"\r\n ondragover=\"allowDrop(event)\"></div>\n\n\r\n <img id=\"drag1\" src=\"img_logo.gif\" draggable=\"true\"\r\n ondragstart=\"drag(event)\" width=\"336\" height=\"69\">\n\n\r\n </body>\n\r\n </html>```It might seem complicated, but lets go through all the different parts of a drag and drop event.",
                "Make an Element Draggable": "First of all: To make an element draggable, set the draggable attribute to true:",
                "What to Drag - ondragstart and setData()": "Then, specify what should happen when the element is dragged.In the example above, the ondragstart attribute calls a function, drag(event), that specifies what data to be dragged.The dataTransfer.setData() method sets the data type and the value of the dragged data:In this case, the data type is \"text\" and the value is the id of the draggable element (\"drag1\").",
                "Where to Drop - ondragover": "The ondragover event specifies where the dragged data can be dropped.By default, data/elements cannot be dropped in other elements. To allow a drop, we must prevent the default handling of the element.This is done by calling the event.preventDefault() method for the ondragover event:",
                "Do the Drop - ondrop": "When the dragged data is dropped, a drop event occurs.In the example above, the ondrop attribute calls a function, drop(event):Code explained:",
                "More Examples": ""
            }
        },
        "webstorage": {
            "title": "HTML Web Storage",
            "url": "https://www.w3schools.com/html/html5_webstorage.asp",
            "info": {
                "What is HTML Web Storage?": "With web storage, web applications can store data locally within the user's browser.Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.Unlike cookies, the storage limit is far larger (at least 5MB) and information is never transferred to the server.Web storage is per origin (per domain and protocol). All pages, from one origin, can store and access the same data.",
                "Browser Support": "The numbers in the table specify the first browser version that fully supports Web Storage.",
                "HTML Web Storage Objects": "HTML web storage provides two objects for storing data on the client:Before using web storage, check browser support for localStorage and sessionStorage:",
                "The localStorage Object": "The localStorage object stores the data with no expiration date. The data will not be deleted when the browser is closed, and will be available the next day, week, or year.```html\n// Store\nlocalStorage.setItem(\"lastname\", \"Smith\");\n// Retrieve\n\r\n document.getElementById(\"result\").innerHTML = localStorage.getItem(\"lastname\");```Example explained:The example above could also be written like this:The syntax for removing the \"lastname\" localStorage item is as follows:Note: Name/value pairs are always stored as strings. Remember to convert them to another format when needed!The following example counts the number of times a user has clicked a button. In this code the value string is converted to a number to be able to increase the counter:```html\nif (localStorage.clickcount) {\n  localStorage.clickcount = Number(localStorage.clickcount) + 1;\n\r\n } else {\n  localStorage.clickcount = 1;\n}\n\r\n document.getElementById(\"result\").innerHTML = \"You have clicked the button \" +\n\r\nlocalStorage.clickcount + \" time(s).\";```",
                "The sessionStorage Object": "The sessionStorage object is equal to the localStorage object, except that it stores the data for only one session. The data is deleted when the user closes the specific browser tab.The following example counts the number of times a user has clicked a button, in the current session:```html\nif (sessionStorage.clickcount) {\n  sessionStorage.clickcount = Number(sessionStorage.clickcount) + 1;\n}\r\nelse {\n  sessionStorage.clickcount = 1;\n}\n\r\ndocument.getElementById(\"result\").innerHTML = \"You have clicked the button \" +\n\r\nsessionStorage.clickcount + \" time(s) in this session.\";```"
            }
        },
        "webworkers": {
            "title": "HTML Web Workers",
            "url": "https://www.w3schools.com/html/html5_webworkers.asp",
            "info": {
                "What is a Web Worker?": "When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.",
                "Browser Support": "The numbers in the table specify the first browser version that fully support Web Workers.",
                "HTML Web Workers Example": "The example below creates a simple web worker that count numbers in the background:",
                "Check Web Worker Support": "Before creating a web worker, check whether the user's browser supports it:",
                "Create a Web Worker File": "Now, let's create our web worker in an external JavaScript.Here, we create a script that counts. The script is stored in the \"demo\\_workers.js\" file:The important part of the code above is the postMessage() method - which is used to post a message back to the HTML page.Note: Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.",
                "Create a Web Worker Object": "Now that we have the web worker file, we need to call it from an HTML page.The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in \"demo\\_workers.js\":Then we can send and receive messages from the web worker.Add an \"onmessage\" event listener to the web worker.When the web worker posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data.",
                "Terminate a Web Worker": "When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.To terminate a web worker, and free browser/computer resources, use the terminate() method:",
                "Reuse the Web Worker": "If you set the worker variable to undefined, after it has been terminated, you can reuse the code:",
                "Full Web Worker Example Code": "We have already seen the Worker code in the .js file. Below is the code for the HTML page:```html\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\n\r\n<p>Count numbers: <output id=\"result\"></output></p>\n\r\n<button onclick=\"startWorker()\">Start Worker</button> \n\r\n<button onclick=\"stopWorker()\">Stop Worker</button>\n\n\r\n<script>\n\r\nvar w;\n\n\r\nfunction startWorker()\r\n{\n \r\nif (typeof(Worker) !== \"undefined\")\r\n{\n  if (typeof(w) == \"undefined\") {\n      w = new Worker(\"demo_workers.js\");\n    }\n  w.onmessage = function(event) {\n      document.getElementById(\"result\").innerHTML = event.data;\n  };\n}\r\nelse\r\n{\n   \r\ndocument.getElementById(\"result\").innerHTML = \"Sorry! No Web Worker support.\";\n  }\n\r\n}\n\n\r\nfunction stopWorker()\r\n{ \nw.terminate();\n  w = undefined;\n\r\n}\n\r\n</script>\n\n\r\n</body>\n\r\n</html>```",
                "Web Workers and the DOM": "Since web workers are in external files, they do not have access to the following JavaScript objects:"
            }
        },
        "sse": {
            "title": "HTML SSE",
            "url": "https://www.w3schools.com/html/html5_serversentevents.asp",
            "info": {
                "Server-Sent Events - One Way Messaging": "A server-sent event is when a web page automatically gets updates from a server.This was also possible before, but the web page would have to ask if any updates were available. With server-sent events, the updates come automatically.Examples: Facebook/Twitter updates, stock price updates, news feeds, sport results, etc.",
                "Browser Support": "The numbers in the table specify the first browser version that fully support server-sent events.",
                "Receive Server-Sent Event Notifications": "The EventSource object is used to receive server-sent event notifications:```html\nvar source = new EventSource(\"demo_sse.php\");\nsource.onmessage = function(event) {\n  document.getElementById(\"result\").innerHTML += event.data + \"<br>\";\n};```Example explained:",
                "Check Server-Sent Events Support": "In the tryit example above there were some extra lines of code to check browser support for server-sent events:",
                "Server-Side Code Example": "For the example above to work, you need a server capable of sending data updates (like PHP or ASP).The server-side event stream syntax is simple. Set the \"Content-Type\" header to \"text/event-stream\". Now you can start sending event streams.Code in PHP (demo\\_sse.php):Code in ASP (VB) (demo\\_sse.asp):Code explained:",
                "The EventSource Object": "In the examples above we used the onmessage event to get messages. But other events are also available:"
            }
        },
        "summary": {
            "title": "HTML Summary",
            "url": "https://www.w3schools.com/html/html_summary.asp",
            "info": {
                "HTML Summary": "This tutorial has taught you how to use HTML to create your own web site.HTML is the universal markup language for the Web. HTML lets you format text, add graphics, create links, input forms, frames and tables, etc., and save it all in a text file that anybrowser can read and display.For more information on HTML, please take a look at our HTML examples and our HTML reference.You can also test your HTML skills with HTML Exercises and HTML Quizzes.",
                "Now You Know HTML, What's Next?": "",
                "Learn CSS": "CSS lets you style your HTML pages.CSS gives you total control of the layout, without messing up the document content.To learn more about CSS, please visit our CSS tutorial.",
                "Learn JavaScript": "JavaScript makes your website more dynamic. A dynamic website can react to events and allow user interaction.JavaScript is the most popular scripting language on the internet and it works with all major browsers.If you want to learn more about JavaScript, please visit our JavaScript tutorial.",
                "Publishing Your Website": "To make your website available to the world, you must publish it.For this, you have two options:",
                "Using an Internet Service Provider": "An Internet service provider (ISP) is a company that provides services for accessing and using the Internet.Internet services typically provided by ISPs include Internet access, Internet transit, domain name registration, web hosting, Usenet service, and colocation.Using an Internet Service Provider (ISP) is the most common option. ",
                "Hosting Your Own Website": "Hosting your own website, on your own server, is also an option.Get Your Certificate \u00bbThe HTML Certificate documents your knowledge of HTML.The CSS Certificate documents your knowledge of advanced CSS.The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.The Python Certificate documents your knowledge of Python.The jQuery Certificate documents your knowledge of jQuery.The SQL Certificate documents your knowledge of SQL.The PHP Certificate documents your knowledge of PHP and MySQL.The XML Certificate documents your knowledge of XML, XML DOM and XSLT.The Bootstrap Certificate documents your knowledge of the Bootstrap framework."
            }
        },
        "accessibility": {
            "title": "HTML Accessibility",
            "url": "https://www.w3schools.com/html/html_accessibility.asp",
            "info": {
                "HTML Accessibility": "Write HTML with accessibility in mind. Provide the user a good way to navigate and interact with your site. Make your HTML code as semantic as possible, so that the code is easy to understand for visitors and screen readers.",
                "Semantic HTML": "Semantic HTML means using correct HTML elements for their correct purpose as much as possible. Semantic elements are elements with a meaning; if you need a button, use the <button> element (and not a <div>).```html\n<button>Click Me</button>```Semantic HTML gives context to screen readers, which read the contents of a web page out loud.With the button example in mind: A button is also accessible for people relying on keyboard-only navigation; it can be clickable with both mouse and keys, and it can be tabbed between (using the tab key on the keyboard).Examples of non-semantic elements: <div> and <span> - Tells nothing about its content.Examples of semantic elements: <form>, <table>, and <article> - Clearly defines its content.",
                "Headings Are Important": "Headings are defined with the <h1> to <h6> tags:```html\n<h1>Heading 1</h1>\n\r\n<h2>Heading 2</h2>\n\r\n<h3>Heading 3</h3>\n<h4>Heading 4</h4>\n<h5>Heading 5</h5>\n<h6>Heading 6</h6>```Search engines use the headings to index the structure and content of your web pages.Users skim your pages by its headings. It is important to use headings to show the document structure and the relationships between different sections.<h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on.",
                "Alternative Text": "The alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, or if the user uses a screen reader).The value of the alt attribute should describe the image:```html\n<img src=\"img_chania.jpg\" alt=\"Flowers in Chania\">```If a browser cannot find an image, it will display the value of the alt attribute:```html\n<img src=\"wrongname.gif\" alt=\"Flowers in Chania\">```",
                "Declare the Language": "Declaring a language is important for screen readers and search engines, and is declared with the lang attribute. Use the following to show a web page in English:```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<body>\n\r\n ...\n</body>\n</html>```",
                "Use Clear Language": "Use clear language that is easy to understand, and try to avoid characters that cannot be read clearly by a screen reader. For example:",
                "Write Good Links": "A link should explain clearly what information the reader will get by clicking on that link.Examples of good and bad links:```html\nFind out more about the HTML language\nRead more about how to eat healthy\nBuy tickets to Mars here```",
                "Link Titles": "The title attribute specifies extra information about an element.The information is most often shown as a tooltip text when the mouse moves over the element.```html\n<a href=\"https://www.w3schools.com/html/\" title=\"Go to W3Schools HTML section\">Visit our HTML Tutorial</a>```"
            }
        }
    },
    "cpp": {
        "c++home": {
            "title": "C++ HOME",
            "url": "https://www.w3schools.com/cpp/default.asp",
            "info": {
                "Examples in Each Chapter": "Our \"Show C++\" tool makes it easy to learn C++, it shows both the code and the result.```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}```Click on the \"Run example\" button to see how it works.",
                "Learn by Examples": "Learn by examples! This tutorial supplements all explanations with clarifying examples.See All C++ Examples",
                "C++ Quiz": "Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C++.Start C++ Quiz"
            }
        },
        "c++intro": {
            "title": "C++ Intro",
            "url": "https://www.w3schools.com/cpp/cpp_intro.asp",
            "info": {
                "What is C++?": "C++ is a cross-platform language that can be used to create high-performance applications.C++ was developed by Bjarne Stroustrup, as an extension to the C language.C++ gives programmers a high level of control over system resources and memory.The language was updated 3 major times in 2011, 2014, and 2017 to C++11, C++14, and  C++17.",
                "Why Use C++": "C++ is one of the world's most popular programming languages.C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be reused, lowering development costs.C++ is portable and can be used to develop applications that can be adapted to multiple platforms.C++ is fun and easy to learn!As C++ is close to C# and Java, it makes it easy for programmers to switch to C++ or vice versa",
                "Get Started": "This tutorial will teach you the basics of C++.It is not necessary to have any prior programming experience."
            }
        },
        "c++getstarted": {
            "title": "C++ Get Started",
            "url": "https://www.w3schools.com/cpp/cpp_getstarted.asp",
            "info": {
                "C++ Get Started": "To start using C++, you need two things:There are many text editors and compilers to choose from. In this tutorial, we will use an IDE (see below).",
                "C++ Install IDE": "An IDE (Integrated Development Environment) is used to edit AND compile the code.Popular IDE's include Code::Blocks, Eclipse, and Visual Studio.  These are all free, and they can be used to both edit and debug C++ code.Note: Web-based IDE's can work as well, but functionality is limited.We will use Code::Blocks in our tutorial, which we believe is a good place to start.You can find the latest version of Codeblocks at http://www.codeblocks.org/downloads/26. Download the mingw-setup.exe file, which will install the text editor with a compiler. ",
                "C++ Quickstart": "Let's create our first C++ file.Open Codeblocks and go to File > New > Empty File.Write the following C++ code and save the file as myfirstprogram.cpp (File > Save File as):```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}```Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.In Codeblocks, it should look like this:Then, go to Build > Build and Run to run (execute) the program. The result will look something to this:Congratulations! You have now written and executed your first C++ program.",
                "Learning C++ At W3Schools": "When learning C++ at W3Schools.com, you can use our \"Run Example\" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}```"
            }
        },
        "c++syntax": {
            "title": "C++ Syntax",
            "url": "https://www.w3schools.com/cpp/cpp_syntax.asp",
            "info": {
                "C++ Syntax": "Let's break up the following code to understand it better:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}```Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as cout (used in line 5). Header files add functionality to C++ programs.Line 2: using namespace std means that we can use names for objects and variables from the standard library.Line 3: A blank line. C++ ignores white space.Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code inside its curly brackets {} will be executed.Line 5: cout (pronounced \"see-out\") is an object used together with the insertion operator (<<) to output/print text. In our example it will output \"Hello World\".Note: Every C++ statement ends with a semicolon ;.Note: The body of int main() could also been written as:int main () { cout << \"Hello World! \";  return 0; }Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.Line 6: return 0 ends the main function.Line 7: Do not forget to add the closing curly bracket } to actually end the main function.",
                "Omitting Namespace": "You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for some objects:```cpp\n#include <iostream>\nint main() {\n  std::cout << \"Hello World!\";\n  return 0;\n}```"
            }
        },
        "c++output": {
            "title": "C++ Output",
            "url": "https://www.w3schools.com/cpp/cpp_output.asp",
            "info": {
                "C++ Output (Print Text)": "The cout object, together with the << operator, is used to output values/print text:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}```You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  cout << \"I am learning C++\";\n  return 0;\n}```"
            }
        },
        "printtext": {
            "title": "Print Text",
            "url": "https://www.w3schools.com/cpp/cpp_output.asp",
            "info": {
                "C++ Output (Print Text)": "The cout object, together with the << operator, is used to output values/print text:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}```You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\";\n  cout << \"I am learning C++\";\n  return 0;\n}```"
            }
        },
        "newlines": {
            "title": "New Lines",
            "url": "https://www.w3schools.com/cpp/cpp_new_lines.asp",
            "info": {
                "New Lines": "To insert a new line, you can use the \\n character:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World! \\n\";\n  cout << \"I am learning C++\";\n  return 0;\n}```Tip: Two \\n characters after each other will create a blank line:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World! \\n\\n\";\n  cout << \"I am learning C++\";\n  return 0;\n}```Another way to insert a new line, is with the endl manipulator:```cpp\n#include <iostream>\nusing namespace std;\nint main() {\n  cout << \"Hello World!\" << endl;\n  cout << \"I am learning C++\";\n  return 0;\n}```"
            }
        },
        "c++comments": {
            "title": "C++ Comments",
            "url": "https://www.w3schools.com/cpp/cpp_comments.asp",
            "info": {
                "C++ Comments": "Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined.Single-line comments start with two forward slashes (//).Any text between // and the end of the line is ignored by the compiler (will not be executed).This example uses a single-line comment before a line of code:```cpp\n// This is a comment\ncout << \"Hello World!\";```This example uses a single-line comment at the end of a line of code:```cpp\ncout << \"Hello World!\"; // This is a comment```",
                "C++ Multi-line Comments": "Multi-line comments start with /\\* and ends with \\*/.Any text between /\\* and \\*/ will be ignored by the compiler:```cpp\n/* The code below will print the words Hello World!\nto the screen, and it is amazing */\ncout << \"Hello World!\";```"
            }
        },
        "c++variables": {
            "title": "C++ Variables",
            "url": "https://www.w3schools.com/cpp/cpp_variables.asp",
            "info": {
                "C++ Variables": "Variables are containers for storing data values. In C++, there are different types of variables (defined with different keywords), for example:",
                "Declaring (Creating) Variables": "To create a variable, you must specify the type and assign it a value:```cpp\ntype variable = value;```Where type is one of C++ types (such as int), and variable is the name of the variable (such as x ormyName). The equal sign is used to assign values to the variable.To create a variable that should store a number, look at the following example:```cpp\nint myNum = 15;\ncout << myNum;```You can also declare a variable without assigning the value, and assign the value later:```cpp\nint myNum;\nmyNum = 15;\ncout << myNum;```Note that if you assign a new value to an existing variable, it will overwrite the previous value:```cpp\nint myNum = 15;  // myNum is 15\nmyNum = 10;  // Now myNum is 10\ncout << myNum;  // Outputs 10```",
                "Other Types": "A demonstration of other data types:```cpp\nint myNum = 5;               // Integer (whole number without decimals)\ndouble myFloatNum = 5.99;    // Floating point number (with decimals)\nchar myLetter = 'D';         // Character\nstring myText = \"Hello\";     // String (text)\nbool myBoolean = true;       // Boolean (true or false)```",
                "Display Variables": "The cout object is used together with the << operator to display variables.To combine both text and a variable, separate them with the << operator:```cpp\nint myAge = 35;\ncout << \"I am \" << myAge << \" years old.\";```",
                "Add Variables Together": "To add a variable to another variable, you can use the + operator:```cpp\nint x = 5;\nint y = 6;\nint sum = x + y;\ncout << sum;```"
            }
        },
        "declarevariables": {
            "title": "Declare Variables",
            "url": "https://www.w3schools.com/cpp/cpp_variables.asp",
            "info": {
                "C++ Variables": "Variables are containers for storing data values. In C++, there are different types of variables (defined with different keywords), for example:",
                "Declaring (Creating) Variables": "To create a variable, you must specify the type and assign it a value:```cpp\ntype variable = value;```Where type is one of C++ types (such as int), and variable is the name of the variable (such as x ormyName). The equal sign is used to assign values to the variable.To create a variable that should store a number, look at the following example:```cpp\nint myNum = 15;\ncout << myNum;```You can also declare a variable without assigning the value, and assign the value later:```cpp\nint myNum;\nmyNum = 15;\ncout << myNum;```Note that if you assign a new value to an existing variable, it will overwrite the previous value:```cpp\nint myNum = 15;  // myNum is 15\nmyNum = 10;  // Now myNum is 10\ncout << myNum;  // Outputs 10```",
                "Other Types": "A demonstration of other data types:```cpp\nint myNum = 5;               // Integer (whole number without decimals)\ndouble myFloatNum = 5.99;    // Floating point number (with decimals)\nchar myLetter = 'D';         // Character\nstring myText = \"Hello\";     // String (text)\nbool myBoolean = true;       // Boolean (true or false)```",
                "Display Variables": "The cout object is used together with the << operator to display variables.To combine both text and a variable, separate them with the << operator:```cpp\nint myAge = 35;\ncout << \"I am \" << myAge << \" years old.\";```",
                "Add Variables Together": "To add a variable to another variable, you can use the + operator:```cpp\nint x = 5;\nint y = 6;\nint sum = x + y;\ncout << sum;```"
            }
        },
        "declaremultiplevariables": {
            "title": "Declare Multiple Variables",
            "url": "https://www.w3schools.com/cpp/cpp_variables_multiple.asp",
            "info": {
                "Declare Many Variables": "To declare more than one variable of the same type, use a comma-separated list:```cpp\nint x = 5, y = 6, z = 50;\ncout << x + y + z;```"
            }
        },
        "identifiers": {
            "title": "Identifiers",
            "url": "https://www.w3schools.com/cpp/cpp_variables_identifiers.asp",
            "info": {
                "C++ Identifiers": "All C++ variables must beidentified with unique names.These unique names are called identifiers.Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).Note: It is recommended to use descriptive names in order to create understandable and maintainable code:```cpp\n// Good\nint minutesPerHour = 60;\n// OK, but not so easy to understand what m actually is\nint  m = 60;```The general rules for constructing names for variables (unique identifiers) are:"
            }
        },
        "constants": {
            "title": "Constants",
            "url": "https://www.w3schools.com/cpp/cpp_variables_constants.asp",
            "info": {
                "Constants": "When you do not want others (or yourself) to override existing variable values, use the const keyword (this will declare the variable as \"constant\", which means unchangeable and read-only):```cpp\nconst int myNum = 15;  // myNum will always be 15\nmyNum = 10;  // error: assignment of read-only variable 'myNum'```You should always declare the variable as constant when you have values that are unlikely to change:```cpp\nconst int minutesPerHour = 60;\nconst float PI = 3.14;```"
            }
        },
        "c++userinput": {
            "title": "C++ User Input",
            "url": "https://www.w3schools.com/cpp/cpp_user_input.asp",
            "info": {
                "C++ User Input": "You have already learned that cout is used to output (print) values. Now we will use cin to get user input.cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:```cpp\nint x; \ncout << \"Type a number: \"; // Type a number and press enter\ncin >> x; // Get user input from the keyboard\ncout << \"Your number is: \" << x; // Display the input value```",
                "Creating a Simple Calculator": "In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:```cpp\nint x, y;\nint sum;\ncout << \"Type a number: \";\ncin >> x;\ncout << \"Type another number: \";\ncin >> y;\nsum = x + y;\ncout << \"Sum is: \" << sum;```There you go! You just built a basic calculator!"
            }
        },
        "c++datatypes": {
            "title": "C++ Data Types",
            "url": "https://www.w3schools.com/cpp/cpp_data_types.asp",
            "info": {
                "C++ Data Types": "As explained in the Variables chapter, a variable in C++ must be a specified data type:```cpp\nint myNum = 5;               // Integer (whole number)\nfloat myFloatNum = 5.99;     // Floating point number\ndouble myDoubleNum = 9.98;   // Floating point number\nchar myLetter = 'D';         // Character\nbool myBoolean = true;       // Boolean\nstring myText = \"Hello\";     // String```",
                "Basic Data Types": "The data type specifies the size and type of information the variable will store:"
            }
        },
        "basicdatatypes": {
            "title": "Basic Data Types",
            "url": "https://www.w3schools.com/cpp/cpp_data_types.asp",
            "info": {
                "C++ Data Types": "As explained in the Variables chapter, a variable in C++ must be a specified data type:```cpp\nint myNum = 5;               // Integer (whole number)\nfloat myFloatNum = 5.99;     // Floating point number\ndouble myDoubleNum = 9.98;   // Floating point number\nchar myLetter = 'D';         // Character\nbool myBoolean = true;       // Boolean\nstring myText = \"Hello\";     // String```",
                "Basic Data Types": "The data type specifies the size and type of information the variable will store:"
            }
        },
        "numbers": {
            "title": "Numbers",
            "url": "https://www.w3schools.com/cpp/cpp_data_types_numeric.asp",
            "info": {
                "Numeric Types": "Use int when you need to store a whole number without decimals, like 35 or 1000, and float or double when you need a floating point number (with decimals), like 9.99 or 3.14515.```cpp\nint myNum = 1000;\ncout << myNum;``````cpp\nfloat myNum = 5.75;\ncout << myNum;``````cpp\ndouble myNum = 19.99;\ncout << myNum;```A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:```cpp\nfloat f1 = 35e3;\ndouble d1 = 12E4;\ncout << f1;\ncout << d1;```"
            }
        },
        "booleans": {
            "title": "Booleans",
            "url": "https://www.w3schools.com/cpp/cpp_data_types_bool.asp",
            "info": {
                "Boolean Types": "A boolean data type is declared with the bool keyword and can only take the values true or false. When the value is returned, true = 1 and false = 0.```cpp\nbool isCodingFun = true;\nbool isFishTasty = false;\ncout << isCodingFun;  // Outputs 1 (true)\ncout << isFishTasty;  // Outputs 0 (false)```"
            }
        },
        "characters": {
            "title": "Characters",
            "url": "https://www.w3schools.com/cpp/cpp_data_types_char.asp",
            "info": {
                "Character Types": "The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':```cpp\nchar myGrade = 'B';\ncout << myGrade;```Alternatively, you can use ASCII values to display certain characters:```cpp\nchar a = 65, b = 66, c = 67;\ncout << a;\ncout << b;\ncout << c;```Tip: A list of all ASCII values can be found in our ASCII Table Reference."
            }
        },
        "strings": {
            "title": "Strings",
            "url": "https://www.w3schools.com/cpp/cpp_data_types_string.asp",
            "info": {
                "String Types": "The string type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one in its most basic usage. String values must be surrounded by double quotes:```cpp\nstring greeting = \"Hello\";\ncout << greeting;```To use strings, you must include an additional header file in the source code, the <string> library:```cpp\n// Include the string library\n#include <string>\n// Create a string variable\nstring greeting = \"Hello\";\n\n// Output string value\ncout << greeting;```",
                "C++ Strings": "Strings are used for storing text.A string variable contains a collection of characters surrounded by double quotes:```cpp\nstring greeting = \"Hello\";```To use strings, you must include an additional header file in the source code, the <string> library:```cpp\n// Include the string library\n#include <string>\n// Create a string variable\nstring greeting = \"Hello\";```"
            }
        },
        "c++operators": {
            "title": "C++ Operators",
            "url": "https://www.w3schools.com/cpp/cpp_operators.asp",
            "info": {
                "C++ Operators": "Operators are used to perform operations on variables and values.In the example below, we use the+ operator to add together two values:```cpp\nint x = 100 + 50;```Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:```cpp\nint sum1 = 100 + 50;        // 150 (100 + 50)\nint sum2 = sum1 + 250;      // 400 (150 + 250)\nint sum3 = sum2 + sum2;     // 800 (400 + 400)```C++ divides the operators into the following groups:",
                "Arithmetic Operators": "Arithmetic operators are used to perform common mathematical operations."
            }
        },
        "arithmetic": {
            "title": "Arithmetic",
            "url": "https://www.w3schools.com/cpp/cpp_operators.asp",
            "info": {
                "C++ Operators": "Operators are used to perform operations on variables and values.In the example below, we use the+ operator to add together two values:```cpp\nint x = 100 + 50;```Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:```cpp\nint sum1 = 100 + 50;        // 150 (100 + 50)\nint sum2 = sum1 + 250;      // 400 (150 + 250)\nint sum3 = sum2 + sum2;     // 800 (400 + 400)```C++ divides the operators into the following groups:",
                "Arithmetic Operators": "Arithmetic operators are used to perform common mathematical operations."
            }
        },
        "assignment": {
            "title": "Assignment",
            "url": "https://www.w3schools.com/cpp/cpp_operators_assignment.asp",
            "info": {
                "Assignment Operators": "Assignment operators are used to assign values to variables.In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:```cpp\nint x = 10;```The addition assignment operator (+=) adds a value to a variable:```cpp\nint x = 10;\nx += 5;```A list of all assignment operators:"
            }
        },
        "comparison": {
            "title": "Comparison",
            "url": "https://www.w3schools.com/cpp/cpp_operators_comparison.asp",
            "info": {
                "Comparison Operators": "Comparison operators are used to compare two values.Note: The return value of a comparison is either true (1) or false (0).In the following example, we use the greater than operator (>) to find out if 5 is greater than 3:```cpp\nint x = 5;\nint y = 3;\ncout << (x > y); // returns 1 (true) because 5 is greater than 3```A list of all comparison operators:"
            }
        },
        "logical": {
            "title": "Logical",
            "url": "https://www.w3schools.com/cpp/cpp_operators_logical.asp",
            "info": {
                "Logical Operators": "Logical operators are used to determine the logic between variables or values:"
            }
        },
        "c++strings": {
            "title": "C++ Strings",
            "url": "https://www.w3schools.com/cpp/cpp_strings.asp",
            "info": {
                "C++ Strings": "Strings are used for storing text.A string variable contains a collection of characters surrounded by double quotes:```cpp\nstring greeting = \"Hello\";```To use strings, you must include an additional header file in the source code, the <string> library:```cpp\n// Include the string library\n#include <string>\n// Create a string variable\nstring greeting = \"Hello\";```"
            }
        },
        "concatenation": {
            "title": "Concatenation",
            "url": "https://www.w3schools.com/cpp/cpp_strings_concat.asp",
            "info": {
                "String Concatenation": "The + operator can be used between strings to add them together to make a new string. This is called concatenation:```cpp\nstring firstName = \"John \";\nstring lastName = \"Doe\";\nstring fullName = firstName + lastName;\ncout << fullName;```In the example above, we added a space after firstName to create a space between John and Doe on output. However, you could also add a space with quotes (\" \" or ' '):```cpp\nstring firstName = \"John\";\nstring lastName = \"Doe\";\nstring fullName = firstName + \" \" + lastName;\ncout << fullName;```",
                "Append": "A string in C++ is actually an object, which contain functions that can perform certain operations on strings. For example, you can also concatenate strings with the append() function:```cpp\nstring firstName = \"John \";\nstring lastName = \"Doe\";\nstring fullName = firstName.append(lastName);\ncout << fullName;```"
            }
        },
        "numbersandstrings": {
            "title": "Numbers and Strings",
            "url": "https://www.w3schools.com/cpp/cpp_strings_numbers.asp",
            "info": {
                "Adding Numbers and Strings": "If you add two numbers, the result will be a number:```cpp\nint x = 10;\nint y = 20;\nint z = x + y;      // z will be 30 (an integer)```If you add two strings, the result will be a string concatenation:```cpp\nstring x = \"10\";\nstring y = \"20\";\nstring z = x + y;   // z will be 1020 (a string)```If you try to add a number to a string, an error occurs:```cpp\nstring x = \"10\";\nint y = 20;\nstring z = x + y;```"
            }
        },
        "stringlength": {
            "title": "String Length",
            "url": "https://www.w3schools.com/cpp/cpp_strings_length.asp",
            "info": {
                "String Length": "To get the length of a string, use the length() function:```cpp\nstring txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\ncout << \"The length of the txt string is: \" << txt.length();```Tip: You might see some C++ programs that use the size() function to get the length of a string. This is just an alias of length(). It is completely up to you if you want to use length() or size():```cpp\nstring txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\ncout << \"The length of the txt string is: \" << txt.size();```"
            }
        },
        "accessstrings": {
            "title": "Access Strings",
            "url": "https://www.w3schools.com/cpp/cpp_strings_access.asp",
            "info": {
                "Access Strings": "You can access the characters in a string by referring to its index number inside square brackets [].This example prints the first character in myString:```cpp\nstring myString = \"Hello\";\ncout << myString[0];\n// Outputs H```This example prints the second character in myString:```cpp\nstring myString = \"Hello\";\ncout << myString[1];\n// Outputs e```",
                "Change String Characters": "To change the value of a specific character in a string, refer to the index number, and use single quotes:```cpp\nstring myString = \"Hello\";\nmyString[0] = 'J';\ncout << myString;\n// Outputs Jello instead of Hello```"
            }
        },
        "userinputstrings": {
            "title": "User Input Strings",
            "url": "https://www.w3schools.com/cpp/cpp_strings_input.asp",
            "info": {
                "User Input Strings": "It is possible to use the extraction operator >> on cin to display a string entered by a user:```cpp\nstring firstName;\ncout << \"Type your first name: \"; \ncin >> firstName; // get user input from the keyboard\ncout << \"Your name is: \" << firstName;\n// Type your first name: John\n// Your name is: John```However, cin considers a space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word (even if you type many words):```cpp\nstring fullName;\ncout << \"Type your full name: \"; \ncin >> fullName;\ncout << \"Your name is: \" << fullName;\n// Type your full name: John Doe\n// Your name is: John```From the example above, you would expect the program to print \"John Doe\", but it only prints \"John\". That's why, when working with strings, we often use the getline() function to read a line of text. It takes cin as the first parameter, and the string variable as second:"
            }
        },
        "omittingnamespace": {
            "title": "Omitting Namespace",
            "url": "https://www.w3schools.com/cpp/cpp_strings_namespace.asp",
            "info": {
                "Omitting Namespace": "You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be omitted and replaced with the std keyword, followed by the :: operator for string (and cout) objects:```cpp\n#include <iostream>\n#include <string>\nint main() {\n std::string greeting = \"Hello\";\n  std::cout << greeting;\n  return 0;\n}```"
            }
        },
        "c++math": {
            "title": "C++ Math",
            "url": "https://www.w3schools.com/cpp/cpp_math.asp",
            "info": {
                "C++ Math": "C++ has many functions that allows you to perform mathematical tasks on numbers.",
                "Max and min": "The max(x,y) function can be used to find the highest value of x andy:```cpp\ncout << max(5, 10);```And the min(x,y) function can be used to find the lowest value of x and y:```cpp\ncout << min(5, 10);```",
                "C++  <cmath> Header": "Other functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), can be found in the <cmath> header file:```cpp\n// Include the cmath library\n#include <cmath>\ncout << sqrt(64);\ncout << round(2.6);\ncout << log(2);```",
                "Other Math Functions": "A list of other popular Math functions (from the <cmath> library) can be found in the table below:"
            }
        },
        "c++booleans": {
            "title": "C++ Booleans",
            "url": "https://www.w3schools.com/cpp/cpp_booleans.asp",
            "info": {
                "C++ Booleans": "Very often, in programming, you will need a data type that can only have one of two values, like:For this, C++ has a bool data type, which can take the values true (1) or false (0).",
                "Boolean Values": "A boolean variable is declared with the bool keyword and can only take the values true or false:```cpp\nbool isCodingFun = true;\nbool isFishTasty = false;\ncout << isCodingFun;  // Outputs 1 (true)\ncout << isFishTasty;  // Outputs 0 (false)```From the example above, you can read that a true value returns 1, and false returns 0.However, it is more common to return boolean values from boolean expressions(see next page)."
            }
        },
        "booleanvalues": {
            "title": "Boolean Values",
            "url": "https://www.w3schools.com/cpp/cpp_booleans.asp",
            "info": {
                "C++ Booleans": "Very often, in programming, you will need a data type that can only have one of two values, like:For this, C++ has a bool data type, which can take the values true (1) or false (0).",
                "Boolean Values": "A boolean variable is declared with the bool keyword and can only take the values true or false:```cpp\nbool isCodingFun = true;\nbool isFishTasty = false;\ncout << isCodingFun;  // Outputs 1 (true)\ncout << isFishTasty;  // Outputs 0 (false)```From the example above, you can read that a true value returns 1, and false returns 0.However, it is more common to return boolean values from boolean expressions(see next page)."
            }
        },
        "booleanexpressions": {
            "title": "Boolean Expressions",
            "url": "https://www.w3schools.com/cpp/cpp_booleans_expressions.asp",
            "info": {
                "Boolean Expression": "A Boolean expression is a C++ expression that returns a boolean value: 1 (true) or 0 (false).You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:```cpp\nint x = 10;\nint y = 9;\ncout << (x > y); // returns 1 (true), because 10 is higher than 9```Or even easier:```cpp\ncout << (10 > 9); // returns 1 (true), because 10 is higher than 9```In the examples below, we use the equal to (==) operator to evaluate an expression:```cpp\nint x = 10;\ncout << (x == 10);  // returns 1 (true), because the value of x is equal to 10``````cpp\ncout << (10 == 15);  // returns 0 (false), because 10 is not equal to 15```"
            }
        },
        "c++conditions": {
            "title": "C++ Conditions",
            "url": "https://www.w3schools.com/cpp/cpp_conditions.asp",
            "info": {
                "C++ Conditions and If Statements": "C++ supports the usual logical conditions from mathematics:You can use these conditions to perform different actions for different decisions.C++ has the following conditional statements:",
                "The if Statement": "Use the if statement to specify a block of C++ code to be executed if a condition is true.```cpp\nif (condition) {\n  // block of code to be executed if the condition is true\n}```In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:```cpp\nif (20 > 18) {\n  cout << \"20 is greater than 18\";\n}```We can also test variables:```cpp\nint x = 20;\nint y = 18;\nif (x > y) {\n  cout << \"x is greater than y\";\n}```In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\"."
            }
        },
        "if": {
            "title": "if",
            "url": "https://www.w3schools.com/cpp/cpp_conditions.asp",
            "info": {
                "C++ Conditions and If Statements": "C++ supports the usual logical conditions from mathematics:You can use these conditions to perform different actions for different decisions.C++ has the following conditional statements:",
                "The if Statement": "Use the if statement to specify a block of C++ code to be executed if a condition is true.```cpp\nif (condition) {\n  // block of code to be executed if the condition is true\n}```In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:```cpp\nif (20 > 18) {\n  cout << \"20 is greater than 18\";\n}```We can also test variables:```cpp\nint x = 20;\nint y = 18;\nif (x > y) {\n  cout << \"x is greater than y\";\n}```In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\"."
            }
        },
        "else": {
            "title": "else",
            "url": "https://www.w3schools.com/cpp/cpp_conditions_else.asp",
            "info": {
                "The else Statement": "Use the else statement to specify a block of code to be executed if the condition is false.```cpp\nif (condition) {\n  // block of code to be executed if the condition is true\n} else { \n  // block of code to be executed if the condition is false\n}``````cpp\nint time = 20;\nif (time < 18) {\n  cout << \"Good day.\";\n} else {\n  cout << \"Good evening.\";\n}\n// Outputs \"Good evening.\"```In the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\"."
            }
        },
        "elseif": {
            "title": "else if",
            "url": "https://www.w3schools.com/cpp/cpp_conditions_elseif.asp",
            "info": {
                "The else if Statement": "Use the else if statement to specify a new condition if the first condition is false.```cpp\nif (condition1) {\n  // block of code to be executed if condition1 is true\n} else if (condition2) {\n  // block of code to be executed if the condition1 is false and condition2 is true\n} else {\n  // block of code to be executed if the condition1 is false and condition2 is false\n}``````cpp\nint time = 22;\nif (time < 10) {\n  cout << \"Good morning.\";\n} else if (time < 20) {\n  cout << \"Good day.\";\n} else {\n  cout << \"Good evening.\";\n}\n// Outputs \"Good evening.\"```In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the  else if statement, is also false, so we move on to the elsecondition since condition1 and condition2 is both false - and print to the screen \"Good evening\".However, if the time was 14, our program would print \"Good day.\""
            }
        },
        "shorthandif..else": {
            "title": "Short hand if..else",
            "url": "https://www.w3schools.com/cpp/cpp_conditions_shorthand.asp",
            "info": {
                "Short Hand If...Else (Ternary Operator)": "There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:```cpp\nvariable = (condition) ? expressionTrue : expressionFalse;```Instead of writing:```cpp\nint time = 20;\nif (time < 18) {\n  cout << \"Good day.\";\n} else {\n  cout << \"Good evening.\";\n}```You can simply write:```cpp\nint time = 20;\nstring result = (time < 18) ? \"Good day.\" : \"Good evening.\";\ncout << result;```"
            }
        },
        "c++switch": {
            "title": "C++ Switch",
            "url": "https://www.w3schools.com/cpp/cpp_switch.asp",
            "info": {
                "C++ Switch Statements": "Use the switch statement to select one of many code blocks to be executed.```cpp\nswitch(expression) {\n  case x:\n    // code block\n    break;\n  case y:\n   // code block\n    break;\n  default:\n   // code block\n}```This is how it works:The example below uses the weekday number to calculate the weekday name:```cpp\nint day = 4;\nswitch (day) {\n  case 1:\n    cout << \"Monday\";\n    break;\n  case 2:\n    cout << \"Tuesday\";\n    break;\n  case 3:\n    cout << \"Wednesday\";\n    break;\n  case 4:\n    cout << \"Thursday\";\n    break;\n  case 5:\n    cout << \"Friday\";\n    break;\n  case 6:\n    cout << \"Saturday\";\n    break;\n  case 7:\n    cout << \"Sunday\";\n    break;\n}\n// Outputs \"Thursday\" (day 4)```",
                "The break Keyword": "When C++ reaches a break keyword, it breaks out of the switch block.This will stop the execution of more code and case testing inside the block.When a match is found, and the job is done, it's time for a break. There is no need for more testing.",
                "The default Keyword": "The default keyword specifies some code to run if there is no case match:```cpp\nint day = 4;\nswitch (day) {\n  case 6:\n    cout << \"Today is Saturday\";\n    break;\n  case 7:\n    cout << \"Today is Sunday\";\n    break;\n  default:\n    cout << \"Looking forward to the Weekend\";\n}\n// Outputs \"Looking forward to the Weekend\"```"
            }
        },
        "c++whileloop": {
            "title": "C++ While Loop",
            "url": "https://www.w3schools.com/cpp/cpp_while_loop.asp",
            "info": {
                "C++ Loops": "Loops can execute a block of code as long as a specified condition is reached.Loops are handy because they save time, reduce errors, and they make code more readable.",
                "C++ While Loop": "The while loop loops through a block of code as long as a specified condition is true:```cpp\nwhile (condition) {\n  // code block to be executed\n\r\n }```In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:```cpp\nint i = 0;\nwhile (i < 5) {\n  cout << i << \"\\n\";\ni++;\n}```"
            }
        },
        "whileloop": {
            "title": "While Loop",
            "url": "https://www.w3schools.com/cpp/cpp_while_loop.asp",
            "info": {
                "C++ Loops": "Loops can execute a block of code as long as a specified condition is reached.Loops are handy because they save time, reduce errors, and they make code more readable.",
                "C++ While Loop": "The while loop loops through a block of code as long as a specified condition is true:```cpp\nwhile (condition) {\n  // code block to be executed\n\r\n }```In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:```cpp\nint i = 0;\nwhile (i < 5) {\n  cout << i << \"\\n\";\ni++;\n}```"
            }
        },
        "do/whileloop": {
            "title": "Do/While Loop",
            "url": "https://www.w3schools.com/cpp/cpp_do_while_loop.asp",
            "info": {
                "The Do/While Loop": "The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.```cpp\ndo {\n  // code block to be executed\n}\n\r\nwhile (condition);```The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:```cpp\nint i = 0;\ndo {\n  cout << i << \"\\n\";\ni++;\n}\nwhile (i < 5);```"
            }
        },
        "c++forloop": {
            "title": "C++ For Loop",
            "url": "https://www.w3schools.com/cpp/cpp_for_loop.asp",
            "info": {
                "C++ For Loop": "When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:```cpp\nfor (statement 1; statement 2; statement 3) {\n    // code block to be executed\n\r\n }```Statement 1 is executed (one time) before the execution of the code block.Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.The example below will print the numbers 0 to 4:```cpp\nfor (int i = 0; i < 5; i++) {\n  cout << i << \"\\n\";\n}```Statement 1 sets a variable before the loop starts (int i = 0).Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.Statement 3 increases a value (i++) each time the code block in the loop has been executed.",
                "Another Example": "This example will only print even values between 0 and 10:```cpp\nfor (int i = 0; i <= 10; i = i + 2) {\n  cout << i << \"\\n\";\n\r\n}```"
            }
        },
        "c++break/continue": {
            "title": "C++ Break/Continue",
            "url": "https://www.w3schools.com/cpp/cpp_break.asp",
            "info": {
                "C++ Break": "You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement.The break statement can also be used to jump out of a loop.This example jumps out of the loop when i is equal to 4:```cpp\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    break;\n  }\n  cout << i << \"\\n\";\n}```",
                "C++ Continue": "The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.This example skips the value of 4:```cpp\nfor (int i = 0; i < 10; i++) {\n  if (i == 4) {\n    continue;\n  }\n  cout << i << \"\\n\";\n}```",
                "Break and Continue in While Loop": "You can also use break and continue in while loops:```cpp\nint i = 0;\nwhile (i < 10) {\n  cout << i << \"\\n\";\n  i++;\n  if (i == 4) {\n    break;\n  }\n}``````cpp\nint i = 0;\nwhile (i < 10) {\n  if (i == 4) {\n    i++;\n    continue;\n  }\n  cout << i << \"\\n\";\n  i++;\n}```"
            }
        },
        "c++arrays": {
            "title": "C++ Arrays",
            "url": "https://www.w3schools.com/cpp/cpp_arrays.asp",
            "info": {
                "C++ Arrays": "Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.To declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of elements it should store:```cpp\nstring cars[4];```We have now declared a variable that holds an array of four strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:```cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};```To create an array of three integers, you could write:```cpp\nint myNum[3] = {10, 20, 30};```",
                "Access the Elements of an Array": "You access an array element by referring to the index number.This statement accesses the value of the first element in cars:```cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars[0];\n// Outputs Volvo```",
                "Change an Array Element": "To change the value of a specific element, refer to the index number:```cpp\ncars[0] = \"Opel\";``````cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars[0] = \"Opel\";\ncout << cars[0];\n// Now outputs Opel instead of Volvo```"
            }
        },
        "arrays": {
            "title": "Arrays",
            "url": "https://www.w3schools.com/cpp/cpp_arrays.asp",
            "info": {
                "C++ Arrays": "Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.To declare an array, define the variable type, specify the name of the array followed by square brackets and specify the number of elements it should store:```cpp\nstring cars[4];```We have now declared a variable that holds an array of four strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:```cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};```To create an array of three integers, you could write:```cpp\nint myNum[3] = {10, 20, 30};```",
                "Access the Elements of an Array": "You access an array element by referring to the index number.This statement accesses the value of the first element in cars:```cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncout << cars[0];\n// Outputs Volvo```",
                "Change an Array Element": "To change the value of a specific element, refer to the index number:```cpp\ncars[0] = \"Opel\";``````cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\ncars[0] = \"Opel\";\ncout << cars[0];\n// Now outputs Opel instead of Volvo```"
            }
        },
        "arraysandloops": {
            "title": "Arrays and Loops",
            "url": "https://www.w3schools.com/cpp/cpp_arrays_loop.asp",
            "info": {
                "Loop Through an Array": "You can loop through the array elements with the for loop.The following example outputs all elements in the cars array:```cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor(int i = 0; i < 4; i++) {\n  cout << cars[i] << \"\\n\";\n}```The following example outputs the index of each element together with its value:```cpp\nstring cars[4] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor(int i = 0; i < 4; i++) {\n  cout << i << \": \" << cars[i] << \"\\n\";\n}```"
            }
        },
        "omitarraysize": {
            "title": "Omit Array Size",
            "url": "https://www.w3schools.com/cpp/cpp_arrays_omit.asp",
            "info": {
                "Omit Array Size": "You don't have to specify the size of the array. But if you don't, it will only be as big as the elements that are inserted into it:```cpp\nstring cars[] = {\"Volvo\", \"BMW\", \"Ford\"}; // size of array is always 3```This is completely fine. However, the problem arise if you want extra space for future elements. Then you have to overwrite the existing values:```cpp\nstring cars[] = {\"Volvo\", \"BMW\", \"Ford\"};\nstring cars[] = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\", \"Tesla\"};```If you specify the size however, the array will reserve the extra space:```cpp\nstring cars[5] = {\"Volvo\", \"BMW\", \"Ford\"}; // size of array is 5, even though it's only three elements inside it```Now you can add a fourth and fifth element without overwriting the others:```cpp\ncars[3] = {\"Mazda\"};\ncars[4] = {\"Tesla\"};```",
                "Omit Elements on Declaration": "It is also possible to declare an array without specifying the elements on declaration, and add them later:```cpp\nstring cars[5];\ncars[0] = {\"Volvo\"};\ncars[1] = {\"BMW\"};\n...```"
            }
        },
        "c++references": {
            "title": "C++ References",
            "url": "https://www.w3schools.com/cpp/cpp_references.asp",
            "info": {
                "Creating References": "A reference variable is a \"reference\" to an existing variable, and it is created with the & operator:```cpp\nstring food = \"Pizza\";  // food variable\nstring &meal = food;    // reference to food```Now, we can use either the variable name food or the reference name meal to refer to the food variable:```cpp\nstring food = \"Pizza\";\nstring &meal = food;\ncout << food << \"\\n\";  // Outputs Pizza\ncout << meal << \"\\n\";  // Outputs Pizza```"
            }
        },
        "createreferences": {
            "title": "Create References",
            "url": "https://www.w3schools.com/cpp/cpp_references.asp",
            "info": {
                "Creating References": "A reference variable is a \"reference\" to an existing variable, and it is created with the & operator:```cpp\nstring food = \"Pizza\";  // food variable\nstring &meal = food;    // reference to food```Now, we can use either the variable name food or the reference name meal to refer to the food variable:```cpp\nstring food = \"Pizza\";\nstring &meal = food;\ncout << food << \"\\n\";  // Outputs Pizza\ncout << meal << \"\\n\";  // Outputs Pizza```"
            }
        },
        "memoryaddress": {
            "title": "Memory Address",
            "url": "https://www.w3schools.com/cpp/cpp_references_memory.asp",
            "info": {
                "Memory Address": "In the example from the previous page, the & operator was used to create a reference variable. But it can also be used to get the memory address of a variable; which is the location of where the variable is stored on the computer.When a variable is created in C++, a memory address is assigned to the variable. And when we assign a value to the variable, it is stored in this memory address.To access it, use the & operator, and the result will represent where the variable is stored:```cpp\nstring food = \"Pizza\";\ncout << &food; // Outputs 0x6dfed4```Note: The memory address is in hexadecimal form (0x..). Note that you may not get the same result in your program."
            }
        },
        "c++pointers": {
            "title": "C++ Pointers",
            "url": "https://www.w3schools.com/cpp/cpp_pointers.asp",
            "info": {
                "Creating Pointers": "You learned from the previous chapter, that we can get the memory address of a variable by using the & operator:```cpp\nstring food = \"Pizza\";   // A food variable of type string\ncout <<   food;  // Outputs the value of food (Pizza)\ncout << &food; // Outputs the memory address of food (0x6dfed4)```A pointer however, is a variable that stores the memory address as its value. A pointer variable points to a data type (like int or string) of the same type, and is created with the \\* operator. The address of the variable you're working with is assigned to the pointer:```cpp\nstring food = \"Pizza\";  // A food variable   of type string\nstring* ptr =   &food;    // A pointer variable, with the name   ptr, that stores the   address of food\n// Output the value of food (Pizza)\ncout << food << \"\\n\";\n// Output   the memory address of food (0x6dfed4)\ncout << &food << \"\\n\";\n//   Output the memory address of food with the pointer (0x6dfed4)\ncout <<   ptr << \"\\n\";```Create a pointer variable with the name ptr, that points to a string variable, by using the asterisk sign \\* (string\\* ptr). Note that the type of the pointer has to match the type of the variable you're working with.Use the & operator to store the memory address of the variable called food, and assign it to the pointer.Now, ptr holds the value of food's memory address."
            }
        },
        "createpointers": {
            "title": "Create Pointers",
            "url": "https://www.w3schools.com/cpp/cpp_pointers.asp",
            "info": {
                "Creating Pointers": "You learned from the previous chapter, that we can get the memory address of a variable by using the & operator:```cpp\nstring food = \"Pizza\";   // A food variable of type string\ncout <<   food;  // Outputs the value of food (Pizza)\ncout << &food; // Outputs the memory address of food (0x6dfed4)```A pointer however, is a variable that stores the memory address as its value. A pointer variable points to a data type (like int or string) of the same type, and is created with the \\* operator. The address of the variable you're working with is assigned to the pointer:```cpp\nstring food = \"Pizza\";  // A food variable   of type string\nstring* ptr =   &food;    // A pointer variable, with the name   ptr, that stores the   address of food\n// Output the value of food (Pizza)\ncout << food << \"\\n\";\n// Output   the memory address of food (0x6dfed4)\ncout << &food << \"\\n\";\n//   Output the memory address of food with the pointer (0x6dfed4)\ncout <<   ptr << \"\\n\";```Create a pointer variable with the name ptr, that points to a string variable, by using the asterisk sign \\* (string\\* ptr). Note that the type of the pointer has to match the type of the variable you're working with.Use the & operator to store the memory address of the variable called food, and assign it to the pointer.Now, ptr holds the value of food's memory address."
            }
        },
        "dereferencing": {
            "title": "Dereferencing",
            "url": "https://www.w3schools.com/cpp/cpp_pointers_dereference.asp",
            "info": {
                "Get Memory Address and Value": "In the example from the previous page, we used the pointer variable to get the memory address of a variable (used together with the & reference operator). However, you can also use the pointer to get the value of the variable, by using the \\* operator (the dereference operator):```cpp\nstring food = \"Pizza\";  // Variable declaration\nstring* ptr =   &food;    // Pointer declaration\n//   Reference: Output the memory address of food with the pointer (0x6dfed4)\ncout <<   ptr << \"\\n\";\n//   Dereference: Output the value of food with the pointer (Pizza)\ncout <<   *ptr << \"\\n\";```"
            }
        },
        "modifypointers": {
            "title": "Modify Pointers",
            "url": "https://www.w3schools.com/cpp/cpp_pointers_modify.asp",
            "info": {
                "Modify the Pointer Value": "You can also change the pointer's value. But note that this will also change the value of the original variable:```cpp\nstring food = \"Pizza\";\nstring* ptr = &food;\n// Output the value   of food (Pizza)\ncout << food << \"\\n\";\n// Output the memory address   of food (0x6dfed4)\ncout << &food << \"\\n\";\n// Access the memory   address of food and output its value (Pizza)\ncout << *ptr << \"\\n\";\n\n// Change the value of the pointer\n*ptr = \"Hamburger\";\n//   Output the new value of the pointer (Hamburger)\ncout << *ptr << \"\\n\";\n//   Output the new value of the food variable (Hamburger)\ncout << food << \"\\n\";```"
            }
        },
        "c++functions": {
            "title": "C++ Functions",
            "url": "https://www.w3schools.com/cpp/cpp_functions.asp",
            "info": {
                "Create a Function": "C++ provides some pre-defined functions, such as main(), which is used to execute code. But you can also create your own functions to perform certain actions. To create (often referred to as declare) a function, specify the name of the function, followed by parentheses (): ```cpp\nvoid myFunction() {\n  // code to be executed\n}```",
                "Call a Function": "Declared functions are not executed immediately. They are \"saved for later use\", and will be executed later, when they are called.To call a function, write the function's name followed by two parentheses () and a semicolon ;In the following example, myFunction() is used to print a text (the action), when it is called:```cpp\n// Create a function\nvoid myFunction() {\n  cout << \"I just got executed!\";\n}\nint main() {\n  myFunction(); // call the function\n  return 0;\n}\n// Outputs \"I just got executed!\"```A function can be called multiple times:```cpp\nvoid myFunction() {\n  cout << \"I just got executed!\\n\";\n}\nint main() {\n  myFunction();\n  myFunction();\n  myFunction();\n  return 0;\n}\n// I just got executed!\n// I just got executed!\n// I just got executed!```",
                "Function Declaration and Definition": "A C++ function consist of two parts:```cpp\nvoid myFunction() { // declaration\n  //   the body of the function (definition)\n}```Note: If a user-defined function, such as myFunction() is declared after the main() function, an error will occur. It is because C++ works from top to bottom; which means that if the function is not declared above main(), the program is unaware of it:```cpp\nint main() {\n  myFunction();\n  return 0;\n}\nvoid myFunction() {\n  cout << \"I just got executed!\";\n}\n// Error```However, it is possible to separate the declaration and the definition of the function - for code optimization.You will often see C++ programs that have function declaration above main(), and function definition below main(). This will make the code better organized and easier to read:```cpp\n// Function declaration\nvoid myFunction();\n// The main method\nint main() {\n  myFunction();  // call the function\n  return 0;\n}\n// Function definition\nvoid myFunction() {\n  cout << \"I just got executed!\";\n}```"
            }
        },
        "c++functionparameters": {
            "title": "C++ Function Parameters",
            "url": "https://www.w3schools.com/cpp/cpp_function_param.asp",
            "info": {
                "Parameters and Arguments": "Information can be passed to functions as a parameter. Parameters act as variables inside the function.Parameters are specified after the function name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma:```cpp\nvoid functionName(parameter1, parameter2, parameter3) {\n  // code to be executed\n}```The following example has a function that takes a string called fname as parameter.When the function is called, we pass along a first name,which is used inside the function to print the full name:```cpp\nvoid myFunction(string fname) {\n  cout << fname << \" Refsnes\\n\";\n}\n\nint main() {\n  myFunction(\"Liam\");\n  myFunction(\"Jenny\");\n  myFunction(\"Anja\");\n  return 0;\n}\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes```"
            }
        },
        "parameters/arguments": {
            "title": "Parameters/Arguments",
            "url": "https://www.w3schools.com/cpp/cpp_function_param.asp",
            "info": {
                "Parameters and Arguments": "Information can be passed to functions as a parameter. Parameters act as variables inside the function.Parameters are specified after the function name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma:```cpp\nvoid functionName(parameter1, parameter2, parameter3) {\n  // code to be executed\n}```The following example has a function that takes a string called fname as parameter.When the function is called, we pass along a first name,which is used inside the function to print the full name:```cpp\nvoid myFunction(string fname) {\n  cout << fname << \" Refsnes\\n\";\n}\n\nint main() {\n  myFunction(\"Liam\");\n  myFunction(\"Jenny\");\n  myFunction(\"Anja\");\n  return 0;\n}\n// Liam Refsnes\n// Jenny Refsnes\n// Anja Refsnes```"
            }
        },
        "defaultparameter": {
            "title": "Default Parameter",
            "url": "https://www.w3schools.com/cpp/cpp_function_default.asp",
            "info": {
                "Default Parameter Value": "You can also use a default parameter value, by using the equals sign (=).If we call the function without an argument, it uses the default value (\"Norway\"):```cpp\nvoid myFunction(string country = \"Norway\") {\n  cout << country << \"\\n\";\n}\n\nint main() {\n  myFunction(\"Sweden\");\n  myFunction(\"India\");\n  myFunction();\n  myFunction(\"USA\");\n  return 0;\n}\n// Sweden\n// India\n// Norway\n// USA```"
            }
        },
        "multipleparameter": {
            "title": "Multiple Parameter",
            "url": "https://www.w3schools.com/cpp/cpp_function_multiple.asp",
            "info": {
                "Multiple Parameters": "Inside the function, you can add as many parameters as you want:```cpp\nvoid myFunction(string fname, int age) {\n  cout << fname << \" Refsnes. \" << age << \" years old. \\n\";\n}\nint main() {\n  myFunction(\"Liam\", 3);\n  myFunction(\"Jenny\", 14);\n  myFunction(\"Anja\", 30);\n  return 0;\n}\n// Liam Refsnes. 3 years old.\n// Jenny Refsnes. 14 years old.\n// Anja Refsnes. 30 years old.```"
            }
        },
        "returnvalues": {
            "title": "Return Values",
            "url": "https://www.w3schools.com/cpp/cpp_function_return.asp",
            "info": {
                "Return Values": "The void keyword, used in the previous examples, indicates that the function should not return a value. If you want the function to return a value, you can use a data type (such as int, string, etc.) instead of void, and use the return keyword inside the function:```cpp\nint myFunction(int x) {\n  return 5   + x;\n}\nint main() {\n  cout << myFunction(3);\n    return 0;\n}\n// Outputs 8 (5 + 3)```This example returns the sum of a function with two parameters:```cpp\nint myFunction(int x, int y) {\n  return x + y;\n}\nint main() {\n  cout << myFunction(5, 3);\n  return 0;\n}\n// Outputs 8 (5 + 3)```You can also store the result in a variable:```cpp\nint myFunction(int x, int y) {\n  return x + y;\n}\nint main() {\n  int z = myFunction(5, 3);\n  cout << z;\n  return 0;\n}\n// Outputs 8 (5 + 3)```"
            }
        },
        "passbyreference": {
            "title": "Pass By Reference",
            "url": "https://www.w3schools.com/cpp/cpp_function_reference.asp",
            "info": {
                "Pass By Reference": "In the examples from the previous page, we used normal variables when we passed parameters to a function. You can also pass a reference to the function. This can be useful when you need to change the value of the arguments:```cpp\nvoid swapNums(int &x, int &y) {\n  int z = x;\n  x = y;\n    y = z;\n}\nint main() {\n    int firstNum = 10;\n  int secondNum = 20;\n  cout <<   \"Before swap: \" << \"\\n\";\n  cout << firstNum << secondNum << \"\\n\";\n\n  // Call the function, which will change the values of firstNum   and secondNum\n  swapNums(firstNum, secondNum);\n  cout << \"After swap:   \" << \"\\n\";\n  cout << firstNum << secondNum << \"\\n\";\n    return 0;\n}```"
            }
        },
        "c++functionoverloading": {
            "title": "C++ Function Overloading",
            "url": "https://www.w3schools.com/cpp/cpp_function_overloading.asp",
            "info": {
                "Function Overloading": "With function overloading, multiple functions can have the same name with differentparameters:```cpp\nint myFunction(int x)\nfloat myFunction(float x)\ndouble myFunction(double x, double y)```Consider the following example, which have two functions that add numbers of different type:```cpp\nint plusFuncInt(int x, int y) {\n  return x + y;\n}\ndouble plusFuncDouble(double x, double y) {\n  return x + y;\n}\nint main() {\n  int myNum1 = plusFuncInt(8, 5);\n  double myNum2 = plusFuncDouble(4.3, 6.26);\n  cout << \"Int: \" << myNum1 << \"\\n\";\n  cout << \"Double: \" << myNum2;\n  return 0;\n}```Instead of defining two functions that should do the same thing, it is better to overload one. In the example below, we overload the plusFunc function to work for both int and double:"
            }
        },
        "c++oop": {
            "title": "C++ OOP",
            "url": "https://www.w3schools.com/cpp/cpp_oop.asp",
            "info": {
                "C++ What is OOP?": "OOP stands for Object-Oriented Programming.Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions.Object-oriented programming has several advantages over procedural programming:Tip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.",
                "C++ What are Classes and Objects?": "Classes and objects are the two main aspects of object-oriented programming.Look at the following illustration to see the difference between class and objects:Another example:So, a class is a template for objects, and an object is an instance of a class.When the individual objects are created, they inherit all the variables and functions from the class.You will learn much more about classes and objects in the next chapter."
            }
        },
        "c++classes/objects": {
            "title": "C++ Classes/Objects",
            "url": "https://www.w3schools.com/cpp/cpp_classes.asp",
            "info": {
                "C++ Classes/Objects": "C++ is an object-oriented programming language.Everything in C++ is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.Attributes and methods are basically variables and functions that belongs to the class. These are often referred to as \"class members\".A class is a user-defined data type that we can use in our program, and it works as an object constructor, or a \"blueprint\" for creating objects.",
                "Create a Class": "To create a class, use the class keyword:```cpp\nclass MyClass {       // The class\n  public:             // Access specifier\n    int myNum;        // Attribute (int variable)\n    string myString;  // Attribute (string variable)\n};```",
                "Create an Object": "In C++, an object is created from a class. We have already created the class named MyClass, so now we can use this to create objects.To create an object of MyClass, specify the class name, followed by the object name.To access the class attributes (myNum and myString), use the dot syntax (.) on the object:```cpp\nclass MyClass {       // The class\n  public:             // Access specifier\n    int myNum;        // Attribute (int variable)\n    string myString;  // Attribute (string variable)\n};\nint main() {\n  MyClass myObj;  // Create an object of MyClass\n  // Access attributes and set values\n  myObj.myNum = 15; \n  myObj.myString = \"Some text\";\n  // Print attribute values\n  cout << myObj.myNum << \"\\n\"; \n  cout << myObj.myString; \n  return 0;\n}```",
                "Multiple Objects": "You can create multiple objects of one class:```cpp\n// Create a Car class with some attributes\nclass Car {\n  public:\n    string brand;   \n    string model;\n    int year;\n};\nint main() {\n  // Create an object of Car\n  Car carObj1;\n  carObj1.brand = \"BMW\";\n  carObj1.model = \"X5\";\n  carObj1.year = 1999;\n  // Create another object of Car\n  Car carObj2;\n  carObj2.brand = \"Ford\";\n  carObj2.model = \"Mustang\";\n  carObj2.year = 1969;\n  // Print attribute values\n  cout << carObj1.brand << \" \" << carObj1.model << \" \" << carObj1.year << \"\\n\";\n  cout << carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";\n  return 0;\n}```"
            }
        },
        "c++classmethods": {
            "title": "C++ Class Methods",
            "url": "https://www.w3schools.com/cpp/cpp_class_methods.asp",
            "info": {
                "Class Methods": "Methods are functions that belongs to the class.There are two ways to define functions that belongs to a class:In the following example, we define a function inside the class, and we name it \"myMethod\".Note: You access methods just like you access attributes; by creating an object of the class and by using the dot syntax (.):```cpp\nclass MyClass {        // The class\n  public:              // Access specifier\n    void myMethod() {  // Method/function defined inside the class\n      cout << \"Hello World!\";\n    }\n};\nint main() {\n  MyClass myObj;     // Create an object of MyClass\n  myObj.myMethod();  // Call the method\n  return 0;\n}```To define a function outside the class definition, you have to declare it inside the class and then define it outside of the class. This is done by specifiying the name of the class, followed the scope resolution :: operator, followed by the name of the function:",
                "Parameters": "You can also add parameters:```cpp\n#include <iostream>\nusing namespace std;\nclass Car {\n  public:\n    int speed(int maxSpeed);\n};\nint Car::speed(int maxSpeed) {\n  return maxSpeed;\n}\nint main() {\n  Car myObj; // Create an object of Car\n  cout << myObj.speed(200); // Call the method with an argument\n  return 0;\n}```"
            }
        },
        "c++constructors": {
            "title": "C++ Constructors",
            "url": "https://www.w3schools.com/cpp/cpp_constructors.asp",
            "info": {
                "Constructors": "A constructor in C++ is a special method that is automatically called when an object of a class is created.To create a constructor, use the same name as the class, followed by parentheses ():```cpp\nclass MyClass {     // The class\n  public:           // Access specifier\n    MyClass() {     // Constructor\n      cout << \"Hello World!\";\n    }\n};\nint main() {\n  MyClass myObj;    // Create an object of MyClass (this will call the constructor)\n  return 0;\n}```",
                "Constructor Parameters": "Constructors can also take parameters (just like regular functions), which can be useful for setting initial values for attributes.The following class have brand, model and year attributes, and a constructor with different parameters. Inside the constructor we set the attributes equal to the constructor parameters (brand=x, etc). When we call the constructor (by creating an object of the class), we pass parameters to the constructor, which will set the value of the corresponding attributes to the same:Just like functions, constructors can also be defined outside the class. First, declare the constructor inside the class, and then define it outside of the class by specifying the name of the class, followed by the scope resolution :: operator, followed by the name of the constructor (which is the same as the class):"
            }
        },
        "c++accessspecifiers": {
            "title": "C++ Access Specifiers",
            "url": "https://www.w3schools.com/cpp/cpp_access_specifiers.asp",
            "info": {
                "Access Specifiers": "By now, you are quite familiar with the public keyword that appears in all of our class examples:```cpp\nclass MyClass {  // The class\n  public:        // Access specifier\n    // class members goes here\n};```The public keyword is an access specifier. Access specifiers define how the members (attributes and methods) of a class can be accessed. In the example above, the members are public - which means that they can be accessed and modified from outside the code. However, what if we want members to be private and hidden from the outside world? In C++, there are three access specifiers:In the following example, we demonstrate the differences between public and private members:```cpp\nclass   MyClass {\n    public:    // Public access   specifier\n    int x;   // Public attribute\n   private:   // Private access specifier\n      int y;   // Private attribute\n};\nint main() {\n  MyClass   myObj;\n  myObj.x = 25;  // Allowed (public)\n  myObj.y = 50;  //   Not allowed (private)\n    return 0;\n}```Note: By default, all members of a class are private if you don't specify an access specifier:"
            }
        },
        "c++encapsulation": {
            "title": "C++ Encapsulation",
            "url": "https://www.w3schools.com/cpp/cpp_encapsulation.asp",
            "info": {
                "Encapsulation": "The meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must declare class variables/attributes as private (cannot be accessed from outside the class). If you want others to read or modify the value of a private member, you can provide public get and set methods.",
                "Access Private Members": "To access a private attribute, use public \"get\" and \"set\" methods:```cpp\n#include <iostream>\nusing namespace std;\nclass Employee {\n    private:\n    // Private attribute\n    int salary;\n  public:\n      // Setter\n      void setSalary(int s) {\n      salary = s;\n    }\n      // Getter\n    int getSalary() {\n        return salary;\n    }\n};\nint   main() {\n  Employee myObj;\n  myObj.setSalary(50000);\n    cout << myObj.getSalary();\n  return 0;\n}```The salary attribute is private, which have restricted access.The public setSalary() method takes a parameter (s) and assigns it to thesalary attribute (salary = s).The public getSalary() method returns the value of the private salary attribute.Inside main(), we create an object of the Employee class. Now we can use the setSalary() method to set the value of the private attribute to 50000. Then we call the getSalary() method on the object to return the value.",
                "Why Encapsulation?": ""
            }
        },
        "c++inheritance": {
            "title": "C++ Inheritance",
            "url": "https://www.w3schools.com/cpp/cpp_inheritance.asp",
            "info": {
                "Inheritance": "In C++, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:To inherit from a class, use the : symbol.In the example below, the Car class (child) inherits the attributes and methods from the Vehicle class (parent):```cpp\n// Base class\nclass Vehicle {\n  public: \n      string brand = \"Ford\";\n    void honk() {\n        cout << \"Tuut, tuut! \\n\" ;\n    }\n};\n// Derived   class\nclass Car: public Vehicle {\n  public: \n      string model = \"Mustang\";\n};\nint main() {\n  Car myCar;\n    myCar.honk();\n  cout << myCar.brand + \" \" + myCar.model;\n    return 0;\n}```"
            }
        },
        "inheritance": {
            "title": "Inheritance",
            "url": "https://www.w3schools.com/cpp/cpp_inheritance.asp",
            "info": {
                "Inheritance": "In C++, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:To inherit from a class, use the : symbol.In the example below, the Car class (child) inherits the attributes and methods from the Vehicle class (parent):```cpp\n// Base class\nclass Vehicle {\n  public: \n      string brand = \"Ford\";\n    void honk() {\n        cout << \"Tuut, tuut! \\n\" ;\n    }\n};\n// Derived   class\nclass Car: public Vehicle {\n  public: \n      string model = \"Mustang\";\n};\nint main() {\n  Car myCar;\n    myCar.honk();\n  cout << myCar.brand + \" \" + myCar.model;\n    return 0;\n}```"
            }
        },
        "multilevelinheritance": {
            "title": "Multilevel Inheritance",
            "url": "https://www.w3schools.com/cpp/cpp_inheritance_multilevel.asp",
            "info": {
                "Multilevel Inheritance": "A class can also be derived from one class, which is already derived from another class.In the following example, MyGrandChild is derived from class MyChild (which is derived from MyClass).```cpp\n// Base class (parent)\nclass MyClass {\n  public: \n    void   myFunction() {\n        cout << \"Some content in parent class.\" ;\n    }\n};\n//   Derived   class (child)\nclass MyChild: public MyClass {\n};\n// Derived class   (grandchild) \nclass MyGrandChild: public MyChild {\n};\nint main() {\n    MyGrandChild myObj;\n    myObj.myFunction();\n    return 0;\n}```"
            }
        },
        "multipleinheritance": {
            "title": "Multiple Inheritance",
            "url": "https://www.w3schools.com/cpp/cpp_inheritance_multiple.asp",
            "info": {
                "Multiple Inheritance": "A class can also be derived from more than one base class, using a comma-separated list:```cpp\n// Base class\nclass MyClass {\n  public: \n    void   myFunction() {\n        cout << \"Some content in parent class.\" ;\n    }\n};\n//   Another base class\nclass MyOtherClass {\n  public: \n    void   myOtherFunction() {\n        cout << \"Some content in another class.\" ;\n    }\n};\n//   Derived   class \nclass MyChildClass: public MyClass, public MyOtherClass {\n};\nint main() {\n    MyChildClass myObj;\n    myObj.myFunction();\n  myObj.myOtherFunction();\n    return 0;\n}```"
            }
        },
        "accessspecifiers": {
            "title": "Access Specifiers",
            "url": "https://www.w3schools.com/cpp/cpp_inheritance_access.asp",
            "info": {
                "Access Specifiers": "You learned from the Access Specifiers chapter that there are three specifiers available in C++. Until now, we have only used public (members of a class are accessible from outside the class) and private (members can only be accessed within the class). The third specifier, protected, is similar to private, but it can also be accessed in the inherited class:```cpp\n// Base class\nclass   Employee {\n  protected: // Protected access specifier\n      int salary;\n};\n\n// Derived class\nclass Programmer: public Employee {\n    public:\n    int bonus;\n    void   setSalary(int s) {\n      salary = s;\n      }\n    int getSalary() {\n        return salary;\n    }\n};\nint main() {\n    Programmer myObj;\n  myObj.setSalary(50000);\n  myObj.bonus =   15000;\n  cout <<   \"Salary: \" << myObj.getSalary() << \"\\n\";\n  cout << \"Bonus: \" <<   myObj.bonus << \"\\n\";\n  return 0;\n}```"
            }
        },
        "c++polymorphism": {
            "title": "C++ Polymorphism",
            "url": "https://www.w3schools.com/cpp/cpp_polymorphism.asp",
            "info": {
                "Polymorphism": "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):```cpp\n// Base class\nclass Animal {\n  public:\n    void   animalSound() {\n    cout << \"The animal makes a sound \\n\"   ;\n  }\n};\n// Derived class\n  class Pig : public Animal {\n  public:\n    void   animalSound() {\n    cout << \"The pig says: wee wee \\n\" ;\n    }\n};\n// Derived class\nclass Dog   : public Animal {\n  public:\n    void animalSound()   {\n    cout << \"The dog says: bow wow \\n\" ;\n  }\n  };```Now we can create Pig and Dog objects and override the animalSound() method:"
            }
        },
        "c++files": {
            "title": "C++ Files",
            "url": "https://www.w3schools.com/cpp/cpp_files.asp",
            "info": {
                "C++ Files": "The fstream library allows us to work with files.To use the fstream library, include both the standard <iostream> AND the <fstream> header file:```cpp\n#include <iostream>\n#include <fstream>```There are three objects included in the fstream library, which are used to create, write or read files:",
                "Create and Write To a File": "To create a file, use either the ofstream or fstream object, and specify the name of the file.To write to the file, use the insertion operator (<<).```cpp\n#include <iostream>\n#include <fstream>\nusing namespace std;\n  int main() {\n  // Create and open a text file\n  ofstream MyFile(\"filename.txt\");\n  //   Write to the file\n  MyFile << \"Files can be tricky, but it is fun   enough!\";\n  //   Close the file\n  MyFile.close();\n}```",
                "Read a File": "To read from a file, use either the ifstream or fstream object, and the name of the file.Note that we also use a while loop together with the getline() function (which belongs to the ifstream object) to read the file line by line, and to print the content of the file:```cpp\n// Create a   text string, which is used to output the text file\nstring myText;\n\n// Read from the text file\nifstream MyReadFile(\"filename.txt\");\n// Use a while   loop together with the getline() function to read the file line by line\nwhile (getline (MyReadFile,   myText)) {\n  // Output the text from the file\n  cout << myText;\n  }\n\n// Close the file\nMyReadFile.close();```"
            }
        },
        "c++exceptions": {
            "title": "C++ Exceptions",
            "url": "https://www.w3schools.com/cpp/cpp_exceptions.asp",
            "info": {
                "C++ Exceptions": "When executing C++ code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.When an error occurs, C++ will normally stop and generate an error message. The technical term for this is: C++ will throw an exception (throw an error).",
                "C++ try and catch": "Exception handling in C++ consist of three keywords: try, throw and catch:The try statement allows you to define a block of code to be tested for errors while it is being executed.The throw keyword throws an exception when a problem is detected, which lets us create a custom error.The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.The try and catch keywords come in pairs:```cpp\ntry {\n  // Block of code to try\n  throw exception;   // Throw an exception when a problem arise\n}\ncatch () {\n    // Block of code to handle errors\n}```Consider the following example:```cpp\ntry {\n  int age = 15;\n  if (age > 18) {\n      cout << \"Access granted - you are old enough.\";\n  } else {\n      throw (age);\n  }\n}\ncatch (int   myNum) {\n  cout << \"Access denied - You must be at least 18 years   old.\\n\";\n  cout << \"Age is: \" << myNum; \n}```We use the try block to test some code: If the age variable is less than 18, we will throw an exception, and handle it in our catch block.In the catch block, we catch the error and do something about it. The catch statement takes a parameter: in our example we use an int variable (myNum) (because we are throwing an exception of int type in the try block (age)), to output the value of age.If no error occurs (e.g. if age is 20 instead of 15, meaning it will be be greater than 18), the catch block is skipped:You can also use the throw keyword to output a reference number, like a custom error number/code for organizing purposes:",
                "Handle Any Type of Exceptions (...)": "If you do not know the throw type used in the try block, you can use the \"three dots\" syntax (...) inside the catch block, which will handle any type of exception:```cpp\ntry {\n  int age = 15;\n  if (age > 18) {\n      cout << \"Access granted - you are old enough.\";\n  } else {\n      throw 505;\n  }\n}\ncatch (...) {\n  cout << \"Access denied - You must be at least 18 years   old.\\n\";\n}```"
            }
        },
        "addtwonumbers": {
            "title": "Add Two Numbers",
            "url": "https://www.w3schools.com/cpp/cpp_howto_add_two_numbers.asp",
            "info": {
                "Add Two Numbers": "Learn how to add two numbers in C++:```cpp\nint x = 5;\nint y = 6;\nint sum = x + y;\ncout << sum;```",
                "Add Two Numbers with User Input": "In this example, the user must input two numbers. Then we print the sum by calculating (adding) the two numbers:```cpp\nint x, y;\nint sum;\ncout << \"Type a number: \";\ncin >> x;\ncout << \"Type another number: \";\ncin >> y;\nsum = x + y;\ncout << \"Sum is: \" << sum;```"
            }
        },
        "c++examples": {
            "title": "C++ Examples",
            "url": "https://www.w3schools.com/cpp/cpp_examples.asp",
            "info": {
                "C++ Syntax": "",
                "C++ Output/Print": "",
                "C++ Comments": "",
                "C++ Variables": "",
                "C++ User Input": "",
                "C++ Data Types": "",
                "C++ Operators": "",
                "C++ Strings": "",
                "C++ Math": "",
                "C++ Booleans": "",
                "C++ If...Else (Conditions)": "",
                "C++ Switch": "",
                "C++ Loops": "",
                "C++ Arrays": "",
                "C++ References": "",
                "C++ Pointers": "",
                "C++ Files": "",
                "C++ Functions": "",
                "C++ Classes/Objects": ""
            }
        },
        "c++exercises": {
            "title": "C++ Exercises",
            "url": "https://www.w3schools.com/cpp/cpp_exercises.asp",
            "info": {
                "Exercises": "We have gathered a variety of C++ exercises (with answers) for each C++ Chapter.Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.",
                "Count Your Score": "You will get 1 point foreach correct answer. Your score and total score will always be displayed."
            }
        },
        "c++quiz": {
            "title": "C++ Quiz",
            "url": "https://www.w3schools.com/cpp/cpp_quiz.asp",
            "info": {
                "The Test": "The test contains 25 questions and there is no time limit.The test is not official, it's just a nice way to see how much you know, or don't know, about C++.",
                "Count Your Score": "You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.Get Your Certificate \u00bbThe HTML Certificate documents your knowledge of HTML.The CSS Certificate documents your knowledge of advanced CSS.The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.The Python Certificate documents your knowledge of Python.The jQuery Certificate documents your knowledge of jQuery.The SQL Certificate documents your knowledge of SQL.The PHP Certificate documents your knowledge of PHP and MySQL.The XML Certificate documents your knowledge of XML, XML DOM and XSLT.The Bootstrap Certificate documents your knowledge of the Bootstrap framework."
            }
        }
    },
    "cs": {
        "c#home": {
            "title": "C# HOME",
            "url": "https://www.w3schools.com/cs/default.asp",
            "info": {
                "Examples in Each Chapter": "Our \"Show C#\" tool makes it easy to learn C#, it shows both the code and the result.```cs\nusing System;\r\n\r\nnamespace HelloWorld\r\n{class Program{  static void Main(string[] args)  {    Console.WriteLine(\"Hello World!\");      }}\r\n}```Click on the \"Run example\" button to see how it works.",
                "Learn by Examples": "Learn by examples! This tutorial supplements all explanations with clarifying examples.See All C# Examples",
                "C# Quiz": "Learn by taking a quiz! The quiz will give you a signal of how much you know, or do not know, about C#.Start C# Quiz"
            }
        },
        "c#intro": {
            "title": "C# Intro",
            "url": "https://www.w3schools.com/cs/cs_intro.asp",
            "info": {
                "What is C#?": "C# is pronounced \"C-Sharp\". It is an object-oriented programming language created by Microsoft that runs on the .NET Framework.C# has roots from the C family, and the language is close to other popular languages like C++ and Java.The first version was released in year 2002. The latest version, C# 8, was released in September 2019.C# is used for:",
                "Why Use C#?": "",
                "Get Started": "This tutorial will teach you the basics of C#.It is not necessary to have any prior programming experience."
            }
        },
        "c#getstarted": {
            "title": "C# Get Started",
            "url": "https://www.w3schools.com/cs/cs_getstarted.asp",
            "info": {
                "C# IDE": "The easiest way to get started with C#, is to use an IDE.An IDE (Integrated Development Environment) is used to edit and compile code.In our tutorial, we will use Visual Studio Community, which is free to download from https://visualstudio.microsoft.com/vs/community/.Applications written in C# use the .NET Framework, so it makes sense to use Visual Studio, as the program, the framework, and the language, are all created by Microsoft.",
                "C# Install": "Once the Visual Studio Installer is downloaded and installed, choose the .NET workload and click on the Modify/Install button:After the installation is complete, click on the Launch button to get started with Visual Studio.On the start window, choose Create a new project:Then click on the \"Install more tools and features\" button:Choose \"Console App (.NET Core)\" from the list and click on the Next button:Enter a name for your project, and click on the Create button:Visual Studio will automatically generate some code for your project:The code should look something like this:```cs\nusing System;\r\n\r\nnamespace HelloWorld\r\n{class Program{  static void Main(string[] args)  {    Console.WriteLine(\"Hello World!\");      }}\r\n}```Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code.Run the program by pressing the F5 button on your keyboard (or click on \"Debug\" -> \"Start Debugging\"). This will compile and execute your code. The result will look something to this:Congratulations! You have now written and executed your first C# program.",
                "Learning C# At W3Schools": "When learning C# at W3Schools.com, you can use our \"Run Example\" tool, which shows both the code and the result. This will make it easier for you to understand every part as we move forward:```cs\nusing System;\r\n\r\nnamespace HelloWorld\r\n{class Program{  static void Main(string[] args)  {    Console.WriteLine(\"Hello World!\");      }}\r\n}```"
            }
        },
        "c#syntax": {
            "title": "C# Syntax",
            "url": "https://www.w3schools.com/cs/cs_syntax.asp",
            "info": {
                "C# Syntax": "In the previous chapter, we created a C# file called Program.cs, and we used the following code to print \"Hello World\" to the screen:```cs\nusing System;\r\n\r\nnamespace HelloWorld\r\n{class Program{  static void Main(string[] args)  {    Console.WriteLine(\"Hello World!\");      }}\r\n}```Line 1: using System means that we can use classes from the System namespace.Line 2: A blank line. C# ignores white space. However, multiple lines makes the code more readable.Line 3: namespace is a used to organize your code, and it is a container for classes and other namespaces.Line 4: The curly braces {} marks the beginning and the end of a block of code.Line 5: class is a container for data and methods, which brings functionality to your program. Every line of code that runs in C# must be inside a class. In our example, we named the class Program.Line 7: Another thing that always appear in a C# program, is the Main method. Any code inside its curly brackets {} will be executed.You don't have to understand the keywords before and after Main. You will get to know them bit by bit while reading this tutorial.Line 9: Console is a class of the System namespace, which has a WriteLine() method that is used to output/print text. In our example it will output \"Hello World!\". If you omit the using System line, you would have to write System.Console.WriteLine() to print/output text.Note: Every C# statement ends with a semicolon ;.Note: C# is case-sensitive: \"MyClass\" and \"myclass\" has different meaning.Note: Unlike Java, the name of the C# file does not have to match the class name, but they often do (for better organization).When saving the file, save it using a proper name and add \".cs\" to the end of the filename. To run the example above on your computer, make sure that C# is properly installed: Go to the Get Started Chapter for how to install C#. The output should be:",
                "WriteLine or Write": "The most common method to output something in C# is WriteLine(), but you can also use Write().The difference is that WriteLine() prints the output on a new line each time, while Write() prints on the same line (note that you should remember to add spaces when needed, for better readability):```cs\nConsole.WriteLine(\"Hello World!\");  \r\nConsole.WriteLine(\"I will print on a new line.\");\r\n\r\nConsole.Write(\"Hello World! \");\r\nConsole.Write(\"I will print on the same line.\");```In this tutorial, we will only use WriteLine() as it makes it easier to read the output of code."
            }
        },
        "c#comments": {
            "title": "C# Comments",
            "url": "https://www.w3schools.com/cs/cs_comments.asp",
            "info": {
                "C# Comments": "Comments can be used to explain C# code, and to make it more readable. It can also be used to prevent execution when testing alternative code.Single-line comments start with two forward slashes (//).Any text between // and the end of the line is ignored by C# (will not be executed).This example uses a single-line comment before a line of code:```cs\n// This is a comment\r\nConsole.WriteLine(\"Hello World!\");```This example uses a single-line comment at the end of a line of code:```cs\nConsole.WriteLine(\"Hello World!\");  // This is a comment```",
                "C# Multi-line Comments": "Multi-line comments start with /\\* and ends with \\*/.Any text between /\\* and \\*/ will be ignored by C#.This example uses a multi-line comment (a comment block) to explain the code:```cs\n/* The code below will print the words Hello World\r\nto the screen, and it is amazing */\r\nConsole.WriteLine(\"Hello World!\");```"
            }
        },
        "c#variables": {
            "title": "C# Variables",
            "url": "https://www.w3schools.com/cs/cs_variables.asp",
            "info": {
                "C# Variables": "Variables are containers for storing data values. In C#, there are different types of variables (defined with different keywords), for example:",
                "Declaring (Creating) Variables": "To create a variable, you must specify the type and assign it a value:```cs\ntype variableName = value;```Where type is a C# type (such as int or string), and variableName is the name of the variable (such as x orname). The equal sign is used to assign values to the variable.To create a variable that should store text, look at the following example:```cs\nstring name = \"John\";\r\nConsole.WriteLine(name);```To create a variable that should store a number, look at the following example:```cs\nint myNum = 15;\r\nConsole.WriteLine(myNum);```You can also declare a variable without assigning the value, and assign the value later:```cs\nint myNum;\r\nmyNum = 15;\r\nConsole.WriteLine(myNum);```Note that if you assign a new value to an existing variable, it will overwrite the previous value:```cs\nint myNum = 15;\r\nmyNum = 20; // myNum is now 20\r\nConsole.WriteLine(myNum);```",
                "Constants": "However, you can add the const keyword if you don't want others (or yourself) to overwrite existing values (this will declare the variable as \"constant\", which means unchangeable and read-only):```cs\nconst int myNum = 15;\r\nmyNum = 20; // error```",
                "Other Types": "A demonstration of how to declare variables of other types:```cs\nint myNum = 5;\r\ndouble myDoubleNum = 5.99D;\r\nchar myLetter = 'D';\r\nbool myBool = true;\r\nstring myText = \"Hello\";```",
                "Display Variables": "The WriteLine() method is often used to display variable values to the console window.To combine both text and a variable, use the + character:```cs\nstring name = \"John\";\r\nConsole.WriteLine(\"Hello \" + name);```You can also use the + character to add a variable to another variable:```cs\nstring firstName = \"John \";\r\nstring lastName = \"Doe\";\r\nstring fullName = firstName + lastName;\r\nConsole.WriteLine(fullName);```For numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here):```cs\nint x = 5;\r\nint y = 6;\r\nConsole.WriteLine(x + y); // Print the value of x + y```From the example above, you can expect:",
                "Declare Many Variables": "To declare more than one variable of the same type, use a comma-separated list:```cs\nint x = 5, y = 6, z = 50;\r\nConsole.WriteLine(x + y + z);```",
                "C# Identifiers": "All C# variables must beidentified with unique names.These unique names are called identifiers.Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).Note: It is recommended to use descriptive names in order to create understandable and maintainable code:```cs\n// Good\r\nint minutesPerHour = 60;\r\n\r\n// OK, but not so easy to understand what m actually is\r\nint m = 60;```The general rules for constructing names for variables (unique identifiers) are:"
            }
        },
        "c#datatypes": {
            "title": "C# Data Types",
            "url": "https://www.w3schools.com/cs/cs_data_types.asp",
            "info": {
                "C# Data Types": "As explained in the variables chapter, a variable in C# must be a specified data type:```cs\nint myNum = 5;               // Integer (whole number)\r\ndouble myDoubleNum = 5.99D;  // Floating point number\r\nchar myLetter = 'D';         // Character\r\nbool myBool = true;          // Boolean\r\nstring myText = \"Hello\";     // String```A data type specifies the size and type of variable values. It is important to use the correct data type for the corresponding variable; to avoid errors, to save time and memory, but it will also make your code more maintainable and readable. The most common data types are:",
                "Numbers": "Number types are divided into two groups:Integer types stores whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are int and long. Which type you should use, depends on the numeric value.Floating point types represents numbers with a fractional part, containing one or more decimals. Valid types are float and double.",
                "Integer Types": "The int data type can store whole numbers from -2147483648 to 2147483647.  In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.```cs\nint myNum = 100000;\r\nConsole.WriteLine(myNum);```The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\":```cs\nlong myNum = 15000000000L;\r\nConsole.WriteLine(myNum);```",
                "Floating Point Types": "You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.The float data type can store fractional numbers from 3.4e\u2212038 to 3.4e+038. Note that you should end the value with an \"F\":```cs\nfloat myNum = 5.75F;\r\nConsole.WriteLine(myNum);```The double data type can store fractional numbers from 1.7e\u2212308 to 1.7e+308. Note that you can end the value with a \"D\" (although not required):```cs\ndouble myNum = 19.99D;\r\nConsole.WriteLine(myNum);```A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:```cs\nfloat f1 = 35e3F;\r\ndouble d1 = 12E4D;\r\nConsole.WriteLine(f1);\r\nConsole.WriteLine(d1);```",
                "Booleans": "A boolean data type is declared with the bool keyword and can only take the values true or false:```cs\nbool isCSharpFun = true;\r\nbool isFishTasty = false;\r\nConsole.WriteLine(isCSharpFun);   // Outputs True\r\nConsole.WriteLine(isFishTasty);   // Outputs False```Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter.",
                "Characters": "The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':```cs\nchar myGrade = 'B';\r\nConsole.WriteLine(myGrade);```",
                "Strings": "The string data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:```cs\nstring greeting = \"Hello World\";\r\nConsole.WriteLine(greeting);```"
            }
        },
        "c#typecasting": {
            "title": "C# Type Casting",
            "url": "https://www.w3schools.com/cs/cs_type_casting.asp",
            "info": {
                "C# Type Casting": "Type casting is when you assign a value of one data type to another type.In C#, there are two types of casting:",
                "Implicit Casting": "Implicit casting is done automatically when passing a smaller size type to a larger size type:```cs\nint myInt = 9;\r\ndouble myDouble = myInt;       // Automatic casting: int to double\r\n\r\nConsole.WriteLine(myInt);      // Outputs 9\r\nConsole.WriteLine(myDouble);   // Outputs 9```",
                "Explicit Casting": "Explicit casting must be done manually by placing the type in parentheses in front of the value:```cs\ndouble myDouble = 9.78;\r\nint myInt = (int) myDouble;    // Manual casting: double to int\r\n\r\nConsole.WriteLine(myDouble);   // Outputs 9.78\r\nConsole.WriteLine(myInt);      // Outputs 9```",
                "Type Conversion Methods": "It is also possible to convert data types explicitly by using built-in methods, such as Convert.ToBoolean, Convert.ToDouble, Convert.ToString, Convert.ToInt32 (int) and Convert.ToInt64 (long):```cs\nint myInt = 10;\r\ndouble myDouble = 5.25;\r\nbool myBool = true;\r\n\r\nConsole.WriteLine(Convert.ToString(myInt));    // convert int to string\r\nConsole.WriteLine(Convert.ToDouble(myInt));    // convert int to double\r\nConsole.WriteLine(Convert.ToInt32(myDouble));  // convert double to int\r\nConsole.WriteLine(Convert.ToString(myBool));   // convert bool to string```"
            }
        },
        "c#userinput": {
            "title": "C# User Input",
            "url": "https://www.w3schools.com/cs/cs_user_input.asp",
            "info": {
                "Get User Input": "You have already learned that Console.WriteLine() is used to output (print) values. Now we will use Console.ReadLine() to get user input.In the following example, the user can input his or hers username, which is stored in the variable userName. Then we print the value of userName:```cs\n// Type your username and press enter\r\nConsole.WriteLine(\"Enter username:\");\r\n\r\n// Create a string variable and get user input from the keyboard and store it in the variable\r\nstring userName = Console.ReadLine();\r\n\r\n// Print the value of the variable (userName), which will display the input value\r\nConsole.WriteLine(\"Username is: \" + userName);```",
                "User Input and Numbers": "The Console.ReadLine() method returns a string. Therefore, you cannot get information from another data type, such as int. The following program will cause an error:```cs\nConsole.WriteLine(\"Enter your age:\");\r\nint age = Console.ReadLine();\r\nConsole.WriteLine(\"Your age is: \" + age);```Like the error message says, you cannot implicitly convert type 'string' to 'int'. Luckily, for you, you just learned from the previous chapter (Type Casting), that you can convert any type explicitly, by using one of the Convert.To methods:```cs\nConsole.WriteLine(\"Enter your age:\");\r\nint age = Convert.ToInt32(Console.ReadLine());\r\nConsole.WriteLine(\"Your age is: \" + age);```"
            }
        },
        "c#operators": {
            "title": "C# Operators",
            "url": "https://www.w3schools.com/cs/cs_operators.asp",
            "info": {
                "C# Operators": "Operators are used to perform operations on variables and values.In the example below, we use the+ operator to add together two values:```cs\nint x = 100 + 50;```Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:```cs\nint sum1 = 100 + 50;        // 150 (100 + 50)\r\nint sum2 = sum1 + 250;      // 400 (150 + 250)\r\nint sum3 = sum2 + sum2;     // 800 (400 + 400)```",
                "Arithmetic Operators": "Arithmetic operators are used to perform common mathematical operations:",
                "C# Assignment Operators": "Assignment operators are used to assign values to variables.In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:```cs\nint x = 10;```The addition assignment operator (+=) adds a value to a variable:```cs\nint x = 10;\r\nx += 5;```A list of all assignment operators:",
                "C# Comparison Operators": "Comparison operators are used to compare two values:",
                "C# Logical Operators": "Logical operators are used to determine the logic between variables or values:"
            }
        },
        "c#math": {
            "title": "C# Math",
            "url": "https://www.w3schools.com/cs/cs_math.asp",
            "info": {
                "Math.Max(x,y)": "The Math.Max(x,y) method can be used to find the highest value of x andy:```cs\nMath.Max(5, 10);```",
                "Math.Min(x,y)": "The Math.Min(x,y) method can be used to find the lowest value of of x and y:```cs\nMath.Min(5, 10);```",
                "Math.Sqrt(x)": "The Math.Sqrt(x) method returns the square root of x:```cs\nMath.Sqrt(64);```",
                "Math.Abs(x)": "The Math.Abs(x) method returns the absolute (positive) value of x:```cs\nMath.Abs(-4.7);```",
                "Math.Round()": "Math.Round() rounds a number to the nearest whole number:```cs\nMath.Round(9.99);```"
            }
        },
        "c#strings": {
            "title": "C# Strings",
            "url": "https://www.w3schools.com/cs/cs_strings.asp",
            "info": {
                "C# Strings": "Strings are used for storing text.A string variable contains a collection of characters surrounded by double quotes:```cs\nstring greeting = \"Hello\";```",
                "String Length": "A string in C# is actually an object, which contain properties and methods that can perform certain operations on strings. For example, the length of a string can be found with the Length property:```cs\nstring txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nConsole.WriteLine(\"The length of the txt string is: \" + txt.Length);```",
                "Other Methods": "There are many string methods available, for example ToUpper() and ToLower(), which returns a copy of the string converted to uppercase or lowercase:```cs\nstring txt = \"Hello World\";\r\nConsole.WriteLine(txt.ToUpper());   // Outputs \"HELLO WORLD\"\r\nConsole.WriteLine(txt.ToLower());   // Outputs \"hello world\"```",
                "String Concatenation": "The + operator can be used between strings to combine them. This is called concatenation:```cs\nstring firstName = \"John \";\r\nstring lastName = \"Doe\";\r\nstring name = firstName + lastName;\r\nConsole.WriteLine(name);```You can also use the string.Concat() method to concatenate two strings:```cs\nstring firstName = \"John \";\r\nstring lastName = \"Doe\";\r\nstring name = string.Concat(firstName, lastName);\r\nConsole.WriteLine(name);```",
                "String Interpolation": "Another option of string concatenation, is string interpolation, which substitutes values of variables into placeholders in a string. Note that you do not have to worry about spaces, like with concatenation:```cs\nstring firstName = \"John\";\r\nstring lastName = \"Doe\";\r\nstring name = $\"My full name is: {firstName} {lastName}\";\r\nConsole.WriteLine(name);```",
                "Access Strings": "You can access the characters in a string by referring to its index number inside square brackets [].This example prints the first character in myString:```cs\nstring myString = \"Hello\";\r\nConsole.WriteLine(myString[0]);  // Outputs \"H\"```This example prints the second character (1) in myString:```cs\nstring myString = \"Hello\";\r\nConsole.WriteLine(myString[1]);  // Outputs \"e\"```You can also find the index position of a specific character in a string, by using the IndexOf() method:```cs\nstring myString = \"Hello\";\r\nConsole.WriteLine(myString.IndexOf(\"e\"));  // Outputs \"1\"```Another useful method is Substring(), which extracts the characters from a string, starting from the specified character position/index, and returns a new string. This method is often used together with IndexOf() to get the specific character position:",
                "Special Characters": "Because strings must be written within quotes, C# will misunderstand this string, and generate an error:```cs\nstring txt = \"We are the so-called \"Vikings\" from the north.\";```The solution to avoid this problem, is to use the backslash escape character.The backslash (\\) escape character turns special characters into string characters:The sequence \\\"\u00a0 inserts a double quote in a string:```cs\nstring txt = \"We are the so-called \\\"Vikings\\\" from the north.\";```The sequence \\'\u00a0 inserts a single quote in a string:```cs\nstring txt = \"It\\'s alright.\";```The sequence \\\\\u00a0 inserts a single backslash in a string:```cs\nstring txt = \"The character \\\\ is called backslash.\";```Other useful escape characters in C# are:",
                "Adding Numbers and Strings": "If you add two numbers, the result will be a number:```cs\nint x = 10;\r\nint y = 20;\r\nint z = x + y;  // z will be 30 (an integer/number)```If you add two strings, the result will be a string concatenation:```cs\nstring x = \"10\";\r\nstring y = \"20\";\r\nstring z = x + y;  // z will be 1020 (a string)```"
            }
        },
        "c#booleans": {
            "title": "C# Booleans",
            "url": "https://www.w3schools.com/cs/cs_booleans.asp",
            "info": {
                "C# Booleans": "Very often, in programming, you will need a data type that can only have one of two values, like:For this, C# has a bool data type, which can take the values true or false.",
                "Boolean Values": "A boolean type is declared with the bool keyword and can only take the values true or false:```cs\nbool isCSharpFun = true;\r\nbool isFishTasty = false;\r\nConsole.WriteLine(isCSharpFun);   // Outputs True\r\nConsole.WriteLine(isFishTasty);   // Outputs False```However, it is more common to return boolean values from boolean expressions, for conditional testing(see below).",
                "Boolean Expression": "A Boolean expression is a C# expression that returns a Boolean value: True or False.You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:```cs\nint x = 10;\r\nint y = 9;\r\nConsole.WriteLine(x > y); // returns True, because 10 is higher than 9```Or even easier:```cs\nConsole.WriteLine(10 > 9); // returns True, because 10 is higher than 9```In the examples below, we use the equal to (==) operator to evaluate an expression:```cs\nint x = 10;\r\nConsole.WriteLine(x == 10); // returns True, because the value of x is equal to 10``````cs\nConsole.WriteLine(10 == 15); // returns False, because 10 is not equal to 15```"
            }
        },
        "c#if...else": {
            "title": "C# If...Else",
            "url": "https://www.w3schools.com/cs/cs_conditions.asp",
            "info": {
                "C# Conditions and If Statements": "C# supports the usual logical conditions from mathematics:You can use these conditions to perform different actions for different decisions.C# has the following conditional statements:",
                "The if Statement": "Use the if statement to specify a block of C# code to be executed if a condition is True.```cs\nif (condition) \r\n{// block of code to be executed if the condition is True\r\n}```In the example below, we test two values to find out if 20 is greater than 18. If the condition is True, print some text:```cs\nif (20 > 18) \r\n{Console.WriteLine(\"20 is greater than 18\");\r\n}```We can also test variables:```cs\nint x = 20;\r\nint y = 18;\r\nif (x > y) \r\n{Console.WriteLine(\"x is greater than y\");\r\n}```In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".",
                "The else Statement": "Use the else statement to specify a block of code to be executed if the condition is False.```cs\nif (condition)\r\n{// block of code to be executed if the condition is True\r\n} \r\nelse \r\n{// block of code to be executed if the condition is False\r\n}``````cs\nint time = 20;\r\nif (time < 18) \r\n{Console.WriteLine(\"Good day.\");\r\n} \r\nelse \r\n{Console.WriteLine(\"Good evening.\");\r\n}\r\n// Outputs \"Good evening.\"```In the example above, time (20) is greater than 18, so the condition is False. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\".",
                "The else if Statement": "Use the else if statement to specify a new condition if the first condition is False.```cs\nif (condition1)\r\n{// block of code to be executed if condition1 is True\r\n} \r\nelse if (condition2) \r\n{// block of code to be executed if the condition1 is false and condition2 is True\r\n} \r\nelse\r\n{// block of code to be executed if the condition1 is false and condition2 is False\r\n}``````cs\nint time = 22;\r\nif (time < 10) \r\n{Console.WriteLine(\"Good morning.\");\r\n} \r\nelse if (time < 20) \r\n{Console.WriteLine(\"Good day.\");\r\n} \r\nelse \r\n{Console.WriteLine(\"Good evening.\");\r\n}\r\n// Outputs \"Good evening.\"```In the example above, time (22) is greater than 10, so the first condition is False. The next condition, in the  else if statement, is also False, so we move on to the elsecondition since condition1 and condition2 is both False - and print to the screen \"Good evening\".However, if the time was 14, our program would print \"Good day.\"",
                "Short Hand If...Else (Ternary Operator)": "There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:```cs\nvariable = (condition) ? expressionTrue :  expressionFalse;```Instead of writing:```cs\nint time = 20;\r\nif (time < 18) \r\n{Console.WriteLine(\"Good day.\");\r\n} \r\nelse \r\n{Console.WriteLine(\"Good evening.\");\r\n}```You can simply write:```cs\nint time = 20;\r\nstring result = (time < 18) ? \"Good day.\" : \"Good evening.\";\r\nConsole.WriteLine(result);```"
            }
        },
        "c#switch": {
            "title": "C# Switch",
            "url": "https://www.w3schools.com/cs/cs_switch.asp",
            "info": {
                "C# Switch Statements": "Use the switch statement to select one of many code blocks to be executed.```cs\nswitch(expression) \r\n{case x:  // code block  break;case y:  // code block  break;default:  // code block  break;\r\n}```This is how it works:The example below uses the weekday number to calculate the weekday name:```cs\nint day = 4;\r\nswitch (day) \r\n{case 1:  Console.WriteLine(\"Monday\");  break;case 2:  Console.WriteLine(\"Tuesday\");  break;case 3:  Console.WriteLine(\"Wednesday\");  break;case 4:  Console.WriteLine(\"Thursday\");  break;case 5:  Console.WriteLine(\"Friday\");  break;case 6:  Console.WriteLine(\"Saturday\");  break;case 7:  Console.WriteLine(\"Sunday\");  break;\r\n}\r\n// Outputs \"Thursday\" (day 4)```",
                "The break Keyword": "When C# reaches a break keyword, it breaks out of the switch block.This will stop the execution of more code and case testing inside the block.When a match is found, and the job is done, it's time for a break. There is no need for more testing.",
                "The default Keyword": "The default keyword is optional and specifies some code to run if there is no case match:```cs\nint day = 4;\r\nswitch (day) \r\n{case 6:  Console.WriteLine(\"Today is Saturday.\");  break;case 7:  Console.WriteLine(\"Today is Sunday.\");  break;default:  Console.WriteLine(\"Looking forward to the Weekend.\");  break;\r\n}\r\n// Outputs \"Looking forward to the Weekend.\"```"
            }
        },
        "c#whileloop": {
            "title": "C# While Loop",
            "url": "https://www.w3schools.com/cs/cs_while_loop.asp",
            "info": {
                "Loops": "Loops can execute a block of code as long as a specified condition is reached.Loops are handy because they save time, reduce errors, and they make code more readable.",
                "C# While Loop": "The while loop loops through a block of code as long as a specified condition is True:```cs\nwhile (condition) \r\n{// code block to be executed\r\n}```In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:```cs\nint i = 0;\r\nwhile (i < 5) \r\n{Console.WriteLine(i);i++;\r\n}```",
                "The Do/While Loop": "The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.```cs\ndo \r\n{// code block to be executed\r\n}\r\nwhile (condition);```The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:```cs\nint i = 0;\ndo \r\n{Console.WriteLine(i);i++;\r\n}\r\nwhile (i < 5);```"
            }
        },
        "c#forloop": {
            "title": "C# For Loop",
            "url": "https://www.w3schools.com/cs/cs_for_loop.asp",
            "info": {
                "C# For Loop": "When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:```cs\nfor (statement 1; statement 2; statement 3) \r\n{// code block to be executed\r\n}```Statement 1 is executed (one time) before the execution of the code block.Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.The example below will print the numbers 0 to 4:```cs\nfor (int i = 0; i < 5; i++) \r\n{Console.WriteLine(i);\r\n}```Statement 1 sets a variable before the loop starts (int i = 0).Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.Statement 3 increases a value (i++) each time the code block in the loop has been executed.",
                "Another Example": "This example will only print even values between 0 and 10:```cs\nfor (int i = 0; i <= 10; i = i + 2) \r\n{Console.WriteLine(i);\r\n}```",
                "The foreach Loop": "There is also a foreach loop, which is used exclusively to loop through elements in an array:```cs\nforeach (type variableName in arrayName) \r\n{// code block to be executed\r\n}```The following example outputs all elements in the cars array, using a foreach loop:```cs\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nforeach (string i in cars) \r\n{Console.WriteLine(i);\r\n}```"
            }
        },
        "c#break/continue": {
            "title": "C# Break/Continue",
            "url": "https://www.w3schools.com/cs/cs_break.asp",
            "info": {
                "C# Break": "You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement.The break statement can also be used to jump out of a loop.This example jumps out of the loop when i is equal to 4:```cs\nfor (int i = 0; i < 10; i++) \r\n{if (i == 4) {  break;}Console.WriteLine(i);\r\n}```",
                "C# Continue": "The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.This example skips the value of 4:```cs\nfor (int i = 0; i < 10; i++) \r\n{if (i == 4) {  continue;}Console.WriteLine(i);\r\n}```",
                "Break and Continue in While Loop": "You can also use break and continue in while loops:```cs\nint i = 0;\r\nwhile (i < 10) \r\n{Console.WriteLine(i);i++;if (i == 4) {  break;}\r\n}``````cs\nint i = 0;\r\nwhile (i < 10) \r\n{if (i == 4) {  i++;  continue;}Console.WriteLine(i);i++;\r\n}```"
            }
        },
        "c#arrays": {
            "title": "C# Arrays",
            "url": "https://www.w3schools.com/cs/cs_arrays.asp",
            "info": {
                "Create an Array": "Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.To declare an array, define the variable type with square brackets:```cs\nstring[] cars;```We have now declared a variable that holds an array of strings.To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:```cs\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};```To create an array of integers, you could write:```cs\nint[] myNum = {10, 20, 30, 40};```",
                "Access the Elements of an Array": "You access an array element by referring to the index number.This statement accesses the value of the first element in cars:```cs\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nConsole.WriteLine(cars[0]);\r\n// Outputs Volvo```",
                "Change an Array Element": "To change the value of a specific element, refer to the index number:```cs\ncars[0] = \"Opel\";``````cs\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\ncars[0] = \"Opel\";\r\nConsole.WriteLine(cars[0]);\r\n// Now outputs Opel instead of Volvo```",
                "Array Length": "To find out how many elements an array has, use the Length property:```cs\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nConsole.WriteLine(cars.Length);\r\n// Outputs 4```",
                "Loop Through an Array": "You can loop through the array elements with the for loop, and use the Length property to specify how many times the loop should run.The following example outputs all elements in the cars array:```cs\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nfor (int i = 0; i < cars.Length; i++) \r\n{Console.WriteLine(cars[i]);\r\n}```",
                "The foreach Loop": "There is also a foreach loop, which is used exclusively to loop through elements in an array:```cs\nforeach (type variableName in arrayName) \r\n{// code block to be executed\r\n}```The following example outputs all elements in the cars array, using a foreach loop:```cs\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nforeach (string i in cars) \r\n{Console.WriteLine(i);\r\n}```The example above can be read like this: for eachstring element (called i - as in index) in cars, print out the value of i.If you compare the for loop and foreach loop, you will see that the foreach method is easier to write, it does not require a counter (using the Length property), and it is more readable.",
                "Sort Arrays": "There are many array methods available, for example Sort(), which sorts an array alphabetically or in an ascending order:```cs\n// Sort a string\r\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nArray.Sort(cars);\r\nforeach (string i in cars)\r\n{Console.WriteLine(i);\r\n}```",
                "System.Linq Namespace": "Other useful array methods, such as Min, Max, and Sum, can be found in the System.Linq namespace:```cs\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace MyApplication\r\n{class Program{  static void Main(string[] args)  {    int[] myNumbers = {5, 1, 8, 9};    Console.WriteLine(myNumbers.Max());  // returns the largest value    Console.WriteLine(myNumbers.Min());  // returns the smallest value    Console.WriteLine(myNumbers.Sum());  // returns the sum of elements  }}\r\n}```",
                "Other Ways to Create an Array": "If you are familiar with C#, you might have seen arrays created with the new keyword, and perhaps you have seen arrays with a specified size as well. In C#, there are different ways to create an array:```cs\n// Create an array of four elements, and add values later\r\nstring[] cars = new string[4];\r\n\r\n// Create an array of four elements and add values right away \r\nstring[] cars = new string[4] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\n\r\n// Create an array of four elements without specifying the size \r\nstring[] cars = new string[] {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\n\r\n// Create an array of four elements, omitting the new keyword, and without specifying the size\r\nstring[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};```It is up to you which option you choose. In our tutorial, we will often use the last option, as it is faster and easier to read.However, you should note that if you declare an array and initialize it later, you have to use the new keyword:"
            }
        },
        "c#methods": {
            "title": "C# Methods",
            "url": "https://www.w3schools.com/cs/cs_methods.asp",
            "info": {
                "Create a Method": "A method is defined with the name of the method, followed by parentheses (). C# provides some pre-defined methods, which you already are familiar with, such as Main(), but you can also create your own methods to perform certain actions:```cs\nclass Program\r\n{static void MyMethod() {  // code to be executed}\r\n}```",
                "Call a Method": "To call (execute) a method, write the method's name followed by two parentheses () and a semicolon;In the following example, MyMethod() is used to print a text (the action), when it is called:```cs\nstatic void MyMethod() \r\n{Console.WriteLine(\"I just got executed!\");\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{MyMethod();\r\n}\r\n\r\n// Outputs \"I just got executed!\"```A method can be called multiple times:```cs\nstatic void MyMethod() \r\n{Console.WriteLine(\"I just got executed!\");\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{MyMethod();MyMethod();MyMethod();\r\n}\r\n\r\n// I just got executed!\r\n// I just got executed!\r\n// I just got executed!```"
            }
        },
        "c#methodparameters": {
            "title": "C# Method Parameters",
            "url": "https://www.w3schools.com/cs/cs_method_parameters.asp",
            "info": {
                "Parameters and Arguments": "Information can be passed to methods as parameter. Parameters act as variables inside the method.They are specified after the method name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma.The following example has a method that takes a string called fname as parameter.When the method is called, we pass along a first name,which is used inside the method to print the full name:```cs\nstatic void MyMethod(string fname) \r\n{Console.WriteLine(fname + \" Refsnes\");\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{MyMethod(\"Liam\");MyMethod(\"Jenny\");MyMethod(\"Anja\");\r\n}\r\n\r\n// Liam Refsnes\r\n// Jenny Refsnes\r\n// Anja Refsnes```",
                "Default Parameter Value": "You can also use a default parameter value, by using the equals sign (=).If we call the method without an argument, it uses the default value (\"Norway\"):```cs\nstatic void MyMethod(string country = \"Norway\") \r\n{Console.WriteLine(country);\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{MyMethod(\"Sweden\");MyMethod(\"India\");MyMethod();MyMethod(\"USA\");\r\n}\r\n\r\n// Sweden\r\n// India\r\n// Norway\r\n// USA```",
                "Multiple Parameters": "You can have as many parameters as you like:```cs\nstatic void MyMethod(string fname, int age) \r\n{Console.WriteLine(fname + \" is \" + age);\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{MyMethod(\"Liam\", 5);MyMethod(\"Jenny\", 8);MyMethod(\"Anja\", 31);\r\n}\r\n\r\n// Liam is 5\r\n// Jenny is 8\r\n// Anja is 31```",
                "Return Values": "The void keyword, used in the examples above, indicates that the method should not return a value. If you want the method to return a value, you can use a primitive data type (such as int or double) instead of void, and use the return keyword inside the method:```cs\nstatic int MyMethod(int x) \r\n{return 5 + x;\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{Console.WriteLine(MyMethod(3));\r\n}\r\n\r\n// Outputs 8 (5 + 3)```This example returns the sum of a method's two parameters:```cs\nstatic int MyMethod(int x, int y) \r\n{return x + y;\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{Console.WriteLine(MyMethod(5, 3));\r\n}\r\n\r\n// Outputs 8 (5 + 3)```You can also store the result in a variable (recommended, as it is easier to read and maintain):```cs\nstatic int MyMethod(int x, int y) \r\n{return x + y;\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{int z = MyMethod(5, 3);Console.WriteLine(z);\r\n}\r\n\r\n// Outputs 8 (5 + 3)```",
                "Named Arguments": "It is also possible to send arguments with the key: value syntax.That way, the order of the arguments does not matter:```cs\nstatic void MyMethod(string child1, string child2, string child3) \r\n{Console.WriteLine(\"The youngest child is: \" + child3);\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{MyMethod(child3: \"John\", child1: \"Liam\", child2: \"Liam\");\r\n}\r\n\r\n// The youngest child is: John```Named arguments are especially useful when you have multiple parameters with default values, and you only want to specify one of them when you call it:```cs\nstatic void MyMethod(string child1 = \"Liam\", string child2 = \"Jenny\", string child3 = \"John\")\r\n{Console.WriteLine(child3);\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{MyMethod(\"child3\");\r\n}\r\n\r\n// John```"
            }
        },
        "c#methodoverloading": {
            "title": "C# Method Overloading",
            "url": "https://www.w3schools.com/cs/cs_method_overloading.asp",
            "info": {
                "Method Overloading": "With method overloading, multiple methods can have the same name with differentparameters:```cs\nint MyMethod(int x)\r\nfloat MyMethod(float x)\r\ndouble MyMethod(double x, double y)```Consider the following example, which have two methods that add numbers of different type:```cs\nstatic int PlusMethodInt(int x, int y)\r\n{return x + y;\r\n}\r\n\r\nstatic double PlusMethodDouble(double x, double y)\r\n{return x + y;\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{int myNum1 = PlusMethodInt(8, 5);double myNum2 = PlusMethodDouble(4.3, 6.26);Console.WriteLine(\"Int: \" + myNum1);Console.WriteLine(\"Double: \" + myNum2);\r\n}```Instead of defining two methods that should do the same thing, it is better to overload one. In the example below, we overload the PlusMethod method to work for both int and double:"
            }
        },
        "c#oop": {
            "title": "C# OOP",
            "url": "https://www.w3schools.com/cs/cs_oop.asp",
            "info": {
                "C# - What is OOP?": "OOP stands for Object-Oriented Programming.Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.Object-oriented programming has several advantages over procedural programming:Tip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.",
                "C# - What are Classes and Objects?": "Classes and objects are the two main aspects of object-oriented programming.Look at the following illustration to see the difference between class and objects:Another example:So, a class is a template for objects, and an object is an instance of a class.When the individual objects are created, they inherit all the variables and methods from the class.You will learn much more about classes and objects in the next chapter."
            }
        },
        "c#classes/objects": {
            "title": "C# Classes/Objects",
            "url": "https://www.w3schools.com/cs/cs_classes.asp",
            "info": {
                "Classes and Objects": "You learned from the previous chapter that C# is an object-oriented programming language.Everything in C# is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake.A Class is like an object constructor, or a \"blueprint\" for creating objects.",
                "Create a Class": "To create a class, use the class keyword:```cs\nclass Car \r\n{string color = \"red\";\r\n}```",
                "Create an Object": "An object is created from a class. We have already created the class named Car, so now we can use this to create objects.To create an object of Car, specify the class name, followed by the object name, and use the keyword new:```cs\nclass Car \r\n{string color = \"red\";\r\nstatic void Main(string[] args){  Car myObj = new Car();  Console.WriteLine(myObj.color);}\r\n}```",
                "Multiple Objects": "You can create multiple objects of one class:```cs\nclass Car\r\n{string color = \"red\";static void Main(string[] args){  Car myObj1 = new Car();  Car myObj2 = new Car();  Console.WriteLine(myObj1.color);  Console.WriteLine(myObj2.color);}\r\n}```",
                "Using Multiple Classes": "You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the fields and methods, while the other class holds the Main() method (code to be executed)). ```cs\nclass Car \r\n{public string color = \"red\";\r\n}``````cs\nclass Program\r\n{static void Main(string[] args){  Car myObj = new Car();  Console.WriteLine(myObj.color);}\r\n}```"
            }
        },
        "c#classmembers": {
            "title": "C# Class Members",
            "url": "https://www.w3schools.com/cs/cs_class_members.asp",
            "info": {
                "Class Members": "Fields and methods inside classes are often referred to as \"Class Members\":```cs\n// The class\r\nclass MyClass\r\n{// Class membersstring color = \"red\";        // fieldint maxSpeed = 200;          // fieldpublic void fullThrottle()   // method{  Console.WriteLine(\"The car is going as fast as it can!\");}\r\n}```",
                "Fields": "In the previous chapter, you learned that variables inside a class are called fields, and that you can access them by creating an object of the class, and by using the dot syntax (.).The following example will create an object of the Car class, with the name myObj. Then we print the value of the fields color and maxSpeed:```cs\nclass Car \r\n{string color = \"red\";int maxSpeed = 200;\r\nstatic void Main(string[] args){  Car myObj = new Car();  Console.WriteLine(myObj.color);  Console.WriteLine(myObj.maxSpeed);}\r\n}```You can also leave the fields blank, and modify them when creating the object:```cs\nclass Car \r\n{string color;int maxSpeed;\r\nstatic void Main(string[] args){  Car myObj = new Car();  myObj.color = \"red\";  myObj.maxSpeed = 200;  Console.WriteLine(myObj.color);  Console.WriteLine(myObj.maxSpeed);}\r\n}```This is especially useful when creating multiple objects of one class:",
                "Object Methods": "You learned from the C# Methods chapter that methods are used to perform certain actions.Methods normally belongs to a class, and they define how an object of a class behaves.Just like with fields, you can access methods with the dot syntax. However, note that the method must be public. And remember that we use the name of the method followed by two parantheses () and a semicolon ; to call (execute) the method:```cs\nclass Car \r\n{string color;                 // fieldint maxSpeed;                 // fieldpublic void fullThrottle()    // method{  Console.WriteLine(\"The car is going as fast as it can!\"); }\r\nstatic void Main(string[] args){  Car myObj = new Car();  myObj.fullThrottle();  // Call the method}\r\n}```",
                "Use Multiple Classes": "Remember from the last chapter, that we can use multiple classes for better organization (one for fields and methods, and another one for execution). This is recommended:```cs\nclass Car \r\n{public string model;public string color;public int year;public void fullThrottle(){  Console.WriteLine(\"The car is going as fast as it can!\"); }\r\n}``````cs\nclass Program\r\n{static void Main(string[] args){  Car Ford = new Car();  Ford.model = \"Mustang\";  Ford.color = \"red\";  Ford.year = 1969;\r\n  Car Opel = new Car();  Opel.model = \"Astra\";  Opel.color = \"white\";  Opel.year = 2005;\r\n  Console.WriteLine(Ford.model);  Console.WriteLine(Opel.model);}\r\n}```"
            }
        },
        "c#constructors": {
            "title": "C# Constructors",
            "url": "https://www.w3schools.com/cs/cs_constructors.asp",
            "info": {
                "Constructors": "A constructor is a special method that is used to initialize objects. The advantage of a constructor, is that it is called when an object of a class is created. It can be used to set initial values for fields:```cs\n// Create a Car class\r\nclass Car\r\n{public string model;  // Create a field\r\n// Create a class constructor for the Car classpublic Car(){  model = \"Mustang\"; // Set the initial value for model}\r\nstatic void Main(string[] args){  Car Ford = new Car();  // Create an object of the Car Class (this will call the constructor)  Console.WriteLine(Ford.model);  // Print the value of model}\r\n}\r\n\r\n// Outputs \"Mustang\"```",
                "Constructor Parameters": "Constructors can also take parameters, which is used to initialize fields.The following example adds a string modelName parameter to the constructor. Inside the constructor we set model to modelName (model=modelName). When we call the constructor, we pass a parameter to the constructor (\"Mustang\"), which will set the value of model to \"Mustang\":```cs\nclass Car\r\n{public string model;\r\n// Create a class constructor with a parameterpublic Car(string modelName){  model = modelName;}\r\nstatic void Main(string[] args){  Car Ford = new Car(\"Mustang\");  Console.WriteLine(Ford.model);}\r\n}\r\n\r\n// Outputs \"Mustang\"```You can have as many parameters as you want:",
                "Constructors Save Time": "When you consider the example from the previous chapter, you will notice that constructors are very useful, as they help reducing the amount of code:```cs\nclass Program\r\n{static void Main(string[] args){  Car Ford = new Car();  Ford.model = \"Mustang\";  Ford.color = \"red\";  Ford.year = 1969;\r\n  Car Opel = new Car();  Opel.model = \"Astra\";  Opel.color = \"white\";  Opel.year = 2005;\r\n  Console.WriteLine(Ford.model);  Console.WriteLine(Opel.model);}\r\n}```"
            }
        },
        "c#accessmodifiers": {
            "title": "C# Access Modifiers",
            "url": "https://www.w3schools.com/cs/cs_access_modifiers.asp",
            "info": {
                "Access Modifiers": "By now, you are quite familiar with the public keyword that appears in many of our examples:```cs\npublic string color;```The public keyword is an access modifier, which is used to set the access level/visibility for classes, fields, methods and properties.C# has the following access modifiers:There's also two combinations: protected internal and private protected.For now, lets focus on public and private modifiers.",
                "Private Modifier": "If you declare a field with a private access modifier, it can only be accessed within the same class:```cs\nclass Car\r\n{private string model;\r\nstatic void Main(string[] args){  Car Ford = new Car(\"Mustang\");  Console.WriteLine(Ford.model);}\r\n}```If you try to access it outside the class, an error will occur:```cs\nclass Car\r\n{private string model = \"Mustang\";\r\n}\r\n\r\nclass Program\r\n{static void Main(string[] args){  Car myObj = new Car();  Console.WriteLine(myObj.model);}\r\n}```",
                "Public Modifier": "If you declare a field with a public access modifier, it is accessible for all classes:```cs\nclass Car\r\n{public string model = \"Mustang\";\r\n}\r\n\r\nclass Program\r\n{static void Main(string[] args){  Car myObj = new Car();  Console.WriteLine(myObj.model);}\r\n}```Note: By default, all members of a class are private if you don't specify an access modifier:```cs\nclass Car\r\n{string model;  // privatestring year;   // private\r\n}```"
            }
        },
        "c#properties": {
            "title": "C# Properties",
            "url": "https://www.w3schools.com/cs/cs_properties.asp",
            "info": {
                "Properties and Encapsulation": "Before we start to explain properties, you should have a basic understanding of \"Encapsulation\".The meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must:",
                "Properties": "You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, sometimes we need to access them - and it can be done with properties.A property is like a combination of a variable and a method, and it has two methods: a get and a set method:```cs\nclass Person\r\n{private string name; // field\r\npublic string Name   // property{  get { return name; }   // get method  set { name = value; }  // set method}\r\n}```The Name property is associated with the name field. It is a good practice to use the same name for both the property and the private field, but with an uppercase first letter.The get method returns the value of the variable name.The set method assigns a value to thename variable. The value keyword represents the value we assign to the property.Now we can use the Name property to access and update the private field of the Person class:",
                "Automatic Properties (Short Hand)": "C# also provides a way to use short-hand / automatic properties, where you do not have to define the field for the property, and you only have to write get; and set; inside the property.The following example will produce the same result as the example above. The only difference is that there is less code:```cs\nclass Person\r\n{public string Name  // property{ get; set; }\r\n}\r\n\r\nclass Program\r\n{static void Main(string[] args){  Person myObj = new Person();  myObj.Name = \"Liam\";  Console.WriteLine(myObj.Name);}\r\n}```",
                "Why Encapsulation?": ""
            }
        },
        "c#inheritance": {
            "title": "C# Inheritance",
            "url": "https://www.w3schools.com/cs/cs_inheritance.asp",
            "info": {
                "Inheritance (Derived and Base Class)": "In C#, it is possible to inherit fields and methods from one class to another. We group the \"inheritance concept\" into two categories:To inherit from a class, use the : symbol.In the example below, the Car class (child) inherits the fields and methods from the Vehicle class (parent):```cs\nclass Vehicle  // base class (parent) \r\n{public string brand = \"Ford\";  // Vehicle fieldpublic void honk()             // Vehicle method {                      Console.WriteLine(\"Tuut, tuut!\");}\r\n}\r\n\r\nclass Car : Vehicle  // derived class (child)\r\n{public string modelName = \"Mustang\";  // Car field\r\n}\r\n\r\nclass Program\r\n{static void Main(string[] args){  // Create a myCar object  Car myCar = new Car();\r\n  // Call the honk() method (From the Vehicle class) on the myCar object  myCar.honk();\r\n  // Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class  Console.WriteLine(myCar.brand + \" \" + myCar.modelName);}\r\n}```",
                "The sealed Keyword": "If you don't want other classes to inherit from a class, use the sealed keyword:```cs\nsealed class Vehicle \r\n{...\r\n}\r\n\r\nclass Car : Vehicle \r\n{...\r\n}```"
            }
        },
        "c#polymorphism": {
            "title": "C# Polymorphism",
            "url": "https://www.w3schools.com/cs/cs_polymorphism.asp",
            "info": {
                "Polymorphism and Overriding Methods": "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.Like we specified in the previous chapter; Inheritance lets us inherit fields and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):```cs\nclass Animal  // Base class (parent) \r\n{public void animalSound() {  Console.WriteLine(\"The animal makes a sound\");}\r\n}\r\n\r\nclass Pig : Animal  // Derived class (child) \r\n{public void animalSound() {  Console.WriteLine(\"The pig says: wee wee\");}\r\n}\r\n\r\nclass Dog : Animal  // Derived class (child) \r\n{public void animalSound() {  Console.WriteLine(\"The dog says: bow wow\");}\r\n}```Now we can create Pig and Dog objects and call the animalSound() method on both of them:"
            }
        },
        "c#abstraction": {
            "title": "C# Abstraction",
            "url": "https://www.w3schools.com/cs/cs_abstract.asp",
            "info": {
                "Abstract Classes and Methods": "Data abstraction is the process of hiding certain details and showing only essential information to the user.Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).The abstract keyword is used for classes and methods:An abstract class can have both abstract and regular methods:```cs\nabstract class Animal \r\n{public abstract void animalSound();public void sleep() {  Console.WriteLine(\"Zzz\");}\r\n}```From the example above, it is not possible to create an object of the Animal class:```cs\nAnimal myObj = new Animal(); // Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')```To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class."
            }
        },
        "c#interface": {
            "title": "C# Interface",
            "url": "https://www.w3schools.com/cs/cs_interface.asp",
            "info": {
                "Interfaces": "Another way to achieve abstraction in C#, is with interfaces.An interface is a completely \"abstract class\", which can only contain abstract methods and properties (with empty bodies):```cs\n// interface\r\ninterface Animal \r\n{void animalSound(); // interface method (does not have a body)void run(); // interface method (does not have a body)\r\n}```To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class. To implement an interface, use the : symbol (just like with inheritance). The body of the interface method is provided by the \"implement\" class. Note that you do not have to use the override keyword when implementing an interface:",
                "Multiple Interfaces ": "To implement multiple interfaces, separate them with a comma:```cs\ninterface IFirstInterface \r\n{void myMethod(); // interface method\r\n}\r\n\r\ninterface ISecondInterface \r\n{void myOtherMethod(); // interface method\r\n}\r\n\r\n// Implement multiple interfaces\r\nclass DemoClass : IFirstInterface, ISecondInterface \r\n{public void myMethod() {  Console.WriteLine(\"Some text..\");}public void myOtherMethod() {  Console.WriteLine(\"Some other text...\");}\r\n}\r\n\r\nclass Program \r\n{static void Main(string[] args){  DemoClass myObj = new DemoClass();  myObj.myMethod();  myObj.myOtherMethod();}\r\n}```"
            }
        },
        "c#enums": {
            "title": "C# Enums",
            "url": "https://www.w3schools.com/cs/cs_enums.asp",
            "info": {
                "C# Enums": "An enum is a special \"class\" that represents a group of constants (unchangeable/read-only variables).To create an enum, use the enum keyword (instead of class or interface), and separate the enum items with a comma:```cs\nenum Level \r\n{Low,Medium,High\r\n}```",
                "Enum inside a Class": "You can also have an enum inside a class:```cs\nclass Program\r\n{enum Level{  Low,  Medium,  High}static void Main(string[] args){  Level myVar = Level.Medium;  Console.WriteLine(myVar);}\r\n}```",
                "Enum Values": "By default, the first item of an enum has the value 0. The second has the value 1, and so on.To get the integer value from an item, you must explicitly convert the item to an int:```cs\nenum Months\r\n{January,    // 0February,   // 1March,      // 2April,      // 3May,        // 4June,       // 5July        // 6\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{int myNum = (int) Months.April;Console.WriteLine(myNum);\r\n}```You can also assign your own enum values, and the next items will update the number accordingly:```cs\nenum Months\r\n{January,    // 0February,   // 1March=6,    // 6April,      // 7May,        // 8June,       // 9July        // 10\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{int myNum = (int) Months.April;Console.WriteLine(myNum);\r\n}```",
                "Enum in a Switch Statement": "Enums are often used in switch statements to check for corresponding values:```cs\nenum Level \r\n{Low,Medium,High\r\n}\r\n\r\nstatic void Main(string[] args) \r\n{Level myVar = Level.Medium;switch(myVar) {  case Level.Low:    Console.WriteLine(\"Low level\");    break;  case Level.Medium:     Console.WriteLine(\"Medium level\");    break;  case Level.High:    Console.WriteLine(\"High level\");    break;}\r\n}```"
            }
        },
        "c#files": {
            "title": "C# Files",
            "url": "https://www.w3schools.com/cs/cs_files.asp",
            "info": {
                "Working With Files": "The File class from the System.IO namespace, allows us to work with files:```cs\nusing System.IO;  // include the System.IO namespace\r\n\r\nFile.SomeFileMethod();  // use the file class with methods```The File class has many useful methods for creating and getting information about files. For example:",
                "Write To a File and Read It": "In the following example, we use the WriteAllText() method to create a file named \"filename.txt\" and write some content to it. Then we use the ReadAllText() method to read the contents of the file:```cs\nusing System.IO;  // include the System.IO namespace\r\n\r\nstring writeText = \"Hello World!\";  // Create a text string\r\nFile.WriteAllText(\"filename.txt\", writeText);  // Create a file and write the content of writeText to it\r\n\r\nstring readText = File.ReadAllText(\"filename.txt\");  // Read the contents of the file\r\nConsole.WriteLine(readText);  // Output the content```"
            }
        },
        "c#exceptions": {
            "title": "C# Exceptions",
            "url": "https://www.w3schools.com/cs/cs_exceptions.asp",
            "info": {
                "C# Exceptions": "When executing C# code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.When an error occurs, C# will normally stop and generate an error message. The technical term for this is: C# will throw an exception (throw an error).",
                "C# try and catch": "The try statement allows you to define a block of code to be tested for errors while it is being executed.The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.The try and catch keywords come in pairs:```cs\ntry \r\n{//  Block of code to try\r\n}\r\ncatch (Exception e)\r\n{//  Block of code to handle errors\r\n}```Consider the following example, where we create an array of three integers:```cs\nint[] myNumbers = {1, 2, 3};\r\nConsole.WriteLine(myNumbers[10]); // error!```If an error occurs, we can use try...catch to catch the error and execute some code to handle it.In the following example, we use the variable inside the catch block (e) together with the built-in Message property, which outputs a message that describes the exception:```cs\ntry\r\n{int[] myNumbers = {1, 2, 3};Console.WriteLine(myNumbers[10]);\r\n}\r\ncatch (Exception e)\r\n{Console.WriteLine(e.Message);\r\n}```You can also output your own error message:",
                "Finally": "The finally statement lets you execute code, after try...catch, regardless of the result:```cs\ntry\r\n{int[] myNumbers = {1, 2, 3};Console.WriteLine(myNumbers[10]);\r\n}\r\ncatch (Exception e)\r\n{Console.WriteLine(\"Something went wrong.\");\r\n}\r\nfinally\r\n{Console.WriteLine(\"The 'try catch' is finished.\");\r\n}```",
                "The throw keyword": "The throw statement allows you to create a custom error.The throw statement is used together with an exception class. There are many exception classes available in C#: ArithmeticException, FileNotFoundException, IndexOutOfRangeException, TimeOutException, etc:```cs\nstatic void checkAge(int age)\r\n{if (age < 18){  throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\");}else{  Console.WriteLine(\"Access granted - You are old enough!\");}\r\n}\r\n\r\nstatic void Main(string[] args)\r\n{checkAge(15);\r\n}```If age was 20, you would not get an exception:```cs\ncheckAge(20);```"
            }
        },
        "addtwonumbers": {
            "title": "Add Two Numbers",
            "url": "https://www.w3schools.com/cs/cs_howto_add_two_numbers.asp",
            "info": {
                "Add Two Numbers": "Learn how to add two numbers in C#:```cs\nint x = 5;\r\nint y = 6;\r\nint sum = x + y;\r\nConsole.WriteLine(sum); // Print the sum of x + y```"
            }
        },
        "c#examples": {
            "title": "C# Examples",
            "url": "https://www.w3schools.com/cs/cs_examples.asp",
            "info": {
                "C# Syntax": "",
                "C# Comments": "",
                "C# Variables": "",
                "C# Data Types": "",
                "C# Type Casting": "",
                "C# User Input": "",
                "C# Operators": "",
                "C# Math": "",
                "C# Strings": "",
                "C# Booleans": "",
                "C# If...Else (Conditions)": "",
                "C# Switch": "",
                "C# Loops": "",
                "C# Arrays": "",
                "C# Methods": "",
                "C# Classes and Objects": "",
                "C# Exceptions (Try...Catch)": ""
            }
        },
        "c#exercises": {
            "title": "C# Exercises",
            "url": "https://www.w3schools.com/cs/cs_exercises.asp",
            "info": {
                "Exercises": "We have gathered a variety of C# exercises (with answers) for each C# Chapter.Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.",
                "Count Your Score": "You will get 1 point foreach correct answer. Your score and total score will always be displayed.Get Your Certificate \u00bbThe HTML Certificate documents your knowledge of HTML.The CSS Certificate documents your knowledge of advanced CSS.The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.The Python Certificate documents your knowledge of Python.The jQuery Certificate documents your knowledge of jQuery.The SQL Certificate documents your knowledge of SQL.The PHP Certificate documents your knowledge of PHP and MySQL.The XML Certificate documents your knowledge of XML, XML DOM and XSLT.The Bootstrap Certificate documents your knowledge of the Bootstrap framework."
            }
        },
        "c#quiz": {
            "title": "C# Quiz",
            "url": "https://www.w3schools.com/cs/cs_quiz.asp",
            "info": {
                "The Test": "The test contains 25 questions and there is no time limit.The test is not official, it's just a nice way to see how much you know, or don't know, about C#.",
                "Count Your Score": "You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.Get Your Certificate \u00bbThe HTML Certificate documents your knowledge of HTML.The CSS Certificate documents your knowledge of advanced CSS.The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.The Python Certificate documents your knowledge of Python.The jQuery Certificate documents your knowledge of jQuery.The SQL Certificate documents your knowledge of SQL.The PHP Certificate documents your knowledge of PHP and MySQL.The XML Certificate documents your knowledge of XML, XML DOM and XSLT.The Bootstrap Certificate documents your knowledge of the Bootstrap framework."
            }
        }
    },
    "sql": {
        "syntax": {
            "title": "SQL Syntax",
            "url": "https://www.w3schools.com/sql/sql_syntax.asp",
            "info": {
                "Database Tables": "A database most often contains one or more tables. Each table is identified by a name (e.g. \"Customers\" or \"Orders\"). Tables contain records (rows) with data.In this tutorial we will use the well-known Northwind sample database (included in MS Access and MS SQL Server).Below is a selection from the \"Customers\" table:The table above contains five records (one for each customer) and seven columns (CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).",
                "SQL Statements": "Most of the actions you need to perform on a database are done with SQL statements.The following SQL statement selects all the records in the \"Customers\" table:```sql\nSELECT * FROM Customers;```In this tutorial we will teach you all about the different SQL statements.",
                "Keep in Mind That...": "In this tutorial we will write all SQL keywords in upper-case.",
                "Semicolon after SQL Statements?": "Some database systems require a semicolon at the end of each SQL statement.Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.In this tutorial, we will use semicolon at the end of each SQL statement.",
                "Some of The Most Important SQL Commands": ""
            }
        },
        "select": {
            "title": "SQL Select",
            "url": "https://www.w3schools.com/sql/sql_select.asp",
            "info": {
                "The SQL SELECT Statement": "The SELECT statement is used to select data from a database.The data returned is stored in a result table, called the result-set.```sql\nSELECT column1, column2, ...\n\r\nFROM table_name;```Here, column1, column2, ... are the field names of the table you want to select data from. If you want to select all the fields available in the table, use the following syntax:```sql\nSELECT * FROM table_name;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "SELECT Column Example": "The following SQL statement selects the \"CustomerName\" and \"City\" columns from the \"Customers\" table:```sql\nSELECT CustomerName, City FROM Customers;```",
                "SELECT * Example": "The following SQL statement selects all the columns from the \"Customers\" table:```sql\nSELECT * FROM Customers;```",
                "SELECT": "The SELECT command is used to select data from a database. The data returned is stored in a result table, called the result set.The following SQL statement selects the \"CustomerName\" and \"City\" columns from the \"Customers\" table:```sql\nSELECT CustomerName, City FROM Customers;```The following SQL statement selects all the columns from the \"Customers\" table:```sql\nSELECT * FROM Customers;```\u276e SQL Keywords Reference"
            }
        },
        "selectdistinct": {
            "title": "SQL Select Distinct",
            "url": "https://www.w3schools.com/sql/sql_distinct.asp",
            "info": {
                "The SQL SELECT DISTINCT Statement": "The SELECT DISTINCT statement is used to return only distinct (different) values.Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.```sql\nSELECT DISTINCT column1, column2, ...\n\r\n FROM table_name;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "SELECT Example Without DISTINCT": "The following SQL statement selects ALL (including the duplicates) values from the \"Country\" column in the \"Customers\" table:```sql\nSELECT Country FROM Customers;```Now, let us use the DISTINCT keyword with the above SELECT statement and see the result.",
                "SELECT DISTINCT Examples": "The following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table:```sql\nSELECT DISTINCT Country FROM Customers;```The following SQL statement lists the number of different (distinct) customer countries:```sql\nSELECT COUNT(DISTINCT Country) FROM Customers;```Here is the workaround for MS Access:```sql\nSELECT Count(*) AS DistinctCountries\nFROM (SELECT DISTINCT Country FROM Customers);```",
                "SELECT DISTINCT": "The SELECT DISTINCT command returns only distinct (different) values in the result set.The following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table:```sql\nSELECT DISTINCT Country FROM Customers;```\u276e SQL Keywords Reference"
            }
        },
        "where": {
            "title": "SQL Where",
            "url": "https://www.w3schools.com/sql/sql_where.asp",
            "info": {
                "The SQL WHERE Clause": "The WHERE clause is used to filter records.The WHERE clause is used to extract only those records that fulfill a specified condition.```sql\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nWHERE condition;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "WHERE Clause Example": "The following SQL statement selects all the customers from the country \"Mexico\", in the \"Customers\" table:```sql\nSELECT * FROM Customers\n\r\nWHERE Country='Mexico';```",
                "Text Fields vs. Numeric Fields": "SQL requires single quotes around text values (most database systems will also allow double quotes).However, numeric fields should not be enclosed in quotes:```sql\nSELECT * FROM Customers\n\r\n WHERE CustomerID=1;```",
                "Operators in The WHERE Clause": "The following operators can be used in the WHERE clause:",
                "SELECT": "The WHERE command filters a result set to include only records that fulfill a specified condition.The following SQL statement selects all the customers from  \"Mexico\" in the \"Customers\" table:```sql\nSELECT * FROM Customers\n\r\nWHERE Country='Mexico';```SQL requires single quotes around text values (most database systems will also allow double quotes).However, numeric fields should not be enclosed in quotes:```sql\nSELECT * FROM Customers\n\r\n WHERE CustomerID=1;```Note: The WHERE clause is not only used in SELECT statement, it is also used in UPDATE,DELETE statement, etc.!The following operators can be used in the WHERE clause:\u276e SQL Keywords Reference"
            }
        },
        "and,or,not": {
            "title": "SQL And, Or, Not",
            "url": "https://www.w3schools.com/sql/sql_and_or.asp",
            "info": {
                "The SQL AND, OR and NOT Operators": "The WHERE clause can be combined with AND, OR, and NOT operators.The AND and OR operators are used to filter records based on more than one condition:The NOT operator displays a record if the condition(s) is NOT TRUE.```sql\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nWHERE condition1 AND condition2 AND condition3 ...;``````sql\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nWHERE condition1 OR condition2 OR condition3 ...;``````sql\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nWHERE NOT condition;```",
                "Demo Database": "The table below shows the complete \"Customers\" table from the Northwind sample database:",
                "AND Example": "The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city is \"Berlin\":```sql\nSELECT * FROM Customers\n\r\n WHERE Country='Germany'\r\n AND City='Berlin';```",
                "OR Example": "The following SQL statement selects all fields from \"Customers\" where city is \"Berlin\" OR \"M\u00c3\u00bcnchen\":```sql\nSELECT * FROM Customers\n\r\n WHERE City='Berlin'\r\n OR City='M\u00c3\u00bcnchen';```The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" OR \"Spain\":```sql\nSELECT * FROM Customers\n\r\n WHERE Country='Germany'\r\n OR Country='Spain';```",
                "NOT Example": "The following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\":```sql\nSELECT * FROM Customers\n\r\n WHERE NOT Country='Germany';```",
                "Combining AND, OR and NOT": "You can also combine the AND, OR and NOT operators.The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city must be \"Berlin\" OR \"M\u00c3\u00bcnchen\" (use parenthesis to form complex expressions):```sql\nSELECT * FROM Customers\n\r\n WHERE Country='Germany'\r\n AND (City='Berlin' OR City='M\u00c3\u00bcnchen');```The following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\" and NOT \"USA\":```sql\nSELECT * FROM Customers\n\r\n WHERE NOT Country='Germany'\r\n AND NOT Country='USA';```"
            }
        },
        "orderby": {
            "title": "SQL Order By",
            "url": "https://www.w3schools.com/sql/sql_orderby.asp",
            "info": {
                "The SQL ORDER BY Keyword": "The ORDER BY keyword is used to sort the result-set in ascending or descending order.The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.```sql\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nORDER BY column1, column2, ... ASC|DESC;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "ORDER BY Example": "The following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" column:```sql\nSELECT * FROM Customers\n\r\n ORDER BY Country;```",
                "ORDER BY DESC Example": "The following SQL statement selects all customers from the \"Customers\" table, sorted DESCENDING by the \"Country\" column:```sql\nSELECT * FROM Customers\n\r\n ORDER BY Country DESC;```",
                "ORDER BY Several Columns Example": "The following SQL statement selects all customers from the \"Customers\" table, sorted by the \"Country\" and the \"CustomerName\" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:```sql\nSELECT * FROM Customers\n\r\n ORDER BY Country, CustomerName;```",
                "ORDER BY Several Columns Example 2": "The following SQL statement selects all customers from the \"Customers\" table, sorted ascending by the \"Country\" and descending by the \"CustomerName\" column:```sql\nSELECT * FROM Customers\n\r\n ORDER BY Country ASC, CustomerName DESC;```",
                "ORDER BY": "The ORDER BY command is used to sort the result set in ascending or descending order.The ORDER BY command sorts the result set in ascending order by default. To sort the records in descending order, use the DESC keyword.The following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column:```sql\nSELECT * FROM Customers\nORDER BY CustomerName;```",
                "ASC": "The ASC command is used to sort the data returned in ascending order.The following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column:```sql\nSELECT * FROM Customers\nORDER BY CustomerName ASC;```",
                "DESC": "The DESC command is used to sort the data returned in descending order.The following SQL statement selects all the columns from the \"Customers\" table, sorted descending by the \"CustomerName\" column:```sql\nSELECT * FROM Customers\nORDER BY CustomerName DESC;```\u276e SQL Keywords Reference"
            }
        },
        "insertinto": {
            "title": "SQL Insert Into",
            "url": "https://www.w3schools.com/sql/sql_insert.asp",
            "info": {
                "The SQL INSERT INTO Statement": "The INSERT INTO statement is used to insert new records in a table.It is possible to write the INSERT INTO statement in two ways.The first way specifies both the column names and the values to be inserted:```sql\nINSERT INTO table_name (column1, column2, column3, ...)\n\r\nVALUES (value1, value2, value3, ...);```If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. The INSERT INTO syntax would be as follows:```sql\nINSERT INTO table_name\n\r\nVALUES (value1, value2, value3, ...);```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "INSERT INTO Example": "The following SQL statement inserts a new record in the \"Customers\" table:```sql\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\n\r\nVALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');```The selection from the \"Customers\" table will now look like this:",
                "Insert Data Only in Specified Columns": "It is also possible to only insert data in specific columns.The following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):```sql\nINSERT INTO Customers (CustomerName, City, Country)\n\r\nVALUES ('Cardinal', 'Stavanger', 'Norway');```The selection from the \"Customers\" table will now look like this:",
                "INSERT INTO": "The INSERT INTO command is used to insert new rows in a table.The following SQL inserts a new record in the \"Customers\" table:```sql\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\n\r\nVALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');```The following SQL will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):```sql\nINSERT INTO Customers (CustomerName, City, Country)\n\r\nVALUES ('Cardinal', 'Stavanger', 'Norway');```\u276e SQL Keywords Reference"
            }
        },
        "nullvalues": {
            "title": "SQL Null Values",
            "url": "https://www.w3schools.com/sql/sql_null_values.asp",
            "info": {
                "What is a NULL Value?": "A field with a NULL value is a field with no value.If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.",
                "How to Test for NULL Values?": "It is not possible to test for NULL values with comparison operators, such as =, <, or <>.We will have to use the IS NULL and IS NOT NULL operators instead.```sql\nSELECT column_names\nFROM table_name\nWHERE column_name IS NULL;``````sql\nSELECT column_names\nFROM table_name\nWHERE column_name IS NOT NULL;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "The IS NULL Operator": "The IS NULL operator is used to test for empty values (NULL values).The following SQL lists all customers with a NULL value in the \"Address\" field:```sql\nSELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NULL;```",
                "The IS NOT NULL Operator": "The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).The following SQL lists all customers with a value in the \"Address\" field:```sql\nSELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NOT NULL;```"
            }
        },
        "update": {
            "title": "SQL Update",
            "url": "https://www.w3schools.com/sql/sql_update.asp",
            "info": {
                "The SQL UPDATE Statement": "The UPDATE statement is used to modify the existing records in a table.```sql\nUPDATE table_name\n\r\n SET column1 = value1, column2 = value2, ...\n\r\n WHERE condition;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "UPDATE Table": "The following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city.```sql\nUPDATE Customers\n\r\n SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\n\r\n WHERE CustomerID = 1;```The selection from the \"Customers\" table will now look like this:",
                "UPDATE Multiple Records": "It is the WHERE clause that determines how many records will be updated.The following SQL statement will update the contactname to \"Juan\" for all records where country is \"Mexico\":```sql\nUPDATE Customers\n\r\nSET ContactName='Juan'\n\r\nWHERE Country='Mexico';```The selection from the \"Customers\" table will now look like this:",
                "Update Warning!": "```sql\nUPDATE Customers\n\r\nSET ContactName='Juan';```The selection from the \"Customers\" table will now look like this:",
                "UPDATE": "The UPDATE command is used to update existing rows in a table.The following SQL statement updates the first customer (CustomerID = 1) with a new contact person and a new city.```sql\nUPDATE Customers\n\r\n SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\n\r\n WHERE CustomerID = 1;```The following SQL statement will update the contactname to \"Juan\" for all records where country is \"Mexico\":```sql\nUPDATE Customers\n\r\nSET ContactName='Juan'\n\r\nWHERE Country='Mexico';```\u276e SQL Keywords Reference"
            }
        },
        "delete": {
            "title": "SQL Delete",
            "url": "https://www.w3schools.com/sql/sql_delete.asp",
            "info": {
                "The SQL DELETE Statement": "The DELETE statement is used to delete existing records in a table.```sql\nDELETE FROM table_name WHERE condition;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "SQL DELETE Example": "The following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table:```sql\nDELETE FROM Customers\r\n WHERE CustomerName='Alfreds Futterkiste';```The \"Customers\" table will now look like this:",
                "Delete All Records": "It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:```sql\nDELETE FROM table_name;```The following SQL statement deletes all rows in the \"Customers\" table, without deleting the table:```sql\nDELETE FROM Customers;```",
                "DELETE": "The DELETE command is used to delete existing records in a table.The following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table:```sql\nDELETE FROM Customers\r\n WHERE CustomerName='Alfreds Futterkiste';```It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:The following SQL statement deletes all rows in the \"Customers\" table, without deleting the table. This means that the table structure, attributes, and indexes will be intact:```sql\nDELETE FROM Customers;```\u276e SQL Keywords Reference"
            }
        },
        "selecttop": {
            "title": "SQL Select Top",
            "url": "https://www.w3schools.com/sql/sql_top.asp",
            "info": {
                "The SQL SELECT TOP Clause": "The SELECT TOP clause is used to specify the number of records to return.The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.SQL Server / MS Access Syntax:```sql\nSELECT TOP number|percent column_name(s)\n\r\nFROM table_name\nWHERE condition;```MySQL Syntax:```sql\nSELECT column_name(s)\n\r\nFROM table_name\nWHERE condition\n\r\nLIMIT number;```Oracle Syntax:```sql\nSELECT column_name(s)\n\r\nFROM table_name\n\r\nWHERE ROWNUM <= number;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "SQL TOP, LIMIT and ROWNUM Examples": "The following SQL statement selects the first three records from the \"Customers\" table (for SQL Server/MS Access):```sql\nSELECT TOP 3 * FROM Customers;```The following SQL statement shows the equivalent example using the LIMIT clause (for MySQL):```sql\nSELECT * FROM Customers\nLIMIT 3;```The following SQL statement shows the equivalent example using ROWNUM (for Oracle):```sql\nSELECT * FROM Customers\nWHERE ROWNUM  <= 3;```",
                "SQL TOP PERCENT Example": "The following SQL statement selects the first 50% of the records from the \"Customers\" table (for SQL Server/MS Access):```sql\nSELECT TOP 50 PERCENT * FROM Customers;```",
                "ADD a WHERE CLAUSE": "The following SQL statement selects the first three records from the \"Customers\" table, where the country is \"Germany\" (for SQL Server/MS Access):```sql\nSELECT TOP 3 * FROM Customers\nWHERE Country='Germany';```The following SQL statement shows the equivalent example using the LIMIT clause (for MySQL):```sql\nSELECT * FROM Customers\nWHERE Country='Germany'\nLIMIT 3;```The following SQL statement shows the equivalent example using ROWNUM (for Oracle):```sql\nSELECT * FROM Customers\nWHERE Country='Germany' AND ROWNUM  <= 3;```",
                "SELECT TOP, LIMIT and ROWNUM": "The SELECT TOP command is used to specify the number of records to return.The following SQL statement selects the first three records from the \"Customers\" table:```sql\nSELECT TOP 3 * FROM Customers;```The following SQL statement shows the equivalent example using the LIMIT clause:```sql\nSELECT * FROM Customers\nLIMIT 3;```The following SQL statement shows the equivalent example using ROWNUM:```sql\nSELECT * FROM Customers\nWHERE ROWNUM  <= 3;```\u276e SQL Keywords Reference"
            }
        },
        "minandmax": {
            "title": "SQL Min and Max",
            "url": "https://www.w3schools.com/sql/sql_min_max.asp",
            "info": {
                "The SQL MIN() and MAX() Functions": "The MIN() function returns the smallest value of the selected column.The MAX() function returns the largest value of the selected column.```sql\nSELECT MIN(column_name)\n\r\nFROM table_name\n\r\nWHERE condition;``````sql\nSELECT MAX(column_name)\n\r\nFROM table_name\n\r\nWHERE condition;```",
                "Demo Database": "Below is a selection from the \"Products\" table in the Northwind sample database:",
                "MIN() Example": "The following SQL statement finds the price of the cheapest product:```sql\nSELECT MIN(Price) AS SmallestPrice\nFROM Products;```",
                "MAX() Example": "The following SQL statement finds the price of the most expensive product:```sql\nSELECT MAX(Price) AS LargestPrice\nFROM Products;```"
            }
        },
        "count,avg,sum": {
            "title": "SQL Count, Avg, Sum",
            "url": "https://www.w3schools.com/sql/sql_count_avg_sum.asp",
            "info": {
                "The SQL COUNT(), AVG() and SUM() Functions": "The COUNT() function returns the number of rows that matches a specified criterion.The AVG() function returns the average value of a numeric column.The SUM() function returns the total sum of a numeric column.```sql\nSELECT COUNT(column_name)\n\r\nFROM table_name\n\r\nWHERE condition;``````sql\nSELECT AVG(column_name)\n\r\nFROM table_name\n\r\nWHERE condition;``````sql\nSELECT SUM(column_name)\n\r\nFROM table_name\n\r\nWHERE condition;```",
                "Demo Database": "Below is a selection from the \"OrderDetails\" table in the Northwind sample database:",
                "COUNT() Example": "The following SQL statement finds the number of products:```sql\nSELECT COUNT(ProductID)\nFROM Products;```Note: NULL values are not counted.",
                "AVG() Example": "The following SQL statement finds the average price of all products:```sql\nSELECT AVG(Price)\nFROM Products;```Note: NULL values are ignored.",
                "SUM() Example": "The following SQL statement finds the sum of the \"Quantity\" fields in the \"OrderDetails\" table:```sql\nSELECT SUM(Quantity)\nFROM OrderDetails;```Note: NULL values are ignored."
            }
        },
        "like": {
            "title": "SQL Like",
            "url": "https://www.w3schools.com/sql/sql_like.asp",
            "info": {
                "The SQL LIKE Operator": "The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.There are two wildcards often used in conjunction with the LIKE operator:The percent sign and the underscore can also be used in combinations!```sql\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nWHERE columnN LIKE pattern;```Here are some examples showing different LIKE operators with '%' and '\\_' wildcards:",
                "Demo Database": "The table below shows the complete \"Customers\" table from the Northwind sample database:",
                "SQL LIKE Examples": "The following SQL statement selects all customers with a CustomerName starting with \"a\":```sql\nSELECT * FROM Customers\n\r\n WHERE CustomerName LIKE 'a%';```The following SQL statement selects all customers with a CustomerName ending with \"a\":```sql\nSELECT * FROM Customers\n\r\n WHERE CustomerName LIKE '%a';```The following SQL statement selects all customers with a CustomerName that have \"or\" in any position:```sql\nSELECT * FROM Customers\nWHERE CustomerName LIKE '%or%';```The following SQL statement selects all customers with a CustomerName that have \"r\" in the second position:```sql\nSELECT * FROM Customers\nWHERE CustomerName LIKE '_r%';```The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length:```sql\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a__%';```The following SQL statement selects all customers with a ContactName that starts with \"a\" and ends with \"o\":```sql\nSELECT * FROM Customers\nWHERE ContactName LIKE 'a%o';```The following SQL statement selects all customers with a CustomerName that does NOT start with \"a\":",
                "LIKE": "The LIKE command is used in a WHERE clause to search for a specified pattern in a column.You can use two wildcards with LIKE: The following SQL selects all customers with a CustomerName starting with \"a\":```sql\nSELECT * FROM Customers\n\r\n WHERE CustomerName LIKE 'a%';```The following SQL selects all customers with a CustomerName ending with \"a\":```sql\nSELECT * FROM Customers\n\r\n WHERE CustomerName LIKE '%a';```The following SQL selects all customers with a CustomerName that have \"or\" in any position:```sql\nSELECT * FROM Customers\nWHERE CustomerName LIKE '%or%';```The following SQL statement selects all customers with a CustomerName that starts with \"a\" and are at least 3 characters in length:```sql\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a_%_%';```\u276e SQL Keywords Reference"
            }
        },
        "wildcards": {
            "title": "SQL Wildcards",
            "url": "https://www.w3schools.com/sql/sql_wildcards.asp",
            "info": {
                "SQL Wildcard Characters": "A wildcard character is used to substitute one or more characters in a string.Wildcard characters are used with the SQL LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.All the wildcards can also be used in combinations!Here are some examples showing different LIKE operators with '%' and '\\_' wildcards:",
                "Demo Database": "The table below shows the complete \"Customers\" table from the Northwind sample database:",
                "Using the % Wildcard": "The following SQL statement selects all customers with a City starting with \"ber\":```sql\nSELECT * FROM Customers\n\r\n WHERE City LIKE 'ber%';```The following SQL statement selects all customers with a City containing the pattern \"es\":\u00a0```sql\nSELECT * FROM Customers\n\r\n WHERE City LIKE '%es%';```",
                "Using the _ Wildcard": "The following SQL statement selects all customers with a City starting with any character, followed by \"ondon\":```sql\nSELECT * FROM Customers\n\r\n WHERE City LIKE '_ondon';```The following SQL statement selects all customers with a City starting with \"L\", followed by any character, followed by \"n\", followed by any character, followed by \"on\":```sql\nSELECT * FROM Customers\n\r\n WHERE City LIKE 'L_n_on';```",
                "Using the [charlist] Wildcard": "The following SQL statement selects all customers with a City starting with \"b\", \"s\", or \"p\":```sql\nSELECT * FROM Customers\n\r\n WHERE City LIKE '[bsp]%';```The following SQL statement selects all customers with a City starting with \"a\", \"b\", or \"c\":```sql\nSELECT * FROM Customers\n\r\n WHERE City LIKE '[a-c]%';```",
                "Using the [!charlist] Wildcard": "The two following SQL statements select all customers with a City NOT starting with \"b\", \"s\", or \"p\":```sql\nSELECT * FROM Customers\n\r\n WHERE City LIKE '[!bsp]%';```Or:```sql\nSELECT * FROM Customers\n\r\n WHERE City NOT LIKE '[bsp]%';```"
            }
        },
        "in": {
            "title": "SQL In",
            "url": "https://www.w3schools.com/sql/sql_in.asp",
            "info": {
                "The SQL IN Operator": "The IN operator allows you to specify multiple values in a WHERE clause.The IN operator is a shorthand for multiple OR conditions.```sql\nSELECT column_name(s)\n\r\nFROM table_name\n\r\nWHERE column_name IN (value1, value2, ...);```or:```sql\nSELECT column_name(s)\n\r\nFROM table_name\n\r\nWHERE column_name IN (SELECT STATEMENT);```",
                "Demo Database": "The table below shows the complete \"Customers\" table from the Northwind sample database:",
                "IN Operator Examples": "The following SQL statement selects all customers that are located in \"Germany\", \"France\" or \"UK\":```sql\nSELECT * FROM Customers\nWHERE Country IN ('Germany', 'France', 'UK');```The following SQL statement selects all customers that are NOT located in \"Germany\", \"France\" or \"UK\":```sql\nSELECT * FROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');```The following SQL statement selects all customers that are from the same countries as the suppliers:```sql\nSELECT * FROM Customers\nWHERE Country IN (SELECT Country FROM Suppliers);```",
                "IN": "The IN command allows you to specify multiple values in a WHERE clause.The IN operator is a shorthand for multiple OR conditions.The following SQL selects all customers that are located in \"Germany\", \"France\" and \"UK\":```sql\nSELECT * FROM Customers\nWHERE Country IN ('Germany', 'France', 'UK');```The following SQL selects all customers that are NOT located in \"Germany\", \"France\" or \"UK\":```sql\nSELECT * FROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');```The following SQL selects all customers that are from the same countries as the suppliers:```sql\nSELECT * FROM Customers\nWHERE Country IN (SELECT Country FROM Suppliers);```\u276e SQL Keywords Reference"
            }
        },
        "between": {
            "title": "SQL Between",
            "url": "https://www.w3schools.com/sql/sql_between.asp",
            "info": {
                "The SQL BETWEEN Operator": "The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.The BETWEEN operator is inclusive: begin and end values are included.\u00a0```sql\nSELECT column_name(s)\n\r\nFROM table_name\n\r\nWHERE column_name BETWEEN value1 AND value2;```",
                "Demo Database": "Below is a selection from the \"Products\" table in the Northwind sample database:",
                "BETWEEN Example": "The following SQL statement selects all products with a price BETWEEN 10 and 20:```sql\nSELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20;```",
                "NOT BETWEEN Example": "To display the products outside the range of the previous example, use NOT BETWEEN:```sql\nSELECT * FROM Products\nWHERE Price NOT BETWEEN 10 AND 20;```",
                "BETWEEN with IN Example": "The following SQL statement selects all products with a price BETWEEN 10 and 20. In addition; do not show products with a CategoryID of 1,2, or 3:```sql\nSELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20\nAND CategoryID NOT IN (1,2,3);```",
                "BETWEEN Text Values Example": "The following SQL statement selects all products with a ProductName BETWEEN Carnarvon Tigers and Mozzarella di Giovanni:```sql\nSELECT * FROM Products\nWHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;```The following SQL statement selects all products with a ProductName BETWEEN Carnarvon Tigers and Chef Anton's Cajun Seasoning:```sql\nSELECT * FROM Products\nWHERE ProductName BETWEEN \"Carnarvon Tigers\" AND \"Chef Anton's Cajun Seasoning\"\nORDER BY ProductName;```",
                "NOT BETWEEN Text Values Example": "The following SQL statement selects all products with a ProductName NOT BETWEEN Carnarvon Tigers and Mozzarella di Giovanni:```sql\nSELECT * FROM Products\nWHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;```",
                "Sample Table": "Below is a selection from the \"Orders\" table in the Northwind sample database:",
                "BETWEEN Dates Example": "The following SQL statement selects all orders with an OrderDate BETWEEN '01-July-1996' and '31-July-1996':```sql\nSELECT * FROM Orders\nWHERE OrderDate BETWEEN #01/07/1996# AND #31/07/1996#;```OR:```sql\nSELECT * FROM Orders\nWHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';```",
                "BETWEEN": "The BETWEEN command is used to select values within a given range. The values can be numbers, text, or dates.The BETWEEN command is inclusive: begin and end values are included.\u00a0The following SQL statement selects all products with a price BETWEEN 10 and 20:```sql\nSELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20;```To display the products outside the range of the previous example, use NOT BETWEEN:```sql\nSELECT * FROM Products\nWHERE Price NOT BETWEEN 10 AND 20;```The following SQL statement selects all products with a ProductName BETWEEN 'Carnarvon Tigers' and 'Mozzarella di Giovanni':```sql\nSELECT * FROM Products\nWHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;```\u276e SQL Keywords Reference"
            }
        },
        "aliases": {
            "title": "SQL Aliases",
            "url": "https://www.w3schools.com/sql/sql_alias.asp",
            "info": {
                "SQL Aliases": "SQL aliases are used to give a table, or a column in a table, a temporary name.Aliases are often used to make column names more readable.An alias only exists for the duration of the query.```sql\nSELECT column_name AS alias_name\n\r\n FROM table_name;``````sql\nSELECT column_name(s)\n\r\n FROM table_name AS alias_name;```",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Customers\" table:And a selection from the \"Orders\" table:",
                "Alias for Columns Examples": "The following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column:```sql\nSELECT CustomerID AS ID, CustomerName AS Customer\n\r\n FROM Customers;```The following SQL statement creates two aliases, one for the CustomerName column and one for the ContactName column. Note: It requires double quotation marks or square brackets if the alias name contains spaces:```sql\nSELECT CustomerName AS Customer, ContactName AS [Contact Person]\n\r\n FROM Customers;```The following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country):```sql\nSELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address\n\r\n FROM Customers;```Note: To get the SQL statement above to work in MySQL use the following:```sql\nSELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address\n\r\nFROM Customers;```",
                "Alias for Tables Example": "The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter):```sql\nSELECT o.OrderID, o.OrderDate, c.CustomerName\nFROM Customers AS c, Orders AS o\nWHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;```The following SQL statement is the same as above, but without aliases:```sql\nSELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName\nFROM Customers, Orders\nWHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;```Aliases can be useful when:"
            }
        },
        "joins": {
            "title": "SQL Joins",
            "url": "https://www.w3schools.com/sql/sql_join.asp",
            "info": {
                "SQL JOIN": "A JOIN clause is used to combine rows from two or more tables, based on a related column between them.Let's look at a selection from the \"Orders\" table:Then, look at a selection from the \"Customers\" table:Notice that the \"CustomerID\" column in the \"Orders\" table refers to the \"CustomerID\" in the \"Customers\" table. The relationship between the two tables above is the \"CustomerID\" column.Then, we can create the following SQL statement (that contains an INNER JOIN), that selects records that have matching values in both tables:```sql\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;```and it will produce something like this:",
                "Different Types of SQL JOINs": "Here are the different types of the JOINs in SQL:\u00a0\u00a0\u00a0"
            }
        },
        "innerjoin": {
            "title": "SQL Inner Join",
            "url": "https://www.w3schools.com/sql/sql_join_inner.asp",
            "info": {
                "SQL INNER JOIN Keyword": "The INNER JOIN keyword selects records that have matching values in both tables.```sql\nSELECT column_name(s)\n\r\nFROM table1\n\r\nINNER JOIN table2\n ON table1.column_name = table2.column_name;```",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Orders\" table:And a selection from the \"Customers\" table:",
                "SQL INNER JOIN Example": "The following SQL statement selects all orders with customer information:```sql\nSELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;```Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown!",
                "\u00a0JOIN Three Tables": "The following SQL statement selects all orders with customer and shipper information:```sql\nSELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);```",
                "INNER JOIN": "The INNER JOIN command returns rows that have matching values in both tables.The following SQL selects all orders with customer information:```sql\nSELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;```Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown!The following SQL statement selects all orders with customer and shipper information:```sql\nSELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);```\u276e SQL Keywords Reference"
            }
        },
        "leftjoin": {
            "title": "SQL Left Join",
            "url": "https://www.w3schools.com/sql/sql_join_left.asp",
            "info": {
                "SQL LEFT JOIN Keyword": "The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.```sql\nSELECT column_name(s)\n\r\nFROM table1\n\r\nLEFT JOIN table2\n ON table1.column_name = table2.column_name;```Note: In some databases LEFT JOIN is called LEFT OUTER JOIN.",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Customers\" table:And a selection from the \"Orders\" table:",
                "SQL LEFT JOIN Example": "The following SQL statement will select all customers, and any orders they might have:```sql\nSELECT Customers.CustomerName, Orders.OrderID\n\r\n FROM Customers\n\r\n LEFT JOIN Orders\r\n ON Customers.CustomerID = Orders.CustomerID\n\r\n ORDER BY Customers.CustomerName;```Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).",
                "LEFT JOIN": "The LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match.The following SQL will select all customers, and any orders they might have:```sql\nSELECT Customers.CustomerName, Orders.OrderID\n\r\n FROM Customers\n\r\n LEFT JOIN Orders\r\n ON Customers.CustomerID = Orders.CustomerID\n\r\n ORDER BY Customers.CustomerName;```Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).\u276e SQL Keywords Reference"
            }
        },
        "rightjoin": {
            "title": "SQL Right Join",
            "url": "https://www.w3schools.com/sql/sql_join_right.asp",
            "info": {
                "SQL RIGHT JOIN Keyword": "The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.```sql\nSELECT column_name(s)\n\r\nFROM table1\n\r\nRIGHT JOIN table2\n ON table1.column_name = table2.column_name;```Note: In some databases RIGHT JOIN is called RIGHT OUTER JOIN.",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Orders\" table:And a selection from the \"Employees\" table:",
                "SQL RIGHT JOIN Example": "The following SQL statement will return all employees, and any orders they might have placed:```sql\nSELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\n\r\n ORDER BY Orders.OrderID;```Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).",
                "RIGHT JOIN": "The RIGHT JOIN command returns all rows from the right table, and the matching records from the left table. The result is NULL from the left side, when there is no match.The following SQL will return all employees, and any orders they might have placed:```sql\nSELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\n\r\n ORDER BY Orders.OrderID;```Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).\u276e SQL Keywords Reference"
            }
        },
        "fulljoin": {
            "title": "SQL Full Join",
            "url": "https://www.w3schools.com/sql/sql_join_full.asp",
            "info": {
                "SQL FULL OUTER JOIN Keyword": "The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.Note: FULL OUTER JOIN can potentially return very large result-sets!Tip: FULL OUTER JOIN and FULL JOIN are the same.```sql\nSELECT column_name(s)\n\r\n FROM table1\n\r\n FULL OUTER JOIN table2\n ON table1.column_name = table2.column_name\nWHERE condition;```",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Customers\" table:And a selection from the \"Orders\" table:",
                "SQL FULL OUTER JOIN Example": "The following SQL statement selects all customers, and all orders:```sql\nSELECT Customers.CustomerName, Orders.OrderID\n\r\nFROM Customers\n\r\nFULL OUTER JOIN Orders\r\nON Customers.CustomerID=Orders.CustomerID\n\r\nORDER BY Customers.CustomerName;```A selection from the result set may look like this:Note: The FULL OUTER JOIN keyword returns all matching records from both tables whether the other table matches or not. So, if there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well."
            }
        },
        "selfjoin": {
            "title": "SQL Self Join",
            "url": "https://www.w3schools.com/sql/sql_join_self.asp",
            "info": {
                "SQL Self JOIN": "A self JOIN is a regular join, but the table is joined with itself.```sql\nSELECT column_name(s)\n\r\nFROM table1 T1, table1 T2\nWHERE condition;```T1 and T2 are different table aliases for the same table.",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Customers\" table:",
                "SQL Self JOIN Example": "The following SQL statement matches customers that are from the same city:```sql\nSELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City\nFROM Customers A, Customers B\nWHERE A.CustomerID <> B.CustomerID\nAND A.City = B.City \nORDER BY A.City;```"
            }
        },
        "union": {
            "title": "SQL Union",
            "url": "https://www.w3schools.com/sql/sql_union.asp",
            "info": {
                "The SQL UNION Operator": "The UNION operator is used to combine the result-set of two or more SELECT statements.```sql\nSELECT column_name(s) FROM table1\n\r\n UNION\n\r\n SELECT column_name(s) FROM table2;```The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:```sql\nSELECT column_name(s) FROM table1\n\r\n UNION ALL\n\r\n SELECT column_name(s) FROM table2;```Note: The column names in the result-set are usually equal to the column names in the first SELECT statement in the UNION.",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Customers\" table:And a selection from the \"Suppliers\" table:",
                "SQL UNION Example": "The following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;```Note: If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. Use UNION ALL to also select duplicate values!",
                "SQL UNION ALL Example": "The following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\n\r\n ORDER BY City;```",
                "SQL UNION With WHERE": "The following SQL statement returns the German cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION\n\r\n SELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;```",
                "SQL UNION ALL With WHERE": "The following SQL statement returns the German cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION ALL\n\r\n SELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;```",
                "Another UNION Example": "The following SQL statement lists all customers and suppliers:```sql\nSELECT 'Customer' AS Type, ContactName, City, Country\nFROM Customers\nUNION\nSELECT 'Supplier', ContactName, City, Country\nFROM Suppliers;```Notice the \"AS Type\" above - it is an alias. SQL Aliases are used to give a table or a column a temporary name.An alias only exists for the duration of the query. So, here we have created a temporary column named \"Type\", that list whether the contact person is a \"Customer\" or a \"Supplier\".",
                "UNION": "The UNION command combines the result set of two or more SELECT statements (only distinct values)The following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;```",
                "UNION ALL": "The UNION ALL command combines the result set of two or more SELECT statements (allows duplicate values).The following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\n\r\n ORDER BY City;```\u276e SQL Keywords Reference"
            }
        },
        "groupby": {
            "title": "SQL Group By",
            "url": "https://www.w3schools.com/sql/sql_groupby.asp",
            "info": {
                "The SQL GROUP BY Statement": "The GROUP BY statement groups rows that have the same values into summary rows, like \"find the number of customers in each country\".The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.```sql\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nORDER BY column_name(s);```",
                "Demo Database": "Below is a selection from the \"Orders\" table in the Northwind sample database:And a selection from the \"Shippers\" table:",
                "SQL GROUP BY Examples": "The following SQL statement lists the number of customers in each country:```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;```The following SQL statement lists the number of customers in each country, sorted high to low:```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nORDER BY COUNT(CustomerID) DESC;```",
                "GROUP BY With JOIN Example": "The following SQL statement lists the number of orders sent by each shipper:```sql\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nGROUP BY ShipperName;```",
                "GROUP BY": "The GROUP BY command is used to group the result set (used with aggregate functions: COUNT, MAX, MIN, SUM, AVG).The following SQL lists the number of customers in each country:```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;```The following SQL lists the number of customers in each country, sorted high to low:```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nORDER BY COUNT(CustomerID) DESC;```\u276e SQL Keywords Reference"
            }
        },
        "having": {
            "title": "SQL Having",
            "url": "https://www.w3schools.com/sql/sql_having.asp",
            "info": {
                "The SQL HAVING Clause": "The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.```sql\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);```",
                "Demo Database": "Below is a selection from the \"Orders\" table in the Northwind sample database:And a selection from the \"Employees\" table:",
                "SQL HAVING Examples": "The following SQL statement lists the number of customers in each country. Only include countries with more than 5 customers:```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;```The following SQL statement lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5\nORDER BY COUNT(CustomerID) DESC;```",
                "More HAVING Examples": "The following SQL statement lists the employees that have registered more than 10 orders:```sql\nSELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM (Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 10;```The following SQL statement lists if the employees \"Davolio\" or \"Fuller\" have registered more than 25 orders:```sql\nSELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE LastName = 'Davolio' OR LastName = 'Fuller'\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 25;```",
                "HAVING": "The HAVING command is used instead of WHERE with aggregate functions.The following SQL lists the number of customers in each country. Only include countries with more than 5 customers:```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;```The following SQL lists the number of customers in each country, sorted high to low (Only include countries with more than 5 customers):```sql\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5\nORDER BY COUNT(CustomerID) DESC;```\u276e SQL Keywords Reference"
            }
        },
        "exists": {
            "title": "SQL Exists",
            "url": "https://www.w3schools.com/sql/sql_exists.asp",
            "info": {
                "The SQL EXISTS Operator": "The EXISTS operator is used to test for the existence of any record in a subquery.The EXISTS operator returns true if the subquery returns one or more records.```sql\nSELECT column_name(s)\nFROM table_name\nWHERE EXISTS\n(SELECT column_name FROM table_name WHEREcondition);```",
                "Demo Database": "Below is a selection from the \"Products\" table in the Northwind sample database:And a selection from the \"Suppliers\" table:",
                "SQL EXISTS Examples": "The following SQL statement returns TRUE and lists the suppliers with a product price less than 20:```sql\nSELECT SupplierName\nFROM Suppliers\nWHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);```The following SQL statement returns TRUE and lists the suppliers with a product price equal to 22:```sql\nSELECT SupplierName\nFROM Suppliers\nWHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price = 22);```",
                "EXISTS": "The EXISTS command tests for the existence of any record in a subquery, and returns true if the subquery returns one or more records.The following SQL lists the suppliers with a product price less than 20:```sql\nSELECT SupplierName\nFROM Suppliers\nWHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price < 20);```The following SQL lists the suppliers with a product price equal to 22:```sql\nSELECT SupplierName\nFROM Suppliers\nWHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price = 22);```\u276e SQL Keywords Reference"
            }
        },
        "any,all": {
            "title": "SQL Any, All",
            "url": "https://www.w3schools.com/sql/sql_any_all.asp",
            "info": {
                "The SQL ANY and ALL Operators": "The ANY and ALL operators are used with a WHERE or HAVING clause.The ANY operator returns true if any of the subquery values meet the condition.The ALL operator returns true if all of the subquery values meet the condition.```sql\nSELECT column_name(s)\nFROM table_name\nWHERE column_name operator ANY\n(SELECT column_name FROM table_name WHEREcondition);``````sql\nSELECT column_name(s)\nFROM table_name\nWHERE column_name operator ALL\n(SELECT column_name FROM table_name WHERE condition);```",
                "Demo Database": "Below is a selection from the \"Products\" table in the Northwind sample database:And a selection from the \"OrderDetails\" table:",
                "SQL ANY Examples": "The ANY operator returns TRUE if any of the subquery values meet the condition.The following SQL statement returns TRUE and lists the product names if it finds ANY records in the OrderDetails table that quantity = 10:```sql\nSELECT ProductName\nFROM Products\nWHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);```The following SQL statement returns TRUE and lists the product names if it finds ANY records in the OrderDetails table that quantity > 99:```sql\nSELECT ProductName\nFROM Products\nWHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity > 99);```",
                "SQL ALL Example": "The ALL operator returns TRUE if all of the subquery values meet the condition.The following SQL statement returns TRUE and lists the product names if ALL the records in the OrderDetails table has quantity = 10 (so, this example will return FALSE, because not ALL records in the OrderDetails table has quantity = 10):```sql\nSELECT ProductName\nFROM Products\nWHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);```"
            }
        },
        "selectinto": {
            "title": "SQL Select Into",
            "url": "https://www.w3schools.com/sql/sql_select_into.asp",
            "info": {
                "The SQL SELECT INTO Statement": "The SELECT INTO statement copies data from one table into a new table.Copy all columns into a new table:```sql\nSELECT *\n\r\nINTO newtable [IN externaldb]\n\r\nFROM oldtable\nWHERE condition;```Copy only some columns into a new table:```sql\nSELECT column1, column2, column3, ...\n\r\nINTO newtable [IN externaldb]\n \r\nFROM oldtable\nWHERE condition;```The new table will be created with the column-names and types as defined in the old table.You can create new column names using the AS clause.",
                "SQL SELECT INTO Examples": "The following SQL statement creates a backup copy of Customers:```sql\nSELECT * INTO CustomersBackup2017\n\r\nFROM Customers;```The following SQL statement uses the IN clause to copy the table into a new table in another database:```sql\nSELECT *\r\nINTO CustomersBackup2017 IN 'Backup.mdb'\n\r\nFROM Customers;```The following SQL statement copies only a few columns into a new table:```sql\nSELECT CustomerName, ContactName INTO CustomersBackup2017\n\r\nFROM Customers;```The following SQL statement copies only the German customers into a new table:```sql\nSELECT *\r\nINTO CustomersGermany\n\r\nFROM Customers\n\r\nWHERE Country = 'Germany';```The following SQL statement copies data from more than one table into a new table:```sql\nSELECT Customers.CustomerName, Orders.OrderID\nINTO CustomersOrderBackup2017\n\r\nFROM Customers\n\r\n LEFT JOIN Orders\r\n ON Customers.CustomerID = Orders.CustomerID;```Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data:",
                "SELECT INTO": "The SELECT INTO command copies data from one table and inserts it into a new table.The following SQL statement creates a backup copy of Customers:```sql\nSELECT * INTO CustomersBackup2017\n\r\nFROM Customers;```The following SQL statement uses the IN clause to copy the table into a new table in another database:```sql\nSELECT *\r\nINTO CustomersBackup2017 IN 'Backup.mdb'\n\r\nFROM Customers;```The following SQL statement copies only a few columns into a new table:```sql\nSELECT CustomerName, ContactName INTO CustomersBackup2017\n\r\nFROM Customers;```The following SQL statement copies only the German customers into a new table:```sql\nSELECT *\r\nINTO CustomersGermany\n\r\nFROM Customers\n\r\nWHERE Country = 'Germany';```The following SQL statement copies data from more than one table into a new table:```sql\nSELECT Customers.CustomerName, Orders.OrderID\nINTO CustomersOrderBackup2017\n\r\nFROM Customers\n\r\n LEFT JOIN Orders\r\n ON Customers.CustomerID = Orders.CustomerID;```\u276e SQL Keywords Reference"
            }
        },
        "insertintoselect": {
            "title": "SQL Insert Into Select",
            "url": "https://www.w3schools.com/sql/sql_insert_into_select.asp",
            "info": {
                "The SQL INSERT INTO SELECT Statement": "The INSERT INTO SELECT statement copies data from one table and inserts it into another table.Copy all columns from one table to another table:```sql\nINSERT INTO table2\n\r\nSELECT * FROM table1\nWHERE condition;```Copy only some columns from one table into another table:```sql\nINSERT INTO table2 (column1, column2, column3, ...)\n\r\nSELECT column1, column2, column3, ...\n FROM table1\n\r\nWHERE condition;```",
                "Demo Database": "In this tutorial we will use the well-known Northwind sample database.Below is a selection from the \"Customers\" table:And a selection from the \"Suppliers\" table:",
                "SQL INSERT INTO SELECT Examples": "The following SQL statement copies \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL):```sql\nINSERT INTO Customers (CustomerName, City, Country)\n\r\n SELECT SupplierName, City, Country FROM Suppliers;```The following SQL statement copies \"Suppliers\" into \"Customers\" (fill all columns):```sql\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nSELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;```The following SQL statement copies only the German suppliers into \"Customers\":```sql\nINSERT INTO Customers (CustomerName, City, Country)\n\r\n SELECT SupplierName, City, Country FROM Suppliers\nWHERE Country='Germany';```",
                "INSERT INTO SELECT": "The INSERT INTO SELECT command copies data from one table and inserts it into another table.The following SQL copies \"Suppliers\" into \"Customers\" (the columns that are not filled with data, will contain NULL):```sql\nINSERT INTO Customers (CustomerName, City, Country)\n\r\n SELECT SupplierName, City, Country FROM Suppliers;```The following SQL copies \"Suppliers\" into \"Customers\" (fill all columns):```sql\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nSELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;```The following SQL copies only the German suppliers into \"Customers\":```sql\nINSERT INTO Customers (CustomerName, City, Country)\n\r\n SELECT SupplierName, City, Country FROM Suppliers\nWHERE Country='Germany';```\u276e SQL Keywords Reference"
            }
        },
        "case": {
            "title": "SQL Case",
            "url": "https://www.w3schools.com/sql/sql_case.asp",
            "info": {
                "The SQL CASE Statement": "The CASE statement goes through conditions and returns a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause. If there is no ELSE part and no conditions are true, it returns NULL.",
                "CASE Syntax": "```sql\nCASE\n    WHEN condition1 THEN result1\n    WHEN condition2 THEN result2\n    WHEN conditionN THEN resultN\n    ELSE result\nEND;```",
                "Demo Database": "Below is a selection from the \"OrderDetails\" table in the Northwind sample database:",
                "SQL CASE Examples": "The following SQL goes through conditions and returns a value when the first condition is met:```sql\nSELECT OrderID, Quantity,\nCASE\n    WHEN Quantity > 30 THEN 'The quantity is greater than 30'\n    WHEN Quantity = 30 THEN 'The quantity is 30'\n    ELSE 'The quantity is under 30'\nEND AS QuantityText\nFROM OrderDetails;```The following SQL will order the customers by City. However, if City is NULL, then order by Country:```sql\nSELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\n    WHEN City IS NULL THEN Country\n    ELSE City\nEND);```",
                "CASE": "The CASE command is used is to create different output based on conditions.The following SQL goes through several conditions and returns a value when the specified condition is met:```sql\nSELECT OrderID, Quantity,\nCASE\n    WHEN Quantity > 30 THEN \"The quantity is greater than 30\"\n    WHEN Quantity = 30 THEN \"The quantity is 30\"\n    ELSE \"The quantity is under 30\"\nEND\nFROM OrderDetails;```The following SQL will order the customers by City. However, if City is NULL, then order by Country:```sql\nSELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\n    WHEN City IS NULL THEN Country\n    ELSE City\nEND);```\u276e SQL Keywords Reference",
                "Definition and Usage": "The CASE statement goes through conditions and return a value when the first condition is met (like an IF-THEN-ELSE statement). So, once a condition is true, it will stop reading and return the result.If no conditions are true, it will return the value in the ELSE clause. If there is no ELSE part and no conditions are true, it returns NULL.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "The following SQL will order the customers by City. However, if City is NULL, then order by Country:```sql\nSELECT CustomerName, City, Country\nFROM Customers\nORDER BY\n(CASE\n    WHEN City IS NULL THEN Country\n    ELSE City\nEND);```\u276e MySQL Functions"
            }
        },
        "nullfunctions": {
            "title": "SQL Null Functions",
            "url": "https://www.w3schools.com/sql/sql_isnull.asp",
            "info": {
                "SQL IFNULL(), ISNULL(), COALESCE(), and NVL() Functions": "Look at the following \"Products\" table:Suppose that the \"UnitsOnOrder\" column is optional, and may contain NULL values.Look at the following SELECT statement:```sql\nSELECT ProductName, UnitPrice * (UnitsInStock + UnitsOnOrder)\n\r\nFROM Products;```In the example above, if any of the \"UnitsOnOrder\" values are NULL, the result will be NULL.",
                "Solutions": "MySQLThe MySQL IFNULL() function lets you return an alternative value if an expression is NULL:```sql\nSELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0))\n\r\nFROM Products;```or we can use the COALESCE() function, like this:```sql\nSELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0))\n\r\nFROM Products;```SQL ServerThe SQL Server ISNULL() function lets you return an alternative value when an expression is NULL:```sql\nSELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0))\n\r\nFROM Products;```MS AccessThe MS Access IsNull() function returns TRUE (-1) if the expression is a null value, otherwise FALSE (0):```sql\nSELECT ProductName, UnitPrice * (UnitsInStock + IIF(IsNull(UnitsOnOrder), 0, UnitsOnOrder))\n\r\nFROM Products;```OracleThe Oracle NVL() function achieves the same result:```sql\nSELECT ProductName, UnitPrice * (UnitsInStock + NVL(UnitsOnOrder, 0))\n\r\nFROM Products;```"
            }
        },
        "storedprocedures": {
            "title": "SQL Stored Procedures",
            "url": "https://www.w3schools.com/sql/sql_stored_procedures.asp",
            "info": {
                "What is a Stored Procedure?": "A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.```sql\nCREATE PROCEDURE procedure_name\nAS\nsql_statement\nGO;``````sql\nEXEC procedure_name;```",
                "Demo Database": "Below is a selection from the \"Customers\" table in the Northwind sample database:",
                "Stored Procedure Example": "The following SQL statement creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:```sql\nCREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;```Execute the stored procedure above as follows:```sql\nEXEC SelectAllCustomers;```",
                "Stored Procedure With One Parameter": "The following SQL statement creates a stored procedure  that selects Customers from a particular City from the \"Customers\" table:```sql\nCREATE PROCEDURE SelectAllCustomers @City nvarchar(30)\nAS\nSELECT * FROM Customers WHERE City = @City\nGO;```Execute the stored procedure above as follows:```sql\nEXEC SelectAllCustomers @City = 'London';```",
                "Stored Procedure With Multiple Parameters": "Setting up multiple parameters is very easy. Just list each parameter and the data type separated by a comma as shown below.The following SQL statement creates a stored procedure  that selects Customers from a particular City with a particular PostalCode from the \"Customers\" table:```sql\nCREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10)\nAS\nSELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode\nGO;```Execute the stored procedure above as follows:```sql\nEXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';```"
            }
        },
        "comments": {
            "title": "SQL Comments",
            "url": "https://www.w3schools.com/sql/sql_comments.asp",
            "info": {
                "SQL Comments": "Comments are used to explain sections of SQL statements, or to prevent execution of SQL statements.",
                "Single Line Comments": "Single line comments start with --.Any text between -- and the end of the line will be ignored (will not be executed).The following example uses a single-line comment as an explanation:```sql\n--Select all:\n\r\nSELECT * FROM Customers;```The following example uses a single-line comment to ignore the end of a line:```sql\nSELECT * FROM Customers -- WHERE City='Berlin';```The following example uses a single-line comment to ignore a statement:```sql\n--SELECT * FROM Customers;\n\r\nSELECT * FROM Products;```",
                "Multi-line Comments": "Multi-line comments start with /\\* and end with \\*/.Any text between /\\* and \\*/ will be ignored.The following example uses a multi-line comment as an explanation:```sql\n/*Select all the columns\n\r\nof all the records\n\r\nin the Customers table:*/\n\r\nSELECT * FROM Customers;```The following example uses a multi-line comment to ignore many statements:```sql\n/*SELECT * FROM Customers;\n\r\nSELECT * FROM Products;\n\r\nSELECT * FROM Orders;\n\r\nSELECT * FROM Categories;*/\n\r\nSELECT * FROM Suppliers;```To ignore just a part of a statement, also use the /\\* \\*/ comment.The following example uses a comment to ignore part of a line:```sql\nSELECT CustomerName, /*City,*/ Country FROM Customers;```The following example uses a comment to ignore part of a statement:```sql\nSELECT * FROM Customers WHERE (CustomerName LIKE 'L%'\n\r\nOR CustomerName LIKE 'R%' /*OR CustomerName LIKE 'S%'\n\r\nOR CustomerName LIKE 'T%'*/ OR CustomerName LIKE 'W%')\n\r\nAND Country='USA'\n\r\nORDER BY CustomerName;```"
            }
        },
        "createdb": {
            "title": "SQL Create DB",
            "url": "https://www.w3schools.com/sql/sql_create_db.asp",
            "info": {
                "The SQL CREATE DATABASE Statement": "The CREATE DATABASE statement is used to create a new SQL database.```sql\nCREATE DATABASE databasename;```",
                "CREATE DATABASE Example": "The following SQL statement creates a database called \"testDB\":```sql\nCREATE DATABASE testDB;```"
            }
        },
        "dropdb": {
            "title": "SQL Drop DB",
            "url": "https://www.w3schools.com/sql/sql_drop_db.asp",
            "info": {
                "The SQL DROP DATABASE Statement": "The DROP DATABASE statement is used to drop an existing SQL database.```sql\nDROP DATABASE databasename;```",
                "DROP DATABASE Example": "The following SQL statement drops the existing database \"testDB\":```sql\nDROP DATABASE testDB;```"
            }
        },
        "backupdb": {
            "title": "SQL Backup DB",
            "url": "https://www.w3schools.com/sql/sql_backup_db.asp",
            "info": {
                "The SQL BACKUP DATABASE Statement": "The BACKUP DATABASE statement is used in SQL Server to create a full back up of an existing SQL database.```sql\nBACKUP DATABASE databasename\nTO DISK = 'filepath';```",
                "The SQL BACKUP WITH DIFFERENTIAL Statement": "A differential back up only backs up the parts of the database that have changed since the last full database backup.```sql\nBACKUP DATABASE databasename\nTO DISK = 'filepath'\nWITH DIFFERENTIAL;```",
                "BACKUP DATABASE Example": "The following SQL statement creates a full back up of the existing database \"testDB\" to the D disk:```sql\nBACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak';```",
                "BACKUP WITH DIFFERENTIAL Example": "The following SQL statement creates a differential back up of the database \"testDB\":```sql\nBACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak'\nWITH DIFFERENTIAL;```"
            }
        },
        "createtable": {
            "title": "SQL Create Table",
            "url": "https://www.w3schools.com/sql/sql_create_table.asp",
            "info": {
                "The SQL CREATE TABLE Statement": "The CREATE TABLE statement is used to create a new table in a database.```sql\nCREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    column3 datatype,\n\r\n....\n\r\n);```The column parameters specify the names of the columns of the table.The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).Tip: For an overview of the available data types, go to our complete Data Types Reference.",
                "SQL CREATE TABLE Example": "The following example creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:```sql\nCREATE TABLE Persons\r\n(\n \r\nPersonID int,\n \r\nLastName varchar(255),\n \r\nFirstName varchar(255),\n \r\nAddress varchar(255),\n \r\nCity varchar(255) \n\r\n);```The PersonID column is of type int and will hold an integer.The LastName, FirstName, Address, and City columns are oftype varchar and will hold characters, and the maximum length for these fields is 255 characters.The empty \"Persons\" table will now look like this:Tip: The empty \"Persons\" table can now be filled with data with the SQL INSERT INTO statement.",
                "Create Table Using Another Table": "A copy of an existing table can also be created using CREATE TABLE.The new table gets the same column definitions. All columns or specific columns can be selected.If you create a new table using an existing table, the new table will be filled with the existing values from the old table.```sql\nCREATE TABLE new_table_name AS\n    SELECT column1, column2,...\n    FROM existing_table_name\n    WHERE ....;```The following SQL creates a new table called \"TestTables\" (which is a copy of the \"Customers\" table):\u00a0```sql\nCREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;```",
                "CREATE TABLE": "The CREATE TABLE command creates a new table in the database.The following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:```sql\nCREATE TABLE Persons\r\n(\n \r\nPersonID int,\n \r\nLastName varchar(255),\n \r\nFirstName varchar(255),\n \r\nAddress varchar(255),\n \r\nCity varchar(255) \n\r\n);```",
                "CREATE TABLE Using Another Table": "The following SQL creates a new table called \"TestTables\" (which is a copy of two columns of the \"Customers\" table):\u00a0```sql\nCREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;```\u276e SQL Keywords Reference"
            }
        },
        "droptable": {
            "title": "SQL Drop Table",
            "url": "https://www.w3schools.com/sql/sql_drop_table.asp",
            "info": {
                "The SQL DROP TABLE Statement": "The DROP TABLE statement is used to drop an existing table in a database.```sql\nDROP TABLE table_name;```",
                "SQL DROP TABLE Example": "The following SQL statement drops the existing table \"Shippers\":```sql\nDROP TABLE Shippers;```",
                "SQL TRUNCATE TABLE": "The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.```sql\nTRUNCATE TABLE table_name;```",
                "DROP TABLE": "The DROP TABLE command deletes a table in the database.The following SQL deletes the table \"Shippers\":```sql\nDROP TABLE Shippers;```",
                "TRUNCATE TABLE": "The TRUNCATE TABLE command deletes the data inside a table, but not the table itself.The following SQL truncates the table \"Categories\":\u00a0```sql\nTRUNCATE TABLE Categories;```\u276e SQL Keywords Reference"
            }
        },
        "altertable": {
            "title": "SQL Alter Table",
            "url": "https://www.w3schools.com/sql/sql_alter.asp",
            "info": {
                "SQL ALTER TABLE Statement": "The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.The ALTER TABLE statement is also used to add and drop various constraints on an existing table.",
                "ALTER TABLE - ADD Column": "To add a column in a table, use the following syntax:```sql\nALTER TABLE table_name\n\r\nADD column_name datatype;```The following SQL adds an \"Email\" column to the \"Customers\" table:```sql\nALTER TABLE Customers\nADD Email varchar(255);```",
                "ALTER TABLE - DROP COLUMN": "To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column):```sql\nALTER TABLE table_name\n\r\nDROP COLUMN column_name;```The following SQL deletes the \"Email\" column from the \"Customers\" table:```sql\nALTER TABLE Customers\nDROP COLUMN Email;```",
                "ALTER TABLE - ALTER/MODIFY COLUMN": "To change the data type of a column in a table, use the following syntax:SQL Server / MS Access:```sql\nALTER TABLE table_name\n\r\nALTER COLUMN column_name datatype;```My SQL / Oracle (prior version 10G):```sql\nALTER TABLE table_name\n\r\nMODIFY COLUMN column_name datatype;```Oracle 10G and later:```sql\nALTER TABLE table_name\n\r\nMODIFY column_name datatype;```",
                "SQL ALTER TABLE Example": "Look at the \"Persons\" table:Now we want to add a column named \"DateOfBirth\" in the \"Persons\" table.We use the following SQL statement:```sql\nALTER TABLE Persons\n\r\nADD DateOfBirth date;```Notice that the new column, \"DateOfBirth\", is of type date and is going to hold a date. The data type specifies what type of data the column can hold. For a complete reference of all the data types available in MS Access, MySQL, and SQL Server, go to our complete Data Types reference.The \"Persons\" table will now look like this:",
                "Change Data Type Example": "Now we want to change the data type of the column named \"DateOfBirth\" in the \"Persons\" table.We use the following SQL statement:```sql\nALTER TABLE Persons\n\r\nALTER COLUMN DateOfBirth year;```Notice that the \"DateOfBirth\" column is now of type year and is going to hold a year in a two- or four-digit format.",
                "DROP COLUMN Example": "Next, we want to delete the column named \"DateOfBirth\" in the \"Persons\" table.We use the following SQL statement:```sql\nALTER TABLE Persons\n\r\nDROP COLUMN DateOfBirth;```The \"Persons\" table will now look like this:",
                "ALTER TABLE": "The ALTER TABLE command adds, deletes, or modifies columns in a table.The ALTER TABLE command also adds and deletes various constraints in a table.The following SQL adds an \"Email\" column to the \"Customers\" table:```sql\nALTER TABLE Customers\nADD Email varchar(255);```The following SQL deletes the \"Email\" column from the \"Customers\" table:```sql\nALTER TABLE Customers\nDROP COLUMN Email;```\u276e SQL Keywords Reference"
            }
        },
        "constraints": {
            "title": "SQL Constraints",
            "url": "https://www.w3schools.com/sql/sql_constraints.asp",
            "info": {
                "SQL Create Constraints": "Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.```sql\nCREATE TABLE table_name (\n    column1 datatype constraint,\n    column2 datatype constraint,\n    column3 datatype constraint,\n \r\n....\n\r\n);```",
                "SQL Constraints": "SQL constraints are used to specify rules for the data in a table.Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.The following constraints are commonly used in SQL:"
            }
        },
        "notnull": {
            "title": "SQL Not Null",
            "url": "https://www.w3schools.com/sql/sql_notnull.asp",
            "info": {
                "SQL NOT NULL Constraint": "By default, a column can hold NULL values.The NOT NULL constraint enforces a column to NOT accept NULL values.This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.",
                "SQL NOT NULL on CREATE TABLE": "The following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values when the \"Persons\" table is created:```sql\nCREATE TABLE Persons (\n    ID int NOT NULL,\n    LastName varchar(255) NOT NULL,\n    FirstName varchar(255) NOT NULL,\n    Age int\n);```",
                "SQL NOT NULL on ALTER TABLE": "To create a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created, use the following SQL:```sql\nALTER TABLE Persons\n\r\nMODIFY Age int NOT NULL;```",
                "NOT NULL": "The NOT NULL constraint enforces a column to not accept NULL values, which means that you cannot insert or update a record without adding a value to this field.The following SQL ensures that the \"ID\", \"LastName\", and \"FirstName\" columns will NOT accept NULL values:```sql\nCREATE TABLE Persons (\n    ID int NOT NULL,\n    LastName varchar(255) NOT NULL,\n    FirstName varchar(255) NOT NULL,\n    Age int\n);```The following SQL creates a NOT NULL constraint on the \"Age\" column when the \"Persons\" table is already created:```sql\nALTER TABLE Persons\n\r\nMODIFY Age int NOT NULL;```\u276e SQL Keywords Reference"
            }
        },
        "unique": {
            "title": "SQL Unique",
            "url": "https://www.w3schools.com/sql/sql_unique.asp",
            "info": {
                "SQL UNIQUE Constraint": "The UNIQUE constraint ensures that all values in a column are different.Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.A PRIMARY KEY constraint automatically has a UNIQUE constraint.However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.",
                "SQL UNIQUE Constraint on CREATE TABLE": "The following SQL creates a UNIQUE constraint on the \"ID\" column when the \"Persons\" table is created:SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Persons\r\n(\n  ID int NOT NULL UNIQUE,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int\n\r\n);```MySQL:```sql\nCREATE TABLE Persons\r\n(\n  ID int NOT NULL,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int,\n \r\nUNIQUE (ID)\n\r\n);```To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Persons\r\n(\n  ID int NOT NULL,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int,\n \r\nCONSTRAINT UC_Person UNIQUE (ID,LastName)\n\r\n);```",
                "SQL UNIQUE Constraint on ALTER TABLE": "To create a UNIQUE constraint on the \"ID\" column when the table is already created, use the following SQL:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nADD UNIQUE (ID);```To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nADD CONSTRAINT UC_Person UNIQUE (ID,LastName);```",
                "DROP a UNIQUE Constraint": "To drop a UNIQUE constraint, use the following SQL:MySQL:```sql\nALTER TABLE Persons\n\r\nDROP INDEX UC_Person;```SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT UC_Person;```\u276e SQL Keywords Reference",
                "UNIQUE": "The UNIQUE constraint ensures that all values in a column are unique."
            }
        },
        "primarykey": {
            "title": "SQL Primary Key",
            "url": "https://www.w3schools.com/sql/sql_primarykey.asp",
            "info": {
                "SQL PRIMARY KEY Constraint": "The PRIMARY KEY constraint uniquely identifies each record in a table.Primary keys must contain UNIQUE values, and cannot contain NULL values.A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).",
                "SQL PRIMARY KEY on CREATE TABLE": "The following SQL creates a PRIMARY KEY on the \"ID\" column when the \"Persons\" table is created:MySQL:```sql\nCREATE TABLE Persons\r\n(\n  ID int NOT NULL,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int,\n \r\nPRIMARY KEY (ID)\n\r\n);```SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Persons\r\n(\n  ID int NOT NULL PRIMARY KEY,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int\n\r\n);```To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Persons\r\n(\n  ID int NOT NULL,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int,\n \r\nCONSTRAINT PK_Person PRIMARY KEY (ID,LastName)\n\r\n);```Note: In the example above there is only ONE PRIMARY KEY (PK\\_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).",
                "SQL PRIMARY KEY on ALTER TABLE": "To create a PRIMARY KEY constraint on the \"ID\" column when the table is already created, use the following SQL:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nADD PRIMARY KEY (ID);```To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);```Note: If you use the ALTER TABLE statement to add a primary key, the primary key column(s) mustalready have been declared to not contain NULL values (when the table was first created).",
                "DROP a PRIMARY KEY Constraint": "To drop a PRIMARY KEY constraint, use the following SQL:MySQL:```sql\nALTER TABLE Persons\n\r\nDROP PRIMARY KEY;```SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT PK_Person;```\u276e SQL Keywords Reference",
                "PRIMARY KEY": "The PRIMARY KEY constraint uniquely identifies each record in a table.A table can have only one primary key, which may consist of one single or of multiple fields."
            }
        },
        "foreignkey": {
            "title": "SQL Foreign Key",
            "url": "https://www.w3schools.com/sql/sql_foreignkey.asp",
            "info": {
                "SQL FOREIGN KEY Constraint": "A FOREIGN KEY is a key used to link two tables together.A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.Look at the following two tables:\"Persons\" table:\"Orders\" table:Notice that the \"PersonID\" column in the \"Orders\" table points to the \"PersonID\" column in the \"Persons\" table.The \"PersonID\" column in the \"Persons\" table is the PRIMARY KEY in the \"Persons\" table.The \"PersonID\" column in the \"Orders\" table is a FOREIGN KEY in the \"Orders\" table.The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.The FOREIGN KEY constraint also prevents invalid data from being inserted into the foreign key column,because it has to be one of the values contained in the table it points to.",
                "SQL FOREIGN KEY on CREATE TABLE": "The following SQL creates a FOREIGN KEY on the \"PersonID\" column when the \"Orders\" table is created:MySQL:```sql\nCREATE TABLE Orders\r\n(\n \r\nOrderID int NOT NULL,\n \r\nOrderNumber int NOT NULL,\n \r\nPersonID int,\n \r\nPRIMARY KEY (OrderID),\n \r\nFOREIGN KEY (PersonID) REFERENCES Persons(PersonID)\n\r\n);```SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Orders\r\n(\n \r\nOrderID int NOT NULL PRIMARY KEY,\n \r\nOrderNumber int NOT NULL,\n \r\nPersonID int FOREIGN KEY REFERENCES Persons(PersonID)\n\r\n);```To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Orders\r\n(\n \r\nOrderID int NOT NULL,\n \r\nOrderNumber int NOT NULL,\n \r\nPersonID int,\n \r\nPRIMARY KEY (OrderID),\n \r\nCONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID)\n \r\nREFERENCES Persons(PersonID)\n\r\n);```",
                "SQL FOREIGN KEY on ALTER TABLE": "To create a FOREIGN KEY constraint on the \"PersonID\" column when the \"Orders\" table is already created, use the following SQL:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Orders\n\r\nADD FOREIGN KEY (PersonID)\r\nREFERENCES Persons(PersonID);```To allow naming of a FOREIGN KEY constraint, and for defining a FOREIGN KEY constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Orders\n\r\nADD CONSTRAINT FK_PersonOrder\n\r\nFOREIGN KEY (PersonID)\r\nREFERENCES Persons(PersonID);```",
                "DROP a FOREIGN KEY Constraint": "To drop a FOREIGN KEY constraint, use the following SQL:MySQL:```sql\nALTER TABLE Orders\n\r\nDROP FOREIGN KEY FK_PersonOrder;```SQL Server / Oracle / MS Access:```sql\nALTER TABLE Orders\n\r\nDROP CONSTRAINT FK_PersonOrder;```\u276e SQL Keywords Reference",
                "FOREIGN KEY": "The FOREIGN KEY constraint is a key used to link two tables together.A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table."
            }
        },
        "check": {
            "title": "SQL Check",
            "url": "https://www.w3schools.com/sql/sql_check.asp",
            "info": {
                "SQL CHECK Constraint": "The CHECK constraint is used to limit the value range that can be placed in a column.If you define a CHECK constraint on a single column it allows only certain values for this column.If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.",
                "SQL CHECK on CREATE TABLE": "The following SQL creates a CHECK constraint on the \"Age\" column when the \"Persons\" table is created.The CHECK constraint ensures that you can not have any person below 18 years:MySQL:```sql\nCREATE TABLE Persons\r\n(\n \r\nAge int,\n \r\nCHECK (Age>=18)\n\r\n);```SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Persons\r\n(\n \r\nAge int CHECK (Age>=18)\n\r\n);```To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Persons\r\n(\n \r\nAge int,\n \r\nCity varchar(255),\n \r\nCONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')\n\r\n);```",
                "SQL CHECK on ALTER TABLE": "To create a CHECK constraint on the \"Age\" column when the table is already created, use the following SQL:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nADD CHECK (Age>=18);```To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:MySQL / SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');```",
                "DROP a CHECK Constraint": "To drop a CHECK constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT CHK_PersonAge;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP CHECK CHK_PersonAge;```\u276e SQL Keywords Reference",
                "CHECK": "The CHECK constraint limits the value that can be placed in a column."
            }
        },
        "default": {
            "title": "SQL Default",
            "url": "https://www.w3schools.com/sql/sql_default.asp",
            "info": {
                "SQL DEFAULT Constraint": "The DEFAULT constraint is used to provide a default value for a column.The default value will be added to all new records IF no other value is specified.",
                "SQL DEFAULT on CREATE TABLE": "The following SQL sets a DEFAULT value for the \"City\" column when the \"Persons\" table is created:My SQL / SQL Server / Oracle / MS Access:```sql\nCREATE TABLE Persons\r\n(\n \r\nCity varchar(255) DEFAULT 'Sandnes'\n\r\n);```The DEFAULT constraint can also be used to insert system values, by using functions like GETDATE():```sql\nCREATE TABLE Orders\r\n(\n \r\nOrderDate date DEFAULT GETDATE()\n\r\n);```",
                "SQL DEFAULT on ALTER TABLE": "To create a DEFAULT constraint on the \"City\" column when the table is already created, use the following SQL:MySQL:```sql\nALTER TABLE Persons\n\r\nALTER City SET DEFAULT 'Sandnes';```SQL Server:```sql\nALTER TABLE Persons\nADD CONSTRAINT df_City \nDEFAULT 'Sandnes' FOR City;```MS Access:```sql\nALTER TABLE Persons\n\r\nALTER COLUMN City SET DEFAULT 'Sandnes';```Oracle:```sql\nALTER TABLE Persons\n\r\nMODIFY City DEFAULT 'Sandnes';```",
                "DROP a DEFAULT Constraint": "To drop a DEFAULT constraint, use the following SQL:MySQL:```sql\nALTER TABLE Persons\n\r\nALTER City DROP DEFAULT;```SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nALTER COLUMN City DROP DEFAULT;```\u276e SQL Keywords Reference",
                "DEFAULT": "The DEFAULT constraint provides a default value for a column.The default value will be added to all new records if no other value is specified."
            }
        },
        "index": {
            "title": "SQL Index",
            "url": "https://www.w3schools.com/sql/sql_create_index.asp",
            "info": {
                "SQL CREATE INDEX Statement": "The CREATE INDEX statement is used to create indexes in tables.Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.Creates an index on a table. Duplicate values are allowed:```sql\nCREATE INDEX index_name\n\r\nON table_name (column1, column2, ...);```Creates a unique index on a table. Duplicate values are not allowed:```sql\nCREATE UNIQUE INDEX index_name\n\r\nON table_name (column1, column2, ...);```Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.",
                "CREATE INDEX Example": "The SQL statement below creates an index named \"idx\\_lastname\" on the \"LastName\" column in the \"Persons\" table:```sql\nCREATE INDEX idx_lastname\n\r\nON Persons (LastName);```If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:```sql\nCREATE INDEX idx_pname\n\r\nON Persons (LastName, FirstName);```",
                "DROP INDEX Statement": "The DROP INDEX statement is used to delete an index in a table.MS Access:```sql\nDROP INDEX index_name ON table_name;```SQL Server:```sql\nDROP INDEX table_name.index_name;```DB2/Oracle:```sql\nDROP INDEX index_name;```MySQL:```sql\nALTER TABLE table_name\nDROP INDEX index_name;```",
                "CREATE INDEX": "The CREATE INDEX command is used to create indexes in tables (allows duplicate values).Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.The following SQL creates an index named \"idx\\_lastname\" on the \"LastName\" column in the \"Persons\" table:```sql\nCREATE INDEX idx_lastname\n\r\nON Persons (LastName);```If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:```sql\nCREATE INDEX idx_pname\n\r\nON Persons (LastName, FirstName);```Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.",
                "DROP INDEX": "The DROP INDEX command is used to delete an index in a table.MS Access:```sql\nDROP INDEX index_name ON table_name;```SQL Server:```sql\nDROP INDEX table_name.index_name;```DB2/Oracle:```sql\nDROP INDEX index_name;```MySQL:```sql\nALTER TABLE table_name\nDROP INDEX index_name;```\u276e SQL Keywords Reference"
            }
        },
        "autoincrement": {
            "title": "SQL Auto Increment",
            "url": "https://www.w3schools.com/sql/sql_autoincrement.asp",
            "info": {
                "AUTO INCREMENT Field": "Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.Often this is the primary key field that we would like to be created automatically every time a new record is inserted.",
                "Syntax for MySQL": "The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:```sql\nCREATE TABLE Persons\r\n(\n  Personid int NOT NULL AUTO_INCREMENT,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n  Age int,\n \r\nPRIMARY KEY (Personid)\n\r\n);```MySQL uses the AUTO\\_INCREMENT keyword to perform an auto-increment feature.By default, the starting value for AUTO\\_INCREMENT is 1, and it will increment by 1 for each new record.To let the AUTO\\_INCREMENT sequence start with another value, use the following SQL statement:```sql\nALTER TABLE Persons AUTO_INCREMENT=100;```To insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\"column (a unique value will be added automatically):```sql\nINSERT INTO Persons (FirstName,LastName)\n\r\nVALUES ('Lars','Monsen');```The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".",
                "Syntax for SQL Server": "The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:```sql\nCREATE TABLE Persons\r\n(\n  Personid int IDENTITY(1,1) PRIMARY KEY,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int\n\r\n);```The MS SQL Server uses the IDENTITY keyword to perform an auto-increment feature. In the example above, the starting value for IDENTITY is 1, and it will increment by 1 for each new record.Tip: To specify that the \"Personid\" column should start at value 10 and increment by 5, change it to IDENTITY(10,5).To insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically):```sql\nINSERT INTO Persons (FirstName,LastName)\n\r\nVALUES ('Lars','Monsen');```The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".",
                "Syntax for Access": "The following SQL statement defines the \"Personid\" column to be an auto-increment primary key field in the \"Persons\" table:```sql\nCREATE TABLE Persons\r\n(\n  Personid AUTOINCREMENT PRIMARY KEY,\n \r\nLastName varchar(255) NOT NULL,\n \r\nFirstName varchar(255),\n \r\nAge int\n\r\n);```The MS Access uses the AUTOINCREMENT keyword to perform an auto-increment feature. By default, the starting value for AUTOINCREMENT is 1, and it will increment by 1 for each new record.Tip: To specify that the \"Personid\" column should start at value 10 and increment by 5, change the autoincrement to AUTOINCREMENT(10,5).To insert a new record into the \"Persons\" table, we will NOT have to specify a value for the \"Personid\" column (a unique value will be added automatically):```sql\nINSERT INTO Persons (FirstName,LastName)\n\r\nVALUES ('Lars','Monsen');```The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned a unique value. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\".",
                "Syntax for Oracle": "In Oracle the code is a little bit more tricky.You will have to create an auto-increment field with the sequence object (this object generates a number sequence).Use the following CREATE SEQUENCE syntax:```sql\nCREATE SEQUENCE seq_person\n\r\nMINVALUE 1\n\r\nSTART WITH 1\n\r\nINCREMENT BY 1\n\r\nCACHE 10;```The code above creates a sequence object called seq\\_person, that starts with 1 and will increment by 1.It will also cache up to 10 values for performance. The cache option specifies how many sequence values will be stored in memory for faster access.To insert a new record into the \"Persons\" table, we will have to use the nextval function (this function retrieves the next value from seq\\_person sequence):```sql\nINSERT INTO Persons (Personid,FirstName,LastName)\n\r\nVALUES (seq_person.nextval,'Lars','Monsen');```The SQL statement above would insert a new record into the \"Persons\" table. The \"Personid\" column would be assigned the next number from the seq\\_person sequence. The \"FirstName\" column would be set to \"Lars\" and the \"LastName\" column would be set to \"Monsen\"."
            }
        },
        "dates": {
            "title": "SQL Dates",
            "url": "https://www.w3schools.com/sql/sql_dates.asp",
            "info": {
                "SQL Dates": "As long as your data contains only the date portion, your queries will work as expected. However, if a time portion is involved, it gets more complicated.",
                "SQL Date Data Types": "MySQL comes with the following data types for storing a date or a date/time value in the database:SQL Server comes with the following data types for storing a date or a date/time value in the database:Note: The date types are chosen for a column when you create a new table in your database!",
                "SQL Working with Dates": "Assume we have the following \"Orders\" table:Now we want to select the records with an OrderDate of \"2008-11-11\" from the table above.We use the following SELECT statement:The result-set will look like this:Now, assume that the \"Orders\" table looks like this (notice the time component in the \"OrderDate\" column):If we use the same SELECT statement as above:we will get no result! This is because the query is looking only for dates with no time portion.Tip: To keep your queries simple and easy to maintain, do not allow time components in your dates!"
            }
        },
        "views": {
            "title": "SQL Views",
            "url": "https://www.w3schools.com/sql/sql_view.asp",
            "info": {
                "SQL CREATE VIEW Statement": "In SQL, a view is a virtual table based on the result-set of an SQL statement.A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.You can add SQL functions, WHERE, and JOIN statements to a view and present the data as if the data were coming from one single table.```sql\nCREATE VIEW view_name AS\n\r\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nWHERE condition;```Note: A view always shows up-to-date data! The database engine recreates the data, using the view's SQL statement, every time a user queries a view.",
                "SQL CREATE VIEW Examples": "The following SQL creates a view that shows all customers from Brazil:```sql\nCREATE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName\n\r\nFROM Customers\n\r\nWHERE Country = 'Brazil';```We can query the view above as follows:```sql\nSELECT * FROM [Brazil Customers];```The following SQL creates a view that selects every product in the \"Products\" table with a price higher than the average price:```sql\nCREATE VIEW [Products Above Average Price] AS\n\r\nSELECT ProductName, Price\n\r\nFROM Products\n\r\nWHERE Price > (SELECT AVG(Price) FROM Products);```We can query the view above as follows:```sql\nSELECT * FROM [Products Above Average Price];```",
                "SQL Updating a View": "A view can be updated with the CREATE OR REPLACE VIEW command.```sql\nCREATE OR REPLACE VIEW view_name AS\n\r\nSELECT column1, column2, ...\n\r\nFROM table_name\n\r\nWHERE condition;```The following SQL adds the \"City\" column to the \"Brazil Customers\" view:```sql\nCREATE OR REPLACE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName, City\n\r\nFROM Customers\n\r\nWHERE Country = 'Brazil';```",
                "SQL Dropping a View": "A view is deleted with the DROP VIEW command.```sql\nDROP VIEW view_name;```The following SQL drops the \"Brazil Customers\" view:```sql\nDROP VIEW [Brazil Customers];```"
            }
        },
        "injection": {
            "title": "SQL Injection",
            "url": "https://www.w3schools.com/sql/sql_injection.asp",
            "info": {
                "SQL Injection": "SQL injection is a code injection technique that might destroy your database.SQL injection is one of the most common web hacking techniques.SQL injection is the placement of malicious code in SQL statements, via web page input.",
                "SQL in Web Pages": "SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will unknowingly run on your database.Look at the following example which creates a SELECT statement by adding a variable (txtUserId) to a select string. The variable is fetched from user input (getRequestString):```sql\ntxtUserId = getRequestString(\"UserId\");\ntxtSQL = \"SELECT *\r\nFROM Users WHERE UserId = \" + txtUserId;```The rest of this chapter describes the potential dangers of using user input in SQL statements.",
                "SQL Injection Based on 1=1 is Always True": "Look at the example above again. The original purpose of the code was to create an SQL statement to select a user, with a given user id.If there is nothing to prevent a user from entering \"wrong\" input, the user can enter some \"smart\" input like this:UserId: Then, the SQL statement will look like this:```sql\nSELECT * FROM Users WHERE UserId = 105 OR 1=1;```The SQL above is valid and will return ALL rows from the \"Users\" table, since OR 1=1 is always TRUE.Does the example above look dangerous? What if the \"Users\" table contains names and passwords?The SQL statement above is much the same as this:```sql\nSELECT UserId, Name, Password\r\nFROM Users WHERE UserId = 105 or 1=1;```A hacker might get access to all the user names and passwords in a database, by simply inserting 105 OR 1=1 into the input field.",
                "SQL Injection Based on\u00a0\"\"=\"\" is Always True": "Here is an example of a user login on a web site:Username:Password:```sql\nuName = getRequestString(\"username\");\nuPass = getRequestString(\"userpassword\");\n\nsql = 'SELECT * FROM Users WHERE Name =\"' + uName + '\" AND Pass =\"' + uPass + \r\n '\"'``````sql\nSELECT * FROM Users WHERE Name =\"John Doe\" AND Pass =\"myPass\"```A hacker might get access to user names and passwords\u00a0in a database by simply inserting \" OR \"\"=\" into the user name or password text box:User Name:Password:The code at the server will create a valid SQL statement like this:```sql\nSELECT * FROM Users WHERE Name =\"\" or \"\"=\"\" AND Pass =\"\" or \"\"=\"\"```The SQL above is valid and will return all rows from the \"Users\" table, since OR \"\"=\"\" is always TRUE.",
                "SQL Injection Based on Batched SQL Statements\u00a0": "Most databases support batched SQL statement.A batch of SQL statements is a group of two or more SQL statements, separated by semicolons.The SQL statement below will return all rows from the \"Users\" table, then delete the \"Suppliers\" table.```sql\nSELECT * FROM Users; DROP TABLE Suppliers```Look at the following example: ```sql\ntxtUserId = getRequestString(\"UserId\");\ntxtSQL = \"SELECT *\r\nFROM Users WHERE UserId = \" + txtUserId;```And the following input:User id: The valid SQL statement would look like this:```sql\nSELECT * FROM Users WHERE \r\nUserId = 105; DROP TABLE Suppliers;```",
                "Use SQL Parameters for Protection": "To protect a web site from SQL injection, you can use SQL parameters.SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.```sql\ntxtUserId = getRequestString(\"UserId\");\ntxtSQL = \"SELECT *\r\nFROM Users WHERE UserId = @0\";\ndb.Execute(txtSQL,txtUserId);```Note that parameters are represented in the SQL statement by a @ marker.The SQL engine checks each parameter to ensure that it is correct for its columnand are treated literally, and not as part of the SQL to be executed.```sql\ntxtNam = getRequestString(\"CustomerName\");\ntxtAdd = getRequestString(\"Address\");\ntxtCit = getRequestString(\"City\");\n\r\n txtSQL = \"INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)\";\ndb.Execute(txtSQL,txtNam,txtAdd,txtCit);```",
                "Examples": "The following examples shows how to build parameterized queries in some common web languages.SELECT STATEMENT IN ASP.NET:```sql\ntxtUserId = getRequestString(\"UserId\");\n\r\n sql = \"SELECT * FROM Customers WHERE CustomerId = @0\";\ncommand = new SqlCommand(sql);\ncommand.Parameters.AddWithValue(\"@0\",txtUserID);\n\r\n command.ExecuteReader();```INSERT INTO STATEMENT IN ASP.NET:```sql\ntxtNam = getRequestString(\"CustomerName\");\ntxtAdd = getRequestString(\"Address\");\ntxtCit = getRequestString(\"City\");\n\r\n txtSQL = \"INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)\";\ncommand = new SqlCommand(txtSQL);\n\r\n command.Parameters.AddWithValue(\"@0\",txtNam);\n\r\n command.Parameters.AddWithValue(\"@1\",txtAdd);\n\r\n command.Parameters.AddWithValue(\"@2\",txtCit);\ncommand.ExecuteNonQuery();```INSERT INTO STATEMENT IN PHP:"
            }
        },
        "hosting": {
            "title": "SQL Hosting",
            "url": "https://www.w3schools.com/sql/sql_hosting.asp",
            "info": {
                "SQL Hosting": "If you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the SQL language.If your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans.The most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access.",
                "MS SQL Server": "Microsoft's SQL Server is a popular database software for  database-driven web sites with high traffic.SQL Server is a very powerful, robust and full featured SQL database system.",
                "Oracle": "Oracle is also a popular database software for  database-driven web sites with high traffic.Oracle is a very powerful, robust and full featured SQL database system.",
                "MySQL": "MySQL is also a popular database software for web sites.MySQL is a very powerful, robust and full featured SQL database system.MySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions.",
                "Access": "When a web site requires only a simple database, Microsoft Access can be a solution.Access is not well suited for very high-traffic, and not as powerful as MySQL, SQL Server, or Oracle."
            }
        },
        "keywords": {
            "title": "SQL Keywords",
            "url": "https://www.w3schools.com/sql/sql_ref_keywords.asp",
            "info": {
                "SQL Keywords": ""
            }
        },
        "add": {
            "title": "ADD",
            "url": "https://www.w3schools.com/sql/sql_ref_add.asp",
            "info": {
                "ADD": "The ADD command is used to add a column in an existing table.The following SQL adds an \"Email\" column to the \"Customers\" table:```sql\nALTER TABLE Customers\nADD Email varchar(255);```\u276e SQL Keywords Reference"
            }
        },
        "addconstraint": {
            "title": "ADD CONSTRAINT",
            "url": "https://www.w3schools.com/sql/sql_ref_add_constraint.asp",
            "info": {
                "ADD CONSTRAINT": "The ADD CONSTRAINT command is used to create a constraint after a table is already created.The following SQL adds a constraint named \"PK\\_Person\" that is a PRIMARY KEY constraint on multiple columns (ID and LastName):```sql\nALTER TABLE Persons\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);```\u276e SQL Keywords Reference"
            }
        },
        "alter": {
            "title": "ALTER",
            "url": "https://www.w3schools.com/sql/sql_ref_alter.asp",
            "info": {
                "ALTER TABLE": "The ALTER TABLE command adds, deletes, or modifies columns in a table.The ALTER TABLE command also adds and deletes various constraints in a table.The following SQL adds an \"Email\" column to the \"Customers\" table:```sql\nALTER TABLE Customers\nADD Email varchar(255);```The following SQL deletes the \"Email\" column from the \"Customers\" table:```sql\nALTER TABLE Customers\nDROP COLUMN Email;```",
                "ALTER COLUMN": "The ALTER COLUMN command is used to change the data type of a column in a table.The following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year:```sql\nALTER TABLE Employees\nALTER COLUMN BirthDate year;```\u276e SQL Keywords Reference"
            }
        },
        "altercolumn": {
            "title": "ALTER COLUMN",
            "url": "https://www.w3schools.com/sql/sql_ref_alter_column.asp",
            "info": {
                "ALTER COLUMN": "The ALTER COLUMN command is used to change the data type of a column in a table.The following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year:```sql\nALTER TABLE Employees\nALTER COLUMN BirthDate year;```\u276e SQL Keywords Reference"
            }
        },
        "all": {
            "title": "ALL",
            "url": "https://www.w3schools.com/sql/sql_ref_all.asp",
            "info": {
                "ALL": "The ALL command returns true if all of the subquery values meet the condition.The following SQL statement returns TRUE and lists the productnames if ALL the records in the OrderDetails table has quantity = 10:```sql\nSELECT ProductName\nFROM Products\nWHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);```\u276e SQL Keywords Reference"
            }
        },
        "and": {
            "title": "AND",
            "url": "https://www.w3schools.com/sql/sql_ref_and.asp",
            "info": {
                "AND": "The AND command is used with WHERE to only include rows where both conditions is true.The following SQL statement selects all fields from \"Customers\" where country is \"Germany\" AND city is \"Berlin\":```sql\nSELECT * FROM Customers\n\r\n WHERE Country='Germany'\r\n AND City='Berlin';```\u276e SQL Keywords Reference"
            }
        },
        "any": {
            "title": "ANY",
            "url": "https://www.w3schools.com/sql/sql_ref_any.asp",
            "info": {
                "ANY": "The ANY command returns true if any of the subquery values meet the condition.The following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity = 10:```sql\nSELECT ProductName\nFROM Products\nWHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);```The following SQL statement returns TRUE and lists the productnames if it finds ANY records in the OrderDetails table where quantity > 99:```sql\nSELECT ProductName\nFROM Products\nWHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity > 99);```\u276e SQL Keywords Reference"
            }
        },
        "as": {
            "title": "AS",
            "url": "https://www.w3schools.com/sql/sql_ref_as.asp",
            "info": {
                "AS": "The AS command is used to rename a column or table with an alias.An alias only exists for the duration of the query.",
                "Alias for Columns": "The following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column:```sql\nSELECT CustomerID AS ID, CustomerName AS Customer\n\r\n FROM Customers;```The following SQL statement creates two aliases. Notice that it requires double quotation marks or square brackets if the alias name contains spaces:```sql\nSELECT CustomerName AS Customer, ContactName AS [Contact Person]\n\r\n FROM Customers;```The following SQL statement creates an alias named \"Address\" that combine four columns (Address, PostalCode, City and Country):```sql\nSELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address\n\r\n FROM Customers;```Note: To get the SQL statement above to work in MySQL use the following:```sql\nSELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address\n\r\nFROM Customers;```",
                "Alias for Tables": "The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the \"Customers\" and \"Orders\" tables, and give them the table aliases of \"c\" and \"o\" respectively (Here we use aliases to make the SQL shorter):```sql\nSELECT o.OrderID, o.OrderDate, c.CustomerName\nFROM Customers AS c, Orders AS o\nWHERE c.CustomerName=\"Around the Horn\" AND c.CustomerID=o.CustomerID;```\u00e2\u009d\u00ae SQL Keywords Reference"
            }
        },
        "asc": {
            "title": "ASC",
            "url": "https://www.w3schools.com/sql/sql_ref_asc.asp",
            "info": {
                "ASC": "The ASC command is used to sort the data returned in ascending order.The following SQL statement selects all the columns from the \"Customers\" table, sorted by the \"CustomerName\" column:```sql\nSELECT * FROM Customers\nORDER BY CustomerName ASC;```\u276e SQL Keywords Reference",
                "Definition and Usage": "The Asc() function returns the ASCII value for the specific character.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "backupdatabase": {
            "title": "BACKUP DATABASE",
            "url": "https://www.w3schools.com/sql/sql_ref_backup_database.asp",
            "info": {
                "BACKUP DATABASE": "The BACKUP DATABASE command is used in SQL Server to create a full back up of an existing SQL database.The following SQL statement creates a full back up of the existing database \"testDB\" to the D disk:```sql\nBACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak';```A differential back up only backs up the parts of the database that have changed since the last full database backup.The following SQL statement creates a differential back up of the database \"testDB\":```sql\nBACKUP DATABASE testDB\nTO DISK = 'D:\\backups\\testDB.bak'\nWITH DIFFERENTIAL;```\u276e SQL Keywords Reference"
            }
        },
        "column": {
            "title": "COLUMN",
            "url": "https://www.w3schools.com/sql/sql_ref_column.asp",
            "info": {
                "ALTER COLUMN": "The ALTER COLUMN command is used to change the data type of a column in a table.The following SQL changes the data type of the column named \"BirthDate\" in the \"Employees\" table to type year:```sql\nALTER TABLE Employees\nALTER COLUMN BirthDate year;```",
                "DROP COLUMN": "The DROP COLUMN command is used to delete a column in an existing table.The following SQL deletes the \"ContactName\" column from the \"Customers\" table:```sql\nALTER TABLE Customers\nDROP COLUMN ContactName;```\u276e SQL Keywords Reference"
            }
        },
        "constraint": {
            "title": "CONSTRAINT",
            "url": "https://www.w3schools.com/sql/sql_ref_constraint.asp",
            "info": {
                "ADD CONSTRAINT": "The ADD CONSTRAINT command is used to create a constraint after a table is already created.The following SQL adds a constraint named \"PK\\_Person\" that is a PRIMARY KEY constraint on multiple columns (ID and LastName):```sql\nALTER TABLE Persons\nADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);```",
                "DROP CONSTRAINT": "The DROP CONSTRAINT command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint.",
                "DROP a UNIQUE Constraint": "To drop a UNIQUE constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT UC_Person;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP INDEX UC_Person;```",
                "DROP a PRIMARY KEY Constraint": "To drop a PRIMARY KEY constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT PK_Person;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP PRIMARY KEY;```",
                "DROP a FOREIGN KEY Constraint": "To drop a FOREIGN KEY constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Orders\n\r\nDROP CONSTRAINT FK_PersonOrder;```MySQL:```sql\nALTER TABLE Orders\n\r\nDROP FOREIGN KEY FK_PersonOrder;```",
                "DROP a CHECK Constraint": "To drop a CHECK constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT CHK_PersonAge;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP CHECK CHK_PersonAge;```\u276e SQL Keywords Reference"
            }
        },
        "create": {
            "title": "CREATE",
            "url": "https://www.w3schools.com/sql/sql_ref_create.asp",
            "info": {
                "CREATE DATABASE": "The CREATE DATABASE command is used is to create a new SQL database.The following SQL creates a database called \"testDB\":```sql\nCREATE DATABASE testDB;```",
                "CREATE TABLE": "The CREATE TABLE command creates a new table in the database.The following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:```sql\nCREATE TABLE Persons\r\n(\n \r\nPersonID int,\n \r\nLastName varchar(255),\n \r\nFirstName varchar(255),\n \r\nAddress varchar(255),\n \r\nCity varchar(255) \n\r\n);```",
                "CREATE TABLE Using Another Table": "The following SQL creates a new table called \"TestTables\" (which is a copy of two columns of the \"Customers\" table):\u00a0```sql\nCREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;```",
                "CREATE INDEX": "The CREATE INDEX command is used to create indexes in tables (allows duplicate values).Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.The following SQL creates an index named \"idx\\_lastname\" on the \"LastName\" column in the \"Persons\" table:```sql\nCREATE INDEX idx_lastname\n\r\nON Persons (LastName);```If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:```sql\nCREATE INDEX idx_pname\n\r\nON Persons (LastName, FirstName);```Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.",
                "CREATE UNIQUE INDEX": "The CREATE UNIQUE INDEX command creates a unique index on a table (no duplicate values allowed)The following SQL creates an index named \"uidx\\_pid\" on the \"PersonID\" column in the \"Persons\" table:```sql\nCREATE UNIQUE INDEX uidx_pid\n\r\nON Persons (PersonID);```",
                "CREATE VIEW": "The CREATE VIEW command creates a view.A view is a virtual table based on the result set of an SQL statement.The following SQL creates a view that selects all customers from Brazil:```sql\nCREATE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName\n\r\nFROM Customers\n\r\nWHERE Country = \"Brazil\";```",
                "CREATE OR REPLACE VIEW": "The CREATE OR REPLACE VIEW command updates a view.The following SQL adds the \"City\" column to the \"Brazil Customers\" view:```sql\nCREATE OR REPLACE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName, City\n\r\nFROM Customers\n\r\nWHERE Country = \"Brazil\";```",
                "Query The View": "We can query the view above as follows:```sql\nSELECT * FROM [Brazil Customers];```",
                "CREATE PROCEDURE": "The CREATE PROCEDURE command is used to create a stored procedure.A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.The following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:```sql\nCREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;```Execute the stored procedure above as follows:```sql\nEXEC SelectAllCustomers;```\u276e SQL Keywords Reference"
            }
        },
        "createdatabase": {
            "title": "CREATE DATABASE",
            "url": "https://www.w3schools.com/sql/sql_ref_create_database.asp",
            "info": {
                "CREATE DATABASE": "The CREATE DATABASE command is used is to create a new SQL database.The following SQL creates a database called \"testDB\":```sql\nCREATE DATABASE testDB;```\u276e SQL Keywords Reference"
            }
        },
        "createindex": {
            "title": "CREATE INDEX",
            "url": "https://www.w3schools.com/sql/sql_ref_create_index.asp",
            "info": {
                "CREATE INDEX": "The CREATE INDEX command is used to create indexes in tables (allows duplicate values).Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.The following SQL creates an index named \"idx\\_lastname\" on the \"LastName\" column in the \"Persons\" table:```sql\nCREATE INDEX idx_lastname\n\r\nON Persons (LastName);```If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:```sql\nCREATE INDEX idx_pname\n\r\nON Persons (LastName, FirstName);```Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.\u276e SQL Keywords Reference"
            }
        },
        "createorreplaceview": {
            "title": "CREATE OR REPLACE VIEW",
            "url": "https://www.w3schools.com/sql/sql_ref_create_or_replace_view.asp",
            "info": {
                "CREATE OR REPLACE VIEW": "The CREATE OR REPLACE VIEW command updates a view.The following SQL adds the \"City\" column to the \"Brazil Customers\" view:```sql\nCREATE OR REPLACE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName, City\n\r\nFROM Customers\n\r\nWHERE Country = \"Brazil\";```",
                "Query The View": "We can query the view above as follows:```sql\nSELECT * FROM [Brazil Customers];```\u276e SQL Keywords Reference"
            }
        },
        "createprocedure": {
            "title": "CREATE PROCEDURE",
            "url": "https://www.w3schools.com/sql/sql_ref_create_procedure.asp",
            "info": {
                "CREATE PROCEDURE": "The CREATE PROCEDURE command is used to create a stored procedure.A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.The following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:```sql\nCREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;```Execute the stored procedure above as follows:```sql\nEXEC SelectAllCustomers;```\u276e SQL Keywords Reference"
            }
        },
        "createuniqueindex": {
            "title": "CREATE UNIQUE INDEX",
            "url": "https://www.w3schools.com/sql/sql_ref_create_unique_index.asp",
            "info": {
                "CREATE UNIQUE INDEX": "The CREATE UNIQUE INDEX command creates a unique index on a table (no duplicate values allowed)Indexes are used to retrieve data from the database very fast. The users cannot see the indexes, they are just used to speed up searches/queries.The following SQL creates an index named \"uidx\\_pid\" on the \"PersonID\" column in the \"Persons\" table:```sql\nCREATE UNIQUE INDEX uidx_pid\n\r\nON Persons (PersonID);```Note: The syntax for creating indexes varies among different databases. Therefore: Check the syntax for creating indexes in your database.\u276e SQL Keywords Reference"
            }
        },
        "createview": {
            "title": "CREATE VIEW",
            "url": "https://www.w3schools.com/sql/sql_ref_create_view.asp",
            "info": {
                "CREATE VIEW": "The CREATE VIEW command creates a view.A view is a virtual table based on the result set of an SQL statement.The following SQL creates a view that selects all customers from Brazil:```sql\nCREATE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName\n\r\nFROM Customers\n\r\nWHERE Country = \"Brazil\";```",
                "Query The View": "We can query the view above as follows:```sql\nSELECT * FROM [Brazil Customers];```\u276e SQL Keywords Reference"
            }
        },
        "database": {
            "title": "DATABASE",
            "url": "https://www.w3schools.com/sql/sql_ref_database.asp",
            "info": {
                "CREATE DATABASE": "The CREATE DATABASE command is used is to create a new SQL database.The following SQL creates a database called \"testDB\":```sql\nCREATE DATABASE testDB;```",
                "DROP DATABASE": "The DROP DATABASE command is used is to delete an existing SQL database.The following SQL drops a database named \"testDB\":```sql\nDROP DATABASE testDB;```\u276e SQL Keywords Reference",
                "Definition and Usage": "The DATABASE() function returns the name of the current database.If there is no current database, this function returns NULL or \"\".",
                "Syntax": "",
                "Technical Details": "\u276e MySQL Functions"
            }
        },
        "desc": {
            "title": "DESC",
            "url": "https://www.w3schools.com/sql/sql_ref_desc.asp",
            "info": {
                "DESC": "The DESC command is used to sort the data returned in descending order.The following SQL statement selects all the columns from the \"Customers\" table, sorted descending by the \"CustomerName\" column:```sql\nSELECT * FROM Customers\nORDER BY CustomerName DESC;```\u276e SQL Keywords Reference"
            }
        },
        "distinct": {
            "title": "DISTINCT",
            "url": "https://www.w3schools.com/sql/sql_ref_select_distinct.asp",
            "info": {
                "SELECT DISTINCT": "The SELECT DISTINCT command returns only distinct (different) values in the result set.The following SQL statement selects only the DISTINCT values from the \"Country\" column in the \"Customers\" table:```sql\nSELECT DISTINCT Country FROM Customers;```\u276e SQL Keywords Reference"
            }
        },
        "drop": {
            "title": "DROP",
            "url": "https://www.w3schools.com/sql/sql_ref_drop.asp",
            "info": {
                "DROP COLUMN": "The DROP COLUMN command is used to delete a column in an existing table.The following SQL deletes the \"ContactName\" column from the \"Customers\" table:```sql\nALTER TABLE Customers\nDROP COLUMN ContactName;```",
                "DROP a UNIQUE Constraint": "To drop a UNIQUE constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT UC_Person;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP INDEX UC_Person;```",
                "DROP a PRIMARY KEY Constraint": "To drop a PRIMARY KEY constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT PK_Person;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP PRIMARY KEY;```",
                "DROP a FOREIGN KEY Constraint": "To drop a FOREIGN KEY constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Orders\n\r\nDROP CONSTRAINT FK_PersonOrder;```MySQL:```sql\nALTER TABLE Orders\n\r\nDROP FOREIGN KEY FK_PersonOrder;```",
                "DROP a CHECK Constraint": "To drop a CHECK constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT CHK_PersonAge;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP CHECK CHK_PersonAge;```",
                "DROP DEFAULT": "The DROP DEFAULT command is used to delete a DEFAULT constraint.To drop a DEFAULT constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nALTER COLUMN City DROP DEFAULT;```MySQL:```sql\nALTER TABLE Persons\n\r\nALTER City DROP DEFAULT;```",
                "DROP INDEX": "The DROP INDEX command is used to delete an index in a table.MS Access:```sql\nDROP INDEX index_name ON table_name;```SQL Server:```sql\nDROP INDEX table_name.index_name;```DB2/Oracle:```sql\nDROP INDEX index_name;```MySQL:```sql\nALTER TABLE table_name\nDROP INDEX index_name;```",
                "DROP DATABASE": "The DROP DATABASE command is used is to delete an existing SQL database.The following SQL drops a database named \"testDB\":```sql\nDROP DATABASE testDB;```",
                "DROP TABLE": "The DROP TABLE command deletes a table in the database.The following SQL deletes the table \"Shippers\":```sql\nDROP TABLE Shippers;```",
                "DROP VIEW": "The DROP VIEW command deletes a view.The following SQL drops the \"Brazil Customers\" view:```sql\nDROP VIEW [Brazil Customers];```\u276e SQL Keywords Reference"
            }
        },
        "dropcolumn": {
            "title": "DROP COLUMN",
            "url": "https://www.w3schools.com/sql/sql_ref_drop_column.asp",
            "info": {
                "DROP COLUMN": "The DROP COLUMN command is used to delete a column in an existing table.The following SQL deletes the \"ContactName\" column from the \"Customers\" table:```sql\nALTER TABLE Customers\nDROP COLUMN ContactName;```\u276e SQL Keywords Reference"
            }
        },
        "dropconstraint": {
            "title": "DROP CONSTRAINT",
            "url": "https://www.w3schools.com/sql/sql_ref_drop_constraint.asp",
            "info": {
                "DROP CONSTRAINT": "The DROP CONSTRAINT command is used to delete a UNIQUE, PRIMARY KEY, FOREIGN KEY, or CHECK constraint.",
                "DROP a UNIQUE Constraint": "To drop a UNIQUE constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT UC_Person;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP INDEX UC_Person;```",
                "DROP a PRIMARY KEY Constraint": "To drop a PRIMARY KEY constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT PK_Person;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP PRIMARY KEY;```",
                "DROP a FOREIGN KEY Constraint": "To drop a FOREIGN KEY constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Orders\n\r\nDROP CONSTRAINT FK_PersonOrder;```MySQL:```sql\nALTER TABLE Orders\n\r\nDROP FOREIGN KEY FK_PersonOrder;```",
                "DROP a CHECK Constraint": "To drop a CHECK constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nDROP CONSTRAINT CHK_PersonAge;```MySQL:```sql\nALTER TABLE Persons\n\r\nDROP CHECK CHK_PersonAge;```\u276e SQL Keywords Reference"
            }
        },
        "dropdatabase": {
            "title": "DROP DATABASE",
            "url": "https://www.w3schools.com/sql/sql_ref_drop_database.asp",
            "info": {
                "DROP DATABASE": "The DROP DATABASE command is used is to delete an existing SQL database.The following SQL drops a database named \"testDB\":```sql\nDROP DATABASE testDB;```\u276e SQL Keywords Reference"
            }
        },
        "dropdefault": {
            "title": "DROP DEFAULT",
            "url": "https://www.w3schools.com/sql/sql_ref_drop_default.asp",
            "info": {
                "DROP DEFAULT": "The DROP DEFAULT command is used to delete a DEFAULT constraint.To drop a DEFAULT constraint, use the following SQL:SQL Server / Oracle / MS Access:```sql\nALTER TABLE Persons\n\r\nALTER COLUMN City DROP DEFAULT;```MySQL:```sql\nALTER TABLE Persons\n\r\nALTER City DROP DEFAULT;```\u276e SQL Keywords Reference"
            }
        },
        "dropindex": {
            "title": "DROP INDEX",
            "url": "https://www.w3schools.com/sql/sql_ref_drop_index.asp",
            "info": {
                "DROP INDEX": "The DROP INDEX command is used to delete an index in a table.MS Access:```sql\nDROP INDEX index_name ON table_name;```SQL Server:```sql\nDROP INDEX table_name.index_name;```DB2/Oracle:```sql\nDROP INDEX index_name;```MySQL:```sql\nALTER TABLE table_name\nDROP INDEX index_name;```\u276e SQL Keywords Reference"
            }
        },
        "dropview": {
            "title": "DROP VIEW",
            "url": "https://www.w3schools.com/sql/sql_ref_drop_view.asp",
            "info": {
                "DROP VIEW": "The DROP VIEW command deletes a view.The following SQL drops the \"Brazil Customers\" view:```sql\nDROP VIEW [Brazil Customers];```\u276e SQL Keywords Reference"
            }
        },
        "exec": {
            "title": "EXEC",
            "url": "https://www.w3schools.com/sql/sql_ref_exec.asp",
            "info": {
                "EXEC": "The EXEC command is used to execute a stored procedure.The following SQL executes a stored procedure named \"SelectAllCustomers\":```sql\nEXEC SelectAllCustomers;```\u276e SQL Keywords Reference"
            }
        },
        "from": {
            "title": "FROM",
            "url": "https://www.w3schools.com/sql/sql_ref_from.asp",
            "info": {
                "FROM": "The FROM command is used to specify which table to select or delete data from.The following SQL statement selects the \"CustomerName\" and \"City\" columns from the \"Customers\" table:```sql\nSELECT CustomerName, City FROM Customers;```The following SQL statement selects all the columns from the \"Customers\" table:```sql\nSELECT * FROM Customers;```The following SQL statement deletes the customer \"Alfreds Futterkiste\" from the \"Customers\" table:```sql\nDELETE FROM Customers\n\r\n WHERE CustomerName='Alfreds Futterkiste';```\u276e SQL Keywords Reference"
            }
        },
        "fullouterjoin": {
            "title": "FULL OUTER JOIN",
            "url": "https://www.w3schools.com/sql/sql_ref_full_outer_join.asp",
            "info": {
                "FULL OUTER JOIN": "The FULL OUTER JOIN command returns all rows when there is a match in either left table or right table.The following SQL statement selects all customers, and all orders:```sql\nSELECT Customers.CustomerName, Orders.OrderID\n\r\nFROM Customers\n\r\nFULL OUTER JOIN Orders\r\nON Customers.CustomerID=Orders.CustomerID\n\r\nORDER BY Customers.CustomerName;```Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.\u276e SQL Keywords Reference"
            }
        },
        "isnull": {
            "title": "IS NULL",
            "url": "https://www.w3schools.com/sql/sql_ref_is_null.asp",
            "info": {
                "IS NULL": "The IS NULL command is used to test for empty values (NULL values).The following SQL lists all customers with a NULL value in the \"Address\" field:```sql\nSELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NULL;```\u276e SQL Keywords Reference",
                "Definition and Usage": "The IsNull() function checks whether an expression contains Null (no data).This function returns a Boolean value. TRUE (-1) indicates that the expression is a Null value, and FALSE (0) indicates that the expression is not a Null value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT IsNull(\"Hello\");``````sql\nSELECT IsNull(0);```\u276e MS Access Functions"
            }
        },
        "isnotnull": {
            "title": "IS NOT NULL",
            "url": "https://www.w3schools.com/sql/sql_ref_is_not_null.asp",
            "info": {
                "IS NOT NULL": "The IS NOT NULL command is used to test for non-empty values (NOT NULL values).The following SQL lists all customers with a value in the \"Address\" field:```sql\nSELECT CustomerName, ContactName, Address\nFROM Customers\nWHERE Address IS NOT NULL;```\u276e SQL Keywords Reference"
            }
        },
        "join": {
            "title": "JOIN",
            "url": "https://www.w3schools.com/sql/sql_ref_join.asp",
            "info": {
                "INNER JOIN": "The INNER JOIN command returns rows that have matching values in both tables.The following SQL selects all orders with customer information:```sql\nSELECT Orders.OrderID, Customers.CustomerName\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;```Note: The INNER JOIN keyword selects all rows from both tables as long as there is a match between the columns. If there are records in the \"Orders\" table that do not have matches in \"Customers\", these orders will not be shown!The following SQL statement selects all orders with customer and shipper information:```sql\nSELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);```",
                "LEFT JOIN": "The LEFT JOIN command returns all rows from the left table, and the matching rows from the right table. The result is NULL from the right side, if there is no match.The following SQL will select all customers, and any orders they might have:```sql\nSELECT Customers.CustomerName, Orders.OrderID\n\r\n FROM Customers\n\r\n LEFT JOIN Orders\r\n ON Customers.CustomerID = Orders.CustomerID\n\r\n ORDER BY Customers.CustomerName;```Note: The LEFT JOIN keyword returns all records from the left table (Customers), even if there are no matches in the right table (Orders).",
                "RIGHT JOIN": "The RIGHT JOIN command returns all rows from the right table, and the matching records from the left table. The result is NULL from the left side, when there is no match.The following SQL will return all employees, and any orders they might have placed:```sql\nSELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\n\r\n ORDER BY Orders.OrderID;```Note: The RIGHT JOIN keyword returns all records from the right table (Employees), even if there are no matches in the left table (Orders).",
                "FULL OUTER JOIN": "The FULL OUTER JOIN command returns all rows when there is a match in either left table or right table.The following SQL statement selects all customers, and all orders:```sql\nSELECT Customers.CustomerName, Orders.OrderID\n\r\nFROM Customers\n\r\nFULL OUTER JOIN Orders\r\nON Customers.CustomerID=Orders.CustomerID\n\r\nORDER BY Customers.CustomerName;```Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.\u276e SQL Keywords Reference"
            }
        },
        "limit": {
            "title": "LIMIT",
            "url": "https://www.w3schools.com/sql/sql_ref_top.asp",
            "info": {
                "SELECT TOP, LIMIT and ROWNUM": "The SELECT TOP command is used to specify the number of records to return.The following SQL statement selects the first three records from the \"Customers\" table:```sql\nSELECT TOP 3 * FROM Customers;```The following SQL statement shows the equivalent example using the LIMIT clause:```sql\nSELECT * FROM Customers\nLIMIT 3;```The following SQL statement shows the equivalent example using ROWNUM:```sql\nSELECT * FROM Customers\nWHERE ROWNUM  <= 3;```\u276e SQL Keywords Reference"
            }
        },
        "not": {
            "title": "NOT",
            "url": "https://www.w3schools.com/sql/sql_ref_not.asp",
            "info": {
                "NOT": "The NOT command is used with WHERE to only include rows where a condition is not true.The following SQL statement selects all fields from \"Customers\" where country is NOT \"Germany\":```sql\nSELECT * FROM Customers\n\r\n WHERE NOT Country='Germany';```\u276e SQL Keywords Reference"
            }
        },
        "or": {
            "title": "OR",
            "url": "https://www.w3schools.com/sql/sql_ref_or.asp",
            "info": {
                "OR": "The OR command is used with WHERE to include rows where either condition is true.The following SQL statement selects all fields from \"Customers\" where city is \"Berlin\" OR city is \"M\u00c3\u00bcnchen\":```sql\nSELECT * FROM Customers\nWHERE City='Berlin' OR City='M\u00c3\u00bcnchen';```\u00e2\u009d\u00ae SQL Keywords Reference"
            }
        },
        "outerjoin": {
            "title": "OUTER JOIN",
            "url": "https://www.w3schools.com/sql/sql_ref_full_outer_join.asp",
            "info": {
                "FULL OUTER JOIN": "The FULL OUTER JOIN command returns all rows when there is a match in either left table or right table.The following SQL statement selects all customers, and all orders:```sql\nSELECT Customers.CustomerName, Orders.OrderID\n\r\nFROM Customers\n\r\nFULL OUTER JOIN Orders\r\nON Customers.CustomerID=Orders.CustomerID\n\r\nORDER BY Customers.CustomerName;```Note: The FULL OUTER JOIN keyword returns all the rows from the left table (Customers), and all the rows from the right table (Orders). If there are rows in \"Customers\" that do not have matches in \"Orders\", or if there are rows in \"Orders\" that do not have matches in \"Customers\", those rows will be listed as well.\u276e SQL Keywords Reference"
            }
        },
        "procedure": {
            "title": "PROCEDURE",
            "url": "https://www.w3schools.com/sql/sql_ref_create_procedure.asp",
            "info": {
                "CREATE PROCEDURE": "The CREATE PROCEDURE command is used to create a stored procedure.A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.The following SQL creates a stored procedure named \"SelectAllCustomers\" that selects all records from the \"Customers\" table:```sql\nCREATE PROCEDURE SelectAllCustomers\nAS\nSELECT * FROM Customers\nGO;```Execute the stored procedure above as follows:```sql\nEXEC SelectAllCustomers;```\u276e SQL Keywords Reference"
            }
        },
        "rownum": {
            "title": "ROWNUM",
            "url": "https://www.w3schools.com/sql/sql_ref_top.asp",
            "info": {
                "SELECT TOP, LIMIT and ROWNUM": "The SELECT TOP command is used to specify the number of records to return.The following SQL statement selects the first three records from the \"Customers\" table:```sql\nSELECT TOP 3 * FROM Customers;```The following SQL statement shows the equivalent example using the LIMIT clause:```sql\nSELECT * FROM Customers\nLIMIT 3;```The following SQL statement shows the equivalent example using ROWNUM:```sql\nSELECT * FROM Customers\nWHERE ROWNUM  <= 3;```\u276e SQL Keywords Reference"
            }
        },
        "set": {
            "title": "SET",
            "url": "https://www.w3schools.com/sql/sql_ref_set.asp",
            "info": {
                "SET": "The SET command is used with UPDATE to specify which columns and values that should be updated in a table.The following SQL updates the first customer (CustomerID = 1) with a new ContactName and a new City:```sql\nUPDATE Customers\n\r\n SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\n\r\n WHERE CustomerID = 1;```The following SQL will update the \"ContactName\" field to \"Juan\" for all records where Country is \"Mexico\":```sql\nUPDATE Customers\n\r\nSET ContactName='Juan'\n\r\nWHERE Country='Mexico';```\u276e SQL Keywords Reference"
            }
        },
        "table": {
            "title": "TABLE",
            "url": "https://www.w3schools.com/sql/sql_ref_table.asp",
            "info": {
                "CREATE TABLE": "The CREATE TABLE command creates a new table in the database.The following SQL creates a table called \"Persons\" that contains five columns: PersonID, LastName, FirstName, Address, and City:```sql\nCREATE TABLE Persons\r\n(\n \r\nPersonID int,\n \r\nLastName varchar(255),\n \r\nFirstName varchar(255),\n \r\nAddress varchar(255),\n \r\nCity varchar(255) \n\r\n);```",
                "CREATE TABLE Using Another Table": "A copy of an existing table can also be created using CREATE TABLE.The following SQL creates a new table called \"TestTables\" (which is a copy of the \"Customers\" table):\u00a0```sql\nCREATE TABLE TestTable AS\nSELECT customername, contactname\nFROM customers;```",
                "ALTER TABLE": "The ALTER TABLE command adds, deletes, or modifies columns in a table.The ALTER TABLE command also adds and deletes various constraints in a table.The following SQL adds an \"Email\" column to the \"Customers\" table:```sql\nALTER TABLE Customers\nADD Email varchar(255);```The following SQL deletes the \"Email\" column from the \"Customers\" table:```sql\nALTER TABLE Customers\nDROP COLUMN Email;```",
                "DROP TABLE": "The DROP TABLE command deletes a table in the database.The following SQL deletes the table \"Shippers\":```sql\nDROP TABLE Shippers;```",
                "TRUNCATE TABLE": "The TRUNCATE TABLE command deletes the data inside a table, but not the table itself.The following SQL truncates the table \"Categories\":\u00a0```sql\nTRUNCATE TABLE Categories;```\u276e SQL Keywords Reference"
            }
        },
        "top": {
            "title": "TOP",
            "url": "https://www.w3schools.com/sql/sql_ref_top.asp",
            "info": {
                "SELECT TOP, LIMIT and ROWNUM": "The SELECT TOP command is used to specify the number of records to return.The following SQL statement selects the first three records from the \"Customers\" table:```sql\nSELECT TOP 3 * FROM Customers;```The following SQL statement shows the equivalent example using the LIMIT clause:```sql\nSELECT * FROM Customers\nLIMIT 3;```The following SQL statement shows the equivalent example using ROWNUM:```sql\nSELECT * FROM Customers\nWHERE ROWNUM  <= 3;```\u276e SQL Keywords Reference"
            }
        },
        "truncatetable": {
            "title": "TRUNCATE TABLE",
            "url": "https://www.w3schools.com/sql/sql_ref_drop_table.asp",
            "info": {
                "DROP TABLE": "The DROP TABLE command deletes a table in the database.The following SQL deletes the table \"Shippers\":```sql\nDROP TABLE Shippers;```",
                "TRUNCATE TABLE": "The TRUNCATE TABLE command deletes the data inside a table, but not the table itself.The following SQL truncates the table \"Categories\":\u00a0```sql\nTRUNCATE TABLE Categories;```\u276e SQL Keywords Reference"
            }
        },
        "unionall": {
            "title": "UNION ALL",
            "url": "https://www.w3schools.com/sql/sql_ref_union.asp",
            "info": {
                "UNION": "The UNION command combines the result set of two or more SELECT statements (only distinct values)The following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;```",
                "UNION ALL": "The UNION ALL command combines the result set of two or more SELECT statements (allows duplicate values).The following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:```sql\nSELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\n\r\n ORDER BY City;```\u276e SQL Keywords Reference"
            }
        },
        "values": {
            "title": "VALUES",
            "url": "https://www.w3schools.com/sql/sql_ref_values.asp",
            "info": {
                "VALUES": "The VALUES command specifies the values of an INSERT INTO statement.The following SQL inserts a new record in the \"Customers\" table:```sql\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\n\r\nVALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');```The following SQL will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):```sql\nINSERT INTO Customers (CustomerName, City, Country)\n\r\nVALUES ('Cardinal', 'Stavanger', 'Norway');```\u276e SQL Keywords Reference"
            }
        },
        "view": {
            "title": "VIEW",
            "url": "https://www.w3schools.com/sql/sql_ref_view.asp",
            "info": {
                "CREATE VIEW": "In SQL, a view is a virtual table based on the result set of an SQL statement.The CREATE VIEW command creates a view.The following SQL creates a view that selects all customers from Brazil:```sql\nCREATE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName\n\r\nFROM Customers\n\r\nWHERE Country = \"Brazil\";```",
                "Query The View": "We can query the view above as follows:```sql\nSELECT * FROM [Brazil Customers];```",
                "CREATE OR REPLACE VIEW": "The CREATE OR REPLACE VIEW command updates a view.The following SQL adds the \"City\" column to the \"Brazil Customers\" view:```sql\nCREATE OR REPLACE VIEW [Brazil Customers] AS\n\r\nSELECT CustomerName, ContactName, City\n\r\nFROM Customers\n\r\nWHERE Country = \"Brazil\";```",
                "DROP VIEW": "The DROP VIEW command deletes a view.The following SQL drops the \"Brazil Customers\" view:```sql\nDROP VIEW [Brazil Customers];```\u276e SQL Keywords Reference"
            }
        },
        "myfunctions": {
            "title": "MySQL Functions",
            "url": "https://www.w3schools.com/sql/sql_ref_mysql.asp",
            "info": {
                "MySQL String Functions": "",
                "MySQL Numeric Functions": "",
                "MySQL Date Functions": "",
                "MySQL Advanced Functions": ""
            }
        },
        "ascii": {
            "title": "ASCII",
            "url": "https://www.w3schools.com/sql/func_mysql_ascii.asp",
            "info": {
                "Definition and Usage": "The ASCII() function returns the ASCII value for the specific character.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "char_length": {
            "title": "CHAR_LENGTH",
            "url": "https://www.w3schools.com/sql/func_mysql_char_length.asp",
            "info": {
                "Definition and Usage": "The CHAR\\_LENGTH() function return the length of a string (in characters).Note: This function is equal to the CHARACTER\\_LENGTH() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CHAR_LENGTH(CustomerName) AS LengthOfName\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "character_length": {
            "title": "CHARACTER_LENGTH",
            "url": "https://www.w3schools.com/sql/func_mysql_character_length.asp",
            "info": {
                "Definition and Usage": "The CHARACTER\\_LENGTH() function return the length of a string (in characters).Note: This function is equal to the CHAR\\_LENGTH() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CHARACTER_LENGTH(CustomerName) AS LengthOfName\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "concat": {
            "title": "CONCAT",
            "url": "https://www.w3schools.com/sql/func_mysql_concat.asp",
            "info": {
                "Definition and Usage": "The CONCAT() function adds two or more strings together.Note: See also Concat with the + operator and CONCAT\\_WS().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CONCAT('SQL', ' is', ' fun!');``````sql\nSELECT CONCAT('SQL', ' ', 'is', ' ', 'fun!');```\u276e SQL Server Functions"
            }
        },
        "concat_ws": {
            "title": "CONCAT_WS",
            "url": "https://www.w3schools.com/sql/func_mysql_concat_ws.asp",
            "info": {
                "Definition and Usage": "The CONCAT\\_WS() function adds two or more strings together with a separator.Note: See also CONCAT() andConcat with the + operator.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CONCAT_WS('-', 'SQL', ' is', ' fun!');```\u276e SQL Server Functions"
            }
        },
        "field": {
            "title": "FIELD",
            "url": "https://www.w3schools.com/sql/func_mysql_field.asp",
            "info": {
                "Definition and Usage": "The FIELD() function returns the index position of a value in a list of values.This function performs a case-insensitive search.Note: If the specified value is not found in the list of values, this function will return 0. If value is NULL, this function will return 0.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT FIELD(\"c\", \"a\", \"b\");``````sql\nSELECT FIELD(\"Q\", \"s\", \"q\", \"l\");``````sql\nSELECT FIELD(5, 0, 1, 2, 3, 4, 5);```\u276e MySQL Functions"
            }
        },
        "find_in_set": {
            "title": "FIND_IN_SET",
            "url": "https://www.w3schools.com/sql/func_mysql_find_in_set.asp",
            "info": {
                "Definition and Usage": "The FIND\\_IN\\_SET() function returns the position of a string within a list of strings.",
                "Syntax": "",
                "Parameter Values": "",
                "Return Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT FIND_IN_SET(\"a\", \"s,q,l\");``````sql\nSELECT FIND_IN_SET(\"q\", null);```\u276e MySQL Functions"
            }
        },
        "format": {
            "title": "FORMAT",
            "url": "https://www.w3schools.com/sql/func_mysql_format.asp",
            "info": {
                "Definition and Usage": "The Format() function formats a date value with the specified format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT Format(Price, \"Currency\") AS FormattedPrice\nFROM Products;```\u276e MS Access Functions"
            }
        },
        "insert": {
            "title": "INSERT",
            "url": "https://www.w3schools.com/sql/func_mysql_insert.asp",
            "info": {
                "Definition and Usage": "The INSERT() function inserts a string within a string at the specified position and for a certain number of characters.",
                "Syntax": "",
                "Parameter Values": "",
                "Return Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT INSERT(\"W3Schools.com\", 11, 3, \"no\");```\u276e MySQL Functions"
            }
        },
        "instr": {
            "title": "INSTR",
            "url": "https://www.w3schools.com/sql/func_mysql_instr.asp",
            "info": {
                "Definition and Usage": "The InStr() function gets the position of the first occurrence of a string in another.This function performs a case-insensitive search.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT INSTR(\"W3Schools.com\", \"COM\") AS MatchPosition;``````sql\nSELECT INSTR(CustomerName, \"a\")\nFROM Customers;```\u276e MySQL Functions",
                "Return Values": ""
            }
        },
        "lcase": {
            "title": "LCASE",
            "url": "https://www.w3schools.com/sql/func_mysql_lcase.asp",
            "info": {
                "Definition and Usage": "The LCase() function converts a string to lower-case.Tip: Also look at the UCase() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT LCASE(CustomerName) AS LowercaseCustomerName\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "left": {
            "title": "LEFT",
            "url": "https://www.w3schools.com/sql/func_mysql_left.asp",
            "info": {
                "Definition and Usage": "The Left() function extracts a number of characters from a string (starting from left).Note: See also the Right() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Left(CustomerName, 5) AS ExtractString\nFROM Customers;```\u276e MS Access Functions"
            }
        },
        "length": {
            "title": "LENGTH",
            "url": "https://www.w3schools.com/sql/func_mysql_length.asp",
            "info": {
                "Definition and Usage": "The LENGTH() function returns the length of a string (in bytes).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LENGTH(CustomerName) AS LengthOfName\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "locate": {
            "title": "LOCATE",
            "url": "https://www.w3schools.com/sql/func_mysql_locate.asp",
            "info": {
                "Definition and Usage": "The LOCATE() function returns the position of the first occurrence of a substring in a string.If the substring is not found within the original string, this function returns 0.This function performs a case-insensitive search.Note: This function is equal to thePOSITION() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LOCATE(\"com\", \"W3Schools.com\", 3) AS MatchPosition;``````sql\nSELECT LOCATE(\"a\", CustomerName)\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "lower": {
            "title": "LOWER",
            "url": "https://www.w3schools.com/sql/func_mysql_lower.asp",
            "info": {
                "Definition and Usage": "The LOWER() function converts a string to lower-case.Note: Also look at the  UPPER() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LOWER(CustomerName) AS LowercaseCustomerName\nFROM Customers;```\u276e SQL Server Functions"
            }
        },
        "lpad": {
            "title": "LPAD",
            "url": "https://www.w3schools.com/sql/func_mysql_lpad.asp",
            "info": {
                "Definition and Usage": "The LPAD() function left-pads a string with another string, to a certain length.Note: Also look at the RPAD() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LPAD(CustomerName, 30, \"ABC\") AS LeftPadCustomerName\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "ltrim": {
            "title": "LTRIM",
            "url": "https://www.w3schools.com/sql/func_mysql_ltrim.asp",
            "info": {
                "Definition and Usage": "The LTrim() function removes leading spaces from a string.Note: See also the RTrim() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "mid": {
            "title": "MID",
            "url": "https://www.w3schools.com/sql/func_mysql_mid.asp",
            "info": {
                "Definition and Usage": "The Mid() function extracts some characters from a string (starting at any position).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Mid(CustomerName, 4, 6) AS ExtractString\nFROM Customers;```\u276e MS Access Functions"
            }
        },
        "position": {
            "title": "POSITION",
            "url": "https://www.w3schools.com/sql/func_mysql_position.asp",
            "info": {
                "Definition and Usage": "The POSITION() function returns the position of the first occurrence of a substring in a string.If the substring is not found within the original string, this function returns 0.This function performs a case-insensitive search.Note: The LOCATE() function is equal to the POSITION() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT POSITION(\"COM\" IN \"W3Schools.com\") AS MatchPosition;``````sql\nSELECT POSITION(\"a\" IN CustomerName)\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "repeat": {
            "title": "REPEAT",
            "url": "https://www.w3schools.com/sql/func_mysql_repeat.asp",
            "info": {
                "Definition and Usage": "The REPEAT() function repeats a string as many times as specified.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT REPEAT(CustomerName, 2)\nFROM Customers;``````sql\nSELECT REPEAT(\"SQL Tutorial\", 0);```\u276e MySQL Functions"
            }
        },
        "replace": {
            "title": "REPLACE",
            "url": "https://www.w3schools.com/sql/func_mysql_replace.asp",
            "info": {
                "Definition and Usage": "The Replace() function replaces a substring within a string, with another substring, a specified number of times.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT REPLACE('SQL Tutorial', 'SQL', 'HTML');``````sql\nSELECT REPLACE('ABC ABC ABC', 'a', 'c');```\u276e SQL Server Functions"
            }
        },
        "reverse": {
            "title": "REVERSE",
            "url": "https://www.w3schools.com/sql/func_mysql_reverse.asp",
            "info": {
                "Definition and Usage": "The REVERSE() function reverses a string and returns the result.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT REVERSE(CustomerName)\nFROM Customers;```\u276e SQL Server Functions"
            }
        },
        "right": {
            "title": "RIGHT",
            "url": "https://www.w3schools.com/sql/func_mysql_right.asp",
            "info": {
                "Definition and Usage": "The Right() function extracts a number of characters from a string (starting from right).Note: See also the Left() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Right(CustomerName, 5) AS ExtractString\nFROM Customers;```\u276e MS Access Functions"
            }
        },
        "rpad": {
            "title": "RPAD",
            "url": "https://www.w3schools.com/sql/func_mysql_rpad.asp",
            "info": {
                "Definition and Usage": "The RPAD() function right-pads a string with another string, to a certain length.Note: Also look at the LPAD() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT RPAD(CustomerName, 30, \"ABC\") AS RightPadCustomerName\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "rtrim": {
            "title": "RTRIM",
            "url": "https://www.w3schools.com/sql/func_mysql_rtrim.asp",
            "info": {
                "Definition and Usage": "The RTrim() function removes trailing spaces from a string.Note: See also the LTrim() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "space": {
            "title": "SPACE",
            "url": "https://www.w3schools.com/sql/func_mysql_space.asp",
            "info": {
                "Definition and Usage": "The Space() function returns a string of the specified number of space characters.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "strcmp": {
            "title": "STRCMP",
            "url": "https://www.w3schools.com/sql/func_mysql_strcmp.asp",
            "info": {
                "Definition and Usage": "The STRCMP() function compares two strings.",
                "Syntax": "",
                "Parameter Values": "",
                "Return Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT STRCMP(\"SQL Tutorial\", \"HTML Tutorial\");```\u276e MySQL Functions"
            }
        },
        "substr": {
            "title": "SUBSTR",
            "url": "https://www.w3schools.com/sql/func_mysql_substr.asp",
            "info": {
                "Definition and Usage": "The SUBSTR() function extracts a substring from a string (starting at any position).Note: The SUBSTR() and MID() functions equals to the SUBSTRING() function. ",
                "Syntax": "OR:",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SUBSTR(CustomerName, 2, 5) AS ExtractString\nFROM Customers;``````sql\nSELECT SUBSTR(\"SQL Tutorial\", -5, 5) AS ExtractString;```\u276e MySQL Functions"
            }
        },
        "substring": {
            "title": "SUBSTRING",
            "url": "https://www.w3schools.com/sql/func_mysql_substring.asp",
            "info": {
                "Definition and Usage": "The SUBSTRING() function extracts some characters from a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SUBSTRING(CustomerName, 1, 5) AS ExtractString\nFROM Customers;``````sql\nSELECT SUBSTRING('SQL Tutorial', 1, 100) AS ExtractString;```\u276e SQL Server Functions"
            }
        },
        "substring_index": {
            "title": "SUBSTRING_INDEX",
            "url": "https://www.w3schools.com/sql/func_mysql_substring_index.asp",
            "info": {
                "Definition and Usage": "The SUBSTRING\\_INDEX() function returns a substring of a string before a specified number of delimiter occurs.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SUBSTRING_INDEX(\"www.w3schools.com\", \".\", 2);```\u276e MySQL Functions"
            }
        },
        "trim": {
            "title": "TRIM",
            "url": "https://www.w3schools.com/sql/func_mysql_trim.asp",
            "info": {
                "Definition and Usage": "The Trim() function removes both leading and trailing spaces from a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT TRIM('#! ' FROM '    #SQL Tutorial!    ') AS TrimmedString;```\u276e SQL Server Functions"
            }
        },
        "ucase": {
            "title": "UCASE",
            "url": "https://www.w3schools.com/sql/func_mysql_ucase.asp",
            "info": {
                "Definition and Usage": "The UCase() function converts a string to upper-case.Tip: Also look at the LCase() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT UCASE(CustomerName) AS UppercaseCustomerName\nFROM Customers;```\u276e MySQL Functions"
            }
        },
        "upper": {
            "title": "UPPER",
            "url": "https://www.w3schools.com/sql/func_mysql_upper.asp",
            "info": {
                "Definition and Usage": "The UPPER() function converts a string to upper-case.Note: Also look at the LOWER() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT UPPER(CustomerName) AS UppercaseCustomerName\nFROM Customers;```\u276e SQL Server Functions"
            }
        },
        "abs": {
            "title": "ABS",
            "url": "https://www.w3schools.com/sql/func_mysql_abs.asp",
            "info": {
                "Definition and Usage": "The Abs() function returns the absolute (positive) value of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "acos": {
            "title": "ACOS",
            "url": "https://www.w3schools.com/sql/func_mysql_acos.asp",
            "info": {
                "Definition and Usage": "The ACOS() function returns the arc cosine of a number.The specified number must be between -1 to 1, otherwise this function returns NULL.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT ACOS(-0.8);```\u276e SQL Server Functions"
            }
        },
        "asin": {
            "title": "ASIN",
            "url": "https://www.w3schools.com/sql/func_mysql_asin.asp",
            "info": {
                "Definition and Usage": "The ASIN() function returns the arc sine of a number.The specified number must be between -1 to 1, otherwise this function returns NULL.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT ASIN(-0.8);```\u276e SQL Server Functions"
            }
        },
        "atan": {
            "title": "ATAN",
            "url": "https://www.w3schools.com/sql/func_mysql_atan.asp",
            "info": {
                "Definition and Usage": "The ATAN() function returns the arc tangent of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT ATAN(-45.01);```\u276e SQL Server Functions"
            }
        },
        "atan2": {
            "title": "ATAN2",
            "url": "https://www.w3schools.com/sql/func_mysql_atan2.asp",
            "info": {
                "Definition and Usage": "The ATAN2() function returns the arc tangent of two numbers.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT ATAN2(-0.8, 2);```\u276e MySQL Functions"
            }
        },
        "avg": {
            "title": "AVG",
            "url": "https://www.w3schools.com/sql/func_mysql_avg.asp",
            "info": {
                "Definition and Usage": "The Avg() function returns the average value of an expression.Note: NULL values are ignored.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT * FROM Products\nWHERE Price > (SELECT Avg(Price) FROM Products);```\u276e MS Access Functions"
            }
        },
        "ceil": {
            "title": "CEIL",
            "url": "https://www.w3schools.com/sql/func_mysql_ceil.asp",
            "info": {
                "Definition and Usage": "The CEIL() function returns the smallest integer value that is bigger than or equal to a number.Note: This function is equal to the CEILING() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CEIL(25);```\u276e MySQL Functions"
            }
        },
        "ceiling": {
            "title": "CEILING",
            "url": "https://www.w3schools.com/sql/func_mysql_ceiling.asp",
            "info": {
                "Definition and Usage": "The CEILING() function returns the smallest integer value that is larger than or equal to a number.Tip: Also look at the FLOOR() and ROUND() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CEILING(25) AS CeilValue;``````sql\nSELECT CEILING(-13.5) AS CeilValue;```\u276e SQL Server Functions"
            }
        },
        "cos": {
            "title": "COS",
            "url": "https://www.w3schools.com/sql/func_mysql_cos.asp",
            "info": {
                "Definition and Usage": "The Cos() function returns the cosine of an angle.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT COS(PI());```\u276e SQL Server Functions"
            }
        },
        "cot": {
            "title": "COT",
            "url": "https://www.w3schools.com/sql/func_mysql_cot.asp",
            "info": {
                "Definition and Usage": "The COT() function returns the cotangent of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT COT(-2);```\u276e SQL Server Functions"
            }
        },
        "count": {
            "title": "COUNT",
            "url": "https://www.w3schools.com/sql/func_mysql_count.asp",
            "info": {
                "Definition and Usage": "The Count() function returns the number of records returned by a select query.Note: NULL values are not counted.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "degrees": {
            "title": "DEGREES",
            "url": "https://www.w3schools.com/sql/func_mysql_degrees.asp",
            "info": {
                "Definition and Usage": "The DEGREES() function converts a value in radians to degrees.Note: See also the RADIANS() andPI() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DEGREES(PI()*2);```\u276e SQL Server Functions"
            }
        },
        "div": {
            "title": "DIV",
            "url": "https://www.w3schools.com/sql/func_mysql_div.asp",
            "info": {
                "Definition and Usage": "The DIV function is used for integer division (x is divided by y). An integer value is returned.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT 8 DIV 3;```\u276e MySQL Functions"
            }
        },
        "exp": {
            "title": "EXP",
            "url": "https://www.w3schools.com/sql/func_mysql_exp.asp",
            "info": {
                "Definition and Usage": "The Exp() function returns e raised to the power of a specified number.The constant e (2.718281\u0085), is the base of natural logarithms.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT EXP(2);```\u276e SQL Server Functions"
            }
        },
        "floor": {
            "title": "FLOOR",
            "url": "https://www.w3schools.com/sql/func_mysql_floor.asp",
            "info": {
                "Definition and Usage": "The FLOOR() function returns the largest integer value that is smaller than or equal to a number.Tip: Also look at the CEILING() and ROUND() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT FLOOR(25) AS FloorValue;``````sql\nSELECT FLOOR(-13.5) AS FloorValue;```\u276e SQL Server Functions"
            }
        },
        "greatest": {
            "title": "GREATEST",
            "url": "https://www.w3schools.com/sql/func_mysql_greatest.asp",
            "info": {
                "Definition and Usage": "The GREATEST() function returns the greatest value of the list of arguments.Note: See also the LEAST() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT GREATEST(\"w3Schools.com\", \"microsoft.com\", \"apple.com\");```\u276e MySQL Functions"
            }
        },
        "least": {
            "title": "LEAST",
            "url": "https://www.w3schools.com/sql/func_mysql_least.asp",
            "info": {
                "Definition and Usage": "The LEAST() function returns the smallest value of the list of arguments.Note: See also the GREATEST() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LEAST(\"w3Schools.com\", \"microsoft.com\", \"apple.com\");```\u276e MySQL Functions"
            }
        },
        "ln": {
            "title": "LN",
            "url": "https://www.w3schools.com/sql/func_mysql_ln.asp",
            "info": {
                "Definition and Usage": "The LN() function returns the natural logarithm of a number.Note: See also the LOG() andEXP() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LN(1);```\u276e MySQL Functions"
            }
        },
        "log": {
            "title": "LOG",
            "url": "https://www.w3schools.com/sql/func_mysql_log.asp",
            "info": {
                "Definition and Usage": "The LOG() function returns the natural logarithm of a specified number, or the logarithm of the number to the specified base.From SQL Server 2012, you can also change the base of the logarithm to another value by using the optional base parameter. Note: Also look at the EXP() function.",
                "Syntax": "OR:",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LOG(2, 4);```\u276e SQL Server Functions"
            }
        },
        "log10": {
            "title": "LOG10",
            "url": "https://www.w3schools.com/sql/func_mysql_log10.asp",
            "info": {
                "Definition and Usage": "The LOG10() function returns the natural logarithm of a number to base 10.Note: Also look at the LOG() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LOG10(4.5);```\u276e SQL Server Functions"
            }
        },
        "log2": {
            "title": "LOG2",
            "url": "https://www.w3schools.com/sql/func_mysql_log2.asp",
            "info": {
                "Definition and Usage": "The LOG2() function returns the natural logarithm of a number to base-2.Note: See also the LOG() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LOG2(64);```\u276e MySQL Functions"
            }
        },
        "max": {
            "title": "MAX",
            "url": "https://www.w3schools.com/sql/func_mysql_max.asp",
            "info": {
                "Definition and Usage": "The Max() function returns the maximum value in a set of values.Note: See also the Min() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "min": {
            "title": "MIN",
            "url": "https://www.w3schools.com/sql/func_mysql_min.asp",
            "info": {
                "Definition and Usage": "The Min() function returns the minimum value in a set of values.Note: See also the Max() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "mod": {
            "title": "MOD",
            "url": "https://www.w3schools.com/sql/func_mysql_mod.asp",
            "info": {
                "Definition and Usage": "The MOD() function returns the remainder of a number divided by another number.",
                "Syntax": "OR:OR:",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT 18 MOD 4;``````sql\nSELECT 18 % 4;```\u276e MySQL Functions"
            }
        },
        "pi": {
            "title": "PI",
            "url": "https://www.w3schools.com/sql/func_mysql_pi.asp",
            "info": {
                "Definition and Usage": "The PI() function returns the value of PI.Note: Also look at the DEGREES() and RADIANS() functions.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "pow": {
            "title": "POW",
            "url": "https://www.w3schools.com/sql/func_mysql_pow.asp",
            "info": {
                "Definition and Usage": "The POW() function returns the value of a number raised to the power of another number.Note: This function is equal to thePOWER() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT POW(8, 3);```\u276e MySQL Functions"
            }
        },
        "power": {
            "title": "POWER",
            "url": "https://www.w3schools.com/sql/func_mysql_power.asp",
            "info": {
                "Definition and Usage": "The POWER() function returns the value of a number raised to the power of another number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT POWER(8, 3);```\u276e SQL Server Functions"
            }
        },
        "radians": {
            "title": "RADIANS",
            "url": "https://www.w3schools.com/sql/func_mysql_radians.asp",
            "info": {
                "Definition and Usage": "The RADIANS() function converts a degree value into radians.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT RADIANS(-45);```\u276e SQL Server Functions"
            }
        },
        "rand": {
            "title": "RAND",
            "url": "https://www.w3schools.com/sql/func_mysql_rand.asp",
            "info": {
                "Definition and Usage": "The RAND() function returns a random number between 0 (inclusive) and 1 (exclusive).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT RAND(6);``````sql\nSELECT RAND()*(10-5)+5;``````sql\nSELECT FLOOR(RAND()*(10-5+1)+5);```\u276e SQL Server Functions"
            }
        },
        "round": {
            "title": "ROUND",
            "url": "https://www.w3schools.com/sql/func_mysql_round.asp",
            "info": {
                "Definition and Usage": "The Round() function rounds a number to a specified number of decimal places.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT ROUND(235.415, 2, 1) AS RoundValue;``````sql\nSELECT ROUND(235.415, -1) AS RoundValue;```\u276e SQL Server Functions"
            }
        },
        "sign": {
            "title": "SIGN",
            "url": "https://www.w3schools.com/sql/func_mysql_sign.asp",
            "info": {
                "Definition and Usage": "The SIGN() function returns the sign of a number.This function will return one of the following:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SIGN(-12);```\u276e SQL Server Functions"
            }
        },
        "sin": {
            "title": "SIN",
            "url": "https://www.w3schools.com/sql/func_mysql_sin.asp",
            "info": {
                "Definition and Usage": "The SIN() function returns the sine of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SIN(-1);```\u276e SQL Server Functions"
            }
        },
        "sqrt": {
            "title": "SQRT",
            "url": "https://www.w3schools.com/sql/func_mysql_sqrt.asp",
            "info": {
                "Definition and Usage": "The SQRT() function returns the square root of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SQRT(13);```\u276e SQL Server Functions"
            }
        },
        "sum": {
            "title": "SUM",
            "url": "https://www.w3schools.com/sql/func_mysql_sum.asp",
            "info": {
                "Definition and Usage": "The Sum() function calculates the sum of a set of values.Note: NULL values are ignored.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "tan": {
            "title": "TAN",
            "url": "https://www.w3schools.com/sql/func_mysql_tan.asp",
            "info": {
                "Definition and Usage": "The TAN() function returns the tangent of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TAN(-3);```\u276e SQL Server Functions"
            }
        },
        "truncate": {
            "title": "TRUNCATE",
            "url": "https://www.w3schools.com/sql/func_mysql_truncate.asp",
            "info": {
                "Definition and Usage": "The TRUNCATE() function truncates a number to the specified number of decimal places.Note: See also the FLOOR(), CEIL(), CEILING(), and ROUND() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TRUNCATE(345.156, 0);```\u276e MySQL Functions"
            }
        },
        "adddate": {
            "title": "ADDDATE",
            "url": "https://www.w3schools.com/sql/func_mysql_adddate.asp",
            "info": {
                "Definition and Usage": "The ADDDATE() function adds a time/date interval to a date and then returns the date.",
                "Syntax": "OR:",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT ADDDATE(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);``````sql\nSELECT ADDDATE(\"2017-06-15 09:34:21\", INTERVAL -3 HOUR);``````sql\nSELECT ADDDATE(\"2017-06-15\", INTERVAL -2 MONTH);```\u276e MySQL Functions"
            }
        },
        "addtime": {
            "title": "ADDTIME",
            "url": "https://www.w3schools.com/sql/func_mysql_addtime.asp",
            "info": {
                "Definition and Usage": "The ADDTIME() function adds a time interval to a time/datetime and then returns the time/datetime.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"5.000003\");``````sql\nSELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"2:10:5.000003\");``````sql\nSELECT ADDTIME(\"2017-06-15 09:34:21.000001\", \"5 2:10:5.000003\");``````sql\nSELECT ADDTIME(\"09:34:21.000001\", \"2:10:5.000003\");```\u276e MySQL Functions"
            }
        },
        "curdate": {
            "title": "CURDATE",
            "url": "https://www.w3schools.com/sql/func_mysql_curdate.asp",
            "info": {
                "Definition and Usage": "The CURDATE() function returns the current date.Note: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric).Note: This function equals theCURRENT\\_DATE() function.",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CURDATE() + 1;```\u276e MySQL Functions"
            }
        },
        "current_date": {
            "title": "CURRENT_DATE",
            "url": "https://www.w3schools.com/sql/func_mysql_current_date.asp",
            "info": {
                "Definition and Usage": "The CURRENT\\_DATE() function returns the current date.Note: The date is returned as \"YYYY-MM-DD\" (string) or as YYYYMMDD (numeric).Note: This function equals the CURDATE() function.",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CURRENT_DATE() + 1;```\u276e MySQL Functions"
            }
        },
        "current_time": {
            "title": "CURRENT_TIME",
            "url": "https://www.w3schools.com/sql/func_mysql_current_time.asp",
            "info": {
                "Definition and Usage": "The CURRENT\\_TIME() function returns the current time.Note: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric).Note: This function equals theCURTIME() function.",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CURRENT_TIME() + 1;```\u276e MySQL Functions"
            }
        },
        "current_timestamp": {
            "title": "CURRENT_TIMESTAMP",
            "url": "https://www.w3schools.com/sql/func_mysql_current_timestamp.asp",
            "info": {
                "Definition and Usage": "The CURRENT\\_TIMESTAMP function returns the current date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format.Tip: Also look at the GETDATE() function.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions",
                "More Examples": "```sql\nSELECT CURRENT_TIMESTAMP() + 1;```\u276e MySQL Functions"
            }
        },
        "curtime": {
            "title": "CURTIME",
            "url": "https://www.w3schools.com/sql/func_mysql_curtime.asp",
            "info": {
                "Definition and Usage": "The CURTIME() function returns the current time.Note: The time is returned as \"HH-MM-SS\" (string) or as HHMMSS.uuuuuu (numeric).Note: This function equals the CURRENT\\_TIME() function.",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CURTIME() + 1;```\u276e MySQL Functions"
            }
        },
        "date": {
            "title": "DATE",
            "url": "https://www.w3schools.com/sql/func_mysql_date.asp",
            "info": {
                "Definition and Usage": "The Date() function returns the current system date.",
                "Syntax": "",
                "Parameter Values": "None.",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT DATE(\"2017-06-15 09:34:21\");``````sql\nSELECT DATE(\"The date is 2017-06-15\");``````sql\nSELECT DATE(OrderDate) FROM Orders;```\u276e MySQL Functions"
            }
        },
        "datediff": {
            "title": "DATEDIFF",
            "url": "https://www.w3schools.com/sql/func_mysql_datediff.asp",
            "info": {
                "Definition and Usage": "The DateDiff() function returns the difference between two dates.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DateDiff(\"m\", #13/01/1998#, #09/05/2017#);``````sql\nSELECT DateDiff(\"d\", #13/01/1998#, Date());```\u276e MS Access Functions"
            }
        },
        "date_add": {
            "title": "DATE_ADD",
            "url": "https://www.w3schools.com/sql/func_mysql_date_add.asp",
            "info": {
                "Definition and Usage": "The DATE\\_ADD() function adds a time/date interval to a date and then returns the date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DATE_ADD(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);``````sql\nSELECT DATE_ADD(\"2017-06-15 09:34:21\", INTERVAL -3 HOUR);``````sql\nSELECT DATE_ADD(\"2017-06-15\", INTERVAL -2 MONTH);```\u276e MySQL Functions"
            }
        },
        "date_format": {
            "title": "DATE_FORMAT",
            "url": "https://www.w3schools.com/sql/func_mysql_date_format.asp",
            "info": {
                "Definition and Usage": "The DATE\\_FORMAT() function formats a date as specified.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DATE_FORMAT(\"2017-06-15\", \"%M %d %Y\");``````sql\nSELECT DATE_FORMAT(\"2017-06-15\", \"%W %M %e %Y\");``````sql\nSELECT DATE_FORMAT(BirthDate, \"%W %M %e %Y\") FROM Employees;```\u276e MySQL Functions"
            }
        },
        "date_sub": {
            "title": "DATE_SUB",
            "url": "https://www.w3schools.com/sql/func_mysql_date_sub.asp",
            "info": {
                "Definition and Usage": "The DATE\\_SUB() function subtracts a time/date interval from a date and then returns the date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DATE_SUB(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);``````sql\nSELECT DATE_SUB(\"2017-06-15 09:34:21\", INTERVAL 3 HOUR);``````sql\nSELECT DATE_SUB(\"2017-06-15\", INTERVAL -2 MONTH);```\u276e MySQL Functions"
            }
        },
        "day": {
            "title": "DAY",
            "url": "https://www.w3schools.com/sql/func_mysql_day.asp",
            "info": {
                "Definition and Usage": "The Day() function returns the day of the month for a given date.This function returns an integer between 1 and 31.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Day(Date());``````sql\nSELECT Day(BirthDate) FROM Employees;```\u276e MS Access Functions"
            }
        },
        "dayname": {
            "title": "DAYNAME",
            "url": "https://www.w3schools.com/sql/func_mysql_dayname.asp",
            "info": {
                "Definition and Usage": "The DAYNAME() function returns the weekday name for a given date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DAYNAME(\"2017-06-15 09:34:21\");``````sql\nSELECT DAYNAME(CURDATE());```\u276e MySQL Functions"
            }
        },
        "dayofmonth": {
            "title": "DAYOFMONTH",
            "url": "https://www.w3schools.com/sql/func_mysql_dayofmonth.asp",
            "info": {
                "Definition and Usage": "The DAYOFMONTH() function returns the day of the month for a given date (a number from 1 to 31).Note: This function equals the DAY() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DAYOFMONTH(\"2017-06-15 09:34:21\");``````sql\nSELECT DAYOFMONTH(CURDATE());```\u276e MySQL Functions"
            }
        },
        "dayofweek": {
            "title": "DAYOFWEEK",
            "url": "https://www.w3schools.com/sql/func_mysql_dayofweek.asp",
            "info": {
                "Definition and Usage": "The DAYOFWEEK() function returns the weekday index for a given date (a number from 1 to 7).Note: 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DAYOFWEEK(\"2017-06-15 09:34:21\");``````sql\nSELECT DAYOFWEEK(CURDATE());```\u276e MySQL Functions"
            }
        },
        "dayofyear": {
            "title": "DAYOFYEAR",
            "url": "https://www.w3schools.com/sql/func_mysql_dayofyear.asp",
            "info": {
                "Definition and Usage": "The DAYOFYEAR() function returns the day of the year for a given date (a number from 1 to 366).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DAYOFYEAR(\"2017-01-01\");``````sql\nSELECT DAYOFYEAR(CURDATE());```\u276e MySQL Functions"
            }
        },
        "extract": {
            "title": "EXTRACT",
            "url": "https://www.w3schools.com/sql/func_mysql_extract.asp",
            "info": {
                "Definition and Usage": "The EXTRACT() function extracts a part from a given date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT EXTRACT(WEEK FROM \"2017-06-15\");``````sql\nSELECT EXTRACT(MINUTE FROM \"2017-06-15 09:34:21\");``````sql\nSELECT EXTRACT(YEAR_MONTH FROM \"2017-06-15 09:34:21\");```\u276e MySQL Functions"
            }
        },
        "from_days": {
            "title": "FROM_DAYS",
            "url": "https://www.w3schools.com/sql/func_mysql_from_days.asp",
            "info": {
                "Definition and Usage": "The FROM\\_DAYS() function returns a date from a numeric datevalue.The FROM\\_DAYS() function is to be used only with dates within the Gregorian calendar.Note: This function is the opposite of theTO\\_DAYS() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT FROM_DAYS(780500);```\u276e MySQL Functions"
            }
        },
        "hour": {
            "title": "HOUR",
            "url": "https://www.w3schools.com/sql/func_mysql_hour.asp",
            "info": {
                "Definition and Usage": "The Hour() function returns the hour part of a time/datetime.This function returns an integer between 0 and 23.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Hour(Now());``````sql\nSELECT Hour(#24/10/2016 11:18:34 PM#);```\u276e MS Access Functions"
            }
        },
        "last_day": {
            "title": "LAST_DAY",
            "url": "https://www.w3schools.com/sql/func_mysql_last_day.asp",
            "info": {
                "Definition and Usage": "The LAST\\_DAY() function extracts the last day of the month for a given date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LAST_DAY(\"2017-02-10 09:34:00\");```\u276e MySQL Functions"
            }
        },
        "localtime": {
            "title": "LOCALTIME",
            "url": "https://www.w3schools.com/sql/func_mysql_localtime.asp",
            "info": {
                "Definition and Usage": "The LOCALTIME() function returns the current date and time.Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LOCALTIME() + 1;```\u276e MySQL Functions"
            }
        },
        "localtimestamp": {
            "title": "LOCALTIMESTAMP",
            "url": "https://www.w3schools.com/sql/func_mysql_localtimestamp.asp",
            "info": {
                "Definition and Usage": "The LOCALTIMESTAMP() function returns the current date and time.Note: The date and time is returned as \"YYYY-MM-DD HH-MM-SS\" (string) or as YYYYMMDDHHMMSS.uuuuuu (numeric).",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT LOCALTIMESTAMP() + 1;```\u276e MySQL Functions"
            }
        },
        "makedate": {
            "title": "MAKEDATE",
            "url": "https://www.w3schools.com/sql/func_mysql_makedate.asp",
            "info": {
                "Definition and Usage": "The MAKEDATE() function creates and returns a date based on a year and a number of days value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT MAKEDATE(2017, 175);``````sql\nSELECT MAKEDATE(2017, 100);``````sql\nSELECT MAKEDATE(2017, 366);```\u276e MySQL Functions"
            }
        },
        "maketime": {
            "title": "MAKETIME",
            "url": "https://www.w3schools.com/sql/func_mysql_maketime.asp",
            "info": {
                "Definition and Usage": "The MAKETIME() function creates and returns a time based on an hour, minute, and second value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT MAKETIME(16, 1, 0);``````sql\nSELECT MAKETIME(21, 59, 59);``````sql\nSELECT MAKETIME(838, 59, 59);```\u276e MySQL Functions"
            }
        },
        "microsecond": {
            "title": "MICROSECOND",
            "url": "https://www.w3schools.com/sql/func_mysql_microsecond.asp",
            "info": {
                "Definition and Usage": "The MICROSECOND() function returns the microsecond part of a time/datetime (from 0 to 999999).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT MICROSECOND(\"23:59:59.000045\");```\u276e MySQL Functions"
            }
        },
        "minute": {
            "title": "MINUTE",
            "url": "https://www.w3schools.com/sql/func_mysql_minute.asp",
            "info": {
                "Definition and Usage": "The Minute() function returns the minute part of a time/datetime.This function returns an integer between 0 and 59.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Minute(Now());``````sql\nSELECT Minute(#24/10/2016 11:18:34 PM#);```\u276e MS Access Functions"
            }
        },
        "month": {
            "title": "MONTH",
            "url": "https://www.w3schools.com/sql/func_mysql_month.asp",
            "info": {
                "Definition and Usage": "The Month() function returns the month part for a given date.This function returns an integer between 1 and 12.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Month(Date());``````sql\nSELECT Month(BirthDate) FROM Employees;```\u276e MS Access Functions"
            }
        },
        "monthname": {
            "title": "MONTHNAME",
            "url": "https://www.w3schools.com/sql/func_mysql_monthname.asp",
            "info": {
                "Definition and Usage": "The MonthName() function returns the name of the month based on a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT WeekdayName(3, true);```\u276e MS Access Functions"
            }
        },
        "now": {
            "title": "NOW",
            "url": "https://www.w3schools.com/sql/func_mysql_now.asp",
            "info": {
                "Definition and Usage": "The Now() function returns the current date and time based on the computer's system date and time.",
                "Syntax": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT NOW() + 1;```\u276e MySQL Functions",
                "Parameter Values": "None."
            }
        },
        "period_add": {
            "title": "PERIOD_ADD",
            "url": "https://www.w3schools.com/sql/func_mysql_period_add.asp",
            "info": {
                "Definition and Usage": "The PERIOD\\_ADD() function adds a specified number of months to a period.The PERIOD\\_ADD() function will return the result formatted as YYYYMM.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT PERIOD_ADD(201703, 15);``````sql\nSELECT PERIOD_ADD(201703, -2);```\u276e MySQL Functions"
            }
        },
        "period_diff": {
            "title": "PERIOD_DIFF",
            "url": "https://www.w3schools.com/sql/func_mysql_period_diff.asp",
            "info": {
                "Definition and Usage": "The PERIOD\\_DIFF() function returns the difference between two periods. The result will be in months.Note: period1 and period2 should be in the same format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT PERIOD_DIFF(201703, 201803);``````sql\nSELECT PERIOD_DIFF(1703, 1612);```\u276e MySQL Functions"
            }
        },
        "quarter": {
            "title": "QUARTER",
            "url": "https://www.w3schools.com/sql/func_mysql_quarter.asp",
            "info": {
                "Definition and Usage": "The QUARTER() function returns the quarter of the year for a given date value (a number from 1 to 4).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT QUARTER(\"2017-01-01 09:34:21\");``````sql\nSELECT QUARTER(CURDATE());```\u276e MySQL Functions"
            }
        },
        "second": {
            "title": "SECOND",
            "url": "https://www.w3schools.com/sql/func_mysql_second.asp",
            "info": {
                "Definition and Usage": "The Second() function returns the seconds part of a time/datetime.This function returns an integer between 0 and 59.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Second(Now());``````sql\nSELECT Second(#24/10/2016 11:18:34 PM#);```\u276e MS Access Functions"
            }
        },
        "sec_to_time": {
            "title": "SEC_TO_TIME",
            "url": "https://www.w3schools.com/sql/func_mysql_sec_to_time.asp",
            "info": {
                "Definition and Usage": "The SEC\\_TO\\_TIME() function returns a time value (in format HH:MM:SS) based on the specified seconds.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SEC_TO_TIME(-6897);```\u276e MySQL Functions"
            }
        },
        "str_to_date": {
            "title": "STR_TO_DATE",
            "url": "https://www.w3schools.com/sql/func_mysql_str_to_date.asp",
            "info": {
                "Definition and Usage": "The STR\\_TO\\_DATE() function returns a date based on a string and a format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT STR_TO_DATE(\"August,5,2017\", \"%M %e %Y\");``````sql\nSELECT STR_TO_DATE(\"Monday, August 14, 2017\", \"%W %M %e %Y\");``````sql\nSELECT STR_TO_DATE(\"2017,8,14 10,40,10\", \"%Y,%m,%d %h,%i,%s\");```\u276e MySQL Functions"
            }
        },
        "subdate": {
            "title": "SUBDATE",
            "url": "https://www.w3schools.com/sql/func_mysql_subdate.asp",
            "info": {
                "Definition and Usage": "The SUBDATE() function subtracts a time/date interval from a date and then returns the date.",
                "Syntax": "OR:",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SUBDATE(\"2017-06-15 09:34:21\", INTERVAL 15 MINUTE);``````sql\nSELECT SUBDATE(\"2017-06-15 09:34:21\", INTERVAL 3 HOUR);``````sql\nSELECT SUBDATE(\"2017-06-15\", INTERVAL -2 MONTH);```\u276e MySQL Functions"
            }
        },
        "subtime": {
            "title": "SUBTIME",
            "url": "https://www.w3schools.com/sql/func_mysql_subtime.asp",
            "info": {
                "Definition and Usage": "The SUBTIME() function subtracts time from a time/datetime expression and then returns the new time/datetime.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SUBTIME(\"2017-06-15 10:24:21.000004\", \"3:2:5.000001\");``````sql\nSELECT SUBTIME(\"10:24:21\", \"5\");``````sql\nSELECT SUBTIME(\"10:24:21\", \"300\");``````sql\nSELECT SUBTIME(\"10:24:21\", \"-3:2:5\");```\u276e MySQL Functions"
            }
        },
        "sysdate": {
            "title": "SYSDATE",
            "url": "https://www.w3schools.com/sql/func_mysql_sysdate.asp",
            "info": {
                "Definition and Usage": "The SYSDATE() function returns the current date and time.Note: The date and time is returned as \"YYYY-MM-DD HH:MM:SS\" (string) or as YYYYMMDDHHMMSS (numeric).",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SYSDATE() + 1;```\u276e MySQL Functions"
            }
        },
        "time": {
            "title": "TIME",
            "url": "https://www.w3schools.com/sql/func_mysql_time.asp",
            "info": {
                "Definition and Usage": "The Time() function returns the current system time.",
                "Syntax": "",
                "Parameter Values": "None.",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT TIME(\"2017-08-15 19:30:10\");``````sql\nSELECT TIME(\"2017-08-15 19:30:10.000001\");``````sql\nSELECT TIME(NULL);```\u276e MySQL Functions"
            }
        },
        "time_format": {
            "title": "TIME_FORMAT",
            "url": "https://www.w3schools.com/sql/func_mysql_time_format.asp",
            "info": {
                "Definition and Usage": "The TIME\\_FORMAT() function formats a time by a specified format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TIME_FORMAT(\"19:30:10\", \"%h %i %s %p\");``````sql\nSELECT TIME_FORMAT(\"19:30:10\", \"%r\");``````sql\nSELECT TIME_FORMAT(\"19:30:10\", \"%T\");```\u276e MySQL Functions"
            }
        },
        "time_to_sec": {
            "title": "TIME_TO_SEC",
            "url": "https://www.w3schools.com/sql/func_mysql_time_to_sec.asp",
            "info": {
                "Definition and Usage": "The TIME\\_TO\\_SEC() function converts a time value into seconds.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TIME_TO_SEC(\"00:00:05\");``````sql\nSELECT TIME_TO_SEC(\"03:30:00.999999\");``````sql\nSELECT TIME_TO_SEC(\"-03:30:00\");```\u276e MySQL Functions"
            }
        },
        "timediff": {
            "title": "TIMEDIFF",
            "url": "https://www.w3schools.com/sql/func_mysql_timediff.asp",
            "info": {
                "Definition and Usage": "The TIMEDIFF() function returns the difference between two time/datetime expressions.Note: time1 and time2 should be in the same format, and the calculation is time1 - time2.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TIMEDIFF(\"2017-06-25 13:10:11\", \"2017-06-15 13:10:10\");```\u276e MySQL Functions"
            }
        },
        "timestamp": {
            "title": "TIMESTAMP",
            "url": "https://www.w3schools.com/sql/func_mysql_timestamp.asp",
            "info": {
                "Definition and Usage": "The TIMESTAMP() function returns a datetime value based on a date or datetime value.Note: If there are specified two arguments with this function, it first adds the second argument to the first, and then returns a datetime value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TIMESTAMP(\"2017-07-23\");```\u276e MySQL Functions"
            }
        },
        "to_days": {
            "title": "TO_DAYS",
            "url": "https://www.w3schools.com/sql/func_mysql_to_days.asp",
            "info": {
                "Definition and Usage": "The TO\\_DAYS() function returns the number of days between a date and year 0 (date \"0000-00-00\").The TO\\_DAYS() function can be used only with dates within the Gregorian calendar.Note: This function is the opposite of the FROM\\_DAYS() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TO_DAYS(\"2017-06-20 09:34:00\");```\u276e MySQL Functions"
            }
        },
        "week": {
            "title": "WEEK",
            "url": "https://www.w3schools.com/sql/func_mysql_week.asp",
            "info": {
                "Definition and Usage": "The WEEK() function returns the week number for a given date (a number from 0 to 53).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT WEEK(\"2017-10-25\");``````sql\nSELECT WEEK(CURDATE());```\u276e MySQL Functions"
            }
        },
        "weekday": {
            "title": "WEEKDAY",
            "url": "https://www.w3schools.com/sql/func_mysql_weekday.asp",
            "info": {
                "Definition and Usage": "The Weekday() function returns the weekday number for a given date.This function returns an integer between 1 and 7.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Weekday(Date());``````sql\nSELECT Weekday(#05/17/2017#, 2);```\u276e MS Access Functions"
            }
        },
        "weekofyear": {
            "title": "WEEKOFYEAR",
            "url": "https://www.w3schools.com/sql/func_mysql_weekofyear.asp",
            "info": {
                "Definition and Usage": "The WEEKOFYEAR() function returns the week number for a given date (a number from 1 to 53).Note: This function assumes that the first day of the week is Monday and the first week of the year has more than 3 days.Tip: Also look at the WEEK() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT WEEKOFYEAR(\"2017-01-01\");``````sql\nSELECT WEEKOFYEAR(CURDATE());```\u276e MySQL Functions"
            }
        },
        "year": {
            "title": "YEAR",
            "url": "https://www.w3schools.com/sql/func_mysql_year.asp",
            "info": {
                "Definition and Usage": "The Year() function returns the year part of a given date.This function returns an integer between 100 and 9999.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Year(Date());``````sql\nSELECT Year(BirthDate) FROM Employees;```\u276e MS Access Functions"
            }
        },
        "yearweek": {
            "title": "YEARWEEK",
            "url": "https://www.w3schools.com/sql/func_mysql_yearweek.asp",
            "info": {
                "Definition and Usage": "The YEARWEEK() function returns the year and week number (a number from 0 to 53) for a given date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT YEARWEEK(\"2017-10-25\");``````sql\nSELECT YEARWEEK(CURDATE());```\u276e MySQL Functions"
            }
        },
        "bin": {
            "title": "BIN",
            "url": "https://www.w3schools.com/sql/func_mysql_bin.asp",
            "info": {
                "Definition and Usage": "The BIN() function returns a binary representation of a number, as a string value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT BIN(111);``````sql\nSELECT BIN(8);```\u276e MySQL Functions"
            }
        },
        "binary": {
            "title": "BINARY",
            "url": "https://www.w3schools.com/sql/func_mysql_binary.asp",
            "info": {
                "Definition and Usage": "The BINARY function converts a value to a binary string.This function is equivalent to using CAST(value AS BINARY).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT \"HELLO\" = \"hello\";``````sql\nSELECT BINARY \"HELLO\" = \"hello\";```\u276e MySQL Functions"
            }
        },
        "cast": {
            "title": "CAST",
            "url": "https://www.w3schools.com/sql/func_mysql_cast.asp",
            "info": {
                "Definition and Usage": "The CAST() function converts a value (of any type) into a specified datatype.Tip: Also look at the CONVERT() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CAST(25.65 AS varchar);``````sql\nSELECT CAST('2017-08-25' AS datetime);```\u276e SQL Server Functions"
            }
        },
        "coalesce": {
            "title": "COALESCE",
            "url": "https://www.w3schools.com/sql/func_mysql_coalesce.asp",
            "info": {
                "Definition and Usage": "The COALESCE() function returns the first non-null value in a list.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT COALESCE(NULL, 1, 2, 'W3Schools.com');```\u276e SQL Server Functions"
            }
        },
        "connection_id": {
            "title": "CONNECTION_ID",
            "url": "https://www.w3schools.com/sql/func_mysql_connection_id.asp",
            "info": {
                "Definition and Usage": "The CONNECTION\\_ID() function returns the unique connection ID for the current connection.",
                "Syntax": "",
                "Technical Details": "\u276e MySQL Functions"
            }
        },
        "conv": {
            "title": "CONV",
            "url": "https://www.w3schools.com/sql/func_mysql_conv.asp",
            "info": {
                "Definition and Usage": "The CONV() function converts a number from one numeric base system to another, and returns the result as a string value.Note: This function returns NULL if any of the parameters are NULL.Tip: Also look at the BIN() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CONV(1111, 2, 10);``````sql\nSELECT CONV(88, 10, 16);```\u276e MySQL Functions"
            }
        },
        "convert": {
            "title": "CONVERT",
            "url": "https://www.w3schools.com/sql/func_mysql_convert.asp",
            "info": {
                "Definition and Usage": "The CONVERT() function converts a value (of any type) into a specified datatype.Tip: Also look at the CAST() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CONVERT(varchar, 25.65);``````sql\nSELECT CONVERT(datetime, '2017-08-25');``````sql\nSELECT CONVERT(varchar, '2017-08-25', 101);```\u276e SQL Server Functions"
            }
        },
        "current_user": {
            "title": "CURRENT_USER",
            "url": "https://www.w3schools.com/sql/func_mysql_current_user.asp",
            "info": {
                "Definition and Usage": "The CURRENT\\_USER function returns the name of the current user in the SQL Server database.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "if": {
            "title": "IF",
            "url": "https://www.w3schools.com/sql/func_mysql_if.asp",
            "info": {
                "Definition and Usage": "The IF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT IF(500<1000, 5, 10);``````sql\nSELECT IF(STRCMP(\"hello\",\"bye\") = 0, \"YES\", \"NO\");``````sql\nSELECT OrderID, Quantity, IF(Quantity>10, \"MORE\", \"LESS\")\nFROM OrderDetails;```\u276e MySQL Functions"
            }
        },
        "ifnull": {
            "title": "IFNULL",
            "url": "https://www.w3schools.com/sql/func_mysql_ifnull.asp",
            "info": {
                "Definition and Usage": "The IFNULL() function returns a specified value if the expression is NULL.If the expression is NOT NULL, this function returns the expression.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT IFNULL(\"Hello\", \"W3Schools.com\");``````sql\nSELECT IFNULL(NULL, 500);```\u276e MySQL Functions"
            }
        },
        "last_insert_id": {
            "title": "LAST_INSERT_ID",
            "url": "https://www.w3schools.com/sql/func_mysql_last_insert_id.asp",
            "info": {
                "Definition and Usage": "The LAST\\_INSERT\\_ID() function returns the AUTO\\_INCREMENT id of the last row that has been inserted or updated in a table.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MySQL Functions"
            }
        },
        "nullif": {
            "title": "NULLIF",
            "url": "https://www.w3schools.com/sql/func_mysql_nullif.asp",
            "info": {
                "Definition and Usage": "The NULLIF() function returns NULL if two expressions are equal, otherwise it returns the first expression.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT NULLIF('Hello', 'Hello');``````sql\nSELECT NULLIF('Hello', 'world');``````sql\nSELECT NULLIF('2017-08-25', '2017-08-25');```\u276e SQL Server Functions"
            }
        },
        "session_user": {
            "title": "SESSION_USER",
            "url": "https://www.w3schools.com/sql/func_mysql_session_user.asp",
            "info": {
                "Definition and Usage": "The SESSION\\_USER function returns the name of the current user in the SQL Server database.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "system_user": {
            "title": "SYSTEM_USER",
            "url": "https://www.w3schools.com/sql/func_mysql_system_user.asp",
            "info": {
                "Definition and Usage": "The SYSTEM\\_USER function returns the login name for the current user.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "user": {
            "title": "USER",
            "url": "https://www.w3schools.com/sql/func_mysql_user.asp",
            "info": {
                "Definition and Usage": "The USER() function returns the current user name and host name for the MySQL connection.Note: This function is equal to theSESSION\\_USER() function and theSYSTEM\\_USER() function.Tip: Also look at the CURRENT\\_USER() function.",
                "Syntax": "",
                "Technical Details": "\u276e MySQL Functions"
            }
        },
        "version": {
            "title": "VERSION",
            "url": "https://www.w3schools.com/sql/func_mysql_version.asp",
            "info": {
                "Definition and Usage": "The VERSION() function returns the current version of the MySQL database, as a string.",
                "Syntax": "",
                "Technical Details": "\u276e MySQL Functions"
            }
        },
        "serverfunctions": {
            "title": "SQL Server Functions",
            "url": "https://www.w3schools.com/sql/sql_ref_sqlserver.asp",
            "info": {
                "SQL Server String Functions": "",
                "SQL Server Math/Numeric Functions": "",
                "SQL Server Date Functions": "",
                "SQL Server Advanced Functions": ""
            }
        },
        "char": {
            "title": "CHAR",
            "url": "https://www.w3schools.com/sql/func_sqlserver_char.asp",
            "info": {
                "Definition and Usage": "The CHAR() function returns the character based on the ASCII code.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "charindex": {
            "title": "CHARINDEX",
            "url": "https://www.w3schools.com/sql/func_sqlserver_charindex.asp",
            "info": {
                "Definition and Usage": "The CHARINDEX() function searches for a substring in a string, and returns the position.If the substring is not found, this function returns 0. Note: This function performs a case-insensitive search.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT CHARINDEX('OM', 'Customer') AS MatchPosition;``````sql\nSELECT CHARINDEX('mer', 'Customer', 3) AS MatchPosition;```\u276e SQL Server Functions"
            }
        },
        "concatwith+": {
            "title": "Concat with +",
            "url": "https://www.w3schools.com/sql/func_sqlserver_concat_with_plus.asp",
            "info": {
                "Definition and Usage": "The + operator allows you to add two or more strings together.Note: See also the CONCAT() and CONCAT\\_WS() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT 'SQL' + ' is' + ' fun!';``````sql\nSELECT 'SQL' + ' ' + 'is' + ' ' + 'fun!';```\u276e SQL Server Functions"
            }
        },
        "datalength": {
            "title": "DATALENGTH",
            "url": "https://www.w3schools.com/sql/func_sqlserver_datalength.asp",
            "info": {
                "Definition and Usage": "The DATALENGTH() function returns the number of bytes used to represent an expression.Note: The DATALENGTH() function counts both leading and trailing spaces when calculating the length of the expression.Tip: Also see the LEN() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DATALENGTH('   W3Schools.com   ');``````sql\nSELECT DATALENGTH('2017-08');```\u276e SQL Server Functions"
            }
        },
        "difference": {
            "title": "DIFFERENCE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_difference.asp",
            "info": {
                "Definition and Usage": "The DIFFERENCE() function compares two SOUNDEX values, and returns an integer. The integer value indicates the match for the two SOUNDEX values, from 0 to 4.0 indicates weak or no similarity between the SOUNDEX values. 4 indicates strong similarity or identically SOUNDEX values.Tip: Also look at the SOUNDEX() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DIFFERENCE('Juice', 'Banana');```\u276e SQL Server Functions"
            }
        },
        "len": {
            "title": "LEN",
            "url": "https://www.w3schools.com/sql/func_sqlserver_len.asp",
            "info": {
                "Definition and Usage": "The Len() function returns the length of a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Len(CustomerName) AS LengthOfString\nFROM Customers;```\u276e MS Access Functions"
            }
        },
        "nchar": {
            "title": "NCHAR",
            "url": "https://www.w3schools.com/sql/func_sqlserver_nchar.asp",
            "info": {
                "Definition and Usage": "The NCHAR() function returns the Unicode character based on the number code.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "patindex": {
            "title": "PATINDEX",
            "url": "https://www.w3schools.com/sql/func_sqlserver_patindex.asp",
            "info": {
                "Definition and Usage": "The PATINDEX() function returns the position of a pattern in a string.If the pattern is not found, this function returns 0.Note: The search is case-insensitive and the first position in string is 1.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT PATINDEX('%s%com%', 'W3Schools.com');``````sql\nSELECT PATINDEX('%[ol]%', 'W3Schools.com');``````sql\nSELECT PATINDEX('%[z]%', 'W3Schools.com');```\u276e SQL Server Functions"
            }
        },
        "quotename": {
            "title": "QUOTENAME",
            "url": "https://www.w3schools.com/sql/func_sqlserver_quotename.asp",
            "info": {
                "Definition and Usage": "The QUOTENAME() function returns a Unicode string with delimiters added to make the string a valid SQL Server delimited identifier.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT QUOTENAME('abcdef', '()');```\u276e SQL Server Functions"
            }
        },
        "replicate": {
            "title": "REPLICATE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_replicate.asp",
            "info": {
                "Definition and Usage": "The REPLICATE() function repeats a string a specified number of times.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT REPLICATE(CustomerName, 2)\nFROM Customers;```\u276e SQL Server Functions"
            }
        },
        "soundex": {
            "title": "SOUNDEX",
            "url": "https://www.w3schools.com/sql/func_sqlserver_soundex.asp",
            "info": {
                "Definition and Usage": "The SOUNDEX() function returns a four-character code to evaluate the similarity of two expressions.Note: The SOUNDEX() converts the string to a four-character code based on how the string sounds when spoken.Tip: Also look at the DIFFERENCE() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SOUNDEX('Juice'), SOUNDEX('Banana');```\u276e SQL Server Functions"
            }
        },
        "str": {
            "title": "STR",
            "url": "https://www.w3schools.com/sql/func_sqlserver_str.asp",
            "info": {
                "Definition and Usage": "The Str() function returns a number as a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions",
                "More Examples": "```sql\nSELECT STR(185.5);``````sql\nSELECT STR(185.476, 6, 2);```\u276e SQL Server Functions"
            }
        },
        "stuff": {
            "title": "STUFF",
            "url": "https://www.w3schools.com/sql/func_sqlserver_stuff.asp",
            "info": {
                "Definition and Usage": "The STUFF() function deletes a part of a string and then inserts another part into the string, starting at a specified position.Tip: Also look at the REPLACE() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT STUFF('SQL Tutorial!', 13, 1, ' is fun!');```\u276e SQL Server Functions"
            }
        },
        "translate": {
            "title": "TRANSLATE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_translate.asp",
            "info": {
                "Definition and Usage": "The TRANSLATE() function returns the string from the first argument after the characters specified in the second argument are translated into the characters specified in the third argument.Note: The TRANSLATE() function will return an error if characters and translations have different lengths.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TRANSLATE('3*[2+1]/{8-4}', '[]{}', '()()'); // Results in 3*(2+1)/(8-4)```\u276e SQL Server Functions"
            }
        },
        "unicode": {
            "title": "UNICODE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_unicode.asp",
            "info": {
                "Definition and Usage": "The UNICODE() function returns an integer value (the Unicode value), for the first character of the input expression.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT UNICODE(CustomerName) AS UnicodeOfFirstChar\nFROM Customers;```\u276e SQL Server Functions"
            }
        },
        "atn2": {
            "title": "ATN2",
            "url": "https://www.w3schools.com/sql/func_sqlserver_atn2.asp",
            "info": {
                "Definition and Usage": "The ATN2() function returns the arc tangent of two numbers.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT ATN2(-0.8, 2);```\u276e SQL Server Functions"
            }
        },
        "square": {
            "title": "SQUARE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_square.asp",
            "info": {
                "Definition and Usage": "The SQUARE() function returns the square of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT SQUARE(13);```\u276e SQL Server Functions"
            }
        },
        "dateadd": {
            "title": "DATEADD",
            "url": "https://www.w3schools.com/sql/func_sqlserver_dateadd.asp",
            "info": {
                "Definition and Usage": "The DateAdd() function adds a time/date interval to a date and then returns the date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DateAdd(\"yyyy\", 1, Date());``````sql\nSELECT LastName, DateAdd(\"m\", 6, BirthDate) FROM Employees;```\u276e MS Access Functions"
            }
        },
        "datefromparts": {
            "title": "DATEFROMPARTS",
            "url": "https://www.w3schools.com/sql/func_sqlserver_datefromparts.asp",
            "info": {
                "Definition and Usage": "The DATEFROMPARTS() function returns a date from the specified parts (year, month, and day values).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "datename": {
            "title": "DATENAME",
            "url": "https://www.w3schools.com/sql/func_sqlserver_datename.asp",
            "info": {
                "Definition and Usage": "The DATENAME() function returns a specified part of a date.This function returns the result as a string value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DATENAME(yy, '2017/08/25') AS DatePartString;``````sql\nSELECT DATENAME(month, '2017/08/25') AS DatePartString;``````sql\nSELECT DATENAME(hour, '2017/08/25 08:36') AS DatePartString;``````sql\nSELECT DATENAME(minute, '2017/08/25 08:36') AS DatePartString;```\u276e SQL Server Functions"
            }
        },
        "datepart": {
            "title": "DATEPART",
            "url": "https://www.w3schools.com/sql/func_sqlserver_datepart.asp",
            "info": {
                "Definition and Usage": "The DatePart() function returns a specified part of a date, as an integer.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DatePart(\"m\", #09/05/2017#);``````sql\nSELECT DatePart(\"w\", Date());```\u276e MS Access Functions"
            }
        },
        "getdate": {
            "title": "GETDATE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_getdate.asp",
            "info": {
                "Definition and Usage": "The GETDATE() function returns the current database system date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format.Tip: Also look at theCURRENT\\_TIMESTAMP function.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "getutcdate": {
            "title": "GETUTCDATE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_getutcdate.asp",
            "info": {
                "Definition and Usage": "The GETUTCDATE() function returns the current database system UTC date and time, in a 'YYYY-MM-DD hh:mm:ss.mmm' format.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "isdate": {
            "title": "ISDATE",
            "url": "https://www.w3schools.com/sql/func_sqlserver_isdate.asp",
            "info": {
                "Definition and Usage": "The IsDate() function checks whether an expression can be converted to a date.This function returns a Boolean value. TRUE (-1) indicates that the expression is a valid date, and FALSE (0) indicates that the expression is not a valid date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECTIsDate(\"Hello\");``````sql\nSELECTIsDate(\"August 25, 2017\");``````sql\nSELECT IsDate(#25/8/2017#);```\u276e MS Access Functions"
            }
        },
        "sysdatetime": {
            "title": "SYSDATETIME",
            "url": "https://www.w3schools.com/sql/func_sqlserver_sysdatetime.asp",
            "info": {
                "Definition and Usage": "The SYSDATETIME() function returns the date and time of the computer where the SQL Server is running.",
                "Syntax": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "iif": {
            "title": "IIF",
            "url": "https://www.w3schools.com/sql/func_sqlserver_iif.asp",
            "info": {
                "Definition and Usage": "The IIF() function returns a value if a condition is TRUE, or another value if a condition is FALSE.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT IIF(500<1000, 5, 10);``````sql\nSELECT IIF(STRCMP(\"hello\",\"bye\") = 0, 'YES', 'NO');``````sql\nSELECT OrderID, Quantity, IIF(Quantity>10, 'MORE', 'LESS')\nFROM OrderDetails;```\u276e SQL Server Functions"
            }
        },
        "isnumeric": {
            "title": "ISNUMERIC",
            "url": "https://www.w3schools.com/sql/func_sqlserver_isnumeric.asp",
            "info": {
                "Definition and Usage": "The IsNumeric() function checks whether an expression is a valid number.This function returns a Boolean value. TRUE (-1) indicates that the expression is a valid number, and FALSE (0) indicates that the expression is not a valid number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT IsNumeric(\"Hello\");``````sql\nSELECT IsNumeric(\"1030\");```\u276e MS Access Functions"
            }
        },
        "sessionproperty": {
            "title": "SESSIONPROPERTY",
            "url": "https://www.w3schools.com/sql/func_sqlserver_sessionproperty.asp",
            "info": {
                "Definition and Usage": "The SESSIONPROPERTY() function returns the session settings for a specified option.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e SQL Server Functions"
            }
        },
        "user_name": {
            "title": "USER_NAME",
            "url": "https://www.w3schools.com/sql/func_sqlserver_user_name.asp",
            "info": {
                "Definition and Usage": "The USER\\_NAME() function returns the database user name based on the specified id.If no id is specified, this function will return the name of the current user.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT USER_NAME(1);```\u276e SQL Server Functions"
            }
        },
        "msaccessfunctions": {
            "title": "MS Access Functions",
            "url": "https://www.w3schools.com/sql/sql_ref_msaccess.asp",
            "info": {
                "MS Access String Functions": "",
                "MS Access Numeric Functions": "",
                "MS Access Date Functions": "",
                "MS Access Some Other Functions": ""
            }
        },
        "chr": {
            "title": "Chr",
            "url": "https://www.w3schools.com/sql/func_msaccess_chr.asp",
            "info": {
                "Definition and Usage": "The Chr() function returns the character for the specified ASCII number code.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "concatwith&": {
            "title": "Concat with &",
            "url": "https://www.w3schools.com/sql/func_msaccess_concat.asp",
            "info": {
                "Definition and Usage": "The & operator allows you to add two or more strings together.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "curdir": {
            "title": "CurDir",
            "url": "https://www.w3schools.com/sql/func_msaccess_curdir.asp",
            "info": {
                "Definition and Usage": "The CurDir() function returns the full path for a specified drive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "instrrev": {
            "title": "InstrRev",
            "url": "https://www.w3schools.com/sql/func_msaccess_instrrev.asp",
            "info": {
                "Definition and Usage": "The InstrRev() function gets the position of the first occurrence of a string in another, from the end of string.This function performs a case-insensitive search. ",
                "Syntax": "",
                "Parameter Values": "",
                "Return Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "split": {
            "title": "Split",
            "url": "https://www.w3schools.com/sql/func_msaccess_split.asp",
            "info": {
                "Definition and Usage": "The Split() function splits a string into an array of strings.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "strcomp": {
            "title": "StrComp",
            "url": "https://www.w3schools.com/sql/func_msaccess_strcomp.asp",
            "info": {
                "Definition and Usage": "The StrComp() function compares two strings.The result is returned as an integer based on the comparison:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT StrComp(\"SQL Tutorial\", \"SQL\") AS CompString;``````sql\nSELECT StrComp(\"SQL\", \"SQL Tutorial\") AS CompString;```\u276e MS Access Functions"
            }
        },
        "strconv": {
            "title": "StrConv",
            "url": "https://www.w3schools.com/sql/func_msaccess_strconv.asp",
            "info": {
                "Definition and Usage": "The StrConv() function returns a converted string.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT StrConv(\"SQL Tutorial is cool\", 2) AS ConvertedString;``````sql\nSELECT StrConv(\"SQL Tutorial is cool\", 3) AS ConvertedString;```\u276e MS Access Functions"
            }
        },
        "strreverse": {
            "title": "StrReverse",
            "url": "https://www.w3schools.com/sql/func_msaccess_strreverse.asp",
            "info": {
                "Definition and Usage": "The StrReverse() function reverses a string and returns the result.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "atn": {
            "title": "Atn",
            "url": "https://www.w3schools.com/sql/func_msaccess_atn.asp",
            "info": {
                "Definition and Usage": "The Atn() function returns the arc tangent of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "fix": {
            "title": "Fix",
            "url": "https://www.w3schools.com/sql/func_msaccess_fix.asp",
            "info": {
                "Definition and Usage": "The Fix() function returns the integer part of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Fix(Price) AS FixNum FROM Products;```\u276e MS Access Functions"
            }
        },
        "int": {
            "title": "Int",
            "url": "https://www.w3schools.com/sql/func_msaccess_int.asp",
            "info": {
                "Definition and Usage": "The Int() function returns the integer part of a number.Note: If number is negative, this function returns the first negative integer less than or equal to number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT Int(Price) AS IntNum FROM Products;```\u276e MS Access Functions"
            }
        },
        "randomize": {
            "title": "Randomize",
            "url": "https://www.w3schools.com/sql/func_msaccess_randomize.asp",
            "info": {
                "Definition and Usage": "The Randomize() function initializes the random number generator (used byRnd()) with a seed.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "rnd": {
            "title": "Rnd",
            "url": "https://www.w3schools.com/sql/func_msaccess_rnd.asp",
            "info": {
                "Definition and Usage": "The Rnd function returns a random number.Note: If you do not call the Randomize() function before calling the Rnd function, the Rnd function may return the same random number each time!",
                "Syntax": "To return a random integer less than 1, but greater than or equal to zero:To return a random integer in a given range, use this formula:",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "sgn": {
            "title": "Sgn",
            "url": "https://www.w3schools.com/sql/func_msaccess_sgn.asp",
            "info": {
                "Definition and Usage": "The Sgn() function returns the sign of a number.This function will return one of the following:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "sqr": {
            "title": "Sqr",
            "url": "https://www.w3schools.com/sql/func_msaccess_sqr.asp",
            "info": {
                "Definition and Usage": "The Sqr() function returns the square root of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "val": {
            "title": "Val",
            "url": "https://www.w3schools.com/sql/func_msaccess_val.asp",
            "info": {
                "Definition and Usage": "The Val() function reads a string and returns the numbers found in the string.Note: This function stops reading once it encounters a NON-numeric character.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "dateserial": {
            "title": "DateSerial",
            "url": "https://www.w3schools.com/sql/func_msaccess_dateserial.asp",
            "info": {
                "Definition and Usage": "The DateSerial() function returns a date from the specified parts (year, month, and day values).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DateSerial(2017-10, 4-1, 20-5);```\u276e MS Access Functions"
            }
        },
        "datevalue": {
            "title": "DateValue",
            "url": "https://www.w3schools.com/sql/func_msaccess_datevalue.asp",
            "info": {
                "Definition and Usage": "The DateValue() function returns a date based on a string.Note: If the given string does not include a year component, this function will use the current year.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT DateValue(\"May 17\");```\u276e MS Access Functions"
            }
        },
        "timeserial": {
            "title": "TimeSerial",
            "url": "https://www.w3schools.com/sql/func_msaccess_timeserial.asp",
            "info": {
                "Definition and Usage": "The TimeSerial() function returns a time from the specified parts (hour, minute, and second value).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TimeSerial(12-2, 40-5, 20-5);```\u276e MS Access Functions"
            }
        },
        "timevalue": {
            "title": "TimeValue",
            "url": "https://www.w3schools.com/sql/func_msaccess_timevalue.asp",
            "info": {
                "Definition and Usage": "The TimeValue() function returns a time based on a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT TimeValue(\"5:15:38 PM\");```\u276e MS Access Functions"
            }
        },
        "weekdayname": {
            "title": "WeekdayName",
            "url": "https://www.w3schools.com/sql/func_msaccess_weekdayname.asp",
            "info": {
                "Definition and Usage": "The WeekdayName() function returns the weekday name based on a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```sql\nSELECT WeekdayName(3, true);``````sql\nSELECT WeekdayName(3, true, 2);```\u276e MS Access Functions"
            }
        },
        "currentuser": {
            "title": "CurrentUser",
            "url": "https://www.w3schools.com/sql/func_msaccess_currentuser.asp",
            "info": {
                "Definition and Usage": "The CurrentUser() function returns the name of the current database user.",
                "Syntax": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "environ": {
            "title": "Environ",
            "url": "https://www.w3schools.com/sql/func_msaccess_environ.asp",
            "info": {
                "Definition and Usage": "The Environ() function returns a string that contains the value of an operating system environment variable.",
                "Syntax": "OR:",
                "Parameter Values": "",
                "Technical Details": "\u276e MS Access Functions"
            }
        },
        "operators": {
            "title": "SQL Operators",
            "url": "https://www.w3schools.com/sql/sql_operators.asp",
            "info": {
                "SQL Arithmetic Operators": "",
                "SQL Bitwise Operators": "",
                "SQL Comparison Operators": "",
                "SQL Compound Operators": "",
                "SQL Logical Operators": ""
            }
        },
        "datatypes": {
            "title": "SQL Data Types",
            "url": "https://www.w3schools.com/sql/sql_datatypes.asp",
            "info": {
                "SQL Data Types": "Each column in a database table is required to have a name and a data type.An SQL developer must decide what type of data that will be stored inside each column when creating a table. The data type is a guideline for SQL to understand what type of data is expected inside of each column, and it also identifies how SQL will interact with the stored data.",
                "MySQL Data Types (Version 8.0)": "In MySQL there are three main data types: string, numeric, and date and time.Note: All the numeric data types may have an extra option: UNSIGNED or ZEROFILL. If you add the UNSIGNED option, MySQL disallows negative values for the column. If you add the ZEROFILL option, MySQL automatically also adds the UNSIGNED attribute to the column.",
                "SQL Server Data Types": "",
                "Microsoft Access Data Types": ""
            }
        },
        "quickref": {
            "title": "SQL Quick Ref",
            "url": "https://www.w3schools.com/sql/sql_quickref.asp",
            "info": {}
        }
    },
    "react": {
        "getstarted": {
            "title": "React Get Started",
            "url": "https://www.w3schools.com/react/react_getstarted.asp",
            "info": {
                "React Directly in HTML": "The quickest way start learning React is to write React directly in your HTML files.Start by including three scripts, the first two let us write React code in our JavaScripts, and the third, Babel, allows us to write JSX syntax and ES6 in older browsers.You will learn more about JSX in the React JSX chapter.```react\n<!DOCTYPE html>\r\n<html><script src=\"https://unpkg.com/react@16/umd/react.production.min.js\"></script><script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script><script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script><body>  <div id=\"mydiv\"></div>\r\n  <script type=\"text/babel\">    class Hello extends React.Component {      render() {        return <h1>Hello World!</h1>      }    }\r\n    ReactDOM.render(<Hello />, document.getElementById('mydiv'))  </script></body>\r\n</html>```This way of using React can be OK for testing purposes, but for production you will need to set up a React environment.",
                "Setting up a React Environment": "If you have NPM and Node.js installed, you can create a React application by first installing the create-react-app.Install create-react-app by running this command in your terminal:```react\nC:\\Users\\Your Name>npm install -g create-react-app```Then you are able to create a React application, let's create one called myfirstreact.Run this command to create a React application namedmyfirstreact:```react\nC:\\Users\\Your Name>npx create-react-app myfirstreact```The create-react-app will set up everything you need to run a React application.",
                "Run the React Application": "Now you are ready to run your first real React application!Run this command to move to the myfirstreact directory:```react\nC:\\Users\\Your Name>cd myfirstreact```Run this command to run the React application myfirstreact:```react\nC:\\Users\\Your Name\\myfirstreact>npm start```A new browser window will pop up with your newly created React App! If not, open your browser and type localhost:3000 in the address bar.The result:",
                "Modify the React Application": "So far so good, but how do I change the content?Look in the myfirstreact directory, and you will find a src folder. Inside thesrc folder there is a file called App.js, open it and it will look like this:```react\nimport React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {render() {  return (    <div className=\"App\">      <header className=\"App-header\">        <img src={logo} className=\"App-logo\" alt=\"logo\" />        <p>          Edit <code>src/App.js</code> and save to reload.        </p>        <a          className=\"App-link\"          href=\"https://reactjs.org\"          target=\"_blank\"          rel=\"noopener noreferrer\"        >          Learn React        </a>      </header>    </div>  );}\r\n}\r\n\r\nexport default App;```Try changing the HTML content and save the file.The result:",
                "What's Next?": "Now you have a React Environment on your computer, and you are ready to learn more about React.In the rest of this tutorial we will use our Show React tool to explain the various aspects of React, and how they are displayed in the browser.If you want to follow the same steps on your computer, start by stripping down the src folder to only contain two files: index.js andindex.html, in some builds you might find the index.html in the public folder instead, you should also remove any unnecessary lines of code inside the two files to make them look like the files in the Show React tool below:```react\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst myfirstelement = <h1>Hello React!</h1>\r\n\r\nReactDOM.render(myfirstelement, document.getElementById('root'));```"
            }
        },
        "es6": {
            "title": "React ES6",
            "url": "https://www.w3schools.com/react/react_es6.asp",
            "info": {
                "What is ES6?": "ES6 stands for ECMAScript 6.ECMAScript was created to standardize JavaScript, and ES6 is the 6th version of ECMAScript, it was published in 2015, and is also known as ECMAScript 2015.",
                "Why Should I Learn ES6?": "React uses ES6, and you should be familiar with some of the new features like:",
                "Classes": "ES6 introduced classes.A class is a type of function, but instead of using the keywordfunction to initiate it, we use the keywordclass, and the properties are assigned inside aconstructor() method.```react\nclass Car {constructor(name) {  this.brand = name;}\r\n}```Now you can create objects using the Car class:```react\nclass Car {constructor(name) {  this.brand = name;}\r\n}\r\n\r\nmycar = new Car(\"Ford\");```You can add your own methods in a class:```react\nclass Car {constructor(name) {  this.brand = name;}present() {  return 'I have a ' + this.brand;}\r\n}\r\n\r\nmycar = new Car(\"Ford\");\r\nmycar.present();```As you can see in the example above, you call the method by referring to the object's method name followed by parentheses (parameters would go inside the parentheses).To create a class inheritance, use the extends keyword.A class created with a class inheritance inherits all the methods from another class:The super() method refers to the parent class.By calling the super() method in the constructor method, we call the parent's constructor method and gets access to the parent's properties and methods.",
                "Arrow Functions": "Arrow functions were introduced in ES6.Arrow functions allow us to write shorter function syntax:```react\nhello = function() {return \"Hello World!\";\r\n}``````react\nhello = () => {return \"Hello World!\";\r\n}```It gets shorter! If the function has only one statement, and the statement returns a value, you can remove the brackets and thereturn keyword:```react\nhello = () => \"Hello World!\";```If you have parameters, you pass them inside the parentheses:```react\nhello = (val) => \"Hello \" + val;```In fact, if you have only one parameter, you can skip the parentheses as well:```react\nhello = val => \"Hello \" + val;```The handling of this is also different in arrow functions compared to regular functions.In short, with arrow functions there are no binding ofthis.In regular functions the this keyword represented the object that called the function, which could be the window, the document, a button or whatever.With arrow functions, the this keyword always represents the object that defined the arrow function.Let us take a look at two examples to understand the difference.Both examples call a method twice, first when the page loads, and once again when the user clicks a button.The first example uses a regular function, and the second example uses an arrow function.The result shows that the first example returns two different objects (window and button), and the second example returns the Header object twice.Remember these differences when you are working with functions. Sometimes the behavior of regular functions is what you want, if not, use arrow functions.",
                "Variables": "Before ES6 there were only one way of defining your variables: with the var keyword. If you did not define them, they would be assigned to the global object. Unless you were in strict mode, then you would get an error if your variables were undefined.Now, with ES6, there are three ways of defining your variables:var, let, and const.```react\nvar x = 5.6;```If you use var outside of a function, it belongs to the global scope.If you use var inside of a function, it belongs to that function.If you use var inside of a block, i.e. a for loop, the variable is still available outside of that block.```react\nlet x = 5.6;```let is the block scoped version of var, and is limited to the block (or expression) where it is defined.If you use let inside of a block, i.e. a for loop, the variable is only available inside of that loop.```react\nconst x = 5.6;```const is a variable that once it has been created, its value can never change."
            }
        },
        "renderhtml": {
            "title": "React Render HTML",
            "url": "https://www.w3schools.com/react/react_render.asp",
            "info": {
                "The Render Function": "The ReactDOM.render() function takes two arguments, HTML code and an HTML element.The purpose of the function is to display the specified HTML code inside the specified HTML element.```react\nReactDOM.render(<p>Hello</p>, document.getElementById('root'));```",
                "The HTML Code": "The HTML code in this tutorial uses JSX which allows you to write HTML tags inside the JavaScript code:```react\nconst myelement = (<table>  <tr>    <th>Name</th>  </tr>  <tr>    <td>John</td>  </tr>  <tr>    <td>Elsa</td>  </tr></table>\r\n);\r\n\r\nReactDOM.render(myelement, document.getElementById('root'));```",
                "The Root Node": "The root node is the HTML element where you want to display the result.It is like a container for content managed by React.It does NOT have to be a <div> element and it does NOT have to have the id='root':```react\n<body>\r\n<header id=\"sandy\"></header>\r\n\r\n</body>```"
            }
        },
        "jsx": {
            "title": "React JSX",
            "url": "https://www.w3schools.com/react/react_jsx.asp",
            "info": {
                "What is JSX?": "JSX stands for JavaScript XML.JSX allows us to write HTML in React.JSX makes it easier to write and add HTML in React.",
                "Coding JSX": "JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()\u00a0 and/orappendChild() methods.JSX converts HTML tags into react elements.Let us demonstrate with two examples, the first uses JSX and the second does not:```react\nconst myelement = <h1>I Love JSX!</h1>;\r\n\r\nReactDOM.render(myelement, document.getElementById('root'));``````react\nconst myelement = React.createElement('h1', {}, 'I do not use JSX!');\r\n\r\nReactDOM.render(myelement, document.getElementById('root'));```As you can see in the first example, JSX allows us to write HTML directly within the JavaScript code.JSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.",
                "Expressions in JSX": "With JSX you can write expressions inside curly braces { }.The expression can be a React variable, or property, or any other valid JavaScript expression. JSX will execute the expression and return the result:```react\nconst myelement = <h1>React is {5 + 5} times better with JSX</h1>;```",
                "Inserting a Large Block of HTML": "To write HTML on multiple lines, put the HTML inside parentheses:```react\nconst myelement = (<ul>  <li>Apples</li>  <li>Bananas</li>  <li>Cherries</li></ul>\r\n);```",
                "One Top Level Element": "The HTML code must be wrapped in ONE top level element.So if you like to write two headers, you must put them inside a parent element, like a div element```react\nconst myelement = (<div>  <h1>I am a Header.</h1>  <h1>I am a Header too.</h1></div>\r\n);```",
                "Elements Must be Closed": "JSX follows XML rules, and therefore HTML elements must be properly closed.```react\nconst myelement = <input type=\"text\" />;```"
            }
        },
        "components": {
            "title": "React Components",
            "url": "https://www.w3schools.com/react/react_components.asp",
            "info": {
                "React Components": "Components are independent and reusable bits of code.They serve the same purpose as JavaScript functions,but work in isolation and returns HTML via a render function.Components come in two types, Class components and Function components, in this tutorial we will concentrate on Class components.",
                "Create a Class Component": "When creating a React component, the component's name must start with an upper case letter.The component has to include the extends React.Component statement, this statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.The component also requires a render() method, this method returns HTML.```react\nclass Car extends React.Component {render() {  return <h2>Hi, I am a Car!</h2>;}\r\n}```Now your React application has a component called Car, which returns a <h2> element.To use this component in your application, use similar syntax as normal HTML:<Car />```react\nReactDOM.render(<Car />, document.getElementById('root'));```",
                "Create a Function Component": "Here is the same example as above, but created using a Function component instead.A Function component also returns HTML, and behaves pretty much the same way as a Class component, but Class components have some additions, and will be preferred in this tutorial.```react\nfunction Car() {return <h2>Hi, I am also a Car!</h2>;\r\n}```Once again your React application has a Car component.Refer to the Car component as normal HTML (except in React, components must start with an upper case letter):```react\nReactDOM.render(<Car />, document.getElementById('root'));```",
                "Component Constructor": "If there is a constructor() function in your component, this function will be called when the component gets initiated.The constructor function is where you initiate the component's properties.In React, component properties should be kept in an object calledstate.You will learn more about state later in this tutorial.The constructor function is also where you honor the inheritance of the parent component by including the super() statement, which executes the parent component's constructor function, and your component has access to all the functions of the parent component (React.Component).```react\nclass Car extends React.Component {constructor() {  super();  this.state = {color: \"red\"};}render() {  return <h2>I am a Car!</h2>;}\r\n}```Use the color property in the render() function:```react\nclass Car extends React.Component {constructor() {  super();  this.state = {color: \"red\"};}render() {  return <h2>I am a {this.state.color} Car!</h2>;}\r\n}```",
                "Props": "Another way of handling component properties is by using props.Props are like function arguments, and you send them into the component as attributes.You will learn more about props in the next chapter.```react\nclass Car extends React.Component {render() {  return <h2>I am a {this.props.color} Car!</h2>;}\r\n}\r\n\r\nReactDOM.render(<Car color=\"red\"/>, document.getElementById('root'));```",
                "Components in Components": "We can refer to components inside other components:```react\nclass Car extends React.Component {render() {  return <h2>I am a Car!</h2>;}\r\n}\r\n\r\nclass Garage extends React.Component {render() {  return (    <div>    <h1>Who lives in my Garage?</h1>    <Car />    </div>  );}\r\n}\r\n\r\nReactDOM.render(<Garage />, document.getElementById('root'));```",
                "Components in Files": "React is all about re-using code, and it can be smart to insert some of your components in separate files.To do that, create a new file with a .js file extension and put the code inside it:Note that the file must start by importing React (as before), and it has to end with the statement export default Car;.```react\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Car extends React.Component {render() {  return <h2>Hi, I am a Car!</h2>;}\r\n}\r\n\r\nexport default Car;```To be able to use the Car component, you have to import the file in your application.```react\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Car from './App.js';\r\n\r\nReactDOM.render(<Car />, document.getElementById('root'));```"
            }
        },
        "props": {
            "title": "React Props",
            "url": "https://www.w3schools.com/react/react_props.asp",
            "info": {
                "React Props": "React Props are like function arguments in JavaScript and attributes in HTML.To send props into a component, use the same syntax as HTML attributes:```react\nconst myelement = <Car brand=\"Ford\" />;```The component receives the argument as a props object:```react\nclass Car extends React.Component {render() {  return <h2>I am a {this.props.brand}!</h2>;}\r\n}```",
                "Pass Data": "Props are also how you pass data from one component to another, as parameters.```react\nclass Car extends React.Component {render() {  return <h2>I am a {this.props.brand}!</h2>;}\r\n}\r\n\r\nclass Garage extends React.Component {render() {  return (    <div>    <h1>Who lives in my garage?</h1>    <Car brand=\"Ford\" />    </div>  );}\r\n}\r\n\r\nReactDOM.render(<Garage />, document.getElementById('root'));```If you have a variable to send, and not a string as in the example above, you just put the variable name inside curly brackets:```react\nclass Car extends React.Component {render() {  return <h2>I am a {this.props.brand}!</h2>;}\r\n}\r\n\r\nclass Garage extends React.Component {render() {  const carname = \"Ford\";  return (    <div>    <h1>Who lives in my garage?</h1>    <Car brand={carname} />    </div>  );}\r\n}\r\n\r\nReactDOM.render(<Garage />, document.getElementById('root'));```Or if it was an object:",
                "Props in the Constructor": "If your component has a constructor function, the props should always be passed to the constructor and also to the React.Component via thesuper() method.```react\nclass Car extends React.Component {constructor(props) {  super(props);}render() {  return <h2>I am a Car!</h2>;}\r\n}\r\n\r\nReactDOM.render(<Car model=\"Mustang\"/>, document.getElementById('root'));```"
            }
        },
        "state": {
            "title": "React State",
            "url": "https://www.w3schools.com/react/react_state.asp",
            "info": {
                "Creating the state Object": "The state object is initialized in the constructor:```react\nclass Car extends React.Component {constructor(props) {  super(props);  this.state = {brand: \"Ford\"};}render() {  return (    <div>      <h1>My Car</h1>    </div>  );}\r\n}```The state object can contain as many properties as you like:```react\nclass Car extends React.Component {constructor(props) {  super(props);  this.state = {    brand: \"Ford\",    model: \"Mustang\",    color: \"red\",    year: 1964  };}render() {  return (    <div>      <h1>My Car</h1>    </div>  );}\r\n}```",
                "Using the state Object": "Refer to the state object anywhere in the component by using thethis.state.propertyname syntax:```react\nclass Car extends React.Component {constructor(props) {  super(props);  this.state = {    brand: \"Ford\",    model: \"Mustang\",    color: \"red\",    year: 1964  };}render() {  return (    <div>      <h1>My {this.state.brand}</h1>      <p>        It is a {this.state.color}        {this.state.model}        from {this.state.year}.      </p>    </div>  );}\r\n}```",
                "Changing the state Object": "To change a value in the state object, use the this.setState() method.When a value in the state object changes, the component will re-render, meaning that the output will change according to the new value(s).```react\nclass Car extends React.Component {constructor(props) {  super(props);  this.state = {    brand: \"Ford\",    model: \"Mustang\",    color: \"red\",    year: 1964  };}changeColor = () => {  this.setState({color: \"blue\"});}render() {  return (    <div>      <h1>My {this.state.brand}</h1>      <p>        It is a {this.state.color}        {this.state.model}        from {this.state.year}.      </p>      <button        type=\"button\"        onClick={this.changeColor}      >Change color</button>    </div>  );}\r\n}```"
            }
        },
        "lifecycle": {
            "title": "React Lifecycle",
            "url": "https://www.w3schools.com/react/react_lifecycle.asp",
            "info": {
                "Lifecycle of Components": "Each component in React has a lifecycle which you can monitor and manipulate during its three main phases.The three phases are: Mounting, Updating, andUnmounting.",
                "Mounting": "Mounting means putting elements into the DOM.React has four built-in methods that gets called, in this order, when mounting a component:The render() method is required and will always be called, the others are optional and will be called if you define them.The constructor() method is called before anything else, when the component is initiated, and it is the natural place to set up the initial state and other initial values.The constructor() method is called with the props, as arguments, and you should always start by calling the super(props) before anything else, this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component).```react\nclass Header extends React.Component {constructor(props) {  super(props);  this.state = {favoritecolor: \"red\"};}render() {  return (    <h1>My Favorite Color is {this.state.favoritecolor}</h1>  );}\r\n}\r\n\r\nReactDOM.render(<Header />, document.getElementById('root'));```The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.This is the natural place to set the state object based on the initial props.It takes state as an argument, and returns an object with changes to thestate.The example below starts with the favorite color being \"red\", but thegetDerivedStateFromProps() method updates the favorite color based on thefavcol attribute:The render() method is required, and is the method that actual outputs HTML to the DOM.The componentDidMount() method is called after the component is rendered.This is where you run statements that requires that the component is already placed in the DOM.",
                "Updating": "The next phase in the lifecycle is when a component is updated.A component is updated whenever there is a change in the component'sstate or props.React has five built-in methods that gets called, in this order, when a component is updated:The render() method is required and will always be called, the others are optional and will be called if you define them.Also at updates the getDerivedStateFromProps method is called. This is the first method that is called when a component gets updated.This is still the natural place to set the state object based on the initial props.The example below has a button that changes the favorite color to blue, but since the getDerivedStateFromProps() method is called, which updates the state with the color from the favcol attribute, the favorite color is still rendered as yellow:In the shouldComponentUpdate() methodyou can return a Boolean value that specifies whether React should continue with the rendering or not.The default value is true.The example below shows what happens when the shouldComponentUpdate() method returns false:The render() method is of course called when a component gets updated, it has to re-render the HTML to the DOM, with the new changes.The example below has a button that changes the favorite color to blue:In the getSnapshotBeforeUpdate() methodyou have access to the props and state before the update, meaning that even after the update, you can check what the values were before the update.If the getSnapshotBeforeUpdate() methodis present, you should also include the componentDidUpdate() method, otherwise you will get an error.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color \"red\".When the component has been mounted, a timer changes the state, and after one second, the favorite color becomes \"yellow\".This action triggers the update phase, and since this component has a getSnapshotBeforeUpdate() method, this method is executed, and writes a message to the empty DIV1 element.Then the componentDidUpdate() method is executed and writes a message in the empty DIV2 element:\u00a0The componentDidUpdate methodis called after the component is updated in the DOM.The example below might seem complicated, but all it does is this:When the component is mounting it is rendered with the favorite color \"red\".When the component has been mounted, a timer changes the state, and the color becomes \"yellow\".This action triggers the update phase, and since this component has a componentDidUpdate method, this method is executed and writes a message in the empty DIV element:",
                "Unmounting": "The next phase in the lifecycle is when a component is removed from the DOM, or unmounting as React likes to call it.React has only one built-in method that gets called when a component is unmounted:The componentWillUnmount method is called when the component is about to be removed from the DOM.```react\nclass Container extends React.Component {constructor(props) {  super(props);  this.state = {show: true};}delHeader = () => {  this.setState({show: false});}render() {  let myheader;  if (this.state.show) {    myheader = <Child />;  };  return (    <div>    {myheader}    <button type=\"button\" onClick={this.delHeader}>Delete Header</button>    </div>  );}\r\n}\r\n\r\nclass Child extends React.Component {componentWillUnmount() {  alert(\"The component named Header is about to be unmounted.\");}render() {  return (    <h1>Hello World!</h1>  );}\r\n}\r\n\r\nReactDOM.render(<Container />, document.getElementById('root'));```"
            }
        },
        "events": {
            "title": "React Events",
            "url": "https://www.w3schools.com/react/react_events.asp",
            "info": {
                "Adding Events": "React events are written in camelCase syntax:onClickinstead of onclick.React event handlers are written inside curly braces:onClick={shoot}\u00a0 instead ofonClick=\"shoot()\". ```react\n<button onClick={shoot}>Take the Shot!</button>``````react\n<button onclick=\"shoot()\">Take the Shot!</button>```",
                "Event Handlers": "A good practice is to put the event handler as a method in the component class:```react\nclass Football extends React.Component {shoot() {  alert(\"Great Shot!\");}render() {  return (    <button onClick={this.shoot}>Take the shot!</button>  );}\r\n}\r\n\r\nReactDOM.render(<Football />, document.getElementById('root'));```",
                "Bind this": "For methods in React, the this keyword should represent the component that owns the method.That is why you should use arrow functions. With arrow functions,this will always represent the object that defined the arrow function.```react\nclass Football extends React.Component {shoot = () => {  alert(this);  /*  The 'this' keyword refers to the component object  */}render() {  return (    <button onClick={this.shoot}>Take the shot!</button>  );}\r\n}\r\n\r\nReactDOM.render(<Football />, document.getElementById('root'));```In class components, the this keyword is not defined by default, so with regular functions the this keyword represents the object that called the method, which can be the global window object, a HTML button, or whatever.Read more about binding this in our React ES6 'What About this?' chapter.If you must use regular functions instead of arrow functions you have to bindthis to the component instance using thebind() method:",
                "Passing Arguments": "If you want to send parameters into an event handler, you have two options:1. Make an anonymous arrow function:```react\nclass Football extends React.Component {shoot = (a) => {  alert(a);}render() {  return (    <button onClick={() => this.shoot(\"Goal\")}>Take the shot!</button>  );}\r\n}\r\n\r\nReactDOM.render(<Football />, document.getElementById('root'));```Or:2. Bind the event handler to this.Note that the first argument has to be this.```react\nclass Football extends React.Component {shoot(a) {  alert(a);}render() {  return (    <button onClick={this.shoot.bind(this, \"Goal\")}>Take the shot!</button>  );}\r\n}\r\n\r\nReactDOM.render(<Football />, document.getElementById('root'));```",
                "React Event Object": "Event handlers have access to the React event that triggered the function.In our example the event is the \"click\" event. Notice that once again the syntax is different when using arrow functions or not.With the arrow function you have to send the event argument manually:```react\nclass Football extends React.Component {shoot = (a, b) => {  alert(b.type);  /*  'b' represents the React event that triggered the function,  in this case the 'click' event  */}render() {  return (    <button onClick={(ev) => this.shoot(\"Goal\", ev)}>Take the shot!</button>  );}\r\n}\r\n\r\nReactDOM.render(<Football />, document.getElementById('root'));```Without arrow function, the React event object is sent automatically as the last argument when using the bind() method:"
            }
        },
        "forms": {
            "title": "React Forms",
            "url": "https://www.w3schools.com/react/react_forms.asp",
            "info": {
                "Adding Forms in React": "You add a form with React like any other element:```react\nclass MyForm extends React.Component {render() {  return (    <form>      <h1>Hello</h1>      <p>Enter your name:</p>      <input        type=\"text\"      />    </form>  );}\r\n}\r\nReactDOM.render(<MyForm />, document.getElementById('root'));```",
                "Handling Forms": "Handling forms is about how you handle the data when it changes value or gets submitted.In HTML, form data is usually handled by the DOM.In React, form data is usually handled by the components.When the data is handled by the components, all the data is stored in the component state.You can control changes by adding event handlers in theonChange attribute:```react\nclass MyForm extends React.Component {constructor(props) {  super(props);  this.state = { username: '' };}myChangeHandler = (event) => {  this.setState({username: event.target.value});}render() {  return (    <form>    <h1>Hello {this.state.username}</h1>    <p>Enter your name:</p>    <input      type='text'      onChange={this.myChangeHandler}    />    </form>  );}\r\n}\r\n\r\nReactDOM.render(<MyForm />, document.getElementById('root'));```",
                "Conditional Rendering": "If you do not want to display the h1 element until the user has done any input, you can add an if statement.Look at the example below and note the following:1. We create an empty variable, in this example we call itheader.2. We add an if statement to insert content to the header variable if the user has done any input.3. We insert the header variable in the output, using curly brackets.```react\nclass MyForm extends React.Component {constructor(props) {  super(props);  this.state = { username: '' };}myChangeHandler = (event) => {  this.setState({username: event.target.value});}render() {  let header = '';  if (this.state.username) {    header = <h1>Hello {this.state.username}</h1>;  } else {    header = '';  }  return (    <form>    {header}    <p>Enter your name:</p>    <input      type='text'      onChange={this.myChangeHandler}    />    </form>  );}\r\n}\r\n\r\nReactDOM.render(<MyForm />, document.getElementById('root'));```",
                "Submitting Forms": "You can control the submit action by adding an event handler in the onSubmit attribute:```react\nclass MyForm extends React.Component {constructor(props) {  super(props);  this.state = { username: '' };}mySubmitHandler = (event) => {  event.preventDefault();  alert(\"You are submitting \" + this.state.username);}myChangeHandler = (event) => {  this.setState({username: event.target.value});}render() {  return (    <form onSubmit={this.mySubmitHandler}>    <h1>Hello {this.state.username}</h1>    <p>Enter your name, and submit:</p>    <input      type='text'      onChange={this.myChangeHandler}    />    <input      type='submit'    />    </form>  );}\r\n}\r\n\r\nReactDOM.render(<MyForm />, document.getElementById('root'));```Note that we use event.preventDefault() to prevent the form from actually being submitted.",
                "Multiple Input Fields": "You can control the values of more than one input field by adding a name attribute to each element.When you initialize the state in the constructor, use the field names.To access the fields in the event handler use theevent.target.name andevent.target.value syntax.To update the state in the this.setState   method, use square brackets [bracket notation] around the property name.",
                "Validating Form Input": "You can validate form input when the user is typing or you can wait until the form gets submitted.```react\nclass MyForm extends React.Component {constructor(props) {  super(props);  this.state = {    username: '',    age: null,  };}myChangeHandler = (event) => {  let nam = event.target.name;  let val = event.target.value;  if (nam === \"age\") {    if (!Number(val)) {      alert(\"Your age must be a number\");    }  }  this.setState({[nam]: val});}render() {  return (    <form>    <h1>Hello {this.state.username} {this.state.age}</h1>    <p>Enter your name:</p>    <input      type='text'      name='username'      onChange={this.myChangeHandler}    />    <p>Enter your age:</p>    <input      type='text'      name='age'      onChange={this.myChangeHandler}    />    </form>  );}\r\n}\r\n\r\nReactDOM.render(<MyForm />, document.getElementById('root'));```Below you will see the same example as above,but the validation is done when the form gets submitted instead of when you write in the field.",
                "Adding Error Message": "Error messages in alert boxes can be annoying, so let's make an error message that is empty by default, but displays the error when the user inputs anything invalid:",
                "Textarea": "The textarea element in React is slightly different from ordinary HTML.In HTML the value of a textarea was the text between the start tag <textarea> and the end tag </textarea>, in React the value of a textarea is placed in a value attribute:```react\nclass MyForm extends React.Component {constructor(props) {  super(props);  this.state = {    description: 'The content of a textarea goes in the value attribute'  };}render() {  return (    <form>    <textarea value={this.state.description} />    </form>  );}\r\n}\r\n\r\nReactDOM.render(<MyForm />, document.getElementById('root'));```",
                "Select": "A drop down list, or a select box, in React is also a bit different from HTML.in HTML, the selected value in the drop down list was defined with the selected attribute:```react\n<select><option value=\"Ford\">Ford</option><option value=\"Volvo\" selected>Volvo</option><option value=\"Fiat\">Fiat</option>\r\n</select>```In React, the selected value is defined with a valueattribute on the select tag:```react\nclass MyForm extends React.Component {constructor(props) {  super(props);  this.state = {    mycar: 'Volvo'  };}render() {  return (    <form>    <select value={this.state.mycar}>      <option value=\"Ford\">Ford</option>      <option value=\"Volvo\">Volvo</option>      <option value=\"Fiat\">Fiat</option>    </select>    </form>  );}\r\n}\r\n\r\nReactDOM.render(<MyForm />, document.getElementById('root'));```"
            }
        },
        "css": {
            "title": "React CSS",
            "url": "https://www.w3schools.com/react/react_css.asp",
            "info": {
                "Inline Styling": "To style an element with the inline style attribute, the value must be a JavaScript object:```react\nclass MyHeader extends React.Component {render() {  return (    <div>    <h1 style={{color: \"red\"}}>Hello Style!</h1>    <p>Add a little style!</p>    </div>  );}\r\n}```Since the inline CSS is written in a JavaScript object, properties with two names, like background-color, must be written with camel case syntax:```react\nclass MyHeader extends React.Component {render() {  return (    <div>    <h1 style={{backgroundColor: \"lightblue\"}}>Hello Style!</h1>    <p>Add a little style!</p>    </div>  );}\r\n}```You can also create an object with styling information, and refer to it in the style attribute:```react\nclass MyHeader extends React.Component {render() {  const mystyle = {    color: \"white\",    backgroundColor: \"DodgerBlue\",    padding: \"10px\",    fontFamily: \"Arial\"  };  return (    <div>    <h1 style={mystyle}>Hello Style!</h1>    <p>Add a little style!</p>    </div>  );}\r\n}```",
                "CSS Stylesheet": "You can write your CSS styling in a separate file, just save the file with the .css file extension, and import it in your application.```react\nbody {background-color: #282c34;color: white;padding: 40px;font-family: Arial;text-align: center;\r\n}```Import the stylesheet in your application:```react\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\n\r\nclass MyHeader extends React.Component {render() {  return (    <div>    <h1>Hello Style!</h1>    <p>Add a little style!.</p>    </div>  );}\r\n}\r\n\r\nReactDOM.render(<MyHeader />, document.getElementById('root'));```",
                "CSS Modules": "Another way of adding styles to your application is to use CSS Modules.CSS Modules are convenient for components that are placed in separate files.Create the CSS module with the .module.css extension, example: mystyle.module.css.```react\n.bigblue {color: DodgerBlue;padding: 40px;font-family: Arial;text-align: center;\r\n}```Import the stylesheet in your component:```react\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styles from './mystyle.module.css'; \r\n\r\nclass Car extends React.Component {render() {  return <h1 className={styles.bigblue}>Hello Car!</h1>;}\r\n}\r\n\r\nexport default Car;```Import the component in your application:```react\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Car from './App.js';\r\n\r\nReactDOM.render(<Car />, document.getElementById('root'));```"
            }
        },
        "sass": {
            "title": "React Sass",
            "url": "https://www.w3schools.com/react/react_sass.asp",
            "info": {
                "What is Sass": "Sass is a CSS pre-processor.Sass files are executed on the server and sends CSS to the browser.You can learn more about Sass in ourSass Tutorial.",
                "Can I use Sass?": "If you use the create-react-app in your project, you can easily install and use Sass in your React projects.Install Sass by running this command in your terminal:```react\nC:\\Users\\Your Name>npm install node-sass```Now you are ready to include Sass files in your project!",
                "Create a Sass file": "Create a Sass file the same way as you create CSS files, but Sass files have the file extension .scssIn Sass files you can use variables and other Sass functions:```react\n$myColor: red;\r\n\r\nh1 {color: $myColor;\r\n}```Import the Sass file the same way as you imported a CSS file:```react\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './mysass.scss';\r\n\r\nclass MyHeader extends React.Component {render() {  return (    <div>    <h1>Hello Style!</h1>    <p>Add a little style!.</p>    </div>  );}\r\n}\r\n\r\nReactDOM.render(<MyHeader />, document.getElementById('root'));```"
            }
        }
    },
    "jquery": {
        "getstarted": {
            "title": "jQuery Get Started",
            "url": "https://www.w3schools.com/jquery/jquery_get_started.asp",
            "info": {
                "Adding jQuery to Your Web Pages": "There are several ways to start using jQuery on your web site. You can:",
                "Downloading jQuery": "There are two versions of jQuery available for downloading: Both versions can be downloaded from jQuery.com.The jQuery library is a single JavaScript file, and you reference it with the HTML <script> tag (notice that the <script> tag should be inside the <head> section):Tip: Place the downloaded file in the same directory as the pages where you wish to use it.",
                "jQuery CDN": "If you don't want to download and host jQuery yourself, you can include it from a CDN (Content Delivery Network).Google is an example of someone who host jQuery:```jquery\n<head>\n\r\n <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n\r\n</head>```"
            }
        },
        "syntax": {
            "title": "jQuery Syntax",
            "url": "https://www.w3schools.com/jquery/jquery_syntax.asp",
            "info": {
                "jQuery Syntax": "The jQuery syntax is tailor-made for selecting HTML elements and performing some action on the element(s).Basic syntax is: $(selector).action()Examples:$(this).hide() - hides the current element.$(\"p\").hide() - hides all <p> elements.$(\".test\").hide() - hides all elements with class=\"test\".$(\"#test\").hide() - hides the element with id=\"test\".",
                "The Document Ready Event": "You might have noticed that all jQuery methods in our examples, are inside a document ready event:This is to prevent any jQuery code from running before the document is finished loading (is ready).It is good practice to wait for the document to be fully loaded and ready before working with it.This also allows you to have your JavaScript code before the body of your document, in the head section. Here are some examples of actions that can fail if methods are run before the document is fully loaded:Tip: The jQuery team has also created an even shorter method for the document ready event:Use the syntax you prefer. We think that the document ready event is easier to understand when reading the code."
            }
        },
        "selectors": {
            "title": "jQuery Selectors",
            "url": "https://www.w3schools.com/jquery/jquery_selectors.asp",
            "info": {
                "jQuery Selectors": "Use our jQuery Selector Tester to demonstrate the different selectors.",
                "The element Selector": "The jQuery element selector selects elements based on the element name.You can select all <p> elements on a page like this:ExampleWhen a user clicks on a button, all <p> elements will be hidden:```jquery\n$(document).ready(function(){\n$(\"button\").click(function(){\n    $(\"p\").hide();\n});\n\r\n});```",
                "The #id Selector": "The jQuery #id selector uses the id attribute of an HTML tag to find the specific element.An id should be unique within a page, so you should use the #id selector when you want to find a single, unique element.To find an element with a specific id, write a hash character, followed by the id of the HTML element:ExampleWhen a user clicks on a button, the element with id=\"test\" will be hidden:```jquery\n$(document).ready(function(){\n$(\"button\").click(function(){\n  $(\"#test\").hide();\n  });\n\r\n});```",
                "The .class Selector": "The jQuery .class selector finds elements with a specific class.To find elements with a specific class, write a period character, followed by the name of the class:ExampleWhen a user clicks on a button, the elements with class=\"test\" will be hidden:```jquery\n$(document).ready(function(){\n  $(\"button\").click(function(){\n  $(\".test\").hide();\n});\n\r\n});```",
                "More Examples of jQuery Selectors": "Use our jQuery Selector Tester to demonstrate the different selectors.For a complete reference of all the jQuery selectors, please go to our jQuery Selectors Reference.",
                "Functions In a Separate File": "If your website contains a lot of pages, and you want your jQuery functions to be easy to maintain, you can put your jQuery functions in a separate .js file.When we demonstrate jQuery in this tutorial, the functions are added directly into the <head> section. However, sometimes it is preferable to place them in a separate file, like this (use the src attribute to refer to the .js file): ```jquery\n<head>\n\r\n<script\r\nsrc=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n<script src=\"my_jquery_functions.js\"></script>\n\r\n</head>```",
                "jQuery Exercises": ""
            }
        },
        "events": {
            "title": "jQuery Events",
            "url": "https://www.w3schools.com/jquery/jquery_events.asp",
            "info": {
                "What are Events?": "All the different visitors' actions that a web page can respond to are called events.An event represents the precise moment when something happens.Examples:The term \"fires/fired\" is often used with events. Example: \"The keypress event is fired, the moment you press a key\".Here are some common DOM events:",
                "jQuery Syntax For Event Methods": "In jQuery, most DOM events have an equivalent jQuery method.To assign a click event to all paragraphs on a page, you can do this: The next step is to define what should happen when the event fires. You must pass a function to the event:",
                "Commonly Used jQuery Event Methods": "$(document).ready()The $(document).ready() method allows us to execute a function when the document is fully loaded. This event is already explained in thejQuery Syntax chapter. click()The click() method attaches an event handler function to an HTML element.The function is executed when the user clicks on the HTML element.The following example says: When a click event fires on a <p> element; hide the current <p> element:```jquery\n$(\"p\").click(function(){\n$(this).hide();\n\r\n});```dblclick()The dblclick() method attaches an event handler function to an HTML element.The function is executed when the user double-clicks on the HTML element:```jquery\n$(\"p\").dblclick(function(){\n  $(this).hide();\n\r\n});```mouseenter()The mouseenter() method attaches an event handler function to an HTML element.The function is executed when the mouse pointer enters the HTML element:```jquery\n$(\"#p1\").mouseenter(function(){\n  alert(\"You entered p1!\");\n\r\n});```mouseleave()The mouseleave() method attaches an event handler function to an HTML element.The function is executed when the mouse pointer leaves the HTML element:mousedown()The mousedown() method attaches an event handler function to an HTML element.The function is executed, when the left, middle or right mouse button is pressed down, while the mouse is over the HTML element:mouseup()The mouseup() method attaches an event handler function to an HTML element.The function is executed, when the left, middle or right mouse button is released, while the mouse is over the HTML element:hover()The hover() method takes two functions and is a combination of the mouseenter() and mouseleave() methods.The first function is executed when the mouse enters the HTML element, and the second function is executed when the mouse leaves the HTML element:focus()The focus() method attaches an event handler function to an HTML form field.The function is executed when the form field gets focus:blur()The blur() method attaches an event handler function to an HTML form field.The function is executed when the form field loses focus:",
                "The on() Method": "The on() method attaches one or more event handlers for the selected elements.Attach a click event to a <p> element:```jquery\n$(\"p\").on(\"click\", function(){\n  $(this).hide();\n});```Attach multiple event handlers to a <p> element:```jquery\n$(\"p\").on({\n  mouseenter: function(){\n    $(this).css(\"background-color\", \"lightgray\");\n  }, \n  mouseleave: function(){\n    $(this).css(\"background-color\", \"lightblue\");\n  }, \n  click: function(){\n    $(this).css(\"background-color\", \"yellow\");\n  } \n});```",
                "jQuery Exercises": "",
                "jQuery Event Methods": "Event methods trigger or attach a function to an event handler for the selected elements.The following table lists all the jQuery methods used to handle events."
            }
        },
        "hide/show": {
            "title": "jQuery Hide/Show",
            "url": "https://www.w3schools.com/jquery/jquery_hide_show.asp",
            "info": {
                "Examples": "jQuery hide()Demonstrates a simple jQuery hide() method.jQuery hide()Another hide() demonstration. How to hide parts of text.",
                "jQuery hide() and show()": "With jQuery, you can hide and show HTML elements with the hide() and show() methods:```jquery\n$(\"#hide\").click(function(){\n$(\"p\").hide();\n\r\n});\n\n\r\n$(\"#show\").click(function(){\n$(\"p\").show();\n\r\n});```Syntax:The optional speed parameter specifies the speed of the hiding/showing, and can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after  the hide() or show() method completes (you will learn more about callback functions in a later chapter).The following example demonstrates the speed parameter with hide():```jquery\n$(\"button\").click(function(){\n  $(\"p\").hide(1000);\n\r\n});```",
                "jQuery toggle()": "You can also toggle between hiding and showing an element with the toggle() method.Shown elements are hidden and hidden elements are shown:```jquery\n$(\"button\").click(function(){\n  $(\"p\").toggle();\n\r\n});```Syntax:The optional speed parameter can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after  toggle() completes.",
                "jQuery Exercises": "",
                "jQuery Effects Reference": "For a complete overview of all jQuery effects, please go to our jQuery Effect Reference."
            }
        },
        "fade": {
            "title": "jQuery Fade",
            "url": "https://www.w3schools.com/jquery/jquery_fade.asp",
            "info": {
                "Examples": "jQuery fadeIn()Demonstrates the jQuery fadeIn() method.jQuery fadeOut()Demonstrates the jQuery fadeOut() method.jQuery fadeToggle()Demonstrates the jQuery fadeToggle() method.jQuery fadeTo()Demonstrates the jQuery fadeTo() method.",
                "jQuery Fading Methods": "With jQuery you can fade an element in and out of visibility.jQuery has the following fade methods:",
                "jQuery fadeIn() Method": "The jQuery fadeIn() method is used to fade in a hidden element.Syntax:The optional speed parameter specifies the duration of the effect. It can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after the fading completes.The following example demonstrates the fadeIn() method with different parameters:```jquery\n$(\"button\").click(function(){\n$(\"#div1\").fadeIn();\n$(\"#div2\").fadeIn(\"slow\");\n$(\"#div3\").fadeIn(3000);\n\r\n});```",
                "jQuery fadeOut() Method": "The jQuery fadeOut() method is used to fade out a visible element.Syntax:The optional speed parameter specifies the duration of the effect. It can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after the fading completes.The following example demonstrates the fadeOut() method with different parameters:```jquery\n$(\"button\").click(function(){\n  $(\"#div1\").fadeOut();\n$(\"#div2\").fadeOut(\"slow\");\n$(\"#div3\").fadeOut(3000);\n\r\n});```",
                "jQuery fadeToggle() Method": "The jQuery fadeToggle() method toggles between the fadeIn() and fadeOut() methods.If the elements are faded out, fadeToggle() will fade them in.If the elements are faded in, fadeToggle() will fade them out. Syntax:The optional speed parameter specifies the duration of the effect. It can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after the fading completes.The following example demonstrates the fadeToggle() method with different parameters:```jquery\n$(\"button\").click(function(){\n  $(\"#div1\").fadeToggle();\n  $(\"#div2\").fadeToggle(\"slow\");\n  $(\"#div3\").fadeToggle(3000);\n\r\n});```",
                "jQuery fadeTo() Method": "The jQuery fadeTo() method allows fading to a given opacity (value between 0 and 1).Syntax:The required speed parameter specifies the duration of the effect. It can take the following values: \"slow\", \"fast\", or milliseconds.The required opacity parameter in the fadeTo() method specifies fading to a given opacity (value between 0 and 1).The optional callback parameter is a function to be executed after the function completes.The following example demonstrates the fadeTo() method with different parameters:```jquery\n$(\"button\").click(function(){\n$(\"#div1\").fadeTo(\"slow\", 0.15);\n$(\"#div2\").fadeTo(\"slow\", 0.4);\n  $(\"#div3\").fadeTo(\"slow\", 0.7);\n\r\n});```",
                "jQuery Exercises": "",
                "jQuery Effects Reference": "For a complete overview of all jQuery effects, please go to our jQuery Effect Reference."
            }
        },
        "slide": {
            "title": "jQuery Slide",
            "url": "https://www.w3schools.com/jquery/jquery_slide.asp",
            "info": {
                "Examples": "jQuery slideDown()Demonstrates the jQuery slideDown() method.jQuery slideUp()Demonstrates the jQuery slideUp() method.jQuery slideToggle()Demonstrates the jQuery slideToggle() method.",
                "jQuery Sliding Methods": "With jQuery you can create a sliding effect on elements.jQuery has the following slide methods:",
                "jQuery slideDown() Method": "The jQuery slideDown() method is used to slide down an element.Syntax:The optional speed parameter specifies the duration of the effect. It can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after the sliding completes.The following example demonstrates the slideDown() method:```jquery\n$(\"#flip\").click(function(){\n$(\"#panel\").slideDown();\n\r\n});```",
                "jQuery slideUp() Method": "The jQuery slideUp() method is used to slide up an element.Syntax:The optional speed parameter specifies the duration of the effect. It can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after the sliding completes.The following example demonstrates the slideUp() method:```jquery\n$(\"#flip\").click(function(){\n  $(\"#panel\").slideUp();\n\r\n});```",
                "jQuery slideToggle() Method": "The jQuery slideToggle() method toggles between the slideDown() and slideUp() methods.If the elements have been slid down, slideToggle() will slide them up.If the elements have been slid up, slideToggle() will slide them down. The optional speed parameter can take the following values: \"slow\", \"fast\", milliseconds.The optional callback parameter is a function to be executed after the sliding completes.The following example demonstrates the slideToggle() method:```jquery\n$(\"#flip\").click(function(){\n  $(\"#panel\").slideToggle();\n\r\n});```",
                "jQuery Exercises": "",
                "jQuery Effects Reference": "For a complete overview of all jQuery effects, please go to our jQuery Effect Reference."
            }
        },
        "animate": {
            "title": "jQuery Animate",
            "url": "https://www.w3schools.com/jquery/jquery_animate.asp",
            "info": {
                "jQuery Animations - The animate() Method": "The jQuery animate() method is used to create custom animations.Syntax:The required params parameter defines the CSS properties to be animated.The optional speed parameter specifies the duration of the effect. It can take the following values: \"slow\", \"fast\", or milliseconds.The optional callback parameter is a function to be executed after the animation completes.The following example demonstrates a simple use of the animate() method; it moves a <div> element to the right, until it has reached a left property of 250px:```jquery\n$(\"button\").click(function(){\n$(\"div\").animate({left: '250px'});\n\r\n});```",
                "jQuery animate() - Manipulate Multiple Properties": "Notice that multiple properties can be animated at the same time:```jquery\n$(\"button\").click(function(){\n  $(\"div\").animate({\n  left: '250px',\n    opacity: '0.5',\n    height: '150px',\n    width: '150px'\n});\n\r\n});```",
                "jQuery animate() - Using Relative Values": "It is also possible to define relative values (the value is then relative to the element's current value). This is done by putting += or -= in front of the value:```jquery\n$(\"button\").click(function(){\n$(\"div\").animate({\n  left: '250px',\n    height: '+=150px',\n    width: '+=150px'\n});\n\r\n});```",
                "jQuery animate() - Using Pre-defined Values": "You can even specify a property's animation value as \"show\", \"hide\", or \"toggle\":```jquery\n$(\"button\").click(function(){\n  $(\"div\").animate({\n    height: 'toggle'\n  });\n\r\n});```",
                "jQuery animate() - Uses Queue Functionality": "By default, jQuery comes with queue functionality for animations.This means that if you write multiple animate() calls after each other, jQuery creates an \"internal\" queue with these method calls. Then it runs the animate calls ONE by ONE.So, if you want to perform different animations after each other, we take advantage of the queue functionality:```jquery\n$(\"button\").click(function(){\nvar div = $(\"div\");\ndiv.animate({height: '300px', opacity: '0.4'}, \"slow\");\ndiv.animate({width: '300px', opacity: '0.8'}, \"slow\");\ndiv.animate({height: '100px', opacity: '0.4'}, \"slow\");\ndiv.animate({width: '100px', opacity: '0.8'}, \"slow\");\n\r\n});```The example below first moves the <div> element to the right, and then increases the font size of the text:```jquery\n$(\"button\").click(function(){\nvar div = $(\"div\");\ndiv.animate({left: '100px'}, \"slow\");\ndiv.animate({fontSize: '3em'}, \"slow\");\n\r\n});```",
                "jQuery Exercises": "",
                "jQuery Effects Reference": "For a complete overview of all jQuery effects, please go to our jQuery Effect Reference."
            }
        },
        "stop()": {
            "title": "jQuery stop()",
            "url": "https://www.w3schools.com/jquery/jquery_stop.asp",
            "info": {
                "Examples": "jQuery stop() slidingDemonstrates the jQuery stop() method.jQuery stop() animation (with parameters)Demonstrates the jQuery stop() method.",
                "jQuery stop() Method": "The jQuery stop() method is used to stop an animation or effect before it is finished.The stop() method works for all jQuery effect functions, including sliding, fading and custom animations.Syntax:The optional stopAll parameter specifies whether also the animation queue should be cleared or not. Default is false, which means that only the active animation will be stopped, allowing any queued animations to be performed afterwards.The optional goToEnd parameter specifies whether or not to complete the current animation immediately. Default is false.So, by default, the stop() method kills the current animation being performed on the selected element.The following example demonstrates the stop() method, with no parameters:```jquery\n$(\"#stop\").click(function(){\n$(\"#panel\").stop();\n\r\n});```",
                "jQuery Exercises": "",
                "jQuery Effects Reference": "For a complete overview of all jQuery effects, please go to our jQuery Effect Reference."
            }
        },
        "callback": {
            "title": "jQuery Callback",
            "url": "https://www.w3schools.com/jquery/jquery_callback.asp",
            "info": {
                "jQuery Callback Functions": "JavaScript statements are executed line by line. However, with effects, the next line of code can be run even though the effect is not finished. This can create errors.To prevent this, you can create a callback function.A callback function is executed after the current effect is finished.Typical syntax: $(selector).hide(speed,callback);ExamplesThe example below has a callback parameter that is a function that will be executed after the hide effect is completed:```jquery\n$(\"button\").click(function(){\n$(\"p\").hide(\"slow\", function(){\n    alert(\"The paragraph is now hidden\");\n  });\n\r\n});```The example below has no callback parameter, and the alert box will be displayed before the hide effect is completed:```jquery\n$(\"button\").click(function(){\n  $(\"p\").hide(1000);\nalert(\"The paragraph is now hidden\");\n\r\n});```"
            }
        },
        "chaining": {
            "title": "jQuery Chaining",
            "url": "https://www.w3schools.com/jquery/jquery_chaining.asp",
            "info": {
                "jQuery Method Chaining": "Until now we have been writing jQuery statements one at a time (one after the other).However, there is a technique called chaining, that allows us to run multiple jQuery commands, one after the other, on the same element(s).Tip: This way, browsers do not have to find the same element(s) more than once.To chain an action, you simply append the action to the previous action. The following example chains together the css(), slideUp(), and slideDown() methods. The \"p1\" element first changes to red, then it slides up, and then it slides down: ```jquery\n$(\"#p1\").css(\"color\", \"red\").slideUp(2000).slideDown(2000);```We could also have added more method calls if needed.Tip: When chaining, the line of code could become quite long. However, jQuery is not very strict on the syntax; you can format it like you want, including line breaks and indentations. This also works just fine:```jquery\n$(\"#p1\").css(\"color\", \"red\")\n.slideUp(2000)\n.slideDown(2000);```jQuery throws away extra whitespace and executes the lines above as one long line of code."
            }
        },
        "get": {
            "title": "jQuery Get",
            "url": "https://www.w3schools.com/jquery/jquery_dom_get.asp",
            "info": {
                "jQuery DOM Manipulation": "One very important part of jQuery is the possibility to manipulate the DOM.jQuery comes with a bunch of DOM related methods that make it easy to access and manipulate elements and attributes.",
                "Get Content - text(), html(), and val()": "Three simple, but useful, jQuery methods for DOM manipulation are:The following example demonstrates how to get content with the jQuery text() and html() methods:```jquery\n$(\"#btn1\").click(function(){\nalert(\"Text: \" + $(\"#test\").text());\n\r\n});\n\r\n$(\"#btn2\").click(function(){\nalert(\"HTML: \" + $(\"#test\").html());\n\r\n});```The following example demonstrates how to get the value of an input field with the jQuery val() method:```jquery\n$(\"#btn1\").click(function(){\nalert(\"Value: \" + $(\"#test\").val());\n\r\n});```",
                "Get Attributes - attr()": "The jQuery attr() method is used to get attribute values.The following example demonstrates how to get the value of the href attribute in a link:```jquery\n$(\"button\").click(function(){\nalert($(\"#w3s\").attr(\"href\"));\n\r\n});```The next chapter explains how to set (change) content and attribute values.",
                "jQuery Exercises": "",
                "jQuery HTML Reference": "For a complete overview of all jQuery HTML methods, please go to ourjQuery HTML/CSS Reference."
            }
        },
        "set": {
            "title": "jQuery Set",
            "url": "https://www.w3schools.com/jquery/jquery_dom_set.asp",
            "info": {
                "Set Content - text(), html(), and val()": "We will use the same three methods from the previous page to set content:The following example demonstrates how to set content with the jQuery text(), html(), and val() methods:```jquery\n$(\"#btn1\").click(function(){\n$(\"#test1\").text(\"Hello world!\");\n\r\n});\n\r\n$(\"#btn2\").click(function(){\n$(\"#test2\").html(\"<b>Hello world!</b>\");\n\r\n});\n\r\n$(\"#btn3\").click(function(){\n  $(\"#test3\").val(\"Dolly Duck\");\n\r\n});```",
                "A Callback Function for text(), html(), and val()": "All of the three jQuery methods above: text(), html(), and val(), also come with a callback function. The callback function has two parameters: the index of the current element in the list of elements selected and the original (old) value. You then return the string you wish to use as the new value from the function.The following example demonstrates text() and html() with a callback function:```jquery\n$(\"#btn1\").click(function(){\n$(\"#test1\").text(function(i, origText){\n    return \"Old text: \" + origText + \" New text: Hello world!\n  (index: \" + i + \")\"; \n});\n\r\n});\n\n\r\n$(\"#btn2\").click(function(){\n$(\"#test2\").html(function(i, origText){\n    return \"Old html: \" + origText + \" New html: Hello \r\n<b>world!</b>\n  (index: \" + i + \")\"; \n});\n\r\n});```",
                "Set Attributes - attr()": "The jQuery attr() method is also used to set/change attribute values.The following example demonstrates how to change (set) the value of the href attribute in a link:```jquery\n$(\"button\").click(function(){\n$(\"#w3s\").attr(\"href\", \"https://www.w3schools.com/jquery/\");\n\r\n});```The attr() method also allows you to set multiple attributes at the same time.The following example demonstrates how to set both the href and title attributes at the same time:```jquery\n$(\"button\").click(function(){\n$(\"#w3s\").attr({\n  \"href\" : \"https://www.w3schools.com/jquery/\",\n    \"title\" : \"W3Schools jQuery Tutorial\"\n});\n\r\n});```",
                "A Callback Function for attr()": "The jQuery method attr(), also comes with a callback function. The callback function has two parameters: the index of the current element in the list of elements selected and the original (old) attribute value. You then return the string you wish to use as the new attribute value from the function.The following example demonstrates attr() with a callback function:```jquery\n$(\"button\").click(function(){\n$(\"#w3s\").attr(\"href\", function(i, origValue){\n  return origValue + \"/jquery/\"; \n});\n\r\n});```",
                "jQuery Exercises": "",
                "jQuery HTML Reference": "For a complete overview of all jQuery HTML methods, please go to ourjQuery HTML/CSS Reference."
            }
        },
        "add": {
            "title": "jQuery Add",
            "url": "https://www.w3schools.com/jquery/jquery_dom_add.asp",
            "info": {
                "Add New HTML Content": "We will look at four jQuery methods that are used to add new content:",
                "jQuery append() Method": "The jQuery append() method inserts content AT THE END of the selected HTML elements.```jquery\n$(\"p\").append(\"Some appended text.\");```",
                "jQuery prepend() Method": "The jQuery prepend() method inserts content AT THE BEGINNING of the selected HTML elements.```jquery\n$(\"p\").prepend(\"Some prepended text.\");```",
                "Add Several New Elements With append() and prepend()": "In both examples above, we have only inserted some text/HTML at the beginning/end of the selected HTML elements.However, both the append() and prepend() methods can take an infinite number of new elements as parameters. The new elements can be generated with text/HTML (like we have done in the examples above), with jQuery, or with JavaScript code and DOM elements.In the following example, we create several new elements. The elements are created with text/HTML, jQuery, and JavaScript/DOM. Then we append the new elements to the text with the append() method (this would have worked for prepend() too) :```jquery\nfunction appendText()\r\n{\nvar txt1 = \"<p>Text.</p>\";               \r\n// Create element with HTML  \nvar txt2 = $(\"<p></p>\").text(\"Text.\");   // Create with jQuery\nvar txt3 = document.createElement(\"p\");  // Create with DOM\ntxt3.innerHTML = \"Text.\";\n \r\n$(\"body\").append(txt1, txt2, txt3);      // Append the new elements \n\r\n}```",
                "jQuery after() and before() Methods": "The jQuery after() method inserts content AFTER the selected HTML elements.The jQuery before() method inserts content BEFORE the selected HTML elements.```jquery\n$(\"img\").after(\"Some text after\");\n\n\r\n$(\"img\").before(\"Some text before\");```",
                "Add Several New Elements With after() and before()": "Also, both the after() and before() methods can take an infinite number of new elements as parameters. The new elements can be generated with text/HTML (like we have done in the example above), with jQuery, or with JavaScript code and DOM elements.In the following example, we create several new elements. The elements are created with text/HTML, jQuery, and JavaScript/DOM. Then we insert the new elements to the text with the after() method (this would have worked for before() too) :```jquery\nfunction afterText()\r\n{\nvar txt1 = \"<b>I </b>\";                    \r\n// Create element with HTML  \nvar txt2 = $(\"<i></i>\").text(\"love \");     // Create with jQuery\nvar txt3 = document.createElement(\"b\");    // Create with DOM\ntxt3.innerHTML = \"jQuery!\";\n$(\"img\").after(txt1, txt2, txt3);          \r\n// Insert new elements after <img>\n\r\n}```",
                "jQuery Exercises": "",
                "jQuery HTML Reference": "For a complete overview of all jQuery HTML methods, please go to ourjQuery HTML/CSS Reference."
            }
        },
        "remove": {
            "title": "jQuery Remove",
            "url": "https://www.w3schools.com/jquery/jquery_dom_remove.asp",
            "info": {
                "Remove Elements/Content": "To remove elements and content, there are mainly two jQuery methods:",
                "jQuery remove() Method": "The jQuery remove() method removes the selected element(s) and its child elements.```jquery\n$(\"#div1\").remove();```",
                "jQuery empty() Method": "The jQuery empty() method removes the child elements of the selected element(s).```jquery\n$(\"#div1\").empty();```",
                "Filter the Elements to be Removed": "The jQuery remove() method also accepts one parameter, which allows you to filter the elements to be removed.The parameter can be any of the jQuery selector syntaxes.The following example removes all <p> elements with class=\"test\":\u00a0\u00a0 ```jquery\n$(\"p\").remove(\".test\");```This example removes all <p> elements with class=\"test\" and class=\"demo\":\u00a0\u00a0```jquery\n$(\"p\").remove(\".test, .demo\");```",
                "jQuery Exercises": "",
                "jQuery HTML Reference": "For a complete overview of all jQuery HTML methods, please go to ourjQuery HTML/CSS Reference."
            }
        },
        "cssclasses": {
            "title": "jQuery CSS Classes",
            "url": "https://www.w3schools.com/jquery/jquery_css_classes.asp",
            "info": {
                "jQuery Manipulating CSS": "jQuery has several methods for CSS manipulation. We will look at the following methods:",
                "Example Stylesheet": "The following stylesheet will be used for all the examples on this page:",
                "jQuery addClass() Method": "The following example shows how to add class attributes to different elements. Of course you can select multiple elements, when adding classes:```jquery\n$(\"button\").click(function(){\n$(\"h1, h2, p\").addClass(\"blue\");\n  $(\"div\").addClass(\"important\");\n\r\n});```You can also specify multiple classes within the addClass() method:```jquery\n$(\"button\").click(function(){\n  $(\"#div1\").addClass(\"important blue\");\n\r\n});```",
                "jQuery removeClass() Method": "The following example shows how to remove a specific class attribute from different elements:```jquery\n$(\"button\").click(function(){\n$(\"h1, h2, p\").removeClass(\"blue\");\n\r\n});```",
                "jQuery toggleClass() Method": "The following example will show how to use the jQuery toggleClass() method. This method toggles between adding/removing classes from the selected elements:```jquery\n$(\"button\").click(function(){\n$(\"h1, h2, p\").toggleClass(\"blue\");\n\r\n});```",
                "jQuery css() Method": "The jQuery css() method will be explained in the next chapter.",
                "jQuery Exercises": "",
                "jQuery CSS Reference": "For a complete overview of all jQuery CSS methods, please go to our jQuery HTML/CSS Reference."
            }
        },
        "css()": {
            "title": "jQuery css()",
            "url": "https://www.w3schools.com/jquery/jquery_css.asp",
            "info": {
                "jQuery css() Method": "The css() method sets or returns one or more style properties for the selected elements.",
                "Return a CSS Property": "To return the value of a specified CSS property, use the following syntax:The following example will return the background-color value of the FIRST matched element:```jquery\n$(\"p\").css(\"background-color\");```",
                "Set a CSS Property": "To set a specified CSS property, use the following syntax:The following example will set the background-color value for ALL matched elements:```jquery\n$(\"p\").css(\"background-color\", \"yellow\");```",
                "Set Multiple CSS Properties": "To set multiple CSS properties, use the following syntax:The following example will set a background-color and a font-size for ALL matched elements:```jquery\n$(\"p\").css({\"background-color\": \"yellow\", \"font-size\": \"200%\"});```",
                "jQuery Exercises": "",
                "jQuery CSS Reference": "For a complete overview of all jQuery CSS methods, please go to our jQuery HTML/CSS Reference."
            }
        },
        "dimensions": {
            "title": "jQuery Dimensions",
            "url": "https://www.w3schools.com/jquery/jquery_dimensions.asp",
            "info": {
                "jQuery Dimension Methods": "jQuery has several important methods for working with dimensions:",
                "jQuery Dimensions": "",
                "jQuery width() and height() Methods": "The width() method sets or returns the width of an element (excludes padding, border and margin).The height() method sets or returns the height of an element (excludes padding, border and margin).The following example returns the width and height of a specified <div> element:```jquery\n$(\"button\").click(function(){\nvar txt = \"\";\ntxt += \"Width: \" + $(\"#div1\").width() + \"</br>\";\ntxt += \"Height: \" + $(\"#div1\").height();\n$(\"#div1\").html(txt);\n\r\n});```",
                "jQuery innerWidth() and innerHeight() Methods": "The innerWidth() method returns the width of an element (includes padding).The innerHeight() method returns the height of an element (includes padding).The following example returns the inner-width/height of a specified <div> element:```jquery\n$(\"button\").click(function(){\n  var txt = \"\";\n  txt += \"Inner width: \" + $(\"#div1\").innerWidth() + \"</br>\";\n  txt += \"Inner height: \" + $(\"#div1\").innerHeight();\n  $(\"#div1\").html(txt);\n\r\n});```",
                "jQuery outerWidth() and outerHeight() Methods": "The outerWidth() method returns the width of an element (includes padding and border).The outerHeight() method returns the height of an element (includes padding and border).The following example returns the outer-width/height of a specified <div> element:```jquery\n$(\"button\").click(function(){\n  var txt = \"\";\ntxt += \"Outer width: \" + $(\"#div1\").outerWidth() + \"</br>\";\ntxt += \"Outer height: \" + $(\"#div1\").outerHeight();\n  $(\"#div1\").html(txt);\n\r\n});```The outerWidth(true) method returns the width of an element (includes padding, border, and margin).The outerHeight(true) method returns the height of an element (includes padding, border, and margin).```jquery\n$(\"button\").click(function(){\n  var txt = \"\";\n  txt += \"Outer width (+margin): \" + $(\"#div1\").outerWidth(true) + \"</br>\";\n  txt += \"Outer height (+margin): \" + $(\"#div1\").outerHeight(true);\n  $(\"#div1\").html(txt);\n\r\n});```",
                "jQuery More width() and height()": "The following example returns the width and height of the document (the HTML document) and window (the browser viewport):```jquery\n$(\"button\").click(function(){\n  var txt = \"\";\n  txt += \"Document width/height: \" + $(document).width();\n  txt += \"x\" + $(document).height() + \"\\n\";\ntxt += \"Window width/height: \" + $(window).width();\n  txt += \"x\" + $(window).height();\n  alert(txt);\n\r\n});```The following example sets the width and height of a specified <div> element:```jquery\n$(\"button\").click(function(){\n$(\"#div1\").width(500).height(500);\n\r\n});```",
                "jQuery Exercises": "",
                "jQuery CSS Reference": "For a complete overview of all jQuery CSS methods, please go to our jQuery HTML/CSS Reference."
            }
        },
        "traversing": {
            "title": "jQuery Traversing",
            "url": "https://www.w3schools.com/jquery/jquery_traversing.asp",
            "info": {
                "What is Traversing?": "jQuery traversing, which means \"move through\", are used to \"find\" (or select) HTML elements based on their relation to other elements. Start with one selection and move through that selection until you reach the elements you desire.The image below illustrates an HTML page as a tree (DOM tree). With jQuery traversing, you can easily move up (ancestors), down (descendants) and sideways (siblings) in the tree,  starting from the selected (current) element. This movement is called traversing - or moving through - the DOM tree.Illustration explained:",
                "Traversing the DOM": "jQuery provides a variety of methods that allow us to traverse the DOM.The largest category of traversal methods are tree-traversal.The next chapters will show us how to travel up, down and sideways in the DOM tree.",
                "jQuery Traversing Reference": "For a complete overview of all jQuery Traversing methods, please go to ourjQuery Traversing Reference.",
                "jQuery Traversing Methods": ""
            }
        },
        "ancestors": {
            "title": "jQuery Ancestors",
            "url": "https://www.w3schools.com/jquery/jquery_traversing_ancestors.asp",
            "info": {
                "Traversing Up the DOM Tree": "Three useful jQuery methods for traversing up the DOM tree are:",
                "jQuery parent() Method": "The parent() method returns the direct parent element of the selected element.This method only traverse a single level up the DOM tree.The following example returns the direct parent element of each <span> elements:```jquery\n$(document).ready(function(){\n  $(\"span\").parent();\n});```",
                "jQuery parents() Method": "The parents() method returns all ancestor elements of the selected element, all the way up to the document's root element (<html>).The following example returns all ancestors of all <span> elements:```jquery\n$(document).ready(function(){\n  $(\"span\").parents();\n});```You can also use an optional parameter to filter the search for ancestors.The following example returns all ancestors of all <span> elements that are <ul> elements:```jquery\n$(document).ready(function(){\n  $(\"span\").parents(\"ul\");\n});```",
                "jQuery parentsUntil() Method": "The parentsUntil() method returns all ancestor elements between two given arguments.The following example returns all\u00a0ancestor elements between a <span> and a <div> element:```jquery\n$(document).ready(function(){\n  $(\"span\").parentsUntil(\"div\");\n});```",
                "jQuery Exercises": "",
                "jQuery Traversing Reference": "For a complete overview of all jQuery Traversing methods, please go to ourjQuery Traversing Reference."
            }
        },
        "descendants": {
            "title": "jQuery Descendants",
            "url": "https://www.w3schools.com/jquery/jquery_traversing_descendants.asp",
            "info": {
                "Traversing Down the DOM Tree": "Two useful jQuery methods for traversing down the DOM tree are:",
                "jQuery children() Method": "The children() method returns all direct children of the selected element.This method only traverses a single level down the DOM tree.The following example returns all elements that are direct children of each <div> elements:```jquery\n$(document).ready(function(){\n  $(\"div\").children();\n});```You can also use an optional parameter to filter the search for children.The following example returns all <p> elements with the class name \"first\", that are direct children of <div>:```jquery\n$(document).ready(function(){\n  $(\"div\").children(\"p.first\");\n});```",
                "jQuery find() Method": "The find() method returns descendant elements of the selected element, all the way down to the last descendant.The following example returns all <span> elements that are descendants of <div>:```jquery\n$(document).ready(function(){\n  $(\"div\").find(\"span\");\n});```The following example returns all descendants of <div>:```jquery\n$(document).ready(function(){\n  $(\"div\").find(\"*\");\n});```",
                "jQuery Exercises": "",
                "jQuery Traversing Reference": "For a complete overview of all jQuery Traversing methods, please go to ourjQuery Traversing Reference."
            }
        },
        "siblings": {
            "title": "jQuery Siblings",
            "url": "https://www.w3schools.com/jquery/jquery_traversing_siblings.asp",
            "info": {
                "Traversing Sideways in The DOM Tree": "There are many useful jQuery methods for traversing sideways in the DOM tree:",
                "jQuery siblings() Method": "The siblings() method returns all sibling elements of the selected element.The following example returns all sibling elements of <h2>:```jquery\n$(document).ready(function(){\n  $(\"h2\").siblings();\n});```You can also use an optional parameter to filter the search for siblings.The following example returns all sibling elements of <h2> that are <p> elements:```jquery\n$(document).ready(function(){\n  $(\"h2\").siblings(\"p\");\n});```",
                "jQuery next() Method": "The next() method returns the next sibling element of the selected element.The following example returns the next sibling of <h2>:```jquery\n$(document).ready(function(){\n  $(\"h2\").next();\n});```",
                "jQuery nextAll() Method": "The nextAll() method returns all next sibling elements of the selected element.The following example returns all next sibling elements of <h2>:```jquery\n$(document).ready(function(){\n  $(\"h2\").nextAll();\n});```",
                "jQuery nextUntil() Method": "The nextUntil() method returns all next sibling elements between two given arguments.The following example returns all\u00a0sibling elements between a <h2> and a <h6> element:```jquery\n$(document).ready(function(){\n  $(\"h2\").nextUntil(\"h6\");\n});```",
                "jQuery prev(), prevAll() & prevUntil() Methods": "The prev(), prevAll() and prevUntil() methods work just like the methods above but with reverse functionality: they return previous sibling elements (traverse backwards along sibling elements in the DOM tree, instead of forward).",
                "jQuery Exercises": "",
                "jQuery Traversing Reference": "For a complete overview of all jQuery Traversing methods, please go to ourjQuery Traversing Reference."
            }
        },
        "filtering": {
            "title": "jQuery Filtering",
            "url": "https://www.w3schools.com/jquery/jquery_traversing_filtering.asp",
            "info": {
                "The first(), last(), eq(), filter() and not() Methods": "The most basic filtering methods are first(), last() and eq(), which allow you to select a specific element based on its position in a group of elements. Other filtering methods, like filter() and not() allow you to select elements that match, or do not match, a certain criteria. ",
                "jQuery first() Method": "The first() method returns the first element of the specified elements.The following example selects the first <div> element:```jquery\n$(document).ready(function(){\n  $(\"div\").first();\n});```",
                "jQuery last() Method": "The last() method returns the last element of the specified elements.The following example selects the last <div> element:```jquery\n$(document).ready(function(){\n  $(\"div\").last();\n});```",
                "jQuery eq() method": "The eq() method returns an element with a specific index number of the selected elements.The index numbers start at 0, so the first element will have the index number 0 and not 1. The following example selects the second <p> element (index number 1):```jquery\n$(document).ready(function(){\n  $(\"p\").eq(1);\n});```",
                "jQuery filter() Method": "The filter() method lets you specify a criteria. Elements that do not match the criteria are removed from the selection, and those that match will be returned.The following example returns all <p> elements with class name \"intro\":```jquery\n$(document).ready(function(){\n  $(\"p\").filter(\".intro\");\n});```",
                "jQuery not() Method": "The not() method returns all elements that do not match the criteria.Tip: The not() method is the opposite of filter().The following example returns all <p> elements that do not have class name \"intro\":```jquery\n$(document).ready(function(){\n  $(\"p\").not(\".intro\");\n});```",
                "jQuery Exercises": "",
                "jQuery Traversing Reference": "For a complete overview of all jQuery Traversing methods, please go to ourjQuery Traversing Reference."
            }
        },
        "ajaxintro": {
            "title": "jQuery AJAX Intro",
            "url": "https://www.w3schools.com/jquery/jquery_ajax_intro.asp",
            "info": {
                "What is AJAX?": "AJAX = Asynchronous JavaScript and XML.In short; AJAX is about loading data in the background and display it on the webpage, without reloading the whole page.Examples of applications using AJAX: Gmail, Google Maps, Youtube, and Facebook tabs.You can learn more about AJAX in our AJAX tutorial.",
                "What About jQuery and AJAX?": "jQuery provides several methods for AJAX functionality.With the jQuery AJAX methods, you can request text, HTML, XML, or JSON from a remote server using both HTTP Get and HTTP Post - And you can load the external data directly into the selected HTML elements of your web page!",
                "jQuery AJAX Methods": "In the next chapters we will look at the most important jQuery AJAX methods."
            }
        },
        "load": {
            "title": "jQuery Load",
            "url": "https://www.w3schools.com/jquery/jquery_ajax_load.asp",
            "info": {
                "jQuery load() Method": "The jQuery load() method is a simple, but powerful AJAX method.The load() method loads data from a server and puts the returned data into the selected element.Syntax:The required URL parameter specifies the URL you wish to load.The optional data parameter specifies a set of querystring key/value pairs to send along with the request.The optional callback parameter is the name of a function to be executed after the load() method is completed.Here is the content of our example file: \"demo\\_test.txt\":The following example loads the content of the file \"demo\\_test.txt\" into a specific <div> element:```jquery\n$(\"#div1\").load(\"demo_test.txt\");```It is also possible to add a jQuery selector to the URL parameter. The following example loads the content of the element with id=\"p1\", inside the file \"demo\\_test.txt\", into a specific <div> element:```jquery\n$(\"#div1\").load(\"demo_test.txt #p1\");```The optional callback parameter specifies a callback function to run when the load() method is completed. The callback function can have different parameters:The following example displays an alert box after the load() method completes. If the load() method has succeeded, it displays \"External content loaded successfully!\", and if it fails it displays an error message:",
                "jQuery AJAX Reference": "For a complete overview of all jQuery AJAX methods, please go to our jQuery AJAX Reference."
            }
        },
        "get/post": {
            "title": "jQuery Get/Post",
            "url": "https://www.w3schools.com/jquery/jquery_ajax_get_post.asp",
            "info": {
                "HTTP Request: GET vs. POST": "Two commonly used methods for a request-response between a client and server are: GET and POST.GET is basically used for just getting (retrieving) some data from the server.Note: The GET method may return cached data.POST can also be used to get some data from the server. However, the POST method NEVER caches data, and is often used to send data along with the request.To learn more about GET and POST, and the differences between the two methods, please read our HTTP Methods GET vs POST chapter.",
                "jQuery $.get() Method": "The $.get() method requests data from the server with an HTTP GET request.Syntax:The required URL parameter specifies the URL you wish to request.The optional callback parameter is the name of a function to be executed if the request succeeds.The following example uses the $.get() method to retrieve data from a file on the server:```jquery\n$(\"button\").click(function(){\n  $.get(\"demo_test.asp\", function(data, status){\n  alert(\"Data: \" + data + \"\\nStatus: \" + status);\n});\n\r\n});```The first parameter of $.get() is the URL we wish to request (\"demo\\_test.asp\").The second parameter is a callback function. The first callback parameter holds the content of the page requested, and the second callback parameter holds the status of the request.Tip: Here is how the ASP file looks like (\"demo\\_test.asp\"):",
                "jQuery $.post() Method": "The $.post() method requests data from the server using an HTTP POST request.Syntax:The required URL parameter specifies the URL you wish to request.The optional data parameter specifies some data to send along with the request.The optional callback parameter is the name of a function to be executed if the request succeeds.The following example uses the $.post() method to send some data along with the request:```jquery\n$(\"button\").click(function(){\n$.post(\"demo_test_post.asp\",\n  {\n    name: \"Donald Duck\",\n    city: \"Duckburg\"\n},\nfunction(data, status){\n  alert(\"Data: \" + data + \"\\nStatus: \" + status);\n  });\n\r\n});```The first parameter of $.post() is the URL we wish to request (\"demo\\_test\\_post.asp\").Then we pass in some data to send along with the request (name and city).The ASP script in \"demo\\_test\\_post.asp\" reads the parameters, processes them, and returns a result.The third parameter is a callback function. The first callback parameter holds the content of the page requested, and the second callback parameter holds the status of the request.Tip: Here is how the ASP file looks like (\"demo\\_test\\_post.asp\"):",
                "jQuery AJAX Reference": "For a complete overview of all jQuery AJAX methods, please go to our jQuery AJAX Reference."
            }
        },
        "noconflict()": {
            "title": "jQuery noConflict()",
            "url": "https://www.w3schools.com/jquery/jquery_noconflict.asp",
            "info": {
                "jQuery and Other JavaScript Frameworks": "As you already know; jQuery uses the $ sign as a shortcut for jQuery.There are many other popular JavaScript frameworks like: Angular, Backbone, Ember, Knockout, and more.What if other JavaScript frameworks also use the $ sign as a shortcut?If two different frameworks are using the same shortcut, one of them might stop working.The jQuery team have already thought about  this, and implemented the noConflict() method.",
                "The jQuery noConflict() Method": "The noConflict() method releases the hold on the $ shortcut identifier, so that other scripts can use it.You can of course still use jQuery, simply by writing the full name instead of the shortcut:```jquery\n$.noConflict();\n\r\njQuery(document).ready(function(){\njQuery(\"button\").click(function(){\n    jQuery(\"p\").text(\"jQuery is still working!\");\n});\n\r\n});```You can also create your own shortcut very easily. The noConflict() method returns a reference to jQuery, that you can save in a variable, for later use. Here is an example:```jquery\nvar jq = $.noConflict();\n\r\njq(document).ready(function(){\njq(\"button\").click(function(){\n  jq(\"p\").text(\"jQuery is still working!\");\n});\n\r\n});```If you have a block of jQuery code which uses the $ shortcut and you do not want to change it all, you can pass the $ sign in as a parameter to the ready method. This allows you to access jQuery using $, inside this function - outside of it, you will have to use \"jQuery\":",
                "jQuery Misc Reference": "For a complete overview of all jQuery Misc methods, please go to ourjQuery Misc Reference."
            }
        },
        "filters": {
            "title": "jQuery Filters",
            "url": "https://www.w3schools.com/jquery/jquery_filters.asp",
            "info": {
                "jQuery Filters": "Use jQuery to filter/search for specific elements.",
                "Filter Tables": "Perform a case-insensitive search for items in a table:```jquery\n<script>\n$(document).ready(function(){\n  $(\"#myInput\").on(\"keyup\", function() {\n    var value = $(this).val().toLowerCase();\n    $(\"#myTable tr\").filter(function() {\n      $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)\n    });\n });\n});\n</script>```Example explained: We use jQuery to loop through each table rows to check if there are any text values that matches the value of the input field. The toggle() method hides the row (display:none) that does not match the search. We use the toLowerCase() DOM method to convert the text to lower case, which makes the search case insensitive (allows \"john\", \"John\", and even \"JOHN\" on search).",
                "Filter Lists": "Perform a case-insensitive search for items in a list:",
                "Filter Anything": "Perform a case-insensitive search for text inside a div element:"
            }
        },
        "overview": {
            "title": "jQuery Overview",
            "url": "https://www.w3schools.com/jquery/jquery_ref_overview.asp",
            "info": {
                "jQuery Reference": "The jQuery reference contains a list of all jQuery selectors, methods, properties and events, along with examples."
            }
        },
        "effects": {
            "title": "jQuery Effects",
            "url": "https://www.w3schools.com/jquery/jquery_ref_effects.asp",
            "info": {
                "jQuery Effect Methods": "The following table lists all the jQuery methods for creating animation effects."
            }
        },
        "html/css": {
            "title": "jQuery HTML/CSS",
            "url": "https://www.w3schools.com/jquery/jquery_ref_html.asp",
            "info": {
                "jQuery HTML / CSS Methods": "The following table lists all the methods used to manipulate the HTML and CSS.The methods below work for both HTML and XML documents. Exception: the html() method."
            }
        },
        "ajax": {
            "title": "jQuery AJAX",
            "url": "https://www.w3schools.com/jquery/jquery_ref_ajax.asp",
            "info": {
                "jQuery AJAX Methods": "AJAX is the art of exchanging data with a server, and update parts of a web page - without reloading the whole page.The following table lists all the jQuery AJAX methods:"
            }
        },
        "misc": {
            "title": "jQuery Misc",
            "url": "https://www.w3schools.com/jquery/jquery_ref_misc.asp",
            "info": {
                "jQuery Misc Methods": ""
            }
        },
        "properties": {
            "title": "jQuery Properties",
            "url": "https://www.w3schools.com/jquery/jquery_ref_prop.asp",
            "info": {
                "jQuery Properties": ""
            }
        }
    },
    "php": {
        "install": {
            "title": "PHP Install",
            "url": "https://www.w3schools.com/php/php_install.asp",
            "info": {
                "What Do I Need?": "To start using PHP, you can:",
                "Use a Web Host With PHP Support": "If your server has activated support for PHP you do not need to do anything.Just create some .php files, place them in your web directory, and the server will automatically parse them for you.You do not need to compile anything or install any extra tools.Because PHP is free, most web hosts offer PHP support.",
                "Set Up PHP on Your Own PC": "However, if your server does not support PHP, you must:The official PHP website (PHP.net) has installation instructions for PHP:http://php.net/manual/en/install.php"
            }
        },
        "syntax": {
            "title": "PHP Syntax",
            "url": "https://www.w3schools.com/php/php_syntax.asp",
            "info": {
                "Basic PHP Syntax": "A PHP script can be placed anywhere in the document.A PHP script starts with <?php and ends with ?>:The default file extension for PHP files is \".php\".A PHP file normally contains HTML tags, and some PHP scripting code.Below, we have an example of a simple PHP file, with a PHP script that uses a built-in PHP function \"echo\" to output the text\"Hello World!\" on a web page:```php\n<!DOCTYPE html>\n\r\n <html>\n  <body>\n  <h1>My first PHP page</h1>\n\r\n <?php\n\r\n echo \"Hello World!\";\n?>\n  </body>\n  </html>```Note: PHP statements end with a semicolon (;).",
                "PHP Case Sensitivity": "In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive.In the example below, all three echo statements below are equal and legal:```php\n<!DOCTYPE html>\n\r\n <html>\n  <body>\n  <?php\n\r\n ECHO \"Hello World!<br>\";\necho \"Hello World!<br>\";\n\r\n EcHo \"Hello World!<br>\";\n?>\n  </body>\n  </html>```Look at the example below; only the first statement will display the value of the $color variable! This is because $color, $COLOR, and $coLOR are treated as three different variables:```php\n<!DOCTYPE html>\n\r\n <html>\n  <body>\n  <?php\n$color = \"red\";\n\r\n echo \"My car is \" . $color . \"<br>\";\necho \"My house is \" . $COLOR . \"<br>\";\necho \"My boat is \" . $coLOR . \"<br>\";\n?>\n  </body>\n  </html>```",
                "PHP Exercises": ""
            }
        },
        "comments": {
            "title": "PHP Comments",
            "url": "https://www.w3schools.com/php/php_comments.asp",
            "info": {
                "Comments in PHP": "A comment in PHP code is a line that is not executed as a part of the program. Its only purpose is to be read by someone who is looking at the code.Comments can be used to:PHP supports several ways of commenting:```php\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\r\n<?php\n\r\n// This is a single-line comment\n\r\n # This is also a single-line comment\n?>\n\r\n</body>\n\r\n</html>``````php\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\r\n<?php\n\r\n/*\n\r\nThis is a multiple-lines comment block\nthat spans over multiple\nlines\n\r\n*/\n?>\n\r\n</body>\n\r\n</html>``````php\n<!DOCTYPE html>\n\r\n<html>\n\r\n<body>\n\r\n<?php\n// You can also use comments to leave out parts of a code line\n$x = 5 /* + 15 */ + 5;\necho $x;\n?>\n\r\n</body>\n\r\n</html>```"
            }
        },
        "variables": {
            "title": "PHP Variables",
            "url": "https://www.w3schools.com/php/php_variables.asp",
            "info": {
                "Creating (Declaring) PHP Variables": "In PHP, a variable starts with the $ sign, followed by the name of the variable:```php\n<?php\n\r\n$txt = \"Hello world!\";\n\r\n$x = 5;\n$y = 10.5;\n\r\n?>```After the execution of the statements above, the variable $txt will hold the value Hello world!, the variable $x will hold the value 5, and the variable $y will hold the value 10.5.Note: When you assign a text value to a variable, put quotes around the value.Note: Unlike other programming languages, PHP has no command for declaring a variable. It is created the moment you first assign a value to it.",
                "PHP Variables": "A variable can have a short name (like x and y) or a more descriptive name (age, carname, total\\_volume).Rules for PHP variables:",
                "Output Variables": "The PHP echo statement is often used to output data to the screen.The following example will show how to output text and a variable:```php\n<?php\n\r\n$txt = \"W3Schools.com\";\n\r\n echo \"I love $txt!\";\n?>```The following example will produce the same output as the example above:```php\n<?php\n\r\n$txt = \"W3Schools.com\";\n\r\n echo \"I love \" . $txt . \"!\";\n?>```The following example will output the sum of two variables:```php\n<?php\n\r\n $x = 5;\n$y = 4;\necho $x + $y;\n?>```Note: You will learn more about the echo statement and how to output data to the screen in the next chapter.",
                "PHP is a Loosely Typed Language": "In the example above, notice that we did not have to tell PHP which data type the variable is.PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.In PHP 7, type declarations were added. This gives an option to specify the data type expected when declaring a function, and by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch.You will learn more about strict and non-strict requirements, and  data type declarations in the PHP Functions chapter.",
                "PHP Variables Scope": "In PHP, variables can be declared anywhere in the script.The scope of a variable is the part of the script where the variable can be referenced/used.PHP has three different variable scopes:",
                "Global and Local Scope": "A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:```php\n<?php\n$x = 5; // global scope\nfunction myTest() {\n  // using x inside this function will generate an error\n  echo \"<p>Variable x inside function is: $x</p>\";\n} \nmyTest();\necho \"<p>Variable x outside function is: $x</p>\";\n?>```A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:```php\n<?php\nfunction myTest() {\n  $x = 5; // local scope\n  echo \"<p>Variable x inside function is: $x</p>\";\n} \nmyTest();\n// using x outside the function will generate an error\necho \"<p>Variable x outside function is: $x</p>\";\n?>```",
                "PHP The global Keyword": "The global keyword is used to access a global variable from within a function.To do this, use the global keyword before the variables (inside the function):```php\n<?php\n\r\n$x = 5;\n$y = 10;\n\r\nfunction myTest()\r\n{\nglobal $x, $y;\n\r\n \r\n$y = $x + $y;\n\r\n}\n\r\nmyTest();\n\r\necho $y; // outputs 15\n\r\n?>```PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly.The example above can be rewritten like this:```php\n<?php\n\r\n$x = 5;\n\r\n$y = 10;\n\n\r\nfunction myTest()\r\n{\n\r\n \r\n$GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];\n\r\n} \n\n\r\nmyTest();\n\r\necho $y; // outputs 15\n\r\n?>```",
                "PHP The static Keyword": "Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job.To do this, use the static keyword when you first declare the variable:```php\n<?php\nfunction myTest()\r\n{\nstatic $x = 0;\n  echo $x;\n  $x++;\n\r\n}\n\r\nmyTest();\n\r\nmyTest();\n\r\nmyTest();\n?>```Then, each time the function is called, that variable will still have the information it contained from the last time the function was called.Note: The variable is still local to the function.",
                "PHP Exercises": ""
            }
        },
        "echo/print": {
            "title": "PHP Echo / Print",
            "url": "https://www.w3schools.com/php/php_echo_print.asp",
            "info": {
                "PHP echo and print Statements": "echo and print are more or less the same. They are both used to output data to the screen. The differences are small: echo has no return value while print has a return value of 1 so it can be used in expressions. echo can take multiple parameters (although such usage is rare) while print can take one argument. echo is marginally faster than print.",
                "The PHP echo Statement": "The echo statement can be used with or without parentheses: echo or echo().Display TextThe following example shows how to output text with the echo command (notice that the text can contain HTML markup):```php\n<?php\n\r\n echo \"<h2>PHP is Fun!</h2>\";\n\r\n echo \"Hello world!<br>\";\necho \"I'm about to learn PHP!<br>\";\n\r\n echo \"This \", \"string \", \"was \", \"made \", \"with multiple parameters.\";\n\r\n?>```Display VariablesThe following example shows how to output text and variables with the echo statement:```php\n<?php\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\r\n $x = 5;\n$y = 4;\n\necho \"<h2>\" . $txt1 . \"</h2>\";\necho \"Study PHP at \" . $txt2 . \"<br>\";\necho $x + $y;\n?>```",
                "The PHP print Statement": "The print statement can be used with or without parentheses: print or print().Display TextThe following example shows how to output text with the print command (notice that the text can contain HTML markup):```php\n<?php\n\r\n print \"<h2>PHP is Fun!</h2>\";\n\r\n print \"Hello world!<br>\";\nprint \"I'm about to learn PHP!\";\n\r\n?>```Display VariablesThe following example shows how to output text and variables with the print statement:```php\n<?php\n$txt1 = \"Learn PHP\";\n$txt2 = \"W3Schools.com\";\n\r\n $x = 5;\n$y = 4;\n\nprint \"<h2>\" . $txt1 . \"</h2>\";\n\r\n print \"Study PHP at \" . $txt2 . \"<br>\";\nprint $x + $y;\n?>```"
            }
        },
        "datatypes": {
            "title": "PHP Data Types",
            "url": "https://www.w3schools.com/php/php_datatypes.asp",
            "info": {
                "PHP Data Types": "Variables can store data of different types, and different data types can do different things.PHP supports the following data types:",
                "PHP String": "A string is a sequence of characters, like \"Hello world!\".A string can be any text inside quotes. You can use single or double quotes:```php\n<?php \n$x = \"Hello world!\";\n$y = 'Hello world!';\necho $x;\necho \"<br>\"; \necho $y;\n?>```",
                "PHP Integer": "An integer data type is a non-decimal number between -2,147,483,648 and 2,147,483,647.Rules for integers:In the following example $x is an integer. The PHP var\\_dump() function returns the data type and value:```php\n<?php \n$x = 5985;\nvar_dump($x);\n?>```",
                "PHP Float": "A float (floating point number) is a number with a decimal point or a number in exponential form.In the following example $x is a float. The PHP var\\_dump() function returns the data type and value:```php\n<?php \n$x = 10.365;\nvar_dump($x);\n?>```",
                "PHP Boolean": "A Boolean represents two possible states: TRUE or FALSE.Booleans are often used in conditional testing. You will learn more about conditional testing in a later chapter of this tutorial.",
                "PHP Array": "An array stores multiple values in one single variable.In the following example $cars is an array. The PHP var\\_dump() function returns the data type and value:```php\n<?php \n$cars = array(\"Volvo\",\"BMW\",\"Toyota\");\nvar_dump($cars);\n\r\n ?>```You will learn a lot more about arrays in later chapters of this tutorial.",
                "PHP Object": "An object is a data type which stores data and information on how to process that data.In PHP, an object must be explicitly declared.First we must declare a class of object. For this, we use the class keyword. A class is a structure that can contain properties and methods:```php\n<?php\nclass Car {\n  function Car() {\n    $this->model = \"VW\";\n  }\n}\n// create an object\n\r\n $herbie = new Car();\n// show object properties\necho $herbie->model;\n?>```",
                "PHP NULL Value": "Null is a special data type which can have only one value: NULL.A variable of data type NULL is a variable that has no value assigned to it.Tip: If a variable is created without a value, it is automatically assigned a value of NULL.Variables can also be emptied by setting the value to NULL:```php\n<?php\n$x = \"Hello world!\";\n$x = null;\nvar_dump($x);\n?>```",
                "PHP Resource": "The special resource type is not an actual data type. It is the storing of a reference to functions and resources external to PHP.A common example of using the resource data type is a database call.We will not talk about the resource type here, since it is an advanced topic."
            }
        },
        "strings": {
            "title": "PHP Strings",
            "url": "https://www.w3schools.com/php/php_string.asp",
            "info": {
                "PHP String Functions": "In this chapter we will look at some commonly used functions to manipulate strings.",
                "strlen() - Return the Length of a String": "The PHP strlen() function returns the length of a string.```php\n<?php\n\r\necho strlen(\"Hello world!\"); // outputs 12\n\r\n?>```",
                "str_word_count() - Count Words in a String": "The PHP str\\_word\\_count() function counts the number of words in a string.```php\n<?php\n\r\necho str_word_count(\"Hello world!\"); // outputs 2\n\r\n?>```",
                "strrev() - Reverse a String": "The PHP strrev() function reverses a string.```php\n<?php\n\r\necho strrev(\"Hello world!\"); // outputs !dlrow olleH\n\r\n?>```",
                "strpos() - Search For a Text Within a String": "The PHP strpos() function searches for a specific text within a string. If a match is found, the function returns the character position of the first match. If no match is found, it will return FALSE.```php\n<?php\n\r\necho strpos(\"Hello world!\", \"world\"); // outputs 6\n\r\n?>```Tip:  The first character position in a string is 0 (not 1).",
                "str_replace() - Replace Text Within a String": "The PHP str\\_replace() function replaces some characters with some other characters in a string.```php\n<?php\n\r\necho str_replace(\"world\", \"Dolly\", \"Hello world!\"); // outputs Hello Dolly!\n\r\n?>```",
                "Complete PHP String Reference": "For a complete reference of all string functions, go to our complete PHP String Reference.The PHP string reference contains description and example of use, for each function!",
                "PHP Exercises": ""
            }
        },
        "numbers": {
            "title": "PHP Numbers",
            "url": "https://www.w3schools.com/php/php_numbers.asp",
            "info": {
                "PHP Numbers": "One thing to notice about PHP is that it provides automatic data type conversion.So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a string to the same variable, the type will change to a string.This automatic conversion can sometimes break your code.",
                "PHP Integers": "An integer is a number without any decimal part.2, 256, -256, 10358, -179567 are all integers. While 7.56, 10.0, 150.67 are floats.So, an integer data type is a non-decimal number between -2147483648 and 2147483647. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an integer.Another important thing to know is that even if 4 \\* 2.5 is 10, the result is stored as float, because one of the operands is a float (2.5).Here are some rules for integers:PHP has the following functions to check if the type of a variable is integer:```php\n<?php \n$x = 5985;\nvar_dump(is_int($x));\n$x = 59.85;\nvar_dump(is_int($x));\n?>```",
                "PHP Floats": "A float is a number with a decimal point or a number in exponential form.2.0, 256.4, 10.358, 7.64E+5, 5.56E-5 are all floats.The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.PHP has the following functions to check if the type of a variable is float:```php\n<?php \n$x = 10.365;\nvar_dump(is_float($x));\n?>```",
                "PHP Infinity": "A numeric value that is larger than PHP\\_FLOAT\\_MAX is considered infinite.PHP has the following functions to check if a numeric value is finite or infinite:However, the PHP var\\_dump() function returns the data type and value:```php\n<?php \n$x = 1.9e411;\nvar_dump($x);\n?>```",
                "PHP NaN": "NaN stands for Not a Number.NaN is used for impossible mathematical operations.PHP has the following functions to check if a value is not a number:However, the PHP var\\_dump() function returns the data type and value:```php\n<?php\n$x = acos(8);\nvar_dump($x);\n?>```",
                "PHP Numerical Strings": "The PHP is\\_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number or a numeric string, false otherwise.```php\n<?php \n$x = 5985;\nvar_dump(is_numeric($x));\n$x = \"5985\";\nvar_dump(is_numeric($x));\n$x = \"59.85\" + 100;\nvar_dump(is_numeric($x));\n$x = \"Hello\";\nvar_dump(is_numeric($x));\n?>```",
                "PHP Casting Strings and Floats to Integers": "Sometimes you need to cast a numerical value into another data type.The (int), (integer), or intval() function are often used to convert a value to an integer.```php\n<?php\n// Cast float to int \n$x = 23465.768;\n$int_cast = (int)$x;\necho $int_cast;\necho \"<br>\";\n// Cast string to int\n$x = \"23465.768\";\n$int_cast = (int)$x;\necho $int_cast;\n?>```"
            }
        },
        "math": {
            "title": "PHP Math",
            "url": "https://www.w3schools.com/php/php_math.asp",
            "info": {
                "PHP pi() Function": "The pi() function returns the value of PI:```php\n<?php\necho(pi()); // returns 3.1415926535898\n?>```",
                "PHP min() and max() Functions": "The min() and max() functions can be used to find the lowest or highest value in a list of arguments:```php\n<?php\necho(min(0, 150, 30, 20, -8, -200));  // returns -200\necho(max(0, 150, 30, 20, -8, -200));  // returns 150\n?>```",
                "PHP abs() Function": "The abs() function returns the absolute (positive) value of a number:```php\n<?php\necho(abs(-6.7));  // returns 6.7\n?>```",
                "PHP sqrt() Function": "The sqrt() function returns the square root of a number:```php\n<?php\necho(sqrt(64));  // returns 8\n?>```",
                "PHP round() Function": "The round() function rounds a floating-point number to its nearest integer:```php\n<?php\necho(round(0.60));  // returns 1\necho(round(0.49));  // returns 0\n?>```",
                "Random Numbers": "The rand() function generates a random number:```php\n<?php\necho(rand());\n?>```To get more control over the random number, you can add the optional min and max parameters to specify the lowest integer and the highest integer to be returned.For example, if you want a random integer between 10 and 100 (inclusive), use rand(10, 100):```php\n<?php\necho(rand(10, 100));\n?>```",
                "Complete PHP Math Reference": "For a complete reference of all math functions, go to our complete PHP Math Reference.The PHP math reference contains description and example of use, for each function.",
                "PHP Math Introduction": "The math functions can handle values within the range of integer and float types.",
                "Installation": "The PHP math functions are part of the PHP core. No installation is required to use these functions.",
                "PHP Math Functions": "",
                "PHP Predefined Math Constants": ""
            }
        },
        "constants": {
            "title": "PHP Constants",
            "url": "https://www.w3schools.com/php/php_constants.asp",
            "info": {
                "PHP Constants": "A constant is an identifier (name) for a simple value. The value cannot be changed during the script.A valid constant name starts with a letter or underscore (no $ sign before the constant name).Note: Unlike variables, constants are automatically global across the entire script.",
                "Create a PHP Constant": "To create a constant, use the define() function.Parameters:```php\n<?php\n\r\n define(\"GREETING\", \"Welcome to W3Schools.com!\");\necho GREETING;\n?>``````php\n<?php\n\r\n define(\"GREETING\", \"Welcome to W3Schools.com!\", true);\necho greeting;\n?>```",
                "PHP Constant Arrays": "In PHP7, you can create an Array constant using the define() function.```php\n<?php\n\r\n define(\"cars\", [\n  \"Alfa Romeo\",\n  \"BMW\",\n  \"Toyota\"\n]);\necho cars[0];\n?>```",
                "Constants are Global": "Constants are automatically global and can be used across the entire script.```php\n<?php\ndefine(\"GREETING\", \"Welcome to W3Schools.com!\");\nfunction myTest() {\n  echo GREETING;\n}\n \nmyTest();\n\r\n ?>```",
                "PHP - Class Constants": "Constants cannot be changed once it is declared.Class constants can be useful if you need to define some constant data within a class.A class constant is declared inside a class with the const keyword.Class constants are case-sensitive. However, it is recommended to name the constants in all uppercase letters.We can access a constant from outside the class by using the class name followed by the scope resolution operator (::) followed by the constant name, like here:```php\n<?php\nclass   Goodbye {\n  const LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\n}\necho   Goodbye::LEAVING_MESSAGE;\n  ?>```Or, we can access a constant from inside the class by using the self keyword followed by the scope resolution operator (::) followed\u00a0by the constant name, like here:```php\n<?php\nclass Goodbye {\n  const LEAVING_MESSAGE = \"Thank you for visiting W3Schools.com!\";\n    public function byebye() {\n    echo self::LEAVING_MESSAGE;\n    }\n}\n$goodbye = new Goodbye();\n$goodbye->byebye();\n?>```"
            }
        },
        "operators": {
            "title": "PHP Operators",
            "url": "https://www.w3schools.com/php/php_operators.asp",
            "info": {
                "PHP Operators": "Operators are used to perform operations on variables and values.PHP divides the operators in the following groups:",
                "PHP Arithmetic Operators": "The PHP arithmetic operators are used with numeric values to perform common arithmetical operations, such as addition, subtraction, multiplication etc.",
                "PHP Assignment Operators": "The PHP assignment operators are used with numeric values to write a value to a variable.The basic assignment operator in PHP is \"=\". It means that the left operand gets set to the value of the assignment expression on the right.",
                "PHP Comparison Operators": "The PHP comparison operators are used to compare two values (number or string):",
                "PHP Increment / Decrement Operators": "The PHP increment operators are used to increment a variable's value.The PHP decrement operators are used to decrement a variable's value.",
                "PHP Logical Operators": "The PHP logical operators are used to combine conditional statements.",
                "PHP String Operators": "PHP has two operators that are specially designed for strings.",
                "PHP Array Operators": "The PHP array operators are used to compare arrays.",
                "PHP Conditional Assignment Operators": "The PHP conditional assignment operators are used to set a value depending on conditions:",
                "PHP Exercises": ""
            }
        },
        "if...else...elseif": {
            "title": "PHP If...Else...Elseif",
            "url": "https://www.w3schools.com/php/php_if_else.asp",
            "info": {
                "PHP Conditional Statements": "Very often when you write code, you want to perform different actions for different conditions. You can use conditional statements in your code to do this.In PHP we have the following conditional statements:",
                "PHP - The if Statement": "The if statement executes some code if one condition is true.```php\n<?php\n\r\n$t = date(\"H\");\n\nif ($t < \"20\") {\necho \"Have a good day!\";\n\r\n }\n\r\n?>```",
                "PHP - The if...else Statement": "The if...else statement executes some code if a condition is true and another code if that condition is false.```php\n<?php\n\r\n$t = date(\"H\");\n\r\nif ($t < \"20\") {\n\r\n \r\necho \"Have a good day!\";\n\r\n }\r\nelse {\necho \r\n\"Have a good night!\";\n\r\n }\n\r\n?>```",
                "PHP - The if...elseif...else Statement": "The if...elseif...else statement executes different codes for more than two conditions.```php\n<?php\n\r\n$t = date(\"H\");\n\nif ($t < \"10\") {\necho \"Have a good morning!\";\n\r\n }\r\nelseif ($t < \"20\") {\n  echo \"Have a good day!\";\n\r\n } else {\necho \"Have a good night!\";\n\r\n }\n\r\n?>```",
                "PHP - The switch Statement": "The switch statement will be explained in the next chapter.",
                "PHP Exercises": ""
            }
        },
        "switch": {
            "title": "PHP Switch",
            "url": "https://www.w3schools.com/php/php_switch.asp",
            "info": {
                "The PHP switch Statement": "Use the switch statement to select one of many blocks of code to be executed.This is how it works: First we have a single expression n (most often avariable), that is evaluated once. The value of the expression is then comparedwith the values for each case in the structure. If there is a match, the blockof code associated with that case is executed. Use break to prevent thecode from running into the next case automatically. The default statement is used if no match is found.```php\n<?php\n\r\n $favcolor = \"red\";\n\r\n switch ($favcolor)\r\n {\n case \"red\":\n    echo \"Your favorite color is red!\";\n    break;\n\r\n case \"blue\":\n    echo \"Your favorite color is blue!\";\n    break;\n\r\n case \"green\":\n   echo \"Your favorite color is green!\";\n  \r\n break;\n\r\n default:\n    echo \"Your favorite color is neither red, blue, nor green!\";\n\r\n }\n\r\n ?>```",
                "PHP Exercises": ""
            }
        },
        "loops": {
            "title": "PHP Loops",
            "url": "https://www.w3schools.com/php/php_looping.asp",
            "info": {
                "PHP Loops": "Often when you write code, you want the same block of code to run over and over again a certain number of times. So, instead of adding several almost equal code-lines in a script, we can use loops.Loops are used to execute the same block of code again and again, as long as a certain condition is true.In PHP, we have the following loop types:The following chapters will explain and give examples of each loop type."
            }
        },
        "whileloop": {
            "title": "While Loop",
            "url": "https://www.w3schools.com/php/php_looping_while.asp",
            "info": {
                "The PHP while Loop": "The while loop executes a block of code as long as the specified condition is true.The example below displays the numbers from 1 to 5:```php\n<?php \n$x = 1; \nwhile($x <= 5) {\n  echo \"The number is: $x <br>\";\n  $x++;\n} \n?>```This example counts to 100 by tens:```php\n<?php \n$x = 0; \nwhile($x <= 100) {\n  echo \"The number is: $x <br>\";\n  $x+=10;\n} \n?>```",
                "PHP Exercises": ""
            }
        },
        "dowhileloop": {
            "title": "Do While Loop",
            "url": "https://www.w3schools.com/php/php_looping_do_while.asp",
            "info": {
                "The PHP do...while Loop": "The do...while loop will always execute the block of code once, it will then check the condition, and repeat the loop while the specified condition is true.The example below first sets a variable $x to 1 ($x = 1). Then, the do while loop will write some output, and then increment the variable $x with 1. Then the condition is checked (is $x less than, or equal to 5?), and the loop will continue to run as long as $x is less than, or equal to 5:```php\n<?php \n$x = 1; \ndo {\n  echo \"The number is: $x <br>\";\n  $x++;\n} while ($x <= 5);\n?>```This example sets the $x variable to 6, then it runs the loop, and then the condition is checked:```php\n<?php \n$x = 6;\n \ndo {\n  echo \"The number is: $x <br>\";\n  $x++;\n} while ($x <= 5);\n?>```"
            }
        },
        "forloop": {
            "title": "For Loop",
            "url": "https://www.w3schools.com/php/php_looping_for.asp",
            "info": {
                "The PHP for Loop": "The for loop is used when you know in advance how many times the script should run.Parameters:The example below displays the numbers from 0 to 10:```php\n<?php \nfor ($x = 0; $x <= 10; $x++)\r\n{\n echo \"The number is: $x <br>\";\n} \n?>```This example counts to 100 by tens:```php\n<?php \nfor ($x = 0; $x <= 100; $x+=10)\r\n{\n  echo \"The number is: $x <br>\";\n} \n?>```",
                "PHP Exercises": ""
            }
        },
        "foreachloop": {
            "title": "Foreach Loop",
            "url": "https://www.w3schools.com/php/php_looping_foreach.asp",
            "info": {
                "The PHP foreach Loop": "The foreach loop works only on arrays, and is used to loop through each key/value pair in an array.For every loop iteration, the value of the current array element is assigned to $value and the array pointer is moved by one, until it reaches the last array element.The following example will output the values of  the given array ($colors):```php\n<?php \n$colors = array(\"red\", \"green\", \"blue\", \"yellow\"); \n\nforeach ($colors as $value) {\n  echo \"$value <br>\";\n}\n?>```The following example will output both the keys and the values of  the given array ($age):```php\n<?php\n$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\n\nforeach($age as $x => $val) {\n  echo \"$x = $val<br>\";\n}\n?>```You will learn more about arrays in the PHP Arrays chapter."
            }
        },
        "break/continue": {
            "title": "Break/Continue",
            "url": "https://www.w3schools.com/php/php_looping_break.asp",
            "info": {
                "PHP Break": "You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement.The break statement can also be used to jump out of a loop.This example jumps out of the loop when x is equal to 4:```php\n<?php \nfor ($x = 0; $x < 10; $x++) {\n  if ($x == 4) {\n    break;\n  }\n  echo \"The number is: $x <br>\";\n}\n?>```",
                "PHP Continue": "The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.This example skips the value of 4:```php\n<?php \nfor ($x = 0; $x < 10; $x++) {\n  if ($x == 4) {\n    continue;\n  }\n  echo \"The number is: $x <br>\";\n}\n?>```",
                "Break and Continue in While Loop": "You can also use break and continue in while loops:```php\n<?php \n$x = 0;\nwhile($x < 10) {\n  if ($x == 4) {\n    break;\n  }\n  echo \"The number is: $x <br>\";\n  $x++;\n} \n?>``````php\n<?php \n$x = 0;\nwhile($x < 10) {\n  if ($x == 4) {\n    $x++;\n    continue;\n  }\n  echo \"The number is: $x <br>\";\n  $x++;\n} \n?>```"
            }
        },
        "functions": {
            "title": "PHP Functions",
            "url": "https://www.w3schools.com/php/php_functions.asp",
            "info": {
                "PHP Built-in Functions": "PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.Please check out our PHP reference for a complete overview of thePHP built-in functions.",
                "PHP User Defined Functions": "Besides the built-in PHP functions, it is possible to create your own functions.",
                "Create a User Defined Function in PHP": "A user-defined function declaration starts with the word function:Tip: Give the function a name that reflects what the function does!In the example below, we create a function named \"writeMsg()\". The opening curly brace ( { ) indicates the beginning of the function code, and the closing curly brace ( } ) indicates the end of the function. The function outputs \"Hello world!\". To call the function, just write its name followed by brackets ():```php\n<?php\nfunction writeMsg() {\n  echo \"Hello world!\";\n\r\n }\nwriteMsg(); // call the function\n?>```",
                "PHP Function Arguments": "Information can be passed to functions through arguments. An argument is just like a variable.Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma. The following example has a function with one argument ($fname). When the familyName() function is called, we also pass along a name (e.g. Jani), and the name is used inside the function, which outputs several different first names, but an equal last name:```php\n<?php\nfunction familyName($fname) {\n  echo \"$fname Refsnes.<br>\";\n\r\n }\nfamilyName(\"Jani\");\nfamilyName(\"Hege\");\n\r\n familyName(\"Stale\");\nfamilyName(\"Kai Jim\");\nfamilyName(\"Borge\");\n?>```The following example has a function with two arguments ($fname and $year):```php\n<?php\nfunction familyName($fname, $year) {\n  echo \"$fname Refsnes. Born in $year <br>\";\n}\nfamilyName(\"Hege\", \"1975\");\n\r\n familyName(\"Stale\", \"1978\");\nfamilyName(\"Kai Jim\", \"1983\");\n?>```",
                "PHP is a Loosely Typed Language": "In the example above, notice that we did not have to tell PHP which data type the variable is.PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense, you can do things like adding a string to an integer without causing an error.In PHP 7, type declarations were added. This gives us an option to specify the expected data type when declaring a function, and by adding the strict declaration, it will throw a \"Fatal Error\" if the data type mismatches.In the following example we try to send both a number and a string to the function without using strict:```php\n<?php\nfunction addNumbers(int $a, int $b) {\n  return $a + $b;\n}\necho addNumbers(5, \"5 days\"); \n// since strict is NOT enabled \"5 days\" is changed to int(5), and it will return 10\n?>```To specify strict we need to set declare(strict\\_types=1);. This must be on the very first line of the PHP file.In the following example we try to send both a number and a string to the function, but here we have added the strict declaration:",
                "PHP Default Argument Value": "The following example shows how to use a default parameter. If we call the function setHeight() without arguments it takes the default value as argument:```php\n<?php declare(strict_types=1); // strict requirement\nfunction setHeight(int $minheight = 50) {\n  echo \"The height is : $minheight <br>\";\n}\nsetHeight(350);\nsetHeight(); // will use the default value of 50\nsetHeight(135);\nsetHeight(80);\n?>```",
                "PHP Functions - Returning values": "To let a function return a value, use the return statement:```php\n<?php declare(strict_types=1); // strict requirement\nfunction sum(int $x, int $y) {\n  $z = $x + $y;\n  return $z;\n}\n\r\n echo \"5 + 10 = \" . sum(5, 10) . \"<br>\";\necho \"7 + 13 = \" . sum(7, 13) . \"<br>\";\necho \"2 + 4 = \" . sum(2, 4);\n?>```",
                "PHP Return Type Declarations": "PHP 7 also supports Type Declarations for the return statement. Like with the type declaration for function arguments, by enabling the strict requirement, it will throw a \"Fatal Error\" on a type mismatch.To declare a type for the function return, add a colon (: ) and the type right before the opening curly ( { )bracket when declaring the function.In the following example we specify the return type for the function:```php\n<?php declare(strict_types=1); // strict requirement\nfunction addNumbers(float $a, float $b) : float {\n  return $a + $b;\n}\necho addNumbers(1.2, 5.2);\n?>```You can specify a different return type, than the argument types, but make sure the return is the correct type:```php\n<?php declare(strict_types=1); // strict requirement\nfunction addNumbers(float $a, float $b) : int {\n  return (int)($a + $b);\n}\necho addNumbers(1.2, 5.2); \n?>```",
                "PHP Exercises": ""
            }
        },
        "arrays": {
            "title": "PHP Arrays",
            "url": "https://www.w3schools.com/php/php_arrays.asp",
            "info": {
                "What is an Array?": "An array is a special variable, which can hold more than one value at a time.If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?The solution is to create an array!An array can hold many values under a single name, and you can access the values by referring to an index number.",
                "Create an Array in PHP": "In PHP, the array() function is used to create an array:In PHP, there are three types of arrays:",
                "Get The Length of an Array - The count() Function": "The count() function is used to return the length (the number of elements) of an array:```php\n<?php\n\r\n $cars = array(\"Volvo\", \"BMW\", \"Toyota\");\necho count($cars);\n?>```",
                "Complete PHP Array Reference": "For a complete reference of all array functions, go to our complete PHP Array Reference.The reference contains a brief description, and examples of use, for each function!",
                "PHP Exercises": ""
            }
        },
        "indexedarrays": {
            "title": "Indexed Arrays",
            "url": "https://www.w3schools.com/php/php_arrays_indexed.asp",
            "info": {
                "PHP Indexed Arrays": "There are two ways to create indexed arrays:The index can be assigned automatically (index always starts at 0), like this:or the index can be assigned manually:The following example creates an indexed array named $cars, assigns three elements to it, and then prints a text containing the array values:```php\n<?php\n\r\n $cars = array(\"Volvo\", \"BMW\", \"Toyota\");\necho \"I like \" . $cars[0] . \", \" . $cars[1] . \" and \" . $cars[2] . \".\";\n\r\n?>```",
                "Loop Through an Indexed Array": "To loop through and print all the values of an indexed array, you could use a for loop, like this:```php\n<?php\n\r\n $cars = array(\"Volvo\", \"BMW\", \"Toyota\");\n\r\n $arrlength = count($cars);\nfor($x = 0; $x < $arrlength; $x++) {\n  echo $cars[$x];\n  echo \"<br>\";\n}\n?>```",
                "Complete PHP Array Reference": "For a complete reference of all array functions, go to our complete PHP Array Reference.The reference contains a brief description, and examples of use, for each function!",
                "PHP Exercises": ""
            }
        },
        "associativearrays": {
            "title": "Associative Arrays",
            "url": "https://www.w3schools.com/php/php_arrays_associative.asp",
            "info": {
                "PHP Associative Arrays": "Associative arrays are arrays that use named keys that you assign to them.There are two ways to create an associative array:\u00a0or:The named keys can then be used in a script:```php\n<?php\n\r\n\r\n$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\n\r\necho \"Peter is \" . $age['Peter'] . \" years old.\";\n\r\n?>```",
                "Loop Through an Associative Array": "To loop through and print all the values of an associative array, you could use a foreach loop, like this:```php\n<?php\n$age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\n\nforeach($age as $x => $x_value) {\n  echo \"Key=\" . $x . \", Value=\" . $x_value;\n  echo \"<br>\";\n}\n?>```",
                "Complete PHP Array Reference": "For a complete reference of all array functions, go to our complete PHP Array Reference.The reference contains a brief description, and examples of use, for each function!",
                "PHP Exercises": ""
            }
        },
        "multidimensionalarrays": {
            "title": "Multidimensional Arrays",
            "url": "https://www.w3schools.com/php/php_arrays_multidimensional.asp",
            "info": {
                "PHP - Multidimensional Arrays": "A multidimensional array is an array containing one or more arrays.PHP supports multidimensional arrays that are two, three, four, five, or more levels deep. However, arrays more than three levels deep are hard to manage for most people.",
                "PHP - Two-dimensional Arrays": "A two-dimensional array is an array of arrays (a three-dimensional array is an array of arrays of arrays).First, take a look at the following table:We can store the data from the table above in a two-dimensional array, like this:Now the two-dimensional $cars array contains four arrays, and it has two indices: row and column.To get access to the elements of the $cars array we must point to the two indices (row and column):```php\n<?php\necho $cars[0][0].\": In stock: \".$cars[0][1].\", sold: \".$cars[0][2].\".<br>\";\necho $cars[1][0].\": In stock: \".$cars[1][1].\", sold: \".$cars[1][2].\".<br>\";\necho $cars[2][0].\": In stock: \".$cars[2][1].\", sold: \".$cars[2][2].\".<br>\";\necho $cars[3][0].\": In stock: \".$cars[3][1].\", sold: \".$cars[3][2].\".<br>\";\n?>```We can also put a for loop inside another for loop to get the elements of the $cars array (we still have to point to the two indices):",
                "Complete PHP Array Reference": "For a complete reference of all array functions, go to our complete PHP Array Reference.The reference contains a brief description, and examples of use, for each function!"
            }
        },
        "sortingarrays": {
            "title": "Sorting Arrays",
            "url": "https://www.w3schools.com/php/php_arrays_sort.asp",
            "info": {
                "PHP - Sort Functions For Arrays": "In this chapter, we will go through the following PHP array sort functions:",
                "Sort Array in Ascending Order - sort()": "The following example sorts the elements of the $cars array in ascending alphabetical order:```php\n<?php\n\r\n $cars = array(\"Volvo\", \"BMW\", \"Toyota\");\nsort($cars);\n?>```The following example sorts the elements of the $numbers array in ascending numerical order:```php\n<?php\n\r\n $numbers = array(4, 6, 2, 22, 11);\nsort($numbers);\n?>```",
                "Sort Array in Descending Order - rsort()": "The following example sorts the elements of the $cars array in descending alphabetical order:```php\n<?php\n\r\n $cars = array(\"Volvo\", \"BMW\", \"Toyota\");\nrsort($cars);\n?>```The following example sorts the elements of the $numbers array in descending numerical order:```php\n<?php\n\r\n $numbers = array(4, 6, 2, 22, 11);\nrsort($numbers);\n?>```",
                "Sort Array (Ascending Order), According to Value - asort()": "The following example sorts an associative array in ascending order, according to the value:```php\n<?php\n\r\n $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\n\r\n asort($age);\n?>```",
                "Sort Array (Ascending Order), According to Key - ksort()": "The following example sorts an associative array in ascending order, according to the key:```php\n<?php\n\r\n $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\n\r\n ksort($age);\n?>```",
                "Sort Array (Descending Order), According to Value - arsort()": "The following example sorts an associative array in descending order, according to the value:```php\n<?php\n\r\n $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\n\r\n arsort($age);\n?>```",
                "Sort Array (Descending Order), According to Key - krsort()": "The following example sorts an associative array in descending order, according to the key:```php\n<?php\n\r\n $age = array(\"Peter\"=>\"35\", \"Ben\"=>\"37\", \"Joe\"=>\"43\");\n\r\n krsort($age);\n?>```",
                "Complete PHP Array Reference": "For a complete reference of all array functions, go to our complete PHP Array Reference.The reference contains a brief description, and examples of use, for each function!",
                "PHP Exercises": ""
            }
        },
        "superglobals": {
            "title": "PHP Superglobals",
            "url": "https://www.w3schools.com/php/php_superglobals.asp",
            "info": {
                "PHP Global Variables - Superglobals": "Some predefined variables in PHP are \"superglobals\", which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special.The PHP superglobal variables are:The next chapters will explain some of the superglobals, and the rest will be explained in later chapters."
            }
        },
        "$globals": {
            "title": "$GLOBALS",
            "url": "https://www.w3schools.com/php/php_superglobals_globals.asp",
            "info": {
                "PHP $GLOBALS": "$GLOBALS is a PHP super global variable which is used to access global variables from anywhere in the PHP script (also from within functions or methods). PHP stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable.The example below shows how to use the super global variable $GLOBALS:```php\n<?php \n$x = 75; \n$y = 25;\n \nfunction addition() { \n  $GLOBALS['z'] = $GLOBALS['x'] + $GLOBALS['y']; \n}\n \naddition(); \necho $z; \n?>```In the example above, since z is a variable present within the $GLOBALS array, it is also accessible from outside the function! "
            }
        },
        "$_server": {
            "title": "$_SERVER",
            "url": "https://www.w3schools.com/php/php_superglobals_server.asp",
            "info": {
                "PHP $_SERVER": "$\\_SERVER is a PHP super global variable which holds information about headers, paths, and script locations. The example below shows how to use some of the elements in $\\_SERVER:```php\n<?php \necho $_SERVER['PHP_SELF'];\necho \"<br>\";\n\r\n echo $_SERVER['SERVER_NAME'];\necho \"<br>\";\necho $_SERVER['HTTP_HOST'];\n\r\n echo \"<br>\";\necho $_SERVER['HTTP_REFERER'];\necho \"<br>\";\necho $_SERVER['HTTP_USER_AGENT'];\necho \"<br>\";\necho $_SERVER['SCRIPT_NAME'];\n?>```The following table lists the most important elements that can go inside $\\_SERVER:"
            }
        },
        "$_request": {
            "title": "$_REQUEST",
            "url": "https://www.w3schools.com/php/php_superglobals_request.asp",
            "info": {
                "PHP $_REQUEST": "PHP $\\_REQUEST is a PHP super global variable which is used to collect data after submitting an HTML form.The example below shows a form with an input field and a submit button. When a user submits the data by clicking on \"Submit\", the form data is sent to the file specified in the action attribute of the <form> tag. In this example, we point to this file itself for processing form data. If you wish to use another PHP file to process form data, replace that with the filename of your choice. Then, we can use the super global variable $\\_REQUEST to collect the value of the input field:```php\n<html>\n\r\n<body>\n\n\r\n <form method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'];?>\">\n  Name: <input type=\"text\" name=\"fname\">\n  <input type=\"submit\">\n\r\n </form>\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] == \"POST\") {\n  // collect value of input field\n  $name = $_REQUEST['fname'];\n  if (empty($name)) {\n    echo \"Name is empty\";\n  } else {\n    echo $name;\n  }\n}\n?>\n\n\r\n</body>\n\r\n</html>```"
            }
        },
        "$_post": {
            "title": "$_POST",
            "url": "https://www.w3schools.com/php/php_superglobals_post.asp",
            "info": {
                "PHP $_POST": "PHP $\\_POST is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"post\". $\\_POST is also widely used to pass variables.The example below shows a form with an input field and a submit button. When a user submits the data by clicking on \"Submit\", the form data is sent to the file specified in the action attribute of the <form> tag. In this example, we point to the file itself for processing form data. If you wish to use another PHP file to process form data, replace that with the filename of your choice. Then, we can use the super global variable $\\_POST to collect the value of the input field:Tip: You will learn more about $\\_POST in the PHP Forms chapter."
            }
        },
        "$_get": {
            "title": "$_GET",
            "url": "https://www.w3schools.com/php/php_superglobals_get.asp",
            "info": {
                "PHP $_GET": "PHP $\\_GET is a PHP super global variable which is used to collect form data after submitting an HTML form with method=\"get\".$\\_GET can also collect data sent in the URL.Assume we have an HTML page that contains a hyperlink with parameters:When a user clicks on the link \"Test $GET\", the parameters \"subject\" and \"web\" are sent to \"test\\_get.php\", and you can then access their values in \"test\\_get.php\" with $\\_GET.The example below shows the code in \"test\\_get.php\":```php\n<html>\n\r\n<body>\n\n\r\n <?php \necho \"Study \" . $_GET['subject'] . \" at \" . $_GET['web'];\n?>\n\n\r\n</body>\n\r\n</html>```Tip: You will learn more about $\\_GET in the PHP Forms chapter."
            }
        },
        "regex": {
            "title": "PHP RegEx",
            "url": "https://www.w3schools.com/php/php_regex.asp",
            "info": {
                "What is a Regular Expression?": "A regular expression is a sequence of characters that forms a search pattern.When you search for data in a text, you can use this search pattern to describe what youare searching for.A regular expression can be a single character, or a more complicated pattern.Regular expressions can be used to perform all types of text search and text replaceoperations.",
                "Syntax": "In PHP, regular expressions are strings composed of delimiters, a pattern and optionalmodifiers.In the example above, / is the delimiter, w3schools is the pattern that is being searched for,and i is a modifier that makes the search case-insensitive.The delimiter can be any character that is not a letter, number, backslash or space. Themost common delimiter is the forward slash (/), but when your pattern contains forwardslashes it is convenient to choose other delimiters such as # or ~.",
                "Regular Expression Functions": "PHP provides a variety of functions that allow you to use regular expressions. Thepreg\\_match(), preg\\_match\\_all() and preg\\_replace() functions are some of themost commonly used ones:",
                "Using preg_match()": "The preg\\_match() function will tell you whether a string contains matches of a pattern.```php\n<?php\n$str = \"Visit W3Schools\";\n$pattern = \"/w3schools/i\";\necho preg_match($pattern, $str); // Outputs 1\n?>```",
                "Using preg_match_all()": "The preg\\_match\\_all() function will tell you how many matches were found for a pattern in astring.```php\n<?php\n$str = \"The rain in SPAIN falls mainly on the plains.\";\n$pattern = \"/ain/i\";\necho preg_match_all($pattern, $str); // Outputs 4\n?>```",
                "Using preg_replace()": "The preg\\_replace() function will replace all of the matches of the pattern in a string withanother string.```php\n<?php\n$str = \"Visit Microsoft!\";\n$pattern = \"/microsoft/i\";\necho preg_replace($pattern, \"W3Schools\", $str); // Outputs \"VisitW3Schools!\"\n?>```",
                "Regular Expression Modifiers": "Modifiers can change how a search is performed.",
                "Regular Expression Patterns": "Brackets are used to find a range of characters:",
                "Metacharacters": "Metacharacters are characters with a special meaning:",
                "Quantifiers": "Quantifiers define quantities:",
                "Grouping": "You can use parentheses ( ) to apply quantifiers to entire patterns. They also can be usedto select parts of the pattern to be used as a match.```php\n<?php\n$str = \"Apples and bananas.\";\n$pattern = \"/ba(na){2}/i\";\necho preg_match($pattern, $str); // Outputs 1\n?>```",
                "Complete RegExp Reference": "For a complete reference, go to our Complete PHP Regular Expression Reference.The reference contains descriptions and examples of all Regular Expression functions.",
                "PHP Regular Expression Introduction": "Regular expressions allow you to search for and replace patterns in strings.",
                "Installation": "The PHP regular expression functions are part of the PHP core. No installation is required to use these functions.",
                "Runtime Configuration": "These settings in php.ini can be used to limit the amount time or resources used whenevaluating regular expressions.",
                "PHP Regular Expression Functions": ""
            }
        },
        "formhandling": {
            "title": "PHP Form Handling",
            "url": "https://www.w3schools.com/php/php_forms.asp",
            "info": {
                "PHP - A Simple HTML Form": "The example below displays a simple HTML form with two input fields and a submit button:```php\n<html>\n\r\n<body>\n\n\r\n<form action=\"welcome.php\" method=\"post\">\n\r\nName: <input type=\"text\" name=\"name\"><br>\n\r\nE-mail: <input type=\"text\" name=\"email\"><br>\n\r\n<input type=\"submit\">\n\r\n</form>\n\n\r\n</body>\n\r\n</html>```When the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method.To display the submitted data you could simply echo all the variables. The \"welcome.php\" looks like this:The output could be something like this:The same result could also be achieved using the HTTP GET method:```php\n<html>\n\r\n<body>\n\n\r\n<form action=\"welcome_get.php\" method=\"get\">\n\r\n Name: <input type=\"text\" name=\"name\"><br>\n\r\n E-mail: <input type=\"text\" name=\"email\"><br>\n\r\n<input type=\"submit\">\n\r\n</form>\n\n\r\n</body>\n\r\n</html>```and \"welcome\\_get.php\" looks like this:The code above is quite simple. However, the most important thing is missing. You need to validate form data to protect your script from malicious code.",
                "GET vs. POST": "Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user.Both GET and POST are treated as $\\_GET and $\\_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function,class or file without having to do anything special.$\\_GET is an array of variables passed to the current script via the URL parameters.$\\_POST is an array of variables passed to the current script via the HTTP POST method.",
                "When to use GET?": "Information sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases.GET may be used for sending non-sensitive data.Note: GET should NEVER be used for sending passwords or other sensitive information!",
                "When to use POST?": "Information sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send.Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server.However, because the variables are not displayed in the URL, it is not possible to bookmark the page.Next, lets see how we can process PHP forms the secure way!",
                "PHP Exercises": ""
            }
        },
        "formvalidation": {
            "title": "PHP Form Validation",
            "url": "https://www.w3schools.com/php/php_form_validation.asp",
            "info": {
                "PHP Form Validation": "The HTML form we will be working at in these chapters, contains various input fields: required and optional text fields, radio buttons, and a submit button:The validation rules for the form above are as follows:First we will look at the plain HTML code for the form:",
                "Text Fields": "The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this:",
                "Radio Buttons": "The gender fields are radio buttons and the HTML code looks like this:",
                "The Form Element": "The HTML code of the form looks like this:When the form is submitted, the form data is sent with method=\"post\".So, the $\\_SERVER[\"PHP\\_SELF\"] sends the submitted form data to the page itself, instead of jumping to a different page. This way, the user will get error messages on the same page as the form.",
                "Big Note on PHP Form Security": "The $\\_SERVER[\"PHP\\_SELF\"] variable can be used by hackers!If PHP\\_SELF is used in your page then a user can enter a slash (/) and thensome Cross Site Scripting (XSS) commands to execute.Assume we have the following form in a page named \"test\\_form.php\":Now, if a user enters the normal URL in the address bar like \"http://www.example.com/test\\_form.php\", the above code will be translated to:So far, so good.However, consider that a user enters the following URL in the address bar:In this case, the above code will be translated to:This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed (the user will see an alert box). This is just a simple and harmless example how the PHP\\_SELF variable can be exploited.Be aware of that any JavaScript code can be added inside the  <script> tag! A hacker can redirect the user to a file on another server, and that file can hold malicious code that can alter the global variables or submit the form to another address to save the user data, for example.",
                "How To Avoid $_SERVER[\"PHP_SELF\"] Exploits?": "$\\_SERVER[\"PHP\\_SELF\"] exploits can be avoided by using the htmlspecialchars() function.The form code should look like this:The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP\\_SELF variable, it will result in the following output:The exploit attempt fails, and no harm is done!",
                "Validate Form Data With PHP": "The first thing we will do is to pass all variables through PHP's htmlspecialchars() function.When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field:<script>location.href('http://www.hacked.com')</script>- this would not be executed, because it would be saved as HTML escaped code, like this:&lt;script&gt;location.href('http://www.hacked.com')&lt;/script&gt;The code is now safe to be displayed on a page or inside an e-mail.We will also do two more things when the user submits the form:The next step is to create a function that will do all the checking for us (which is much more convenient than writing the same code over and over again).We will name the function test\\_input().Now, we can check each $\\_POST variable with the test\\_input() function, and the script looks like this:Notice that at the start of the script, we check whether the form has been submitted using $\\_SERVER[\"REQUEST\\_METHOD\"]. If the REQUEST\\_METHOD is POST, then the form has been submitted - and it should be validated. If it has not been submitted, skip the validation and display a blank form.However, in the example above, all input fields are optional. The script works fine even if the user does not enter any data.The next step is to make input fields required and create error messages if needed."
            }
        },
        "formrequired": {
            "title": "PHP Form Required",
            "url": "https://www.w3schools.com/php/php_form_required.asp",
            "info": {
                "PHP - Required Fields": "From the validation rules table on the previous page, we see that the \"Name\", \"E-mail\", and \"Gender\" fields are required. These fields cannot be empty and must be filled out in the HTML form.In the previous chapter, all input fields were optional. In the following code we have added some new variables: $nameErr, $emailErr, $genderErr, and $websiteErr. These error variables will hold error messages for the required fields. We have also added an if else statement for each $\\_POST variable. This checks if the $\\_POST variable is empty (with the PHP empty() function). If it is empty, an error message is stored in the different error variables, and if it is not empty, it sends the user input data through the test\\_input() function:",
                "PHP - Display The Error Messages": "Then in the HTML form, we add a little script after each required field, which generates the correct error message if needed (that is if the user tries to submit the form without filling out the required fields):```php\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]);?>\">\n \n\r\n Name: <input type=\"text\" name=\"name\">\n<span class=\"error\">* <?php echo $nameErr;?></span>\n\r\n <br><br>\nE-mail:\n<input type=\"text\" name=\"email\">\n<span class=\"error\">* <?php echo $emailErr;?></span>\n<br><br>\n\r\n Website:\n<input type=\"text\" name=\"website\">\n<span class=\"error\"><?php echo $websiteErr;?></span>\n<br><br>\n\r\n Comment: <textarea name=\"comment\" rows=\"5\" cols=\"40\"></textarea>\n<br><br>\n\r\n Gender:\n<input type=\"radio\" name=\"gender\"  value=\"female\">Female\n<input type=\"radio\" name=\"gender\" value=\"male\">Male\n<input type=\"radio\" name=\"gender\" value=\"other\">Other\n\r\n <span class=\"error\">* <?php echo $genderErr;?></span>\n<br><br>\n<input type=\"submit\" name=\"submit\" value=\"Submit\"> \n\n</form>```The next step is to validate the input data, that is \"Does the Name field contain only letters and whitespace?\", and \"Does the E-mail field contain a valid e-mail address syntax?\", and if filled out, \"Does the Website field contain a valid URL?\"."
            }
        },
        "formurl/e-mail": {
            "title": "PHP Form URL/E-mail",
            "url": "https://www.w3schools.com/php/php_form_url_email.asp",
            "info": {
                "PHP - Validate Name": "The code below shows a simple way to check if the name field only contains letters and whitespace. If the value of the name field is not valid, then store an error message:",
                "PHP - Validate E-mail": "The easiest and safest way to check whether an email address is well-formed is to use PHP's filter\\_var() function.In the code below, if the e-mail address is not well-formed, then store an error message:",
                "PHP - Validate URL": "The code below shows a way to check if a URL address syntax is valid (this regular expression also allows dashes in the URL). If the URL address syntax is not valid, then store an error message:",
                "PHP - Validate Name, E-mail, and URL": "Now, the script looks like this:The next step is to show how to prevent the form from emptying all the input fields when the user submits the form."
            }
        },
        "formcomplete": {
            "title": "PHP Form Complete",
            "url": "https://www.w3schools.com/php/php_form_complete.asp",
            "info": {
                "PHP - Keep The Values in The Form": "To show the values in the input fields after the user hits the submit button, we add a little PHP script inside the value attribute of the following input fields: name, email, and website. In the comment textarea field, we put the script between the <textarea> and </textarea> tags. The little script outputs the value of the $name, $email, $website, and $comment variables.\u00a0Then, we also need to show which radio button that was checked. For this, we must manipulate the checked attribute (not the value attribute for radio buttons):",
                "PHP - Complete Form Example": "Here is the complete code for the PHP Form Validation Example:"
            }
        },
        "dateandtime": {
            "title": "PHP Date and Time",
            "url": "https://www.w3schools.com/php/php_date.asp",
            "info": {
                "The PHP Date() Function": "The PHP date() function formats a timestamp to a more readable date and time.",
                "Get a Date": "The required format parameter of the date() function specifies how to format the date (or time).Here are some characters that are commonly used for dates:Other characters, like\"/\", \".\", or \"-\" can also be inserted between the characters to add additional formatting.The example below formats today's date in three different ways:```php\n<?php\necho \"Today is \" . date(\"Y/m/d\") . \"<br>\";\necho \"Today is \" . date(\"Y.m.d\") . \"<br>\";\necho \"Today is \" . date(\"Y-m-d\") . \"<br>\";\n\r\n echo \"Today is \" . date(\"l\");\n?>```",
                "PHP Tip - Automatic Copyright Year": "Use the date() function to automatically update the copyright year on your website:```php\n&copy; 2010-<?php echo date(\"Y\");?>```",
                "Get a Time": "Here are some characters that are commonly used for times:The example below outputs the current time in the specified format:```php\n<?php\necho \"The time is \" . date(\"h:i:sa\");\n?>```",
                "Get Your Time Zone": "If the time you got back from the code is not correct, it's probably because your server is in another country or set up for a different timezone.So, if you need the time to be correct according to a specific location, you can set the timezone you want to use. The example below sets the timezone to \"America/New\\_York\", then outputs the current time in the specified format:```php\n<?php\ndate_default_timezone_set(\"America/New_York\");\necho \"The time is \" . date(\"h:i:sa\");\n?>```",
                "Create a Date With mktime()": "The optional timestamp parameter in the date() function specifies a timestamp. If omitted, the current date and time will be used (as in the examples above).The PHP mktime() function returns the Unix timestamp for a date. The Unix timestamp contains the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified.The example below creates a date and time with the date() function from a number of parameters in the mktime() function:```php\n<?php\n$d=mktime(11, 14, 54, 8, 12, 2014);\necho \"Created date is \" . date(\"Y-m-d h:i:sa\", $d);\n?>```",
                "Create a Date From a String With strtotime()": "The PHP strtotime() function is used to convert a human readable date string into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT).The example below creates a date and time from the strtotime() function:```php\n<?php\n$d=strtotime(\"10:30pm April 15 2014\");\necho \"Created date is \" . date(\"Y-m-d h:i:sa\", $d);\n?>```PHP is quite clever about converting a string to a date, so you can put in various values:```php\n<?php\n$d=strtotime(\"tomorrow\");\necho date(\"Y-m-d h:i:sa\", $d) . \"<br>\";\n\n$d=strtotime(\"next Saturday\");\necho date(\"Y-m-d h:i:sa\", $d) . \"<br>\";\n\n$d=strtotime(\"+3 Months\");\necho date(\"Y-m-d h:i:sa\", $d) . \"<br>\";\n?>```However, strtotime() is not perfect, so remember to check the strings you put in there.",
                "More Date Examples": "The example below outputs the dates for the next six Saturdays:```php\n<?php\n$startdate = strtotime(\"Saturday\");\n$enddate = strtotime(\"+6 weeks\", $startdate);\nwhile ($startdate < $enddate) {\n  echo date(\"M d\", $startdate) . \"<br>\";\n  $startdate = strtotime(\"+1 week\", $startdate);\n}\n?>```The example below outputs the number of days until 4th of July:```php\n<?php\n$d1=strtotime(\"July 04\");\n$d2=ceil(($d1-time())/60/60/24);\n\r\n echo \"There are \" . $d2 .\" days until 4th of July.\";\n?>```",
                "Complete PHP Date Reference": "For a complete reference of all date functions, go to our completePHP Date Reference.The reference contains a brief description, and examples of use, for each function!",
                "PHP Exercises": ""
            }
        },
        "include": {
            "title": "PHP Include",
            "url": "https://www.w3schools.com/php/php_includes.asp",
            "info": {
                "PHP include and require Statements": "It is possible to insert the content of one PHP file into another PHP file (before the server executes it), with the include or require statement.The include and require statements are identical, except upon failure:So, if you want the execution to go on and show users the output, even if the include file is missing, use the include statement. Otherwise, in case of FrameWork, CMS, or a complex PHP application coding, always use the require statement to include a key file to the flow of execution. This will help avoid compromising your application's security and integrity, just in-case one key file is accidentally missing.Including files saves a lot of work. This means that you can create a standard header, footer, or menu file for all your web pages. Then, when the header needs to be updated, you can only update the header include file.",
                "PHP include Examples": "Assume we have a standard footer file called \"footer.php\", that looks like this:To include the footer file in a page, use the include statement:```php\n<html>\n\r\n<body>\n\n\r\n<h1>Welcome to my home page!</h1>\n\r\n<p>Some text.</p>\n<p>Some more text.</p>\n<?php include 'footer.php';?>\n\n\r\n</body>\n\r\n</html>```Assume we have a standard menu file called \"menu.php\":All pages in the Web site should use this menu file. Here is how it can be done (we are using a <div> element so that the menu easily can be styled with CSS later):```php\n<html>\n\r\n<body>\n\n\r\n <div class=\"menu\">\n<?php include 'menu.php';?>\n</div>\n\r\n <h1>Welcome to my home page!</h1>\n<p>Some text.</p>\n<p>Some more text.</p>\n\n\r\n</body>\n\r\n</html>```Assume we have a file called \"vars.php\", with some variables defined:Then, if we include the \"vars.php\" file, the variables can be used in the calling file:```php\n<html>\n\r\n<body>\n\n\r\n<h1>Welcome to my home page!</h1>\n\r\n<?php include 'vars.php';\n\r\necho \"I have a $color $car.\";\n?>\n\n\r\n</body>\n\r\n</html>```",
                "PHP include vs. require": "The require statement is also used to include a file into the PHP code.However, there is one big difference between include and require; when a file is included with the include statement and PHP cannot find it, the script will continue to execute:```php\n<html>\n\r\n<body>\n\n\r\n<h1>Welcome to my home page!</h1>\n\r\n<?php include 'noFileExists.php';\n\r\necho \"I have a $color $car.\";\n?>\n\n\r\n</body>\n\r\n</html>```If we do the same example using the require statement, the echo statement will not be executed because the script execution dies after the require statement returned a fatal error:```php\n<html>\n\r\n<body>\n\n\r\n<h1>Welcome to my home page!</h1>\n\r\n<?php require 'noFileExists.php';\n\r\necho \"I have a $color $car.\";\n?>\n\n\r\n</body>\n\r\n</html>```",
                "PHP Exercises": ""
            }
        },
        "filehandling": {
            "title": "PHP File Handling",
            "url": "https://www.w3schools.com/php/php_file.asp",
            "info": {
                "PHP Manipulating Files": "PHP has several functions for creating, reading, uploading, and editing files.",
                "PHP readfile() Function": "The readfile() function reads a file and writes it to the output buffer.Assume we have a text file called \"webdictionary.txt\", stored on the server, that looks like this:The PHP code to read the file and write it to the output buffer is as follows (the readfile() function returns the number of bytes read on success):```php\n<?php\necho readfile(\"webdictionary.txt\");\n?>```The readfile() function is useful if all you want to do is open up a file and read its contents.The next chapters will teach you more about file handling.",
                "PHP Exercises": ""
            }
        },
        "fileopen/read": {
            "title": "PHP File Open/Read",
            "url": "https://www.w3schools.com/php/php_file_open.asp",
            "info": {
                "PHP Open File - fopen()": "A better method to open files is with the fopen() function. This function gives you more options than the readfile() function.We will use the text file, \"webdictionary.txt\", during the lessons:The first parameter of fopen() contains the name of the file to be opened and the second parameter specifies in which mode the file should be opened. The following example also generates a message if the fopen() function is unable to open the specified file:```php\n<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\necho fread($myfile,filesize(\"webdictionary.txt\"));\n\r\n fclose($myfile);\n?>```Tip: The fread() and the fclose() functions will be explained below.The file may be opened in one of the following modes:",
                "PHP Read File - fread()": "The fread() function reads from an open file.The first parameter of fread() contains the name of the file to read from and the second parameter specifies the maximum number of bytes to read.The following PHP code reads the \"webdictionary.txt\" file to the end:",
                "PHP Close File - fclose()": "The fclose() function is used to close an open file.The fclose() requires the name of the file (or a variable that holds the filename) we want to close:",
                "PHP Read Single Line - fgets()": "The fgets() function is used to read a single line from a file.The example below outputs the first line of the \"webdictionary.txt\" file:```php\n<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\necho fgets($myfile);\n\r\n fclose($myfile);\n?>```Note: After a call to the fgets() function, the file pointer has moved to the next line.",
                "PHP Check End-Of-File - feof()": "The feof() function checks if the \"end-of-file\" (EOF) has been reached.The feof() function is useful for looping through data of unknown length.The example below reads the \"webdictionary.txt\" file line by line, until end-of-file is reached:```php\n<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\n// Output one line until end-of-file\nwhile(!feof($myfile)) {\n  echo fgets($myfile) . \"<br>\";\n}\nfclose($myfile);\n?>```",
                "PHP Read Single Character - fgetc()": "The fgetc() function is used to read a single character from a file.The example below reads the \"webdictionary.txt\" file character by character, until end-of-file is reached:```php\n<?php\n$myfile = fopen(\"webdictionary.txt\", \"r\") or die(\"Unable to open file!\");\n// Output one character until end-of-file\nwhile(!feof($myfile)) {\n  echo fgetc($myfile);\n}\nfclose($myfile);\n?>```Note: After a call to the fgetc() function, the file pointer moves to the next character.",
                "Complete PHP Filesystem Reference": "For a complete reference of filesystem functions, go to our completePHP Filesystem Reference.",
                "PHP Exercises": ""
            }
        },
        "filecreate/write": {
            "title": "PHP File Create/Write",
            "url": "https://www.w3schools.com/php/php_file_create.asp",
            "info": {
                "PHP Create File - fopen()": "The fopen() function is also used to create a file. Maybe a little confusing, but in PHP, a file is created using the same function used to open files.If you use fopen() on a file that does not exist, it will create it, given that the file is opened for writing (w) or appending (a).The example below creates a new file called \"testfile.txt\". The file will be created in the same directory where the PHP code resides:```php\n$myfile = fopen(\"testfile.txt\", \"w\")```",
                "PHP File Permissions": "If you are having errors when trying to get this code to run, check that you have granted your PHP file access to write information to the hard drive.",
                "PHP Write to File - fwrite()": "The fwrite() function is used to write to a file.The first parameter of fwrite() contains the name of the file to write to and the second parameter is the string to be written.The example below writes a couple of names into a new file called \"newfile.txt\":```php\n<?php\n$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\");\n$txt = \"John Doe\\n\";\nfwrite($myfile, $txt);\n$txt = \"Jane Doe\\n\";\nfwrite($myfile, $txt);\nfclose($myfile);\n?>```Notice that we wrote to the file \"newfile.txt\" twice. Each time we wrote to the file we sent the string $txt that first contained \"John Doe\" and second contained \"Jane Doe\". After we finished writing, we closed the file using the fclose() function.If we open the \"newfile.txt\" file it would look like this:",
                "PHP Overwriting": "Now that \"newfile.txt\" contains some data we can show what happens when we open an existing file for writing. All the existing data will be ERASED and we start with an empty file.In the example below we open our existing file \"newfile.txt\", and write some new data into it:```php\n<?php\n$myfile = fopen(\"newfile.txt\", \"w\") or die(\"Unable to open file!\");\n$txt = \"Mickey Mouse\\n\";\nfwrite($myfile, $txt);\n$txt = \"Minnie Mouse\\n\";\nfwrite($myfile, $txt);\nfclose($myfile);\n?>```If we now open the \"newfile.txt\" file, both John and Jane have vanished, and only the data we just wrote is present:",
                "Complete PHP Filesystem Reference": "For a complete reference of filesystem functions, go to our completePHP Filesystem Reference."
            }
        },
        "fileupload": {
            "title": "PHP File Upload",
            "url": "https://www.w3schools.com/php/php_file_upload.asp",
            "info": {
                "Configure The \"php.ini\" File": "First, ensure that PHP is configured to allow file uploads.In your \"php.ini\" file, search for the file\\_uploads directive, and set it to On:```php\nfile_uploads = On```",
                "Create The HTML Form": "Next, create an HTML form that allow users to choose the image file they want to upload:```php\n<!DOCTYPE html>\n<html>\n<body>\n<form action=\"upload.php\" method=\"post\"\r\nenctype=\"multipart/form-data\">\n  Select image to upload:\n  <input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\">\n  <input type=\"submit\" value=\"Upload Image\" name=\"submit\">\n\r\n</form>\n</body>\n</html>```Some rules to follow for the HTML form above:Without the requirements above, the file upload will not work.Other things to notice:The form above sends data to a file called \"upload.php\", which we will create next.",
                "Create The Upload File PHP Script": "The \"upload.php\" file contains the code for uploading a file:```php\n<?php\n$target_dir = \"uploads/\";\n$target_file = $target_dir . basename($_FILES[\"fileToUpload\"][\"name\"]);\n$uploadOk = 1;\n$imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));\n// Check if image file is a actual image or fake image\nif(isset($_POST[\"submit\"])) {\n  $check = getimagesize($_FILES[\"fileToUpload\"][\"tmp_name\"]);\n  if($check !== false) {\n    echo \"File is an image - \" . $check[\"mime\"] . \".\";\n    $uploadOk = 1;\n  } else {\n    echo \"File is not an image.\";\n    $uploadOk = 0;\n  }\n}\n?>```PHP script explained:",
                "Check if File Already Exists": "Now we can add some restrictions.First, we will check if the file already exists in the \"uploads\" folder. If it does, an error message is displayed, and $uploadOk is set to 0:```php\n// Check if file already exists\nif (file_exists($target_file)) {\n  echo \"Sorry, file already exists.\";\n  $uploadOk = 0;\n\r\n }```",
                "Limit File Size": "The file input field in our HTML form above is named \"fileToUpload\".Now, we want to check the size of the file. If the file is larger than 500KB, an error message is displayed, and $uploadOk is set to 0:```php\n// Check file size\nif ($_FILES[\"fileToUpload\"][\"size\"] > 500000) {\n  echo \"Sorry, your file is too large.\";\n  $uploadOk = 0;\n\r\n }```",
                "Limit File Type": "The code below only allows users to upload JPG, JPEG, PNG, and GIF files. All other file types gives an error message before setting $uploadOk to 0:```php\n// Allow certain file formats\nif($imageFileType != \"jpg\" && $imageFileType  != \"png\" && $imageFileType != \"jpeg\"\n&& $imageFileType != \"gif\" ) {\n  echo \"Sorry, only JPG, JPEG, PNG & GIF files are allowed.\";\n  $uploadOk = 0;\n}```",
                "Complete Upload File PHP Script": "The complete \"upload.php\" file now looks like this:",
                "Complete PHP Filesystem Reference": "For a complete reference of filesystem functions, go to our completePHP Filesystem Reference."
            }
        },
        "cookies": {
            "title": "PHP Cookies",
            "url": "https://www.w3schools.com/php/php_cookies.asp",
            "info": {
                "What is a Cookie? ": "A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.",
                "Create Cookies With PHP": "A cookie is created with the setcookie() function.Only the name parameter is required. All other parameters are optional.",
                "PHP Create/Retrieve a Cookie": "The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 \\* 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer).We then retrieve the value of the cookie \"user\" (using the global variable $\\_COOKIE). We also use the isset() function to find out if the cookie is set:```php\n<?php\n$cookie_name = \"user\";\n$cookie_value = \"John Doe\";\nsetcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\"); // 86400 = 1 day\n?>\n<html>\n<body>\n<?php\nif(!isset($_COOKIE[$cookie_name])) {\n  echo \"Cookie named '\" . $cookie_name . \"' is not set!\";\n} else {\n  echo \"Cookie '\" . $cookie_name . \"' is set!<br>\";\n  echo \"Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n</body>\n</html>```Note: The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).",
                "Modify a Cookie Value": "To modify a cookie, just set (again) the cookie using the setcookie() function:```php\n<?php\n$cookie_name = \"user\";\n$cookie_value = \"Alex Porter\";\n\r\n setcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\");\n?>\n<html>\n<body>\n<?php\nif(!isset($_COOKIE[$cookie_name])) {\n  echo \"Cookie named '\" . $cookie_name . \"' is not set!\";\n} else {\n  echo \"Cookie '\" . $cookie_name . \"' is set!<br>\";\n  echo \"Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n</body>\n</html>```",
                "Delete a Cookie": "To delete a cookie, use the setcookie() function with an expiration date in the past:```php\n<?php\n// set the expiration date to one hour ago\nsetcookie(\"user\", \"\", time() - 3600);\n?>\n<html>\n<body>\n<?php\necho \"Cookie 'user' is deleted.\";\n?>\n</body>\n</html>```",
                "Check if Cookies are Enabled": "The following example creates a small script that checks whether cookies are enabled. First, try to create a test cookie with the setcookie() function, then count the $\\_COOKIE array variable:```php\n<?php\nsetcookie(\"test_cookie\", \"test\", time() + 3600, '/');\n?>\n<html>\n<body>\n<?php\nif(count($_COOKIE) > 0) {\n  echo \"Cookies are enabled.\";\n} else {\n  echo \"Cookies are disabled.\";\n}\n\r\n ?>\n</body>\n</html>```",
                "Complete PHP Network Reference": "For a complete reference of Network functions, go to our completePHP Network Reference.",
                "PHP Exercises": ""
            }
        },
        "sessions": {
            "title": "PHP Sessions",
            "url": "https://www.w3schools.com/php/php_sessions.asp",
            "info": {
                "What is a PHP Session?": "When you work with an application, you open it, do some changes, and then you close it. This is much like a Session. The computer knows who you are. It knows when you start the application and when you end. But on the internet there is one problem: the web server does not know who you are or what you do, because the HTTP address doesn't maintain state.Session variables solve this problem by storing user information to be used across multiple pages (e.g. username, favorite color, etc). By default, session variables last until the user closes the browser.So; Session variables hold information about one single user, and are available to all pages in one application.",
                "Start a PHP Session": "A session is started with the session\\_start() function.Session variables are set with the PHP global variable: $\\_SESSION.Now, let's create a new page called \"demo\\_session1.php\". In this page, we start a new PHP session and set some session variables:```php\n<?php\n// Start the session\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n<?php\n// Set session variables\n$_SESSION[\"favcolor\"] = \"green\";\n$_SESSION[\"favanimal\"] = \"cat\";\necho \"Session variables are set.\";\n?>\n</body>\n</html>```",
                "Get PHP Session Variable Values": "Next, we create another page called \"demo\\_session2.php\". From this page, we will access the session information we set on the first page (\"demo\\_session1.php\").Notice that session variables are not passed individually to each new page, instead they are retrieved from the session we open at the beginning of each page (session\\_start()).Also notice that all session variable values are stored in the global $\\_SESSION variable:```php\n<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n\r\n <body>\n<?php\n// Echo session variables that were set on previous page\necho \"Favorite color is \" . $_SESSION[\"favcolor\"] . \".<br>\";\necho \"Favorite animal is \" . $_SESSION[\"favanimal\"] . \".\";\n?>\n\r\n </body>\n</html>```Another way to show all the session variable values for a user session is to run the following code:```php\n<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n<?php\n\r\n print_r($_SESSION);\n?>\n</body>\n</html>```",
                "Modify a PHP Session Variable": "To change a session variable, just overwrite it:```php\n<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n<?php\n// to change a session variable, just overwrite it \n$_SESSION[\"favcolor\"] = \"yellow\";\nprint_r($_SESSION);\n?>\n</body>\n</html>```",
                "Destroy a PHP Session ": "To remove all global session variables and destroy the session, use session\\_unset()and session\\_destroy():```php\n<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html>\n<body>\n<?php\n// remove all session variables\nsession_unset(); \n// destroy the session \nsession_destroy(); \n?>\n</body>\n</html>```",
                "PHP Exercises": ""
            }
        },
        "filters": {
            "title": "PHP Filters",
            "url": "https://www.w3schools.com/php/php_filter.asp",
            "info": {
                "The PHP Filter Extension ": "PHP filters are used to validate and sanitize external input.The PHP filter extension has many of the functions needed for checking user input,and is designed to make data validation easier and quicker.The filter\\_list() function can be used to list what the PHP filter extension offers: ```php\n<table>\n  <tr>\n    <td>Filter Name</td>\n    <td>Filter ID</td>\n  </tr>\n  <?php\n  foreach (filter_list() as $id =>$filter) {\n    echo '<tr><td>' . $filter . '</td><td>' . filter_id($filter) . '</td></tr>';\n  }\n  ?>\n</table>```",
                "Why Use Filters?": "Many web applications receive external input. External input/data can be:",
                "PHP filter_var() Function": "The filter\\_var() function both validate and sanitize data.The filter\\_var() function filters a single variable with a specified filter. It takes two pieces of data:",
                "Sanitize a String": "The following example uses the filter\\_var() function to remove all HTML tags from a string:```php\n<?php\n$str = \"<h1>Hello World!</h1>\";\n$newstr = filter_var($str, FILTER_SANITIZE_STRING);\necho $newstr;\n?>```",
                "Validate an Integer": "The following example uses the filter\\_var() function to check if the variable $int is an integer. If $int is an integer,the output of the code below will be: \"Integer is valid\". If $int is not an integer, the output will be: \"Integer is not valid\":```php\n<?php\n$int = 100;\nif (!filter_var($int, FILTER_VALIDATE_INT) === false) {\n  echo(\"Integer is valid\");\n} else {\n  echo(\"Integer is not valid\");\n}\n?>```In the example above, if $int was set to 0, the function above will return \"Integer is not valid\". To solve this problem, use the code below:```php\n<?php\n$int = 0;\nif (filter_var($int, FILTER_VALIDATE_INT) === 0 || !filter_var($int, FILTER_VALIDATE_INT) === false) {\n  echo(\"Integer is valid\");\n} else {\n  echo(\"Integer is not valid\");\n}\n?>```",
                "Validate an IP Address": "The following example uses the filter\\_var() function to check if the variable $ip is a valid IP address:```php\n<?php\n$ip = \"127.0.0.1\";\nif (!filter_var($ip, FILTER_VALIDATE_IP) === false) {\n  echo(\"$ip is a valid IP address\");\n} else {\n  echo(\"$ip is not a valid IP address\");\n}\n?>```",
                "Sanitize and Validate an Email Address": "The following example uses the filter\\_var() function to first remove all illegal characters from the $email variable, then check if it is a valid email address:```php\n<?php\n$email = \"john.doe@example.com\";\n// Remove all illegal characters from email\n$email = filter_var($email, FILTER_SANITIZE_EMAIL);\n// Validate e-mail\nif (!filter_var($email, FILTER_VALIDATE_EMAIL) === false) {\n  echo(\"$email is a valid email address\");\n} else {\n  echo(\"$email is not a valid email address\");\n}\n?>```",
                "Sanitize and Validate a URL": "The following example uses the filter\\_var() function to first remove all illegal characters from a URL, then check if $url is a valid URL:```php\n<?php\n$url = \"https://www.w3schools.com\";\n\n// Remove all illegal characters from a url\n$url = filter_var($url, FILTER_SANITIZE_URL);\n// Validate url\nif (!filter_var($url, FILTER_VALIDATE_URL) === false) {\n  echo(\"$url is a valid URL\");\n} else {\n  echo(\"$url is not a valid URL\");\n}\n?>```",
                "Complete PHP Filter Reference": "For a complete reference of all filter functions, go to our completePHP Filter Reference. Check each filter to see what options and flags are available.The reference contains a brief description, and examples of use, for each function!"
            }
        },
        "filtersadvanced": {
            "title": "PHP Filters Advanced",
            "url": "https://www.w3schools.com/php/php_filter_advanced.asp",
            "info": {
                "Validate an Integer Within a Range": "The following example uses the filter\\_var() function to check if a variable is both of type INT, and between 1 and 200:```php\n<?php\n$int = 122;\n$min = 1;\n$max = 200;\nif (filter_var($int, FILTER_VALIDATE_INT, array(\"options\" => array(\"min_range\"=>$min, \"max_range\"=>$max))) === false) {\n  echo(\"Variable value is not within the legal range\");\n} else {\n  echo(\"Variable value is within the legal range\");\n}\n?>```",
                "Validate IPv6 Address": "The following example uses the filter\\_var() function to check if the variable $ip is a valid IPv6 address:```php\n<?php\n$ip = \"2001:0db8:85a3:08d3:1319:8a2e:0370:7334\";\nif (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {\n  echo(\"$ip is a valid IPv6 address\");\n} else {\n  echo(\"$ip is not a valid IPv6 address\");\n}\n?>```",
                "Validate URL - Must Contain QueryString": "The following example uses the filter\\_var() function to check if the variable $url is a URL with a querystring:```php\n<?php\n$url = \"https://www.w3schools.com\";\nif (!filter_var($url, FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED) === false) {\n  echo(\"$url is a valid URL with a query string\");\n} else {\n  echo(\"$url is not a valid URL with a query string\");\n}\n?>```",
                "Remove Characters With ASCII Value > 127": "The following example uses the filter\\_var() function to sanitize a string. It will both remove all HTML tags, and all characters with ASCII value > 127, from the string:```php\n<?php\n$str = \"<h1>Hello World\u00c3\u0086\u00c3\u0098\u00c3\u0085!</h1>\";\n$newstr = filter_var($str, FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_HIGH);\necho $newstr;\n?>```",
                "Complete PHP Filter Reference": "For a complete reference of all filter functions, go to our completePHP Filter Reference. Check each filter to see what options and flags are available.The reference contains a brief description, and examples of use, for each function!"
            }
        },
        "callbackfunctions": {
            "title": "PHP Callback Functions",
            "url": "https://www.w3schools.com/php/php_callback_functions.asp",
            "info": {
                "Callback Functions": "A callback function (often referred to as just \"callback\") is a function which is passed as anargument into another function.Any existing function can be used as a callback function. To use a function as a callbackfunction, pass a string containing the name of the function as the argument of anotherfunction:```php\n<?php\nfunction my_callback($item) {\n  return strlen($item);\n}\n$strings = [\"apple\", \"orange\", \"banana\", \"coconut\"];\n$lengths = array_map(\"my_callback\", $strings);\nprint_r($lengths);\n?>```Starting with version 7, PHP can pass anonymous functions as callback functions:```php\n<?php\n$strings = [\"apple\", \"orange\", \"banana\", \"coconut\"];\n$lengths = array_map( function($item) { return strlen($item); } , $strings);\nprint_r($lengths);\n?>```",
                "Callbacks in User Defined Functions": "User-defined functions and methods can also take callback functions as arguments. To use callback functions inside a user-defined function or method, call it by adding parentheses to the variable and pass arguments as with normal functions:```php\n<?php\nfunction exclaim($str) {\n  return $str . \"! \";\n}\n\nfunction ask($str) {\n  return $str . \"? \";\n}\nfunction printFormatted($str, $format) {\n  // Calling the $format callback function\n  echo $format($str);\n}\n// Pass \"exclaim\" and \"ask\" as callback functions to printFormatted()\nprintFormatted(\"Hello world\", \"exclaim\");\nprintFormatted(\"Hello world\", \"ask\");\n?>```"
            }
        },
        "json": {
            "title": "PHP JSON",
            "url": "https://www.w3schools.com/php/php_json.asp",
            "info": {
                "What is JSON?": "JSON stands for JavaScript Object Notation, and is a syntax for storing and exchanging data.Since the JSON format is a text-based format, it can easily be sent to and from a server, and used as a data format by any programming language.",
                "PHP and JSON": "PHP has some built-in functions to handle JSON.First, we will look at the following two functions:",
                "PHP - json_encode()": "The json\\_encode() function is used to encode a value to JSON format.```php\n<?php\n$age = array(\"Peter\"=>35, \"Ben\"=>37, \"Joe\"=>43);\n\necho json_encode($age);\n?>``````php\n<?php\n$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\necho json_encode($cars);\n?>```",
                "PHP - json_decode()": "The json\\_decode() function is used to decode a JSON object into a PHP object or an associative array.```php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\nvar_dump(json_decode($jsonobj));\n?>```The json\\_decode() function returns an object by default. The json\\_decode() function has a second parameter, and when set to true, JSON objects are decoded into associative arrays.```php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\nvar_dump(json_decode($jsonobj, true));\n?>```",
                "PHP - Accessing the Decoded Values": "Here are two examples of how to access the decoded values from an object and from an associative array:```php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n$obj = json_decode($jsonobj);\necho $obj->Peter;\necho $obj->Ben;\necho $obj->Joe;\n?>``````php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n$arr = json_decode($jsonobj, true);\necho $arr[\"Peter\"];\necho $arr[\"Ben\"];\necho $arr[\"Joe\"];\n?>```",
                "PHP - Looping Through the Values": "You can also loop through the values with a foreach() loop:```php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n$obj = json_decode($jsonobj);\nforeach($obj as $key => $value) {\n  echo $key . \" => \" . $value . \"<br>\";\n}\n?>``````php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n$arr = json_decode($jsonobj, true);\nforeach($arr as $key => $value) {\n  echo $key . \" => \" . $value . \"<br>\";\n}\n?>```",
                "PHP JSON Introduction": "The JSON extension implements the JavaScript Object Notation data-interchange format.In PHP 5, the decoding is handled by a parser based on the JSON\\_checker by Douglas Crockford.PHP 7 has a new and improved parser specifically written for PHP and licensed under the PHP license.",
                "Installation": "From PHP 5.2.0, the JSON functions are enabled by default. There is no installation needed to use these functions.",
                "PHP JSON Functions": "",
                "PHP Predefined JSON Constants": ""
            }
        },
        "exceptions": {
            "title": "PHP Exceptions",
            "url": "https://www.w3schools.com/php/php_exceptions.asp",
            "info": {
                "What is an Exception?": "An exception is an object that describes an error or unexpected behaviour of a PHP script.Exceptions are thrown by many PHP functions and classes.User defined functions and classes can also throw exceptions.Exceptions are a good way to stop a function when it comes across data that it cannotuse.",
                "Throwing an Exception": "The throw statement allows a user defined function or method to throw an exception. When an exception is thrown, the code following it will not be executed.If an exception is not caught, a fatal error will occur with an \"Uncaught Exception\" message.Lets try to throw an exception without catching it:```php\n<?php\nfunction divide($dividend, $divisor) {\n  if($divisor == 0) {\n    throw new Exception(\"Division by zero\");\n  }\n  return $dividend / $divisor;\n}\necho divide(5, 0);\n?>```The result will look something like this:",
                "The try...catch Statement": "To avoid the error from the example above, we can use thetry...catch statement to catch exceptions and continue the process.```php\n<?php\nfunction divide($dividend, $divisor) {\n  if($divisor == 0) {\n    throw new Exception(\"Division by zero\");\n  }\n  return $dividend / $divisor;\n}\ntry {\n  echo divide(5, 0);\n} catch(Exception $e) {\n  echo \"Unable to divide.\";\n}\n?>```The catch block indicates what type of exception should be caught and the name of thevariable which can be used to access the exception. In the example above, the type ofexception is Exception and the variable name is $e.",
                "The try...catch...finally Statement": "The try...catch...finally statement can be used to catch exceptions. Code in thefinally block will always run regardless of whether an exception was caught. Iffinally is present, the catch block is optional.```php\n<?php\nfunction divide($dividend, $divisor) {\n  if($divisor == 0) {\n    throw new Exception(\"Division by zero\");\n  }\n  return $dividend / $divisor;\n}\ntry {\n  echo divide(5, 0);\n} catch(Exception $e) {\n  echo \"Unable to divide. \";\n} finally {\n  echo \"Process complete.\";\n}\n?>``````php\n<?php\nfunction divide($dividend, $divisor) {\n  if($divisor == 0) {\n    throw new Exception(\"Division by zero\");\n  }\n  return $dividend / $divisor;\n}\ntry {\n  echo divide(5, 0);\n} finally {\n  echo \"Process complete.\";\n}\n?>```",
                "The Exception Object": "The Exception Object contains information about the error or unexpected behaviour thatthe function encountered.When catching an exception, the following table shows some of the methods that can be used toget information about the exception:```php\n<?php\nfunction divide($dividend, $divisor) {\n  if($divisor == 0) {\n    throw new Exception(\"Division by zero\", 1);\n  }\n  return $dividend / $divisor;\n}\ntry {\n  echo divide(5, 0);\n} catch(Exception $ex) {\n  $code = $ex->getCode();\n  $message = $ex->getMessage();\n  $file = $ex->getFile();\n  $line = $ex->getLine();\n  echo \"Exception thrown in $file on line $line: [Code $code]\n  $message\";\n}\n?>```"
            }
        },
        "whatisoop": {
            "title": "PHP What is OOP",
            "url": "https://www.w3schools.com/php/php_oop_what_is.asp",
            "info": {
                "PHP What is OOP?": "OOP stands for Object-Oriented Programming.Procedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions.Object-oriented programming has several advantages over procedural programming:Tip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.",
                "PHP - What are Classes and Objects?": "Classes and objects are the two main aspects of object-oriented programming.Look at the following illustration to see the difference between class and objects:Another example:So, a class is a template for objects, and an object is an instance of a class.When the individual objects are created, they inherit all the properties and behaviors from the class, but each object will have different values for the properties.Look at the next chapters to learn more about OOP."
            }
        },
        "classes/objects": {
            "title": "PHP Classes/Objects",
            "url": "https://www.w3schools.com/php/php_oop_classes_objects.asp",
            "info": {
                "OOP Case": "Let's assume we have a class named Fruit. A Fruit can have properties like name, color, weight, etc. We can define variables like $name, $color, and $weight to hold the values of these properties.When the individual objects (apple, banana, etc.) are created, they inherit all the  properties and behaviors from the class, but each object will have different values for the properties.",
                "Define a Class": "A class is defined by using the class keyword, followed by the name of the class and a pair of curly braces ({}). All its properties and methods go inside the braces:```php\n<?php\nclass Fruit {\n  // code goes here...\n}\n?>```Below we declare a class named Fruit consisting of two properties ($name and $color) and two methods set\\_name() and get\\_name() for setting and getting the $name property:```php\n<?php\nclass Fruit {\n  // Properties\n  public   $name;\n  public $color;\n  // Methods\n  function   set_name($name) {\n      $this->name = $name;\n  }\n  function get_name() {\n      return $this->name;\n  }\n}\n?>```",
                "Define Objects": "Classes are nothing without objects! We can create multiple objects from a class. Each object has all the properties and methods defined in the class, but they will have different property values.Objects of a class is created using the new keyword.In the example below, $apple and $banana are instances of the class Fruit:```php\n<?php\nclass Fruit {\n  // Properties\n  public   $name;\n  public $color;\n  // Methods\n  function   set_name($name) {\n      $this->name = $name;\n  }\n  function get_name() {\n      return $this->name;\n  }\n}\n$apple = new Fruit();\n  $banana = new Fruit();\n$apple->set_name('Apple');\n$banana->set_name('Banana');\n\necho $apple->get_name();\necho \"<br>\";\n  echo $banana->get_name();\n?>```In the example below, we add two more methods to class Fruit, for setting and getting the $color property:",
                "PHP - The $this Keyword": "The $this keyword refers to the current object, and is only available inside methods.Look at the following example:```php\n<?php\nclass Fruit {\n  public $name;\n}\n$apple = new Fruit();\n?>```So, where can we change the value of the $name property? There are two ways:1. Inside the class (by adding a set\\_name() method and use $this):```php\n<?php\nclass Fruit {\n  public $name;\n    function set_name($name) {\n    $this->name = $name;\n    }\n}\n$apple = new Fruit();\n$apple->set_name(\"Apple\");\n?>```2. Outside the class (by directly changing the property value):```php\n<?php\nclass Fruit {\n  public $name;\n}\n$apple = new Fruit();\n$apple->name = \"Apple\";\n?>```",
                "PHP - instanceof": "You can use the instanceof keyword to check if an object belongs to a specific class:```php\n<?php\n$apple = new Fruit();\nvar_dump($apple instanceof   Fruit);\n?>```"
            }
        },
        "constructor": {
            "title": "PHP Constructor",
            "url": "https://www.w3schools.com/php/php_oop_constructor.asp",
            "info": {
                "PHP - The __construct Function": "A constructor allows you to initialize an object's properties upon creation of the object.If you create a \\_\\_construct() function, PHP will automatically call this function when you create an object from a class.Notice that the construct function starts with two underscores (\\_\\_)!We see in the example below, that using a constructor saves us from  calling the set\\_name() method which reduces the amount of code:```php\n<?php\nclass Fruit {\n  public   $name;\n  public $color;\n    function __construct($name) {\n    $this->name = $name;  \n  }\n  function get_name() {\n      return $this->name;\n  }\n}\n$apple = new Fruit(\"Apple\");\n  echo $apple->get_name();\n?>```Another example:"
            }
        },
        "destructor": {
            "title": "PHP Destructor",
            "url": "https://www.w3schools.com/php/php_oop_destructor.asp",
            "info": {
                "PHP - The __destruct Function": "A destructor is called when the object is destructed or the script is stopped or exited.If you create a \\_\\_destruct() function, PHP will automatically call this function at the end of the script.Notice that the destruct function starts with two underscores (\\_\\_)!The example below has a \\_\\_construct() function that is automatically called when you create an object from a class, and a \\_\\_destruct() function that is automatically called at the end of the script:```php\n<?php\nclass Fruit {\n  public   $name;\n  public $color;\n    function __construct($name) {\n    $this->name = $name;  \n  }\n    function __destruct() {\n    echo \"The fruit is {$this->name}.\";  \n  }\n}\n$apple = new Fruit(\"Apple\");\n  ?>```Another example:"
            }
        },
        "accessmodifiers": {
            "title": "PHP Access Modifiers",
            "url": "https://www.w3schools.com/php/php_oop_access_modifiers.asp",
            "info": {
                "PHP - Access Modifiers": "Properties and methods can have access modifiers which control where they can be accessed.There are three access modifiers:In the following example we have added three different access modifiers to the three properties. Here, if you try to set the name property it will work fine (because the name property is public). However,\u00a0if you try to set the color or weight property it will result in a fatal error (because the color and weight property are protected and private):```php\n<?php\nclass Fruit {\n  public   $name;\n  protected $color;\n  private $weight;\n}\n$mango = new Fruit();\n$mango->name = 'Mango'; // OK \n$mango->color = 'Yellow'; // ERROR\n  $mango->weight = '300'; // ERROR\n?>```In the next example we have added access modifiers to two methods. Here, if you try to call the set\\_color() or the set\\_weight() function it will result in a fatal error (because the two functions are considered protected and private), even if all the properties are public:"
            }
        },
        "inheritance": {
            "title": "PHP Inheritance",
            "url": "https://www.w3schools.com/php/php_oop_inheritance.asp",
            "info": {
                "PHP - What is Inheritance?": "Inheritance in OOP = When a class derives from another class.The child class will inherit all the public and protected properties and methods from the parent class. In addition, it can have its own properties and methods.An inherited class is defined by using the extends keyword.Let's look at an example:```php\n<?php\nclass Fruit {\n  public   $name;\n  public $color;\n  public   function __construct($name, $color) {\n    $this->name = $name;\n    $this->color = $color;  \n  }\n    public function intro() {\n    echo \"The fruit is {$this->name}   and the color is {$this->color}.\";  \n  }\n}\n// Strawberry is inherited from Fruit\nclass   Strawberry extends Fruit {\n  public   function message() {\n    echo \"Am I a fruit or a   berry? \";  \n  }\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\");\n$strawberry->message();\n$strawberry->intro();\n  ?>```The Strawberry class is inherited from the Fruit class. This means that the Strawberry class can use the public $name and $color properties as well as the public \\_\\_construct() and intro() methods from the Fruit class because of inheritance.The Strawberry class also has its own method: message().",
                "PHP - Inheritance and the Protected Access Modifier": "In the previous chapter we learned that protected properties or methods can   be accessed within the   class and by classes derived from that class. What does that mean?Let's look at an example:```php\n<?php\nclass Fruit {\n  public   $name;\n  public $color;\n  public   function __construct($name, $color) {\n    $this->name = $name;\n    $this->color = $color;  \n  }\n    protected function intro() {\n    echo \"The fruit is {$this->name}   and the color is {$this->color}.\";  \n  }\n}\nclass   Strawberry extends Fruit {\n  public   function message() {\n    echo \"Am I a fruit or a   berry? \";  \n  }\n}\n// Try to call all three methods from outside class\n$strawberry = new Strawberry(\"Strawberry\", \"red\");    // OK. __construct() is public\n$strawberry->message(); // OK. message()   is public\n$strawberry->intro(); // ERROR. intro()   is protected\n  ?>```In the example above we see that if we try to call a protected method (intro()) from outside the class, we will receive an error. public methods will work fine!Let's look at another example:In the example above we see that all works fine! It is because we call theprotected method (intro()) from inside the derived class.",
                "PHP - Overriding Inherited Methods": "Inherited methods can be overridden by redefining the methods (use the same name) in the child class.Look at the example below. The \\_\\_construct() and intro() methods in the child class (Strawberry) will override the \\_\\_construct() and intro() methods in the parent class (Fruit):```php\n<?php\nclass Fruit {\n  public   $name;\n  public $color;\n  public   function __construct($name, $color) {\n    $this->name = $name;\n    $this->color = $color;  \n  }\n    public function intro() {\n    echo \"The fruit is {$this->name}   and the color is {$this->color}.\";  \n  }\n}\nclass   Strawberry extends Fruit {\n  public $weight;\n  public   function __construct($name, $color, $weight) {\n    $this->name = $name;\n    $this->color = $color;\n    $this->weight = $weight;  \n  }\n    public function intro() {\n    echo \"The fruit is {$this->name}, the color is {$this->color},   and the weight is {$this->weight} gram.\";  \n  }\n}\n$strawberry = new Strawberry(\"Strawberry\", \"red\",   50);\n$strawberry->intro();\n?>```",
                "PHP - The final Keyword": "The final keyword can be used to prevent class inheritance or to prevent method overriding.The following example shows how to prevent class inheritance:```php\n<?php\nfinal class Fruit {\n  // some code \n}\n//   will result in error\nclass   Strawberry extends Fruit {\n  // some code\n}\n?>```The following example shows how to prevent method overriding:```php\n<?php\nclass Fruit {\n    final public function intro() {\n    // some code\n  }\n}\nclass   Strawberry extends Fruit {\n  //   will result in error\n    public function intro() {\n    // some code\n  }\n}\n?>```"
            }
        },
        "abstractclasses": {
            "title": "PHP Abstract Classes",
            "url": "https://www.w3schools.com/php/php_oop_classes_abstract.asp",
            "info": {
                "PHP - What are Abstract Classes and Methods?": "Abstract classes and methods are when the parent class has a named method, but need its child class(es) to fill out the tasks.An abstract class is a class that contains at least one abstract method. An abstract method is a method that is declared, but not implemented in the code.An abstract class or method is defined with the abstract keyword:```php\n<?php\nabstract class   ParentClass {\n  abstract public function someMethod1();\n    abstract public function someMethod2($name, $color);\n  abstract   public function someMethod3() : string;\n}\n?>```When inheriting from an abstract class, the child class method must be defined with the same name, and the same or a less restricted access modifier. So, if the abstract method is defined as protected, the child class method must be defined as either protected or public, but not private. Also, the type and number of required arguments must be the same. However, the child classes may have optional arguments in addition.So, when a child class is inherited from an abstract class, we have the following rules:Let's look at an example:The Audi, Volvo, and Citroen classes are inherited from the Car class. This means that the Audi, Volvo, and Citroen classes can use the public $name property as well as the public \\_\\_construct() method from the Car class because of inheritance.But, intro() is an abstract method that should be defined in all the child classes and they should return a string.",
                "PHP - More Abstract Class Examples": "Let's look at another example where the abstract method has an argument:```php\n<?php\nabstract class ParentClass {\n  // Abstract method   with an argument\n  abstract protected   function prefixName($name);\n}\nclass ChildClass extends ParentClass {\n  public function prefixName($name) {\n      if ($name == \"John Doe\") {\n      $prefix = \"Mr.\";\n      } elseif ($name == \"Jane Doe\") {\n      $prefix =   \"Mrs.\";\n    } else {\n        $prefix = \"\";\n    }\n    return   \"{$prefix} {$name}\";\n  }\n}\n$class = new ChildClass;\necho $class->prefixName(\"John   Doe\");\necho \"<br>\"; \necho $class->prefixName(\"Jane Doe\");\n?>```Let's look at another example where the abstract method has an argument, and the child class has two optional arguments that are not defined in the parent's     abstract method:"
            }
        },
        "traits": {
            "title": "PHP Traits",
            "url": "https://www.w3schools.com/php/php_oop_traits.asp",
            "info": {
                "PHP - What are Traits?": "PHP only supports single inheritance: a child class can inherit only from one single parent.So, what if a class needs to inherit multiple behaviors? OOP traits solve this problem.Traits are used to declare methods that can be used in multiple classes. Traits can have methods and abstract methods that can be used in multiple classes, and the methods can have any access modifier (public, private, or protected).Traits are declared with the trait keyword:```php\n<?php\n  trait TraitName {\n  // some code...\n}\n?>```To use a trait in a class, use the use keyword:```php\n<?php\nclass MyClass {\n  use TraitName;\n}\n?>```Let's look at an example:```php\n<?php\ntrait message1 {\npublic function msg1() {\n      echo \"OOP is fun! \"; \n  }\n}\nclass Welcome {\n  use   message1;\n}\n$obj = new Welcome();\n$obj->msg1();\n?>```Here, we declare one trait: message1. Then, we create a class: Welcome. The class uses the trait, and all the methods in the trait will be available in the class.If other classes need to use the msg1() function, simply use the message1 trait in those classes. This reduces code duplication, because there is no need to redeclare the same method over and over again.",
                "PHP - Using Multiple Traits": "Let's look at another example:```php\n<?php\ntrait message1 {\n  public function msg1() {\n      echo \"OOP is fun! \"; \n  }\n}\ntrait message2 {\n  public function msg2()   {\n    echo \"OOP reduces code duplication!\"; \n  }\n  }\nclass Welcome {\n    use message1;\n}\nclass Welcome2 {\n  use message1, message2;\n  }\n\n$obj = new Welcome();\n$obj->msg1();\necho \"<br>\";\n$obj2 =   new Welcome2();\n$obj2->msg1();\n$obj2->msg2();\n?>```Here, we declare two traits: message1 and message2. Then, we create two classes: Welcome and Welcome2. The first class (Welcome) uses the message1 trait, and the second class (Welcome2) uses both message1 and message2 traits (multiple traits are separated by comma)."
            }
        },
        "staticmethods": {
            "title": "PHP Static Methods",
            "url": "https://www.w3schools.com/php/php_oop_static_methods.asp",
            "info": {
                "PHP - Static Methods": "Static methods can be called directly - without creating an instance of a class.Static methods are declared with the static keyword:```php\n<?php\n  class ClassName {\n  public static function staticMethod() {\n      echo \"Hello World!\";\n  }\n}\n?>```To access a static method use the class name, double colon (::), and the method name:```php\nClassName::staticMethod();```Let's look at an example:```php\n<?php\nclass   greeting {\n  public static function   welcome() {\n    echo \"Hello World!\";\n  }\n}\n\n// Call static method\n  greeting::welcome();\n?>```Here, we declare a static method: welcome(). Then, we call the static method by using the class name, double colon (::), and the method name (without creating a class first).",
                "PHP - More on Static Methods": "A class can have both static and non-static methods. A static method can be accessed from a method in the same class using the self keyword and double colon (::):```php\n<?php\nclass greeting {\n  public static function welcome() {\n      echo \"Hello World!\";\n  }\n  public function __construct()   {\n    self::welcome();\n  }\n}\nnew   greeting();\n?>```Static methods can also be called from methods in other classes. To do this, the static method should be public:```php\n<?php\nclass   greeting {\n  public static function   welcome() {\n    echo \"Hello World!\";\n  }\n}\n\nclass   SomeOtherClass {\n  public function   message() {\n     greeting::welcome();\n  }\n}\n?>```To call a static method from a child class, use the parent keyword inside the child class. Here, the static method can be public or protected."
            }
        },
        "staticproperties": {
            "title": "PHP Static Properties",
            "url": "https://www.w3schools.com/php/php_oop_static_properties.asp",
            "info": {
                "PHP - Static Properties": "Static properties can be called directly - without creating an instance of a class.Static properties are declared with the static keyword:```php\n<?php\n  class ClassName {\n  public static $staticProp = \"W3Schools\";\n}\n?>```To access a static property use the class name, double colon (::), and the property name:```php\nClassName::staticProp;```Let's look at an example:```php\n<?php\nclass   pi {\n  public static $value = 3.14159;\n}\n\n// Get static property\n  echo pi::$value;\n?>```Here, we declare a static property: $value. Then, we echo the value of the static property by using the class name, double colon (::), and the property name (without creating a class first).",
                "PHP - More on Static Properties": "A class can have both static and non-static properties. A static property can be accessed from a method in the same class using the self keyword and double colon (::):```php\n<?php\nclass   pi {\n  public static $value=3.14159;\n  public function   staticValue() {\n    return self::$value;\n  }\n}\n\n$pi = new pi();\necho $pi->staticValue(); \n?>```To call a static property from a child class, use the parent keyword inside the child class:```php\n<?php\nclass   pi {\n  public static $value=3.14159;\n}\n\nclass x extends pi {\n    public function xStatic() {\n    return   parent::$value;\n  } \n}\n// Get value of static property   directly via child class\n  echo x::$value;\n// or get value of static property via xStatic()   method\n$x = new x();\necho $x->xStatic(); \n?>```"
            }
        },
        "namespaces": {
            "title": "PHP Namespaces",
            "url": "https://www.w3schools.com/php/php_namespaces.asp",
            "info": {
                "PHP Namespaces": "Namespaces are qualifiers that solve two different problems:For example, you may have a set of classes which describe an HTML table, such as Table, Row andCell while also having another set of classes to describe furniture, such as Table,Chair and Bed. Namespaces can be used to organize the classes into two differentgroups while also preventing the two classes Table and Table from being mixed up.",
                "Declaring a Namespace": "Namespaces are declared at the beginning of a file using the namespace keyword:```php\nnamespace Html;``````php\n<?php\necho \"Hello World!\";\nnamespace Html;\n...\n?>```Constants, classes and functions declared in this file will belong to the Html namespace:```php\n<?php\nnamespace Html;\nclass Table {\n  public $title = \"\";\n  public   $numRows = 0;\n  public function message() {\n    echo \"<p>Table   '{$this->title}' has {$this->numRows} rows.</p>\";\n  }\n}\n$table = new   Table();\n$table->title = \"My table\";\n$table->numRows = 5;\n?>\n\n<!DOCTYPE html>\n  <html>\n<body>\n<?php \n$table->message(); \n?>\n</body>\n</html>```For further organization, it is possible to have nested namespaces:```php\nnamespace Code\\Html;```",
                "Using Namespaces": "Any code that follows a namespace declaration is operating inside the namespace, soclasses that belong to the namespace can be instantiated without any qualifiers. To accessclasses from outside a namespace, the class needs to have the namespace attachedto it.```php\n$table = new Html\\Table()\n$row = new Html\\Row();```When many classes from the same namespace are being used at the same time, it iseasier to use the namespace keyword:```php\nnamespace Html;\n$table = new Table();\n$row = new Row();```",
                "Namespace Alias": "It can be useful to give a namespace or class an alias to make it easier to write. This isdone with the use keyword:```php\nuse Html as H;\n$table = new H\\Table();``````php\nuse Html\\Table as   T;\n$table = new T();```"
            }
        },
        "mysqldatabase": {
            "title": "MySQL Database",
            "url": "https://www.w3schools.com/php/php_mysql_intro.asp",
            "info": {
                "What is MySQL?": "The data in a MySQL database are stored in tables. A table is a collection of related data, and it consists of columns and rows.Databases are useful for storing information categorically. A company may have a database with the following tables:",
                "PHP + MySQL Database System": "",
                " Database Queries": " A query is a question or a request.We can query a database for specific information and have a recordset returned.Look at the following query (using standard SQL):The query above selects all the data in the \"LastName\" column from the \"Employees\" table.To learn more about SQL, please visit our SQL tutorial.",
                "Download MySQL Database": "If you don't have a PHP server with a MySQL Database, you can download it for free here: http://www.mysql.com",
                "Facts About MySQL Database": "MySQL is the de-facto standard database system for web sites with HUGE volumes of both data and end-users (like Facebook, Twitter, and Wikipedia).Another great thing about MySQL is that it can be scaled down to support embedded database applications.Look at http://www.mysql.com/customers/ for an overview of companies using MySQL."
            }
        },
        "mysqlconnect": {
            "title": "MySQL Connect",
            "url": "https://www.w3schools.com/php/php_mysql_connect.asp",
            "info": {
                "Should I Use MySQLi or PDO?": "If you need a short answer, it would be \"Whatever you like\".Both MySQLi and PDO have their advantages:PDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases.So, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included.Both are object-oriented, but MySQLi also offers a procedural API.Both support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security.",
                "MySQL Examples in Both MySQLi and PDO Syntax": "In this, and in the following chapters we demonstrate three ways of working with PHP and MySQL:",
                "MySQLi Installation": "For Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed.For installation details, go to:http://php.net/manual/en/mysqli.installation.php",
                "PDO Installation": "For installation details, go to:http://php.net/manual/en/pdo.installation.php",
                "Open a Connection to MySQL": "Before we can access data in the MySQL database, we need to be able to connect to the server:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n// Create connection\n$conn = new mysqli($servername, $username, $password);\n\n// Check connection\n\r\n if ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\r\necho \"Connected successfully\";\n\r\n?>``````php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n\r\n $password = \"password\";\n// Create connection\n\r\n$conn = mysqli_connect($servername, $username, $password);\n\n// Check connection\n\r\n if (!$conn) {\n  die(\"Connection failed: \" . mysqli_connect_error());\n}\necho \"Connected successfully\";\n\r\n?>```Tip: A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block.",
                "Close the Connection": "The connection will be closed automatically when the script ends. To close the connection before, use the following:```php\n$conn->close();``````php\nmysqli_close($conn);``````php\n$conn = null;```"
            }
        },
        "mysqlcreatedb": {
            "title": "MySQL Create DB",
            "url": "https://www.w3schools.com/php/php_mysql_create.asp",
            "info": {
                "Create a MySQL Database Using MySQLi and PDO": "The CREATE DATABASE statement is used to create a database in MySQL.The following examples create a database named \"myDB\":```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n// Create connection\n$conn = new mysqli($servername, $username, $password);\n\r\n // Check connection\n\r\n if ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\r\n\n// Create database\n\r\n $sql = \"CREATE DATABASE myDB\";\nif ($conn->query($sql) === TRUE) {\n  echo \"Database created successfully\";\n} else {\n  echo \"Error creating database: \" . $conn->error;\n}\n$conn->close();\n\r\n?>```Note: The following PDO example create a database named \"myDBPDO\":Tip: A great benefit of PDO is that it has exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement and the generated error message. "
            }
        },
        "mysqlcreatetable": {
            "title": "MySQL Create Table",
            "url": "https://www.w3schools.com/php/php_mysql_create_table.asp",
            "info": {
                "Create a MySQL Table Using MySQLi and PDO": "The CREATE TABLE statement is used to create a table in MySQL.We will create a table named \"MyGuests\", with five columns: \"id\", \"firstname\", \"lastname\", \"email\" and \"reg\\_date\":```php\nCREATE TABLE MyGuests (\n\r\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n\r\nfirstname VARCHAR(30) NOT NULL,\n\r\nlastname VARCHAR(30) NOT NULL,\n\r\nemail VARCHAR(50),\n\r\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n\r\n)```Notes on the table above:The data type specifies what type of data the column can hold. For a complete reference of all the available data types, go to ourData Types reference.After the data type, you can specify other optional attributes for each column:Each table should have a primary key column (in this case: the \"id\" column). Its value must be unique for each record in the table.The following examples shows how to create the table in PHP:"
            }
        },
        "mysqlinsertdata": {
            "title": "MySQL Insert Data",
            "url": "https://www.w3schools.com/php/php_mysql_insert.asp",
            "info": {
                "Insert Data Into MySQL Using MySQLi and PDO": "After a database and a table have been created, we can start adding data in them.Here are some syntax rules to follow:The INSERT INTO statement is used to add new records to a MySQL table:To learn more about SQL, please visit our SQL tutorial.In the previous chapter we created an empty table named \"MyGuests\" with five columns: \"id\", \"firstname\", \"lastname\", \"email\" and \"reg\\_date\". Now, let us fill the table with data.The following examples add a new record to the \"MyGuests\" table:"
            }
        },
        "mysqlgetlastid": {
            "title": "MySQL Get Last ID",
            "url": "https://www.w3schools.com/php/php_mysql_insert_lastid.asp",
            "info": {
                "Get ID of The Last Inserted Record": "If we perform an INSERT or UPDATE on a table with an AUTO\\_INCREMENT field, we can get the ID of the last inserted/updated record immediately.In the table \"MyGuests\", the \"id\" column is an AUTO\\_INCREMENT field:```php\nCREATE TABLE MyGuests (\n\r\nid INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,\n\r\nfirstname VARCHAR(30) NOT NULL,\n\r\nlastname VARCHAR(30) NOT NULL,\n\r\nemail VARCHAR(50),\n\r\nreg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n\r\n)```The following examples are equal to the examples from the previous page (PHP Insert Data Into MySQL), except that we have added one single line of code to retrieve the ID of the last inserted record. We also echo the last inserted ID:"
            }
        },
        "mysqlinsertmultiple": {
            "title": "MySQL Insert Multiple",
            "url": "https://www.w3schools.com/php/php_mysql_insert_multiple.asp",
            "info": {
                "Insert Multiple Records Into MySQL Using MySQLi and PDO": "Multiple SQL statements must be executed with the mysqli\\_multi\\_query() function.The following examples add three new records to the \"MyGuests\" table:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\r\n // Check connection\n\r\n if ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\r\n\n$sql = \"INSERT INTO MyGuests (firstname, lastname, email)\n\r\n VALUES ('John', 'Doe', 'john@example.com');\";\n\r\n $sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\n\r\n VALUES ('Mary', 'Moe', 'mary@example.com');\";\n\r\n $sql .= \"INSERT INTO MyGuests (firstname, lastname, email)\n\r\n VALUES ('Julie', 'Dooley', 'julie@example.com')\";\n\nif ($conn->multi_query($sql) === TRUE) {\n  echo \"New records created successfully\";\n} else {\n  echo \"Error: \" . $sql . \"<br>\" . $conn->error;\n}\n$conn->close();\n\r\n?>```The PDO way is a little bit different:"
            }
        },
        "mysqlprepared": {
            "title": "MySQL Prepared",
            "url": "https://www.w3schools.com/php/php_mysql_prepared_statements.asp",
            "info": {
                "Prepared Statements and Bound Parameters": "A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency.Prepared statements basically work like this:Compared to executing SQL statements directly, prepared statements have three main advantages:",
                "Prepared Statements in MySQLi": "The following example uses prepared statements and bound parameters in MySQLi:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n\r\n }\n// prepare and bind\n$stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)\");\n$stmt->bind_param(\"sss\", $firstname, $lastname, $email);\n// set parameters and execute\n$firstname = \"John\";\n$lastname = \"Doe\";\n$email = \"john@example.com\";\n$stmt->execute();\n$firstname = \"Mary\";\n$lastname = \"Moe\";\n$email = \"mary@example.com\";\n$stmt->execute();\n\n$firstname = \"Julie\";\n$lastname = \"Dooley\";\n$email = \"julie@example.com\";\n\r\n $stmt->execute();\necho \"New records created successfully\";\n$stmt->close();\n\r\n $conn->close();\n?>```Code lines to explain from the example above:In our SQL, we insert a question mark (?) where we want to substitute in an integer, string, double or blob value.Then, have a look at the bind\\_param() function:This function binds the parameters to the SQL query and tells the database what the parameters are. The \"sss\" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string.The argument may be one of four types:We must have one of these for each parameter.By telling mysql what type of data to expect, we minimize the risk of SQL injections.",
                "Prepared Statements in PDO": "The following example uses prepared statements and bound parameters in PDO:"
            }
        },
        "mysqlselectdata": {
            "title": "MySQL Select Data",
            "url": "https://www.w3schools.com/php/php_mysql_select.asp",
            "info": {
                "Select Data From a MySQL Database": "The SELECT statement is used to select data from one or more tables:or we can use the \\* character to select ALL columns from a table:To learn more about SQL, please visit our SQL tutorial.",
                "Select Data With MySQLi": "The following example selects the id, firstname and lastname columns from the MyGuests table and displays it on the page:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n\r\n } \n$sql = \"SELECT id, firstname, lastname FROM MyGuests\";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  // output data of each row\n  while($row = $result->fetch_assoc()) {\n    echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n  }\n} else {\n  echo \"0 results\";\n}\n\r\n $conn->close();\n\r\n?>```Code lines to explain from the example above:First, we set up an SQL query that selects the id, firstname and lastname columns from the MyGuests table. The next line of code runs the query and puts the resulting data into a variable called $result.Then, the function num\\_rows() checks if there are more than zero rows returned.If there are more than zero rows returned, the function fetch\\_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.The following example shows the same as the example above, in the MySQLi procedural way:You can also put the result in an HTML table:",
                "Select Data With PDO (+ Prepared Statements)": "The following example uses prepared statements.It selects the id, firstname and lastname columns from the MyGuests table and displays it in an HTML table:"
            }
        },
        "mysqlwhere": {
            "title": "MySQL Where",
            "url": "https://www.w3schools.com/php/php_mysql_select_where.asp",
            "info": {
                "Select and Filter Data From a MySQL Database": "The WHERE clause is used to filter records.The WHERE clause is used to extract only those records that fulfill a specified condition.To learn more about SQL, please visit our SQL tutorial.",
                "Select and Filter Data With MySQLi": "The following example selects the id, firstname and lastname columns from the MyGuests table where the lastname is \"Doe\", and displays it on the page:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n\r\n } \n$sql = \"SELECT id, firstname, lastname FROM MyGuests WHERE lastname='Doe'\";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  // output data of each row\n  while($row = $result->fetch_assoc()) {\n    echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n  }\n} else {\n  echo \"0 results\";\n}\n\r\n $conn->close();\n\r\n?>```Code lines to explain from the example above:First, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table where the lastname is \"Doe\". The next line of code runs the query and puts the resulting data into a variable called $result.Then, the function num\\_rows() checks if there are more than zero rows returned.If there are more than zero rows returned, the function fetch\\_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.The following example shows the same as the example above, in the MySQLi procedural way:You can also put the result in an HTML table:",
                "Select Data With PDO (+ Prepared Statements)": "The following example uses prepared statements.It selects the id, firstname and lastname columns from the MyGuests table where the lastname is \"Doe\", and displays it in an HTML table:"
            }
        },
        "mysqlorderby": {
            "title": "MySQL Order By",
            "url": "https://www.w3schools.com/php/php_mysql_select_orderby.asp",
            "info": {
                "Select and Order Data From a MySQL Database": "The ORDER BY clause is used to sort the result-set in ascending or descending order.The ORDER BY clause sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.To learn more about SQL, please visit our SQL tutorial.",
                "Select and Order Data With MySQLi": "The following example selects the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n// Check connection\nif ($conn->connect_error) {\n  die(\"Connection failed: \" . $conn->connect_error);\n\r\n } \n$sql = \"SELECT id, firstname, lastname FROM MyGuests ORDER BY lastname\";\n$result = $conn->query($sql);\nif ($result->num_rows > 0) {\n  // output data of each row\n  while($row = $result->fetch_assoc()) {\n    echo \"id: \" . $row[\"id\"]. \" - Name: \" . $row[\"firstname\"]. \" \" . $row[\"lastname\"]. \"<br>\";\n  }\n} else {\n  echo \"0 results\";\n}\n\r\n $conn->close();\n\r\n?>```Code lines to explain from the example above:First, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column. The next line of code runs the query and puts the resulting data into a variable called $result.Then, the function num\\_rows() checks if there are more than zero rows returned.If there are more than zero rows returned, the function fetch\\_assoc() puts all the results into an associative array that we can loop through. The while() loop loops through the result set and outputs the data from the id, firstname and lastname columns.The following example shows the same as the example above, in the MySQLi procedural way:You can also put the result in an HTML table:",
                "Select Data With PDO (+ Prepared Statements)": "The following example uses prepared statements.Here we select the id, firstname and lastname columns from the MyGuests table. The records will be ordered by the lastname column, and it will be displayed in an HTML table:"
            }
        },
        "mysqldeletedata": {
            "title": "MySQL Delete Data",
            "url": "https://www.w3schools.com/php/php_mysql_delete.asp",
            "info": {
                "Delete Data From a MySQL Table Using MySQLi and PDO": "The DELETE statement is used to delete records from a table:To learn more about SQL, please visit our SQL tutorial.Let's look at the \"MyGuests\" table:The following examples delete the record with id=3 in the \"MyGuests\" table:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\r\n // Check connection\n\r\n if ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\r\n\n// sql to delete a record\n\r\n $sql = \"DELETE FROM MyGuests WHERE id=3\";\n\nif ($conn->query($sql) === TRUE) {\n  echo \"Record deleted successfully\";\n} else {\n  echo \"Error deleting record: \" . $conn->error;\n}\n$conn->close();\n\r\n?>```After the record is deleted, the table will look like this:"
            }
        },
        "mysqlupdatedata": {
            "title": "MySQL Update Data",
            "url": "https://www.w3schools.com/php/php_mysql_update.asp",
            "info": {
                "Update Data In a MySQL Table Using MySQLi and PDO": "The UPDATE statement is used to update existing records in a table:To learn more about SQL, please visit our SQL tutorial.Let's look at the \"MyGuests\" table:The following examples update the record with id=2 in the \"MyGuests\" table:```php\n<?php\n$servername = \"localhost\";\n$username = \"username\";\n$password = \"password\";\n$dbname = \"myDB\";\n// Create connection\n$conn = new mysqli($servername, $username, $password, $dbname);\n\r\n // Check connection\n\r\n if ($conn->connect_error) {\ndie(\"Connection failed: \" . $conn->connect_error);\n}\r\n\n$sql = \"UPDATE MyGuests SET lastname='Doe' WHERE id=2\";\n\nif ($conn->query($sql) === TRUE) {\n  echo \"Record updated successfully\";\n} else {\n  echo \"Error updating record: \" . $conn->error;\n}\n$conn->close();\n\r\n?>```After the record is updated, the table will look like this:"
            }
        },
        "mysqllimitdata": {
            "title": "MySQL Limit Data",
            "url": "https://www.w3schools.com/php/php_mysql_select_limit.asp",
            "info": {
                "Limit Data Selections From a MySQL Database": "MySQL provides a LIMIT clause that is used to specify the number of records to return.The LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large tables. Returning a large number of records can impact on performance.Assume we wish to select all records from 1 - 30 (inclusive) from a table called \"Orders\". The SQL query would then look like this:When the SQL query above is run, it will return the first 30 records.What if we want to select records 16 - 25 (inclusive)?Mysql also provides a way to handle this: by using OFFSET.The SQL query below says \"return only 10 records, start on record 16 (OFFSET 15)\":You could also use a shorter syntax to achieve the same result:Notice that the numbers are reversed when you use a comma."
            }
        },
        "xmlparsers": {
            "title": "PHP XML Parsers",
            "url": "https://www.w3schools.com/php/php_xml_parsers.asp",
            "info": {
                "What is XML?": "The XML language is a way to structure data for sharing across websites.Several web technologies like RSS Feeds and Podcasts are written in XML.XML is easy to create. It looks a lot like HTML, except that you make up your own tags.If you want to learn more about XML, please visit our XML tutorial.",
                "What is an XML Parser?": "To read and update, create and manipulate an XML document, you will need an XML parser.In PHP there are two major types of XML parsers:",
                "Tree-Based Parsers": "Tree-based parsers holds the entire document in Memory and transforms the XML document into a Tree structure. It analyzes the whole document, and provides access to the Tree elements (DOM).This type of parser is a better option for smaller XML documents, but not for large XML document as it causes major performance issues.Example of tree-based parsers:",
                "Event-Based Parsers": "Event-based parsers do not hold the entire document in Memory, instead, they read in one node at a time and allow you to interact with in real time. Once you move onto the next node, the old one is thrown away.This type of parser is well suited for large XML documents. It parses faster and consumes less memory. Example of event-based parsers:"
            }
        },
        "simplexmlparser": {
            "title": "PHP SimpleXML Parser",
            "url": "https://www.w3schools.com/php/php_xml_simplexml_read.asp",
            "info": {
                "The SimpleXML Parser": "SimpleXML is a tree-based parser.SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout.SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects.Compared to DOM or the Expat parser, SimpleXML takes a fewer lines of code to read text data from an element.",
                "Installation": "From PHP 5, the SimpleXML functions are part of the PHP core. No installation is required to use these functions.",
                "PHP SimpleXML - Read From String": "The PHP simplexml\\_load\\_string() function is used to read XML data from a string.Assume we have a variable that contains XML data, like this:```php\n$myXMLData = \n\"<?xml version='1.0' encoding='UTF-8'?>\n\r\n<note>\n\r\n<to>Tove</to>\n\r\n<from>Jani</from>\n\r\n<heading>Reminder</heading>\n\r\n<body>Don't forget me this weekend!</body>\n\r\n</note>\";```The example below shows how to use the simplexml\\_load\\_string() function to read XML data from a string:```php\n<?php\n$myXMLData =\n\"<?xml version='1.0' encoding='UTF-8'?>\n\r\n<note>\n\r\n<to>Tove</to>\n\r\n<from>Jani</from>\n\r\n<heading>Reminder</heading>\n\r\n<body>Don't forget me this weekend!</body>\n\r\n</note>\";\n\r\n$xml=simplexml_load_string($myXMLData) or die(\"Error: Cannot create object\");\nprint_r($xml);\n\r\n?>```The output of the code above will be:Error Handling Tip: Use the libxml functionality to retrieve all XML errors when loading the document and then iterate over the errors. The following example tries to load a broken XML string:The output of the code above will be:",
                "PHP SimpleXML - Read From File": "The PHP simplexml\\_load\\_file() function is used to read XML data from a file.Assume we have an XML file called \"note.xml\", that looks like this:```php\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\r\n<note>\n\r\n \r\n<to>Tove</to>\n\r\n \r\n<from>Jani</from>\n\r\n \r\n<heading>Reminder</heading>\n\r\n \r\n<body>Don't forget me this weekend!</body>\n\r\n</note>```The example below shows how to use the simplexml\\_load\\_file() function to read XML data from a file:```php\n<?php\n\r\n$xml=simplexml_load_file(\"note.xml\") or die(\"Error: Cannot create object\");\n\r\n print_r($xml);\n\r\n?>```The output of the code above will be:Tip: The next chapter shows how to get/retrieve node values from an XML file with SimpleXML!",
                "More PHP SimpleXML": "For more information about the PHP SimpleXML functions, visit ourPHP SimpleXML Reference."
            }
        },
        "simplexml-get": {
            "title": "PHP SimpleXML - Get",
            "url": "https://www.w3schools.com/php/php_xml_simplexml_get.asp",
            "info": {
                "PHP SimpleXML - Get Node Values": "Get the node values from the \"note.xml\" file:```php\n<?php\n$xml=simplexml_load_file(\"note.xml\") or die(\"Error: Cannot create object\");\necho $xml->to . \"<br>\";\n\r\n echo $xml->from . \"<br>\";\necho $xml->heading . \"<br>\";\necho $xml->body;\n?>```The output of the code above will be:",
                "Another XML File": "Assume we have an XML file called \"books.xml\", that looks like this:\u00a0",
                "PHP SimpleXML - Get Node Values of Specific Elements": "The following example gets the node value of the <title> element in the first and second <book> elements in the \"books.xml\" file:\u00a0```php\n<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\necho $xml->book[0]->title . \"<br>\";\necho $xml->book[1]->title; \n?>```The output of the code above will be:",
                "PHP SimpleXML - Get Node Values - Loop": "The following example loops through all the <book> elements in the \"books.xml\" file, and gets the node values of the <title>, <author>, <year>, and <price> elements:```php\n<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\nforeach($xml->children() as $books) { \n  echo $books->title . \", \"; \n  echo $books->author . \", \"; \n  echo $books->year . \", \";\n  echo $books->price . \"<br>\"; \n} \n?>```The output of the code above will be:",
                "PHP SimpleXML - Get Attribute Values": "The following example gets the attribute value of the \"category\" attribute of the first <book> element and the attribute value of the \"lang\" attribute of the <title> element in the second <book> element:```php\n<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\necho $xml->book[0]['category'] . \"<br>\";\necho $xml->book[1]->title['lang']; \n?>```The output of the code above will be:",
                "PHP SimpleXML - Get Attribute Values - Loop": "The following example gets the attribute values of the <title> elements in the \"books.xml\" file:```php\n<?php\n$xml=simplexml_load_file(\"books.xml\") or die(\"Error: Cannot create object\");\nforeach($xml->children() as $books) { \n  echo $books->title['lang'];\n  echo \"<br>\"; \n} \n?>```The output of the code above will be:",
                "More PHP SimpleXML": "For more information about the PHP SimpleXML functions, visit ourPHP SimpleXML Reference."
            }
        },
        "xmlexpat": {
            "title": "PHP XML Expat",
            "url": "https://www.w3schools.com/php/php_xml_parser_expat.asp",
            "info": {
                "The XML Expat Parser": "The Expat parser is an event-based parser.Look at the following XML fraction:An event-based parser reports the XML above as a series of three events: The XML Expat Parser functions are part of the PHP core. There is no installation needed to use these functions.",
                "The XML File": "The XML file \"note.xml\" will be used in the example below:",
                "Initializing the XML Expat Parser": "We want to initialize the XML Expat Parser in PHP, define some handlers for different XML events, and then parse the XML file.Example explained:",
                "More PHP XML Expat Parser": "For more information about the PHP Expat functions, visit our PHP XML Parser Reference."
            }
        },
        "xmldom": {
            "title": "PHP XML DOM",
            "url": "https://www.w3schools.com/php/php_xml_dom.asp",
            "info": {
                "The XML DOM Parser": "The DOM parser is a tree-based parser.Look at the following XML document fraction:The DOM sees the XML above as a tree structure: ",
                "Installation": "The DOM parser functions are part of the PHP core. There is no installation needed to use these functions.",
                "The XML File": "The XML file below (\"note.xml\") will be used in our example:",
                "Load and Output XML": "We want to initialize the XML parser, load the xml, and output it:```php\n<?php\n\r\n$xmlDoc = new DOMDocument();\n\r\n$xmlDoc->load(\"note.xml\");\n\n\r\nprint $xmlDoc->saveXML();\n\r\n?>```The output of the code above will be:If you select \"View source\" in the browser window, you will see the following HTML:The example above creates a DOMDocument-Object and loads the XML from \"note.xml\" into it.Then the saveXML() function puts the internal XML document into a string, so we can output it. ",
                "Looping through XML": "We want to initialize the XML parser, load the XML, and loop through all elements of the <note> element:```php\n<?php\n\r\n$xmlDoc = new DOMDocument();\n\r\n$xmlDoc->load(\"note.xml\");\n\n\r\n$x = $xmlDoc->documentElement;\n\r\nforeach ($x->childNodes AS $item) {\nprint $item->nodeName . \" = \" . $item->nodeValue . \"<br>\";\n\r\n }\n\r\n?>```The output of the code above will be:In the example above you see that there are empty text nodes between each element.When XML generates, it often contains white-spaces between the nodes. The XML DOM parser treats these as ordinary elements, and if you are not aware of them, they sometimes cause problems.If you want to learn more about the XML DOM, please visit ourXML tutorial."
            }
        },
        "ajaxintro": {
            "title": "AJAX Intro",
            "url": "https://www.w3schools.com/php/php_ajax_intro.asp",
            "info": {
                "What is AJAX?": "AJAX = Asynchronous JavaScript and XML.AJAX is a technique for creating fast and dynamic web pages.AJAX allows web pages to be updated asynchronously by exchanging small amounts of data with the server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.Classic web pages, (which do not use AJAX) must reload the entire page if the content should change.Examples of applications using AJAX: Google Maps, Gmail, Youtube, and Facebook tabs.",
                "How AJAX Works": "",
                "AJAX is Based on Internet Standards": "AJAX is based on internet standards, and uses a combination of:",
                "Google Suggest": "AJAX was made popular in 2005 by Google, with Google Suggest.Google Suggest is using AJAX to create a very dynamic web interface: When you start typing in Google's search box, a JavaScript sends the letters off to a server and the server returns a list of suggestions.",
                "Start Using AJAX Today": "In our PHP tutorial, we will demonstrate how AJAX can update parts of a web page, without reloading the whole page. The server script will be written in PHP.If you want to learn more about AJAX, visit our AJAX tutorial."
            }
        },
        "ajax": {
            "title": "AJAX PHP",
            "url": "https://www.w3schools.com/php/php_ajax_php.asp",
            "info": {
                "AJAX PHP Example": "The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:",
                "Example Explained": "In the example above, when a user types a character in the input field, a function called \"showHint()\" is executed.The function is triggered by the onkeyup event.Here is the HTML code:```php\n<html>\n<head>\n<script>\nfunction showHint(str) {\n  if (str.length == 0) { \n    document.getElementById(\"txtHint\").innerHTML = \"\";\n    return;\n  } else {\n    var xmlhttp = new XMLHttpRequest();\n    xmlhttp.onreadystatechange = function() {\n      if (this.readyState == 4 && this.status == 200) {\n        document.getElementById(\"txtHint\").innerHTML = this.responseText;\n      }\n    };\n    xmlhttp.open(\"GET\", \"gethint.php?q=\" + str, true);\n    xmlhttp.send();\n  }\n}\n</script>\n</head>\n<body>\n<p><b>Start typing a name in the input field below:</b></p>\n<form action=\"\">\n  <label for=\"fname\">First name:</label>\n  <input type=\"text\" id=\"fname\" name=\"fname\" onkeyup=\"showHint(this.value)\">\n</form>\n<p>Suggestions: <span id=\"txtHint\"></span></p>\n\r\n </body>\n</html>```Code explanation:First, check if the input field is empty (str.length == 0). If it is, clear the content of the txtHint placeholder and exit the function.However, if the input field is not empty, do the following:",
                "The PHP File - \"gethint.php\"": "The PHP file checks an array of names, and returns the corresponding name(s) to the browser:"
            }
        },
        "ajaxdatabase": {
            "title": "AJAX Database",
            "url": "https://www.w3schools.com/php/php_ajax_database.asp",
            "info": {
                "AJAX Database Example": "The following example will demonstrate how a web page can fetch information from a database with AJAX:",
                "Example Explained - The MySQL Database": "The database table we use in the example above looks like this:",
                "Example Explained": "In the example above, when a user selects a person in the dropdown list above, a function called \"showUser()\" is executed.The function is triggered by the onchange event.Here is the HTML code:Code explanation:First, check if person is selected. If no person is selected (str == \"\"), clear the content of txtHint and exit the function. If a person is selected, do the following:",
                "The PHP File": "The page on the server called by the JavaScript above is a PHP file called \"getuser.php\".The source code in \"getuser.php\" runs a query against a MySQL database, and returns the result in an HTML table:Explanation: When the query is sent from the JavaScript to the PHP file, the following happens:"
            }
        },
        "ajaxxml": {
            "title": "AJAX XML",
            "url": "https://www.w3schools.com/php/php_ajax_xml.asp",
            "info": {
                "AJAX XML Example": "The following example will demonstrate how a web page can fetch information from an XML file with AJAX:",
                "Example Explained - The HTML Page": "When a user selects a CD in the dropdown list above, a function called \"showCD()\" is executed. The function is triggered by the \"onchange\" event:```php\n<html>\n\r\n<head>\n\r\n<script>\n\r\nfunction showCD(str)\r\n{\n\r\n \r\nif (str==\"\") {\n\r\n document.getElementById(\"txtHint\").innerHTML=\"\";\n  return;\n} \nvar xmlhttp=new XMLHttpRequest();\n\r\n \r\nxmlhttp.onreadystatechange=function() {\n\r\n if (this.readyState==4 && this.status==200) {\n\r\n   document.getElementById(\"txtHint\").innerHTML=this.responseText;\n  }\n}\n\r\n \r\nxmlhttp.open(\"GET\",\"getcd.php?q=\"+str,true);\n\r\n \r\nxmlhttp.send();\n\r\n}\n\r\n</script>\n\r\n</head>\n\r\n<body>\n\n\r\n<form>\n\r\nSelect a CD:\n\r\n<select name=\"cds\" onchange=\"showCD(this.value)\">\n\r\n \r\n<option value=\"\">Select a CD:</option>\n\r\n \r\n<option value=\"Bob Dylan\">Bob Dylan</option>\n\r\n \r\n<option value=\"Bee Gees\">Bee Gees</option>\n\r\n \r\n<option value=\"Cat Stevens\">Cat Stevens</option>\n\r\n</select>\n\r\n</form>\n<div id=\"txtHint\"><b>CD info will be listed here...</b></div>\n\r\n</body>\n\r\n</html>```The showCD() function does the following:",
                "The PHP File": "The page on the server called by the JavaScript above is a PHP file called \"getcd.php\".The PHP script loads an XML document, \"cd\\_catalog.xml\", runs a query against the XML file, and returns the result as HTML:```php\n<?php\n\r\n$q=$_GET[\"q\"];\n\n\r\n$xmlDoc = new DOMDocument();\n\r\n$xmlDoc->load(\"cd_catalog.xml\");\n\n\r\n$x=$xmlDoc->getElementsByTagName('ARTIST');\n\n\r\nfor ($i=0; $i<=$x->length-1; $i++)\r\n{\n\r\n \r\n//Process only element nodes\n\r\n \r\nif ($x->item($i)->nodeType==1) {\n\r\n if ($x->item($i)->childNodes->item(0)->nodeValue == $q) {\n\r\n   $y=($x->item($i)->parentNode);\n  }\n}\n\r\n}\n\n\r\n$cd=($y->childNodes);\n\n\r\nfor ($i=0;$i<$cd->length;$i++)\r\n{ \n\r\n \r\n//Process only element nodes\n\r\n \r\nif ($cd->item($i)->nodeType==1) {\n\r\n echo(\"<b>\" . $cd->item($i)->nodeName . \":</b> \");\n  echo($cd->item($i)->childNodes->item(0)->nodeValue);\n\r\n echo(\"<br>\");\n}\n\r\n}\n\r\n?>```When the CD query is sent from the JavaScript to the PHP page, the following happens:"
            }
        },
        "ajaxlivesearch": {
            "title": "AJAX Live Search",
            "url": "https://www.w3schools.com/php/php_ajax_livesearch.asp",
            "info": {
                "AJAX Live Search": "The following example will demonstrate a live search, where you get search results while you type.Live search has many benefits compared to traditional searching:Search for a W3Schools page in the input field below:The results in the example above are found in an XML file(links.xml). To make this example small and simple, only six results are available.",
                "Example Explained - The HTML Page": "When a user types a character in the input field above, the function \"showResult()\" is executed. The function is triggered by the \"onkeyup\" event:```php\n<html>\n\r\n<head>\n\r\n<script>\n\r\nfunction showResult(str)\r\n{\n\r\n \r\nif (str.length==0) { \n\r\n document.getElementById(\"livesearch\").innerHTML=\"\";\n  document.getElementById(\"livesearch\").style.border=\"0px\";\n\r\n return;\n}\nvar xmlhttp=new XMLHttpRequest();\n\r\n \r\nxmlhttp.onreadystatechange=function() {\n\r\n if (this.readyState==4 && this.status==200) {\n\r\n \r\n document.getElementById(\"livesearch\").innerHTML=this.responseText;\n    document.getElementById(\"livesearch\").style.border=\"1px solid #A5ACB2\";\n  }\n}\n\r\n \r\nxmlhttp.open(\"GET\",\"livesearch.php?q=\"+str,true);\n\r\n \r\nxmlhttp.send();\n\r\n}\n\r\n</script>\n\r\n</head>\n\r\n<body>\n\n\r\n<form>\n\r\n<input type=\"text\" size=\"30\" onkeyup=\"showResult(this.value)\">\n\r\n<div id=\"livesearch\"></div>\n\r\n</form>\n\n\r\n</body>\n\r\n</html>```Source code explanation:If the input field is empty (str.length==0), the function clears the content of the livesearch placeholder and exits the function.If the input field is not empty, the showResult() function executes the following:",
                "The PHP File": "The page on the server called by the JavaScript above is a PHP file called \"livesearch.php\".The source code in \"livesearch.php\" searches an XML file for titles matching the search string and returns the result:If there is any text sent from the JavaScript (strlen($q) > 0), the following happens:"
            }
        },
        "ajaxpoll": {
            "title": "AJAX Poll",
            "url": "https://www.w3schools.com/php/php_ajax_poll.asp",
            "info": {
                "AJAX Poll": "The following example will demonstrate a poll where the result is shown without reloading.",
                "Example Explained - The HTML Page": "When a user chooses an option above, a function called \"getVote()\" is executed. The function is triggered by the \"onclick\" event:```php\n<html>\n\r\n<head>\n\r\n<script>\n\r\nfunction getVote(int)\r\n{\n\r\n var xmlhttp=new XMLHttpRequest();\n\r\n \r\nxmlhttp.onreadystatechange=function() {\n\r\n if (this.readyState==4 && this.status==200) {\n\r\n \r\n document.getElementById(\"poll\").innerHTML=this.responseText;\n  }\n}\n\r\n \r\nxmlhttp.open(\"GET\",\"poll_vote.php?vote=\"+int,true);\n\r\n \r\nxmlhttp.send();\n\r\n}\n\r\n</script>\n\r\n</head>\n\r\n<body>\n\n\r\n<div id=\"poll\">\n\r\n<h3>Do you like PHP and AJAX so far?</h3>\n\r\n<form>\n\r\nYes:\r\n<input type=\"radio\" name=\"vote\"\r\nvalue=\"0\" onclick=\"getVote(this.value)\"><br>\nNo:\r\n<input type=\"radio\" name=\"vote\"\r\nvalue=\"1\" onclick=\"getVote(this.value)\">\n\r\n</form>\n\r\n</div>\n\n\r\n</body>\n\r\n</html>```The getVote() function does the following:",
                "The PHP File": "The page on the server called by the JavaScript above is a PHP file called \"poll\\_vote.php\":```php\n<?php\n\r\n$vote = $_REQUEST['vote'];\n\n\r\n//get content of textfile\n\r\n$filename = \"poll_result.txt\";\n\r\n$content = file($filename);\n\n\r\n//put content in array\n\r\n$array = explode(\"||\", $content[0]);\n\r\n$yes = $array[0];\n\r\n$no = $array[1];\n\n\r\nif ($vote == 0) {\n$yes = $yes + 1;\n\r\n }\n\r\nif ($vote == 1) {\n$no = $no + 1;\n\r\n }\n\n\r\n//insert votes to txt file\n\r\n$insertvote = $yes.\"||\".$no;\n\r\n$fp = fopen($filename,\"w\");\n\r\nfputs($fp,$insertvote);\n\r\nfclose($fp);\n\r\n?>\n\n\r\n<h2>Result:</h2>\n\r\n<table>\n\r\n<tr>\n\r\n<td>Yes:</td>\n\r\n<td><img src=\"poll.gif\"\n\r\nwidth='<?php echo(100*round($yes/($no+$yes),2)); ?>'\n\r\nheight='20'>\n\r\n<?php echo(100*round($yes/($no+$yes),2)); ?>%\n\r\n</td>\n\r\n</tr>\n\r\n<tr>\n\r\n<td>No:</td>\n\r\n<td><img src=\"poll.gif\"\n\r\nwidth='<?php echo(100*round($no/($no+$yes),2)); ?>'\n\r\nheight='20'>\n\r\n<?php echo(100*round($no/($no+$yes),2)); ?>%\n\r\n</td>\n\r\n</tr>\n\r\n</table>```The value is sent from the JavaScript, and the following happens:",
                "The Text File": "The text file (poll\\_result.txt) is where we store the data from the poll. It is stored like this:The first number represents the \"Yes\" votes, the second number represents the \"No\" votes.Note: Remember to allow your web server to edit the text file. Do NOT give everyone access, just the web server (PHP)."
            }
        },
        "overview": {
            "title": "PHP Overview",
            "url": "https://www.w3schools.com/php/php_ref_overview.asp",
            "info": {
                "PHP Reference": "The PHP reference contains different categories of all PHP functions and constants, along with examples."
            }
        },
        "array": {
            "title": "PHP Array",
            "url": "https://www.w3schools.com/php/php_ref_array.asp",
            "info": {
                "PHP Array Introduction": "The array functions allow you to access and manipulate arrays.Simple and multi-dimensional arrays are supported.",
                "Installation": "The array functions are part of the PHP core. There is no installation needed to use these functions.",
                "PHP Array Functions": ""
            }
        },
        "array()": {
            "title": "array()",
            "url": "https://www.w3schools.com/php/func_array.asp",
            "info": {
                "Definition and Usage": "The array() function is used to create an array.In PHP, there are three types of arrays:",
                "Syntax": "Syntax for indexed arrays:Syntax for associative arrays:\u00a0",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\necho \"Peter is \" . $age['Peter'] . \" years old.\";\n?>``````php\n<?php\n\r\n $cars=array(\"Volvo\",\"BMW\",\"Toyota\");\n\r\n $arrlength=count($cars);\nfor($x=0;$x<$arrlength;$x++)\n  {\n  echo $cars[$x];\n  echo \"<br>\";\n  }\n?>``````php\n<?php\n$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\n\nforeach($age as $x=>$x_value)\n  {\n  echo \"Key=\" . $x . \", Value=\" . $x_value;\n  echo \"<br>\";\n  }\n?>``````php\n<?php\n// A two-dimensional array:\n$cars=array\n  (\n  array(\"Volvo\",100,96),\n  array(\"BMW\",60,59),\n  array(\"Toyota\",110,100)\n  );\n?>```"
            }
        },
        "array_change_key_case()": {
            "title": "array_change_key_case()",
            "url": "https://www.w3schools.com/php/func_array_change_key_case.asp",
            "info": {
                "Definition and Usage": "The array\\_change\\_key\\_case() function changes all keys in an array to lowercase or uppercase.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\n\r\n print_r(array_change_key_case($age,CASE_LOWER));\n?>``````php\n<?php\n\r\n $pets=array(\"a\"=>\"Cat\",\"B\"=>\"Dog\",\"c\"=>\"Horse\",\"b\"=>\"Bird\");\n\r\n print_r(array_change_key_case($pets,CASE_UPPER));\n?>```"
            }
        },
        "array_chunk()": {
            "title": "array_chunk()",
            "url": "https://www.w3schools.com/php/func_array_chunk.asp",
            "info": {
                "Definition and Usage": "The array\\_chunk() function splits an array into chunks of new arrays.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\",\"Harry\"=>\"50\");\nprint_r(array_chunk($age,2,true));\n?>```"
            }
        },
        "array_column()": {
            "title": "array_column()",
            "url": "https://www.w3schools.com/php/func_array_column.asp",
            "info": {
                "Definition and Usage": "The array\\_column() function returns the values from a single column in the input array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n// An array that represents a possible record set returned from a database\n$a = array(\n  array(\n    'id' => 5698,\n    'first_name' => 'Peter',\n    'last_name' => 'Griffin',\n  ),\n  array(\n    'id' => 4767,\n    'first_name' => 'Ben',\n    'last_name' => 'Smith',\n  ),\n  array(\n    'id' => 3809,\n    'first_name' => 'Joe',\n    'last_name' => 'Doe',\n  )\n);\n$last_names = array_column($a, 'last_name', 'id');\nprint_r($last_names);\n\r\n ?>```"
            }
        },
        "array_combine()": {
            "title": "array_combine()",
            "url": "https://www.w3schools.com/php/func_array_combine.asp",
            "info": {
                "Definition and Usage": "The array\\_combine() function creates an array by using the elements from one \"keys\" array and one \"values\" array.Note: Both arrays must have equal number of elements!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_count_values()": {
            "title": "array_count_values()",
            "url": "https://www.w3schools.com/php/func_array_count_values.asp",
            "info": {
                "Definition and Usage": "The array\\_count\\_values() function counts all the values of an array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_diff()": {
            "title": "array_diff()",
            "url": "https://www.w3schools.com/php/func_array_diff.asp",
            "info": {
                "Definition and Usage": "The array\\_diff() function compares the values of two (or more) arrays,and returns the differences.This function compares the values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\n $a2=array(\"e\"=>\"red\",\"f\"=>\"black\",\"g\"=>\"purple\");\n$a3=array(\"a\"=>\"red\",\"b\"=>\"black\",\"h\"=>\"yellow\");\n\n$result=array_diff($a1,$a2,$a3);\nprint_r($result);\n?>```"
            }
        },
        "array_diff_assoc()": {
            "title": "array_diff_assoc()",
            "url": "https://www.w3schools.com/php/func_array_diff_assoc.asp",
            "info": {
                "Definition and Usage": "The array\\_diff\\_assoc() function compares the keys and values of two (or more) arrays,and returns the differences.This function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\n $a2=array(\"e\"=>\"red\",\"f\"=>\"green\",\"g\"=>\"blue\");\n\r\n $result=array_diff_assoc($a1,$a2);\nprint_r($result);\n?>``````php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\n $a2=array(\"a\"=>\"red\",\"f\"=>\"green\",\"g\"=>\"blue\");\n$a3=array(\"h\"=>\"red\",\"b\"=>\"green\",\"g\"=>\"blue\");\n\n$result=array_diff_assoc($a1,$a2,$a3);\nprint_r($result);\n?>```"
            }
        },
        "array_diff_key()": {
            "title": "array_diff_key()",
            "url": "https://www.w3schools.com/php/func_array_diff_key.asp",
            "info": {
                "Definition and Usage": "The array\\_diff\\_key() function compares the keys of two (or more) arrays,and returns the differences.This function compares the keys of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"red\",\"green\",\"blue\",\"yellow\");\n$a2=array(\"red\",\"green\",\"blue\");\n\r\n $result=array_diff_key($a1,$a2);\nprint_r($result);\n?>``````php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"c\"=>\"yellow\",\"d\"=>\"black\",\"e\"=>\"brown\");\n\r\n $a3=array(\"f\"=>\"green\",\"c\"=>\"purple\",\"g\"=>\"red\");\n$result=array_diff_key($a1,$a2,$a3);\n\r\n print_r($result);\n?>```"
            }
        },
        "array_diff_uassoc()": {
            "title": "array_diff_uassoc()",
            "url": "https://www.w3schools.com/php/func_array_diff_uassoc.asp",
            "info": {
                "Definition and Usage": "The array\\_diff\\_uassoc() function compares the keys and values of two (or more) arrays,and returns the differences.Note: This function uses a user-defined function to compare the keys!This function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n  {\n  return 0;\n  }\n  return ($a>$b)?1:-1;\n}\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"d\"=>\"blue\");\n\r\n $a3=array(\"e\"=>\"yellow\",\"a\"=>\"red\",\"d\"=>\"blue\");\n$result=array_diff_uassoc($a1,$a2,$a3,\"myfunction\");\n\r\n print_r($result);\n\r\n ?>```"
            }
        },
        "array_diff_ukey()": {
            "title": "array_diff_ukey()",
            "url": "https://www.w3schools.com/php/func_array_diff_ukey.asp",
            "info": {
                "Definition and Usage": "The array\\_diff\\_ukey() function compares the keys of two (or more) arrays, and returns the differences.Note: This function uses a user-defined function to compare the keys!This function compares the keys of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\nfunction myfunction($a,$b)\n{\nif ($a===$b)\n  {\n  return 0;\n  }\n  return ($a>$b)?1:-1;\n}\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"black\",\"b\"=>\"yellow\",\"d\"=>\"brown\");\n\r\n $a3=array(\"e\"=>\"purple\",\"f\"=>\"white\",\"a\"=>\"gold\");\n$result=array_diff_ukey($a1,$a2,$a3,\"myfunction\");\n\r\n print_r($result);\n?>```"
            }
        },
        "array_fill()": {
            "title": "array_fill()",
            "url": "https://www.w3schools.com/php/func_array_fill.asp",
            "info": {
                "Definition and Usage": "The array\\_fill() function fills an array with values.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_fill_keys()": {
            "title": "array_fill_keys()",
            "url": "https://www.w3schools.com/php/func_array_fill_keys.asp",
            "info": {
                "Definition and Usage": "The array\\_fill\\_keys() function fills an array with values, specifying keys.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_filter()": {
            "title": "array_filter()",
            "url": "https://www.w3schools.com/php/func_array_filter.asp",
            "info": {
                "Definition and Usage": "The array\\_filter() function filters the values of an array using a callback function.This function passes each value of the input array to the callback function. If the callback function returns true, the current value from input is returned into the result array. Array keys are preserved.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_flip()": {
            "title": "array_flip()",
            "url": "https://www.w3schools.com/php/func_array_flip.asp",
            "info": {
                "Definition and Usage": "The array\\_flip() function flips/exchanges all keys with their associated values in an array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_intersect()": {
            "title": "array_intersect()",
            "url": "https://www.w3schools.com/php/func_array_intersect.asp",
            "info": {
                "Definition and Usage": "The array\\_intersect() function compares the values of two (or more) arrays, and returns the matches.This function compares the values of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\n $a2=array(\"e\"=>\"red\",\"f\"=>\"black\",\"g\"=>\"purple\");\n$a3=array(\"a\"=>\"red\",\"b\"=>\"black\",\"h\"=>\"yellow\");\n\n$result=array_intersect($a1,$a2,$a3);\nprint_r($result);\n?>```"
            }
        },
        "array_intersect_assoc()": {
            "title": "array_intersect_assoc()",
            "url": "https://www.w3schools.com/php/func_array_intersect_assoc.asp",
            "info": {
                "Definition and Usage": "The array\\_intersect\\_assoc() function compares the keys and valuesof two (or more) arrays, and returns the matches. This function compares the keys and values of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\n $a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"g\"=>\"blue\");\n$a3=array(\"a\"=>\"red\",\"b\"=>\"green\",\"g\"=>\"blue\");\n\n$result=array_intersect_assoc($a1,$a2,$a3);\nprint_r($result);\n?>```"
            }
        },
        "array_intersect_key()": {
            "title": "array_intersect_key()",
            "url": "https://www.w3schools.com/php/func_array_intersect_key.asp",
            "info": {
                "Definition and Usage": "The array\\_intersect\\_key() function compares the keys of two (or more) arrays, and returns the matches.This function compares the keys of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"red\",\"green\",\"blue\",\"yellow\");\n$a2=array(\"red\",\"green\",\"blue\");\n\r\n $result=array_intersect_key($a1,$a2);\nprint_r($result);\n?>``````php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"c\"=>\"yellow\",\"d\"=>\"black\",\"e\"=>\"brown\");\n\r\n $a3=array(\"f\"=>\"green\",\"c\"=>\"purple\",\"g\"=>\"red\");\n$result=array_intersect_key($a1,$a2,$a3);\n\r\n print_r($result);\n?>```"
            }
        },
        "array_intersect_uassoc()": {
            "title": "array_intersect_uassoc()",
            "url": "https://www.w3schools.com/php/func_array_intersect_uassoc.asp",
            "info": {
                "Definition and Usage": "The array\\_intersect\\_uassoc() function compares the keys and values of two (or more) arrays, and returns the matches.Note: This function uses a user-defined function to compare the keys!This function compares the keys and values of two or more arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n function myfunction($a,$b)\n{\nif ($a===$b)\n  {\n  return 0;\n  }\n  return ($a>$b)?1:-1;\n}\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"red\",\"b\"=>\"green\",\"d\"=>\"blue\");\n\r\n $a3=array(\"e\"=>\"yellow\",\"a\"=>\"red\",\"d\"=>\"blue\");\n$result=array_intersect_uassoc($a1,$a2,$a3,\"myfunction\");\n\r\n print_r($result);\n?>```"
            }
        },
        "array_intersect_ukey()": {
            "title": "array_intersect_ukey()",
            "url": "https://www.w3schools.com/php/func_array_intersect_ukey.asp",
            "info": {
                "Definition and Usage": "The array\\_intersect\\_ukey() function compares the keys of two (or more) arrays, and returns the matches.Note: This function uses a user-defined function to compare the keys!This function compares the keys of two or more arrays, and return an array that contains the entries from array1 that are present in array2,array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n function myfunction($a,$b)\n{\nif ($a===$b)\n  {\n  return 0;\n  }\n  return ($a>$b)?1:-1;\n}\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n$a2=array(\"a\"=>\"black\",\"b\"=>\"yellow\",\"d\"=>\"brown\");\n\r\n $a3=array(\"e\"=>\"purple\",\"f\"=>\"white\",\"a\"=>\"gold\");\n$result=array_intersect_ukey($a1,$a2,$a3,\"myfunction\");\n\r\n print_r($result);\n?>```"
            }
        },
        "array_key_exists()": {
            "title": "array_key_exists()",
            "url": "https://www.w3schools.com/php/func_array_key_exists.asp",
            "info": {
                "Definition and Usage": "The array\\_key\\_exists() function checks an array for a specified key,and returns true if the key exists and false if the key does not exist.Tip: Remember that if you skip the key when you specify an array,an integer key is generated, starting at 0 and increases by 1 for each value. (See example below)",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a=array(\"Volvo\"=>\"XC90\",\"BMW\"=>\"X5\");\nif (array_key_exists(\"Toyota\",$a))\n{\necho \"Key exists!\";\n}\n\r\nelse\n{\necho \"Key does not exist!\";\n}\n\r\n?>``````php\n<?php\n\r\n$a=array(\"Volvo\",\"BMW\");\n\r\nif (array_key_exists(0,$a))\n{\necho \"Key exists!\";\n}\n\r\nelse\n{\necho \"Key does not exist!\";\n}\n\r\n?>```"
            }
        },
        "array_keys()": {
            "title": "array_keys()",
            "url": "https://www.w3schools.com/php/func_array_keys.asp",
            "info": {
                "Definition and Usage": "The array\\_keys() function returns an array containing the keys.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a=array(\"Volvo\"=>\"XC90\",\"BMW\"=>\"X5\",\"Toyota\"=>\"Highlander\");\nprint_r(array_keys($a,\"Highlander\"));\n?>``````php\n<?php\n\r\n $a=array(10,20,30,\"10\");\nprint_r(array_keys($a,\"10\",false));\n?>``````php\n<?php\n$a=array(10,20,30,\"10\");\nprint_r(array_keys($a,\"10\",true));\n?>```"
            }
        },
        "array_map()": {
            "title": "array_map()",
            "url": "https://www.w3schools.com/php/func_array_map.asp",
            "info": {
                "Definition and Usage": "The array\\_map() function sends each value of an array to a user-made function,and returns an array with new values, given by the user-made function.Tip: You can assign one array to the function, or as many as you like.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n function myfunction($v)\n{\nif ($v===\"Dog\")\n  {\n  return \"Fido\";\n  }\nreturn $v;\n}\n$a=array(\"Horse\",\"Dog\",\"Cat\");\n\r\n print_r(array_map(\"myfunction\",$a));\n?>``````php\n<?php\n\r\n function myfunction($v1,$v2)\n{\nif ($v1===$v2)\n  {\n  return \"same\";\n  }\nreturn \"different\";\n}\n$a1=array(\"Horse\",\"Dog\",\"Cat\");\n\r\n $a2=array(\"Cow\",\"Dog\",\"Rat\");\nprint_r(array_map(\"myfunction\",$a1,$a2));\n?>``````php\n<?php\n\r\n function myfunction($v) \n{\n$v=strtoupper($v);\n  return $v;\n\r\n }\n$a=array(\"Animal\" => \"horse\", \"Type\" => \"mammal\");\nprint_r(array_map(\"myfunction\",$a));\n?>``````php\n<?php\n$a1=array(\"Dog\",\"Cat\");\n\r\n$a2=array(\"Puppy\",\"Kitten\");\n\r\nprint_r(array_map(null,$a1,$a2));\n?>```"
            }
        },
        "array_merge()": {
            "title": "array_merge()",
            "url": "https://www.w3schools.com/php/func_array_merge.asp",
            "info": {
                "Definition and Usage": "The array\\_merge() function merges one or more arrays into one array.Tip: You can assign one array to the function, or as many as you like.Note: If two or more array elements have the same key, the last one overrides the others.Note: If you assign only one array to the array\\_merge() function, and the keys are integers,the function returns a new array with integer keys starting at 0 and increases by 1 for each value (See example below).Tip: The difference between this function and thearray\\_merge\\_recursive() function is when two or more array elements have the same key. Instead of override the keys, the array\\_merge\\_recursive() function makes the value as an array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\");\n\r\n$a2=array(\"c\"=>\"blue\",\"b\"=>\"yellow\");\n\r\nprint_r(array_merge($a1,$a2));\n?>``````php\n<?php\n\r\n$a=array(3=>\"red\",4=>\"green\");\n\r\nprint_r(array_merge($a));\n?>```"
            }
        },
        "array_merge_recursive()": {
            "title": "array_merge_recursive()",
            "url": "https://www.w3schools.com/php/func_array_merge_recursive.asp",
            "info": {
                "Definition and Usage": "The array\\_merge\\_recursive() function merges one or more arrays into one array.The difference between this function and the array\\_merge() function is when two or more array elements have the same key.Instead of override the keys, the array\\_merge\\_recursive() function makes the value as an array.Note: If you assign only one array to the array\\_merge\\_recursive() function,it will behave exactly the same as the array\\_merge() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_multisort()": {
            "title": "array_multisort()",
            "url": "https://www.w3schools.com/php/func_array_multisort.asp",
            "info": {
                "Definition and Usage": "The array\\_multisort() function returns a sorted array. You can assign one or more arrays. The function sorts the first array, and the other arrays follow, then, if two or more values are the same, it sorts the next array, and so on.Note: String keys will be maintained, but numeric keys will be re-indexed, starting at 0 and increase by 1.Note: You can assign the sortorder and the sorttype parameters after each array. If not specified, each array parameter uses the default values.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a1=array(\"Dog\",\"Cat\");\n\r\n$a2=array(\"Fido\",\"Missy\");\n\r\narray_multisort($a1,$a2);\n\r\nprint_r($a1);\n\r\nprint_r($a2);\n?>``````php\n<?php\n\r\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n\r\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\n\r\narray_multisort($a1,$a2);\n\r\nprint_r($a1);\n\r\nprint_r($a2);\n?>``````php\n<?php\n$a1=array(\"Dog\",\"Dog\",\"Cat\");\n$a2=array(\"Pluto\",\"Fido\",\"Missy\");\narray_multisort($a1,SORT_ASC,$a2,SORT_DESC);\nprint_r($a1);\nprint_r($a2);\n?>``````php\n<?php\n\r\n $a1=array(1,30,15,7,25);\n$a2=array(4,30,20,41,66);\n$num=array_merge($a1,$a2);\n\r\n array_multisort($num,SORT_DESC,SORT_NUMERIC);\nprint_r($num);\n?>```"
            }
        },
        "array_pad()": {
            "title": "array_pad()",
            "url": "https://www.w3schools.com/php/func_array_pad.asp",
            "info": {
                "Definition and Usage": "The array\\_pad() function inserts a specified number of elements, with a specified value, to an array.Tip: If you assign a negative size parameter, the function will insert new elements BEFORE the original elements (See example below).Note: This function will not delete any elements if the size parameter is less than the size of the original array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a=array(\"red\",\"green\");\n\r\nprint_r(array_pad($a,-5,\"blue\"));\n?>```"
            }
        },
        "array_pop()": {
            "title": "array_pop()",
            "url": "https://www.w3schools.com/php/func_array_pop.asp",
            "info": {
                "Definition and Usage": "The array\\_pop() function deletes the last element of an array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_product()": {
            "title": "array_product()",
            "url": "https://www.w3schools.com/php/func_array_product.asp",
            "info": {
                "Definition and Usage": "The array\\_product() function calculates and returns the product of an array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a=array(5,5,2,10);\n\r\necho(array_product($a));\n?>```"
            }
        },
        "array_push()": {
            "title": "array_push()",
            "url": "https://www.w3schools.com/php/func_array_push.asp",
            "info": {
                "Definition and Usage": "The array\\_push() function inserts one or more elements to the end of an array.Tip: You can add one value, or as many as you like.Note: Even if your array has string keys, your added elements will always have numeric keys (See example below).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\");\n\r\narray_push($a,\"blue\",\"yellow\");\n\r\nprint_r($a);\n?>```"
            }
        },
        "array_rand()": {
            "title": "array_rand()",
            "url": "https://www.w3schools.com/php/func_array_rand.asp",
            "info": {
                "Definition and Usage": "The array\\_rand() function returns a random key from an array,or it returns an array of random keys if you specify that the function should return more than one key.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\nprint_r(array_rand($a,1));\n?>``````php\n<?php\n\r\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\nprint_r(array_rand($a,2));\n?>```"
            }
        },
        "array_reduce()": {
            "title": "array_reduce()",
            "url": "https://www.w3schools.com/php/func_array_reduce.asp",
            "info": {
                "Definition and Usage": "The array\\_reduce() function sends the values in an array to a user-defined function, and returns a string.Note: If the array is empty and initial is not passed, this function returns NULL.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nfunction myfunction($v1,$v2)\n\r\n{\n\r\nreturn $v1 . \"-\" . $v2;\n\r\n}\n\r\n$a=array(\"Dog\",\"Cat\",\"Horse\");\n\r\nprint_r(array_reduce($a,\"myfunction\",5));\n?>``````php\n<?php\n\r\nfunction myfunction($v1,$v2)\n\r\n{\n\r\nreturn $v1+$v2;\n\r\n}\n\r\n$a=array(10,15,20);\n\r\nprint_r(array_reduce($a,\"myfunction\",5));\n?>```"
            }
        },
        "array_replace()": {
            "title": "array_replace()",
            "url": "https://www.w3schools.com/php/func_array_replace.asp",
            "info": {
                "Definition and Usage": "The array\\_replace() function replaces the values of the first array with the values from following arrays.Tip: You can assign one array to the function, or as many as you like.If a key from array1 exists in array2, values from array1 will be replaced by the values from array2. If the key only exists in array1, it will be left as it is (See Example 1 below).If a key exist in array2 and not in array1, it will be created in array1 (See Example 2 below).If multiple arrays are used, values from later arrays will overwrite the previous ones (See Example 3 below).Tip: Use array\\_replace\\_recursive() to replace the values of array1 with the values from following arrays recursively.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\");\n$a2=array(\"a\"=>\"orange\",\"burgundy\");\n\r\n print_r(array_replace($a1,$a2));\n?>``````php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"green\");\n$a2=array(\"a\"=>\"orange\",\"b\"=>\"burgundy\");\n\r\n print_r(array_replace($a1,$a2));\n?>``````php\n<?php\n\r\n $a1=array(\"red\",\"green\");\n$a2=array(\"blue\",\"yellow\");\n$a3=array(\"orange\",\"burgundy\");\n\r\n print_r(array_replace($a1,$a2,$a3));\n?>``````php\n<?php\n\r\n $a1=array(\"red\",\"green\",\"blue\",\"yellow\");\n\r\n $a2=array(0=>\"orange\",3=>\"burgundy\");\nprint_r(array_replace($a1,$a2));\n?>```"
            }
        },
        "array_replace_recursive()": {
            "title": "array_replace_recursive()",
            "url": "https://www.w3schools.com/php/func_array_replace_recursive.asp",
            "info": {
                "Definition and Usage": "The array\\_replace\\_recursive() function replaces the values of the first array with the values from following arrays recursively.Tip: You can assign one array to the function, or as many as you like.If a key from array1 exists in array2, values from array1 will be replaced by the values from array2. If the key only exists in array1, it will be left as it is. If a key exist in array2 and not in array1, it will be created in array1. If multiple arrays are used, values from later arrays will overwrite the previous ones.Note: If you do not specify a key for each array, this function will behave exactly the same as the array\\_replace() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"a\"=>array(\"red\"),\"b\"=>array(\"green\",\"blue\"));\n\r\n $a2=array(\"a\"=>array(\"yellow\"),\"b\"=>array(\"black\"));\n\r\n $a3=array(\"a\"=>array(\"orange\"),\"b\"=>array(\"burgundy\"));\nprint_r(array_replace_recursive($a1,$a2,$a3));\n?>``````php\n<?php\n\r\n $a1=array(\"a\"=>array(\"red\"),\"b\"=>array(\"green\",\"blue\"),);\n\r\n $a2=array(\"a\"=>array(\"yellow\"),\"b\"=>array(\"black\"));\n$result=array_replace_recursive($a1,$a2);\n\r\n print_r($result);\n$result=array_replace($a1,$a2);\nprint_r($result);\n?>```"
            }
        },
        "array_reverse()": {
            "title": "array_reverse()",
            "url": "https://www.w3schools.com/php/func_array_reverse.asp",
            "info": {
                "Definition and Usage": "The array\\_reverse() function returns an array in the reverse order.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a=array(\"Volvo\",\"XC90\",array(\"BMW\",\"Toyota\"));\n$reverse=array_reverse($a);\n\r\n $preserve=array_reverse($a,true);\nprint_r($a);\nprint_r($reverse);\n\r\n print_r($preserve);\n?>```"
            }
        },
        "array_search()": {
            "title": "array_search()",
            "url": "https://www.w3schools.com/php/func_array_search.asp",
            "info": {
                "Definition and Usage": "The array\\_search() function search an array for a value and returns the key.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a=array(\"a\"=>\"5\",\"b\"=>5,\"c\"=>\"5\");\n\r\necho array_search(5,$a,true);\n?>```"
            }
        },
        "array_shift()": {
            "title": "array_shift()",
            "url": "https://www.w3schools.com/php/func_array_shift.asp",
            "info": {
                "Definition and Usage": "The array\\_shift() function removes the first element from an array, and returns the value of the removed element.Note: If the keys are numeric, all elements will get new keys, starting from 0 and increases by 1 (See example below).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a=array(0=>\"red\",1=>\"green\",2=>\"blue\");\n\r\necho array_shift($a);\n\r\nprint_r ($a);\n?>```"
            }
        },
        "array_slice()": {
            "title": "array_slice()",
            "url": "https://www.w3schools.com/php/func_array_slice.asp",
            "info": {
                "Definition and Usage": "The array\\_slice() function returns selected parts of an array.Note: If the array have string keys, the returned array will always preserve the keys (See example 4).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\nprint_r(array_slice($a,1,2));\n?>``````php\n<?php\n\r\n $a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\nprint_r(array_slice($a,-2,1));\n?>``````php\n<?php\n$a=array(\"red\",\"green\",\"blue\",\"yellow\",\"brown\");\nprint_r(array_slice($a,1,2,true));\n?>``````php\n<?php\n\r\n $a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\",\"e\"=>\"brown\");\n\r\n print_r(array_slice($a,1,2));\n\r\n $a=array(\"0\"=>\"red\",\"1\"=>\"green\",\"2\"=>\"blue\",\"3\"=>\"yellow\",\"4\"=>\"brown\");\n\r\n print_r(array_slice($a,1,2));\n?>```"
            }
        },
        "array_splice()": {
            "title": "array_splice()",
            "url": "https://www.w3schools.com/php/func_array_splice.asp",
            "info": {
                "Definition and Usage": "The array\\_splice() function removes selected elements from an array and replaces it with new elements. The function also returns an array with the removed elements.Tip: If the function does not remove any elements (length=0), the replaced array will be inserted from the position of the start parameter (See Example 2).Note: The keys in the replaced array are not preserved.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\");\n\r\n $a2=array(\"a\"=>\"purple\",\"b\"=>\"orange\");\nprint_r(array_splice($a1,0,2,$a2));\n?>``````php\n<?php\n\r\n $a1=array(\"0\"=>\"red\",\"1\"=>\"green\");\n\r\n $a2=array(\"0\"=>\"purple\",\"1\"=>\"orange\");\narray_splice($a1,1,0,$a2);\n\r\n print_r($a1);\n?>```"
            }
        },
        "array_sum()": {
            "title": "array_sum()",
            "url": "https://www.w3schools.com/php/func_array_sum.asp",
            "info": {
                "Definition and Usage": "The array\\_sum() function returns the sum of all the values in the array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a=array(\"a\"=>52.2,\"b\"=>13.7,\"c\"=>0.9);\necho array_sum($a);\n?>```"
            }
        },
        "array_udiff()": {
            "title": "array_udiff()",
            "url": "https://www.w3schools.com/php/func_array_udiff.asp",
            "info": {
                "Definition and Usage": "The array\\_udiff() function compares the values of two or more arrays, and returns the differences.Note: This function uses a user-defined function to compare the values!This function compares the values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n function myfunction($a,$b)\n{\nif ($a===$b)\n  {\n  return 0;\n  }\n  return ($a>$b)?1:-1;\n}\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"yellow\");\n\r\n $a2=array(\"A\"=>\"red\",\"b\"=>\"GREEN\",\"yellow\",\"black\");\n$a3=array(\"a\"=>\"green\",\"b\"=>\"red\",\"yellow\",\"black\");\n\n$result=array_udiff($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n?>```"
            }
        },
        "array_udiff_assoc()\r\n": {
            "title": "array_udiff_assoc()\r\n    ",
            "url": "https://www.w3schools.com/php/func_array_udiff_assoc.asp",
            "info": {
                "Definition and Usage": "The array\\_udiff\\_assoc() function compares the keys and values of two or more arrays, and returns the differences.Note: This function uses a built-in function to compare the keys, and a user-defined function to compare the values!This function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2 or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_udiff_uassoc()": {
            "title": "array_udiff_uassoc()",
            "url": "https://www.w3schools.com/php/func_array_udiff_uassoc.asp",
            "info": {
                "Definition and Usage": "The array\\_udiff\\_uassoc() function compares the keys and values of two or more arrays, and returns the differences.Note: This function uses two user-defined functions for comparison; the key is used in the first function and the value is used in the second!This function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are not present in array2or array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_uintersect()": {
            "title": "array_uintersect()",
            "url": "https://www.w3schools.com/php/func_array_uintersect.asp",
            "info": {
                "Definition and Usage": "The array\\_uintersect() function compares the values of two or more arrays, and returns the matches.Note: This function uses a user-defined function to compare the values!This function compares the values of two (or more) arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n function myfunction($a,$b)\n{\nif ($a===$b)\n  {\n  return 0;\n  }\n  return ($a>$b)?1:-1;\n}\n$a1=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"yellow\");\n\r\n $a2=array(\"A\"=>\"red\",\"b\"=>\"GREEN\",\"yellow\",\"black\");\n$a3=array(\"a\"=>\"green\",\"b\"=>\"red\",\"yellow\",\"black\");\n\n$result=array_uintersect($a1,$a2,$a3,\"myfunction\");\nprint_r($result);\n?>```"
            }
        },
        "array_uintersect_assoc()": {
            "title": "array_uintersect_assoc()",
            "url": "https://www.w3schools.com/php/func_array_uintersect_assoc.asp",
            "info": {
                "Definition and Usage": "The array\\_uintersect\\_assoc() function compares the keys and values of two or more arrays, and returns the matches.Note: This function uses a built-in function to compare the keys, and a user-defined function to compare the values!This function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_uintersect_uassoc()": {
            "title": "array_uintersect_uassoc()",
            "url": "https://www.w3schools.com/php/func_array_uintersect_uassoc.asp",
            "info": {
                "Definition and Usage": "The array\\_uintersect\\_uassoc() function compares the keys and values of two or more arrays,and returns the matches.Note: This function uses two user-defined functions for comparison;the key is used in the first function and the value is used in the second!This function compares the keys and values of two (or more) arrays, and return an array that contains the entries from array1 that are present in array2, array3, etc.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_unique()": {
            "title": "array_unique()",
            "url": "https://www.w3schools.com/php/func_array_unique.asp",
            "info": {
                "Definition and Usage": "The array\\_unique() function removes duplicate values from an array. If two or more array values are the same, the first appearance will be kept and the other will be removed.Note: The returned array will keep the first array item's key type.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_unshift()": {
            "title": "array_unshift()",
            "url": "https://www.w3schools.com/php/func_array_unshift.asp",
            "info": {
                "Definition and Usage": "The array\\_unshift() function inserts new elements to an array. The new array values will be inserted in the beginning of the array. Tip: You can add one value, or as many as you like.Note: Numeric keys will start at 0 and increase by 1. String keys will remain the same.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $a=array(\"a\"=>\"red\",\"b\"=>\"green\");\nprint_r(array_unshift($a,\"blue\"));\n?>``````php\n<?php\n\r\n $a=array(0=>\"red\",1=>\"green\");\narray_unshift($a,\"blue\");\nprint_r($a);\n?>```"
            }
        },
        "array_values()": {
            "title": "array_values()",
            "url": "https://www.w3schools.com/php/func_array_values.asp",
            "info": {
                "Definition and Usage": "The array\\_values() function returns an array containing all the values of an array.Tip: The returned array will have numeric keys, starting at 0 and increase by 1.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "array_walk()": {
            "title": "array_walk()",
            "url": "https://www.w3schools.com/php/func_array_walk.asp",
            "info": {
                "Definition and Usage": "The array\\_walk() function runs each array element in a user-defined function. The array's keys and values are parameters in the function.Note: You can change an array element's value in the user-defined function by specifying the first parameter as a reference: &$value (See Example 2).Tip: To work with deeper arrays (an array inside an array),use the array\\_walk\\_recursive() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nfunction myfunction($value,$key,$p)\n\r\n{\n\r\necho \"$key $p $value<br>\";\n\r\n}\n\r\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n\r\narray_walk($a,\"myfunction\",\"has the value\");\n?>``````php\n<?php\n\r\nfunction myfunction(&$value,$key)\n\r\n{\n\r\n$value=\"yellow\";\n\r\n}\n\r\n$a=array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\");\n\r\narray_walk($a,\"myfunction\");\n\r\nprint_r($a);\n?>```"
            }
        },
        "array_walk_recursive()": {
            "title": "array_walk_recursive()",
            "url": "https://www.w3schools.com/php/func_array_walk_recursive.asp",
            "info": {
                "Definition and Usage": "The array\\_walk\\_recursive() function runs each array element in a user-defined function.The array's keys and values are parameters in the function. The difference between this function and the array\\_walk() function is that with this function you can work with deeper arrays (an array inside an array).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "arsort()": {
            "title": "arsort()",
            "url": "https://www.w3schools.com/php/func_array_arsort.asp",
            "info": {
                "Definition and Usage": "The arsort() function sorts an associative array in descending order, according to the value.Tip: Use the asort() function to sort an associative array in ascending order, according to the value.Tip: Use the krsort() function to sort an associative array in descending order, according to the key.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "asort()": {
            "title": "asort()",
            "url": "https://www.w3schools.com/php/func_array_asort.asp",
            "info": {
                "Definition and Usage": "The asort() function sorts an associative array in ascending order, according to the value.Tip: Use the arsort() function to sort an associative array in descending order, according to the value.Tip: Use the ksort() function to sort an associative array in ascending order, according to the key.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "compact()": {
            "title": "compact()",
            "url": "https://www.w3schools.com/php/func_array_compact.asp",
            "info": {
                "Definition and Usage": "The compact() function creates an array from variables and their values.Note: Any strings that does not match variable names will be skipped.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$firstname = \"Peter\";\n\r\n$lastname = \"Griffin\";\n\r\n$age = \"41\";\n\n\r\n$name = array(\"firstname\", \"lastname\");\n\r\n$result = compact($name, \"location\", \"age\");\n\n\r\nprint_r($result);\n?>```"
            }
        },
        "count()": {
            "title": "count()",
            "url": "https://www.w3schools.com/php/func_array_count.asp",
            "info": {
                "Definition and Usage": "The count() function counts the children of a specified node.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $cars=array\n  (\n  \"Volvo\"=>array\n  (\n  \"XC60\",\n  \"XC90\"\n  ),\n  \"BMW\"=>array\n  (\n  \"X3\",\n  \"X5\"\n  ),\n  \"Toyota\"=>array\n  (\n \"Highlander\"\n  )\n  ); \necho \"Normal count: \" . count($cars).\"<br>\";\necho \"Recursive count: \" . count($cars,1);\n?>```"
            }
        },
        "current()": {
            "title": "current()",
            "url": "https://www.w3schools.com/php/func_array_current.asp",
            "info": {
                "Definition and Usage": "The current() function returns the current element.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\n\r\n echo next($people) . \"<br>\"; // The next element of Peter is Joe\n\r\n print_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>```"
            }
        },
        "each()": {
            "title": "each()",
            "url": "https://www.w3schools.com/php/func_array_each.asp",
            "info": {
                "Definition and Usage": "The each() function returns the current element key and value, and moves the internal pointer forward.This element key and value is returned in an array with four elements. Two elements (1 and Value) for the element value, and two elements (0 and Key) for the element key. Related methods:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\n\r\n reset($people);\nwhile (list($key, $val) = each($people))\n  {\n  echo \"$key => $val<br>\";\n  }\n?>``````php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\n\r\n echo next($people) . \"<br>\"; // The next element of Peter is Joe\n\r\n print_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>```"
            }
        },
        "end()": {
            "title": "end()",
            "url": "https://www.w3schools.com/php/func_array_end.asp",
            "info": {
                "Definition and Usage": "The end() function moves the internal pointer to, and outputs, the last element in the array.Related methods:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\n\r\n echo next($people) . \"<br>\"; // The next element of Peter is Joe\n\r\n print_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>```"
            }
        },
        "extract()": {
            "title": "extract()",
            "url": "https://www.w3schools.com/php/func_array_extract.asp",
            "info": {
                "Definition and Usage": "The extract() function imports variables into the local symbol table from an array.This function uses array keys as variable names and values as variable values. For each element it will create a variable in the current symbol table. This function returns the number of variables extracted on success.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$a = \"Original\";\n\r\n$my_array = array(\"a\" => \"Cat\", \"b\" => \"Dog\", \"c\" => \"Horse\");\n\n\r\nextract($my_array, EXTR_PREFIX_SAME, \"dup\");\n\n\r\necho \"\\$a = $a; \\$b = $b; \\$c = $c; \\$dup_a = $dup_a\";\n?>```"
            }
        },
        "in_array()": {
            "title": "in_array()",
            "url": "https://www.w3schools.com/php/func_array_in_array.asp",
            "info": {
                "Definition and Usage": "The in\\_array() function searches an array for a specific value.Note: If the search parameter is a string and the type parameter is set to TRUE, the search is case-sensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\", 23);\nif (in_array(\"23\", $people, TRUE))\n  {\n  echo \"Match found<br>\";\n  }\n\r\n else\n  {\n  echo \"Match not found<br>\";\n  } \nif (in_array(\"Glenn\",$people, TRUE))\n  {\n  echo \"Match found<br>\";\n  }\nelse\n  {\n  echo \"Match not found<br>\";\n  }\nif (in_array(23,$people, TRUE))\n  {\n  echo \"Match found<br>\";\n  }\nelse\n  {\n  echo \"Match not found<br>\";\n  }\n?>```"
            }
        },
        "key()": {
            "title": "key()",
            "url": "https://www.w3schools.com/php/func_array_key.asp",
            "info": {
                "Definition and Usage": "The key() function returns the current key (which is the XML tag name of the current element).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "krsort()": {
            "title": "krsort()",
            "url": "https://www.w3schools.com/php/func_array_krsort.asp",
            "info": {
                "Definition and Usage": "The krsort() function sorts an associative array in descending order, according to the key.Tip: Use the ksort() function to sort an associative array in ascending order, according to the key.Tip: Use the arsort() function to sort an associative array in descending order, according to the value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ksort()": {
            "title": "ksort()",
            "url": "https://www.w3schools.com/php/func_array_ksort.asp",
            "info": {
                "Definition and Usage": "The ksort() function sorts an associative array in ascending order, according to the key.Tip: Use the krsort() function to sort an associative array in descending order, according to the key.Tip: Use the asort() function to sort an associative array in ascending order, according to the value.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "list()": {
            "title": "list()",
            "url": "https://www.w3schools.com/php/func_array_list.asp",
            "info": {
                "Definition and Usage": "The list() function is used to assign values to a list of variables in one operation.Note: Prior to PHP 7.1, this function only worked on numerical arrays.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$my_array = array(\"Dog\",\"Cat\",\"Horse\");\n\n\r\nlist($a, , $c) = $my_array;\n\r\necho \"Here I only use the $a and $c variables.\";\n?>```"
            }
        },
        "natcasesort()": {
            "title": "natcasesort()",
            "url": "https://www.w3schools.com/php/func_array_natcasesort.asp",
            "info": {
                "Definition and Usage": "The natcasesort() function sorts an array by using a \"natural order\" algorithm. The values keep their original keys.In a natural algorithm, the number 2 is less than the number 10. In computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.This function is case-insensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "natsort()": {
            "title": "natsort()",
            "url": "https://www.w3schools.com/php/func_array_natsort.asp",
            "info": {
                "Definition and Usage": "The natsort() function sorts an array by using a \"natural order\" algorithm. The values keep their original keys.In a natural algorithm, the number 2 is less than the number 10. In computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "next()": {
            "title": "next()",
            "url": "https://www.w3schools.com/php/func_array_next.asp",
            "info": {
                "Definition and Usage": "The next() function moves to the next element.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\n\r\n echo next($people) . \"<br>\"; // The next element of Peter is Joe\n\r\n print_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>```"
            }
        },
        "pos()": {
            "title": "pos()",
            "url": "https://www.w3schools.com/php/func_array_pos.asp",
            "info": {
                "Definition and Usage": "The pos() function returns the value of the current element in an array.This function is an alias of the current() function.Every array has an internal pointer to its \"current\" element, which is initialized to the first element inserted into the array. Tip: This function does not move the arrays internal pointer. Related methods:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\n\r\n echo next($people) . \"<br>\"; // The next element of Peter is Joe\n\r\n print_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>```"
            }
        },
        "prev()": {
            "title": "prev()",
            "url": "https://www.w3schools.com/php/func_array_prev.asp",
            "info": {
                "Definition and Usage": "The prev() function moves the internal pointer to, and outputs, the previous element in the array.Related methods:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\n\r\n echo next($people) . \"<br>\"; // The next element of Peter is Joe\n\r\n print_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>```"
            }
        },
        "range()": {
            "title": "range()",
            "url": "https://www.w3schools.com/php/func_array_range.asp",
            "info": {
                "Definition and Usage": "The range() function creates an array containing a range of elements.This function returns an array of elements from low to high.Note: If the low parameter is higher than the high parameter, the range array will be from high to low.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$number = range(0,50,10);\n\r\nprint_r ($number);\n?>``````php\n<?php\n\r\n$letter = range(\"a\",\"d\");\n\r\nprint_r ($letter);\n?>```"
            }
        },
        "reset()": {
            "title": "reset()",
            "url": "https://www.w3schools.com/php/func_array_reset.asp",
            "info": {
                "Definition and Usage": "The reset() function moves the internal pointer to the first element of the array.Related methods:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $people = array(\"Peter\", \"Joe\", \"Glenn\", \"Cleveland\");\necho current($people) . \"<br>\"; // The current element is Peter\necho next($people) . \"<br>\"; // The next element of Peter is Joe\necho current($people) . \"<br>\"; // Now the current element is Joe\necho prev($people) . \"<br>\"; // The previous element of Joe is Peter\necho end($people) . \"<br>\"; // The last element is Cleveland\necho prev($people) . \"<br>\"; // The previous element of Cleveland is Glenn\necho current($people) . \"<br>\"; // Now the current element is Glenn\necho reset($people) . \"<br>\"; // Moves the internal pointer to the first element of the array, which is Peter\n\r\n echo next($people) . \"<br>\"; // The next element of Peter is Joe\n\r\n print_r (each($people)); // Returns the key and value of the current element (now Joe), and moves the internal pointer forward\n?>```"
            }
        },
        "rsort()": {
            "title": "rsort()",
            "url": "https://www.w3schools.com/php/func_array_rsort.asp",
            "info": {
                "Definition and Usage": "The rsort() function sorts an indexed array in descending order.Tip: Use the sort() function to sort an indexed array in ascending order.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $numbers=array(4,6,2,22,11);\nrsort($numbers);\n?>``````php\n<?php\n\r\n $cars=array(\"Volvo\",\"BMW\",\"Toyota\");\nrsort($cars,SORT_NUMERIC);\n?>```"
            }
        },
        "shuffle()": {
            "title": "shuffle()",
            "url": "https://www.w3schools.com/php/func_array_shuffle.asp",
            "info": {
                "Definition and Usage": "The shuffle() function randomizes the order of the elements in the array.This function assigns new keys for the elements in the array. Existing keys will be removed (See Example below).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $my_array = array(\"a\"=>\"red\",\"b\"=>\"green\",\"c\"=>\"blue\",\"d\"=>\"yellow\",\"e\"=>\"purple\");\n\nshuffle($my_array);\nprint_r($my_array);\n?>```"
            }
        },
        "sizeof()": {
            "title": "sizeof()",
            "url": "https://www.w3schools.com/php/func_array_sizeof.asp",
            "info": {
                "Definition and Usage": "The sizeof() function returns the number of elements in an array.The sizeof() function is an alias of the count() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $cars=array\n  (\n  \"Volvo\"=>array\n  (\n  \"XC60\",\n  \"XC90\"\n  ),\n  \"BMW\"=>array\n  (\n  \"X3\",\n  \"X5\"\n  ),\n  \"Toyota\"=>array\n  (\n \"Highlander\"\n  )\n  ); \necho \"Normal count: \" . sizeof($cars).\"<br>\";\necho \"Recursive count: \" . sizeof($cars,1);\n?>```"
            }
        },
        "sort()": {
            "title": "sort()",
            "url": "https://www.w3schools.com/php/func_array_sort.asp",
            "info": {
                "Definition and Usage": "The sort() function sorts an indexed array in ascending order.Tip: Use the rsort() function to sort an indexed array in descending order.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $numbers=array(4,6,2,22,11);\nsort($numbers);\n?>```"
            }
        },
        "uasort()": {
            "title": "uasort()",
            "url": "https://www.w3schools.com/php/func_array_uasort.asp",
            "info": {
                "Definition and Usage": "The uasort() function sorts an array by values using a user-defined comparison function.Tip: Use the uksort() function to sort an array by keys using a user-defined comparison function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "uksort()": {
            "title": "uksort()",
            "url": "https://www.w3schools.com/php/func_array_uksort.asp",
            "info": {
                "Definition and Usage": "The uksort() function sorts an array by keys using a user-defined comparison function.Tip: Use the uasort() function to sort an array by values using a user-defined comparison function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "usort()": {
            "title": "usort()",
            "url": "https://www.w3schools.com/php/func_array_usort.asp",
            "info": {
                "Definition and Usage": "The usort() function sorts an array using a user-defined comparison function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "calendar": {
            "title": "PHP Calendar",
            "url": "https://www.w3schools.com/php/php_ref_calendar.asp",
            "info": {
                "PHP Calendar Introduction": "The calendar extension contains functions that simplifies converting between different calendar formats.It is based on the Julian Day Count, which is a count of days starting from January 1st, 4713 B.C.Note: To convert between calendar formats, you must first convert to Julian Day Count, then to the calendar of your choice.Note: The Julian Day Count is not the same as the Julian Calendar!",
                "Installation": "For these functions to work, you have to compile PHP with --enable-calendar.The Windows version of PHP has built-in support for this extension.",
                "PHP Calendar Functions": "",
                "PHP Predefined Calendar Constants": ""
            }
        },
        "cal_days_in_month()": {
            "title": "cal_days_in_month()",
            "url": "https://www.w3schools.com/php/func_cal_cal_days_in_month.asp",
            "info": {
                "Definition and Usage": "The cal\\_days\\_in\\_month() function returns the number of days in a month for a specified year and calendar.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "cal_from_jd()": {
            "title": "cal_from_jd()",
            "url": "https://www.w3schools.com/php/func_cal_cal_from_jd.asp",
            "info": {
                "Definition and Usage": "The cal\\_from\\_jd() function converts a Julian Day Count into a date of a specified calendar.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "cal_info()": {
            "title": "cal_info()",
            "url": "https://www.w3schools.com/php/func_cal_cal_info.asp",
            "info": {
                "Definition and Usage": "The cal\\_info() function returns information about a specified calendar.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "cal_to_jd()": {
            "title": "cal_to_jd()",
            "url": "https://www.w3schools.com/php/func_cal_cal_to_jd.asp",
            "info": {
                "Definition and Usage": "The cal\\_to\\_jd() function converts a date in a specified calendar to Julian Day Count.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "easter_date()": {
            "title": "easter_date()",
            "url": "https://www.w3schools.com/php/func_cal_easter_date.asp",
            "info": {
                "Definition and Usage": "The easter\\_date() function returns the Unix timestamp for midnight on Easter of a given year.Tip: The date of Easter Day is defined as the Sunday after the first full moon whichfalls on or after the Spring Equinox (21st March).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "easter_days()": {
            "title": "easter_days()",
            "url": "https://www.w3schools.com/php/func_cal_easter_days.asp",
            "info": {
                "Definition and Usage": "The easter\\_days() function returns the number of days after March 21, that the Easter Day is in the given year.Tip: The date of Easter Day is defined as the Sunday after the first full moon which fallson or after the Spring Equinox (21st March).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "frenchtojd()": {
            "title": "frenchtojd()",
            "url": "https://www.w3schools.com/php/func_cal_frenchtojd.asp",
            "info": {
                "Definition and Usage": "The frenchtojd() function converts a date from the French Republican Calendar to a Julian Day Count.Tip: The French Republican Calendar is a calendar proposed during the French Revolution,and used by the French government for about twelve years from late 1793. This function only convert dates inyears 1 through 14 (Gregorian dates 22 September 1792 - 22 September 1806).Tip: Look at the jdtofrench() functionto convert a Julian Day Count to a French Republican date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gregoriantojd()": {
            "title": "gregoriantojd()",
            "url": "https://www.w3schools.com/php/func_cal_gregoriantojd.asp",
            "info": {
                "Definition and Usage": "The gregoriantojd() function converts a date from the Gregorian Calendar to a Julian Day Count.Note: Although this function can handle dates back to 4714 B.C., notice that the Gregoriancalendar was not instituted until 1582, and some countries did not accept it until much later (Britain converted in 1752,USSR in 1918, and Greece in 1923). Most European countries used the Julian calendar prior the Gregorian.Tip: Look at the jdtogregorian() function to converta Julian Day Count to a Gregorian date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jddayofweek()": {
            "title": "jddayofweek()",
            "url": "https://www.w3schools.com/php/func_cal_jddayofweek.asp",
            "info": {
                "Definition and Usage": "The jddayofweek() function returns the day of the week.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jdmonthname()": {
            "title": "jdmonthname()",
            "url": "https://www.w3schools.com/php/func_cal_jdmonthname.asp",
            "info": {
                "Definition and Usage": "The jdmonthname() function returns a month name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jdtofrench()": {
            "title": "jdtofrench()",
            "url": "https://www.w3schools.com/php/func_cal_jdtofrench.asp",
            "info": {
                "Definition and Usage": "The jdtofrench() function converts a Julian Day Count to a French Republican date.Tip: Look at the frenchtojd() function toconvert a French Republican date to a Julian Day Count.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jdtogregorian()": {
            "title": "jdtogregorian()",
            "url": "https://www.w3schools.com/php/func_cal_jdtogregorian.asp",
            "info": {
                "Definition and Usage": "The jdtogregorian() function converts a Julian Day Count to a Gregorian date.Tip: Look at the gregoriantojd() function toconvert a Gregorian date to a Julian Day Count.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jdtojewish()": {
            "title": "jdtojewish()",
            "url": "https://www.w3schools.com/php/func_cal_jdtojewish.asp",
            "info": {
                "Definition and Usage": "The jdtojewish() function converts a Julian Day Count to a Jewish date.Tip: Look at the jewishtojd() function to converta Jewish date to a Julian Day Count.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jdtojulian()": {
            "title": "jdtojulian()",
            "url": "https://www.w3schools.com/php/func_cal_jdtojulian.asp",
            "info": {
                "Definition and Usage": "The jdtojulian() function converts a Julian Day Count to a Julian date.Tip: Look at the juliantojd() function to converta Julian date to a Julian Day Count.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jdtounix()": {
            "title": "jdtounix()",
            "url": "https://www.w3schools.com/php/func_cal_jdtounix.asp",
            "info": {
                "Definition and Usage": "The jdtounix() function converts Julian Day Count to Unix timestamp.Note: This function will return false if the parameter jd is not inside the Unix epoch(which means that the Gregorian years must be between 1970 and 2037 OR that jd >= 2440588 and jd <= 2465342).The time returned is local time.Tip: Look at the unixtojd() function to convert Unix timestamp to Julian Day Count.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "jewishtojd()": {
            "title": "jewishtojd()",
            "url": "https://www.w3schools.com/php/func_cal_jewishtojd.asp",
            "info": {
                "Definition and Usage": "The jewishtojd() function converts a date from the Jewish Calendar to a Julian Day Count.Note: Although this function can handle dates back to year 1 (3761 B.C.), notice thatin the beginning there was no formula to determine the start of a month. A new month was started when thenew moon was first observed.Tip: Look at the jdtojewish() function to converta Julian Day Count to a Jewish date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "juliantojd()": {
            "title": "juliantojd()",
            "url": "https://www.w3schools.com/php/func_cal_juliantojd.asp",
            "info": {
                "Definition and Usage": "The juliantojd() function converts a date from the Julian Calendar to a Julian Day Count.Note: Although this function can handle dates back to 4713 B.C., notice that the Juliancalendar was created in 46 B.C., and it did not stabilize until at least 8 A.D. Also, the beginning of a yearvaried from one culture to another - not all accepted January as the first month. Remember that the current calendarbeing used worldwide is the Gregorian calendar. The gregoriantojd() functioncan be used to convert such dates to their Julian Day count.Tip: Look at the jdtojulian() function to convert aJulian Day Count to a Julian date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "unixtojd()": {
            "title": "unixtojd()",
            "url": "https://www.w3schools.com/php/func_cal_unixtojd.asp",
            "info": {
                "Definition and Usage": "The unixtojd() function converts Unix timestamp to Julian Day Count.Note: Unix timestamp indicates the number of seconds since midnight of January 1, 1970 (Gregorian Calendar).Tip: Look at the jdtounix() function to convertJulian Day Count to Unix timestamp.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date": {
            "title": "PHP Date",
            "url": "https://www.w3schools.com/php/php_ref_date.asp",
            "info": {
                "PHP Date/Time Introduction": "The date/time functions allow you to get the date and time from the server where your PHP script runs. You can then use the date/time functions to format the date and time in several ways.Note: These functions depend on the locale settings of your server. Remember to take daylight saving time and leap years into consideration when working with these functions.",
                "Installation": "The PHP date/time functions are part of the PHP core. No installation is required to use these functions.",
                "Runtime Configuration": "The behavior of these functions is affected by settings in php.ini:",
                "PHP Date/Time Functions": "",
                "PHP Predefined Date/Time Constants": ""
            }
        },
        "checkdate()": {
            "title": "checkdate()",
            "url": "https://www.w3schools.com/php/func_date_checkdate.asp",
            "info": {
                "Definition and Usage": "The checkdate() function is used to validate a Gregorian date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_add()": {
            "title": "date_add()",
            "url": "https://www.w3schools.com/php/func_date_date_add.asp",
            "info": {
                "Definition and Usage": "The date\\_add() function adds some days, months, years, hours, minutes, and seconds to a date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_create_from_format()": {
            "title": "date_create_from_format()",
            "url": "https://www.w3schools.com/php/func_date_create_from_format.asp",
            "info": {
                "Definition and Usage": "The date\\_create\\_from\\_format() function returns a new DateTime object formatted according to the specified format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_create()": {
            "title": "date_create()",
            "url": "https://www.w3schools.com/php/func_date_date_create.asp",
            "info": {
                "Definition and Usage": "The date\\_create() function returns a new DateTime object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $date=date_create(\"2013-03-15 23:40:00\",timezone_open(\"Europe/Oslo\"));\n\r\n echo date_format($date,\"Y/m/d H:iP\");\n?>```"
            }
        },
        "date_date_set()": {
            "title": "date_date_set()",
            "url": "https://www.w3schools.com/php/func_date_date_set.asp",
            "info": {
                "Definition and Usage": "The date\\_date\\_set() function sets a new date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_default_timezone_get()": {
            "title": "date_default_timezone_get()",
            "url": "https://www.w3schools.com/php/func_date_default_timezone_get.asp",
            "info": {
                "Definition and Usage": "The date\\_default\\_timezone\\_get() function returns the default timezone used by all date/time functions in the script.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "date_default_timezone_set()": {
            "title": "date_default_timezone_set()",
            "url": "https://www.w3schools.com/php/func_date_default_timezone_set.asp",
            "info": {
                "Definition and Usage": "The date\\_default\\_timezone\\_set() function sets the default timezone used by all date/time functions in the script.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_diff()": {
            "title": "date_diff()",
            "url": "https://www.w3schools.com/php/func_date_date_diff.asp",
            "info": {
                "Definition and Usage": "The date\\_diff() function returns the difference between two DateTime objects.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_format()": {
            "title": "date_format()",
            "url": "https://www.w3schools.com/php/func_date_date_format.asp",
            "info": {
                "Definition and Usage": "The date\\_format() function returns a date formatted according to the specified format.Note: This function does not use locales (all output is in English).Tip: Also look at the date() function, which formats a local date/time. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_get_last_errors()": {
            "title": "date_get_last_errors()",
            "url": "https://www.w3schools.com/php/func_date_get_last_errors.asp",
            "info": {
                "Definition and Usage": "The date\\_get\\_last\\_errors() function returns the warnings/errors found while parsing a date string.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "date_interval_create_from_date_string()": {
            "title": "date_interval_create_from_date_string()",
            "url": "https://www.w3schools.com/php/func_date_interval_create_from_date_string.asp",
            "info": {
                "Definition and Usage": "The date\\_interval\\_create\\_from\\_date\\_string() function sets up a DateInterval from the relative parts of the string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_interval_format()": {
            "title": "date_interval_format()",
            "url": "https://www.w3schools.com/php/func_date_interval_format.asp",
            "info": {
                "Definition and Usage": "The date\\_interval\\_format() function is an alias of DateInterval::format().The DateInterval::format() function is used to format the interval.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_isodate_set()": {
            "title": "date_isodate_set()",
            "url": "https://www.w3schools.com/php/func_date_isodate_set.asp",
            "info": {
                "Definition and Usage": "The date\\_isodate\\_set() function sets a date according to the ISO 8601 standard, using weeks and dayoffsets (instead of using a specific date).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_modify()": {
            "title": "date_modify()",
            "url": "https://www.w3schools.com/php/func_date_modify.asp",
            "info": {
                "Definition and Usage": "The date\\_modify() function modifies the timestamp.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_offset_get()": {
            "title": "date_offset_get()",
            "url": "https://www.w3schools.com/php/func_date_offset_get.asp",
            "info": {
                "Definition and Usage": "The date\\_offset\\_get() function returns the timezone offset.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_parse_from_format()": {
            "title": "date_parse_from_format()",
            "url": "https://www.w3schools.com/php/func_date_parse_from_format.asp",
            "info": {
                "Definition and Usage": "The date\\_parse\\_from\\_format() function returns an associative array with detailed information about a specified date, according to the specified format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_parse()": {
            "title": "date_parse()",
            "url": "https://www.w3schools.com/php/func_date_date_parse.asp",
            "info": {
                "Definition and Usage": "The date\\_parse() function returns an associative array with detailed information about a specified date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_sub()": {
            "title": "date_sub()",
            "url": "https://www.w3schools.com/php/func_date_date_sub.asp",
            "info": {
                "Definition and Usage": "The date\\_sub() function subtracts some days, months, years, hours, minutes, and seconds from a date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_sun_info()": {
            "title": "date_sun_info()",
            "url": "https://www.w3schools.com/php/func_date_sun_info.asp",
            "info": {
                "Definition and Usage": "The date\\_sun\\_info() function returns an array containing information about sunset/sunrise and twilight begin/end, for a specified day and location.Tip: Look at the date\\_sunrise() function to return the sunrise time for a specified day and location.Tip: Look at the date\\_sunset() function to return the sunset time for a specified day and location.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_sunrise()": {
            "title": "date_sunrise()",
            "url": "https://www.w3schools.com/php/func_date_sunrise.asp",
            "info": {
                "Definition and Usage": "The date\\_sunrise() function returns the sunrise time for a specified day and location.Tip: Look at the date\\_sunset() function to return the sunset time for a specified day and location.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_sunset()": {
            "title": "date_sunset()",
            "url": "https://www.w3schools.com/php/func_date_sunset.asp",
            "info": {
                "Definition and Usage": "The date\\_sunset() function returns the sunset time for a specified day and location.Tip: Look at the date\\_sunrise() function to return the sunrise time for a specified day and location.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_time_set()": {
            "title": "date_time_set()",
            "url": "https://www.w3schools.com/php/func_date_time_set.asp",
            "info": {
                "Definition and Usage": "The date\\_time\\_set() function sets the time.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_timestamp_get()": {
            "title": "date_timestamp_get()",
            "url": "https://www.w3schools.com/php/func_date_timestamp_get.asp",
            "info": {
                "Definition and Usage": "The date\\_timestamp\\_get() function returns the Unix timestamp.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_timestamp_set()": {
            "title": "date_timestamp_set()",
            "url": "https://www.w3schools.com/php/func_date_timestamp_set.asp",
            "info": {
                "Definition and Usage": "The date\\_timestamp\\_set() function sets the date and time based on a Unix timestamp.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_timezone_get()": {
            "title": "date_timezone_get()",
            "url": "https://www.w3schools.com/php/func_date_timezone_get.asp",
            "info": {
                "Definition and Usage": "The date\\_timezone\\_get() function returns the time zone of the given DateTime object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date_timezone_set()": {
            "title": "date_timezone_set()",
            "url": "https://www.w3schools.com/php/func_date_timezone_set.asp",
            "info": {
                "Definition and Usage": "The date\\_timezone\\_set() function sets the time zone for the DateTime object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "date()": {
            "title": "date()",
            "url": "https://www.w3schools.com/php/func_date_date.asp",
            "info": {
                "Definition and Usage": "The date() function formats a local date and time, and returns the formatted date string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getdate()": {
            "title": "getdate()",
            "url": "https://www.w3schools.com/php/func_date_getdate.asp",
            "info": {
                "Definition and Usage": "The getdate() function returns date/time information of a timestamp or the current local date/time.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gettimeofday()": {
            "title": "gettimeofday()",
            "url": "https://www.w3schools.com/php/func_date_gettimeofday.asp",
            "info": {
                "Definition and Usage": "The gettimeofday() function returns the current time.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gmdate()": {
            "title": "gmdate()",
            "url": "https://www.w3schools.com/php/func_date_gmdate.asp",
            "info": {
                "Definition and Usage": "The gmdate() function formats a GMT/UTC date and time, and returns the formatted date string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gmmktime()": {
            "title": "gmmktime()",
            "url": "https://www.w3schools.com/php/func_date_gmmktime.asp",
            "info": {
                "Definition and Usage": "The gmmktime() function returns the Unix timestamp for a GMT date.Tip: This function is identical to mktime()except the passed parameters represents a GMT date.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gmstrftimee()": {
            "title": "gmstrftimee()",
            "url": "https://www.w3schools.com/php/func_date_gmstrftime.asp",
            "info": {
                "Definition and Usage": "The gmstrftime() function formats a GMT/UTC time and/or date according to locale settings.Tip: Also look at the strftime() function, which formats a local time and/or date according to locale settings.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "idate()": {
            "title": "idate()",
            "url": "https://www.w3schools.com/php/func_date_idate.asp",
            "info": {
                "Definition and Usage": "The idate() function formats a local time and/or date as integer.Note: The idate() function accepts just one character in the format parameter!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "localtime()": {
            "title": "localtime()",
            "url": "https://www.w3schools.com/php/func_date_localtime.asp",
            "info": {
                "Definition and Usage": "The localtime() function returns the local time.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "microtime()": {
            "title": "microtime()",
            "url": "https://www.w3schools.com/php/func_date_microtime.asp",
            "info": {
                "Definition and Usage": "The microtime() function returns the current Unix timestamp with microseconds.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "mktime()": {
            "title": "mktime()",
            "url": "https://www.w3schools.com/php/func_date_mktime.asp",
            "info": {
                "Definition and Usage": "The gmmktime() function returns the Unix timestamp for a date.Tip: This function is identical to gmmktime() except the passed parameters represents a date (not a GMT date).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strftime()": {
            "title": "strftime()",
            "url": "https://www.w3schools.com/php/func_date_strftime.asp",
            "info": {
                "Definition and Usage": "The strftime() function formats a local time and/or date according to locale settings.Tip: Also look at the gmstrftime() function,which formats a GMT/UTC time and/or date according to locale settings.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strptime()": {
            "title": "strptime()",
            "url": "https://www.w3schools.com/php/func_date_strptime.asp",
            "info": {
                "Definition and Usage": "The strptime() function parses a time/date generated with strftime().Note: This function is not implemented on Windows platforms!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strtotime()": {
            "title": "strtotime()",
            "url": "https://www.w3schools.com/php/func_date_strtotime.asp",
            "info": {
                "Definition and Usage": "The strtotime() function parses an English textual datetime into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 GMT).Note: If the year is specified in a two-digit format,  values between 0-69 are mapped to 2000-2069and values between 70-100 are mapped to 1970-2000.Note: Be aware of dates in the m/d/y or d-m-y formats; if the separator is a slash (/), then the American m/d/y is assumed. If the separator is a dash (-) or a dot (.), then the European d-m-y format is assumed. To avoid potential errors, you should YYYY-MM-DD dates or date\\_create\\_from\\_format() when possible.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "time()": {
            "title": "time()",
            "url": "https://www.w3schools.com/php/func_date_time.asp",
            "info": {
                "Definition and Usage": "The time() function returns the current time in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "timezone_abbreviations_list()": {
            "title": "timezone_abbreviations_list()",
            "url": "https://www.w3schools.com/php/func_date_timezone_abbreviations_list.asp",
            "info": {
                "Definition and Usage": "The timezone\\_abbreviations\\_list() returns an associative array containing dst, offset, and the timezone name.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "timezone_identifiers_list()": {
            "title": "timezone_identifiers_list()",
            "url": "https://www.w3schools.com/php/func_date_timezone_identifiers_list.asp",
            "info": {
                "Definition and Usage": "The timezone\\_identifiers\\_list() returns an indexed array containing all timezone identifiers.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezone_location_get()": {
            "title": "timezone_location_get()",
            "url": "https://www.w3schools.com/php/func_date_timezone_location_get.asp",
            "info": {
                "Definition and Usage": "The timezone\\_location\\_get() returns location information for the given timezone.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezone_name_from_abbr()": {
            "title": "timezone_name_from_abbr()",
            "url": "https://www.w3schools.com/php/func_date_timezone_name_from_abbr.asp",
            "info": {
                "Definition and Usage": "The timezone\\_name\\_from\\_abbr() returns the timezone name from abbreviation.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezone_name_get()": {
            "title": "timezone_name_get()",
            "url": "https://www.w3schools.com/php/func_date_timezone_name_get.asp",
            "info": {
                "Definition and Usage": "The timezone\\_name\\_get() returns the name of the timezone.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezone_offset_get()": {
            "title": "timezone_offset_get()",
            "url": "https://www.w3schools.com/php/func_date_timezone_offset_get.asp",
            "info": {
                "Definition and Usage": "The timezone\\_offset\\_get() returns the timezone offset from GMT.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezone_open()": {
            "title": "timezone_open()",
            "url": "https://www.w3schools.com/php/func_date_timezone_open.asp",
            "info": {
                "Definition and Usage": "The timezone\\_open() creates a new DateTimeZone object.",
                "Syntax": "The two functions below are equivalent and any of the functions can be used as shown in the example above.Procedural style:Object oriented style:",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezone_transitions_get()": {
            "title": "timezone_transitions_get()",
            "url": "https://www.w3schools.com/php/func_date_timezone_transitions_get.asp",
            "info": {
                "Definition and Usage": "The timezone\\_transitions\\_get() returns all transitions for the timezone.",
                "Syntax": "The two functions below are equivalent and any of the functions can be used as shown in the example above.Procedural style:Object oriented style:",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezone_version_get()": {
            "title": "timezone_version_get()",
            "url": "https://www.w3schools.com/php/func_date_timezone_version_get.asp",
            "info": {
                "Definition and Usage": "The timezone\\_version\\_get() function returns the version of the timezonedb.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "directory": {
            "title": "PHP Directory",
            "url": "https://www.w3schools.com/php/php_ref_directory.asp",
            "info": {
                "PHP Directory Introduction": "The directory functions allow you to retrieve information about directories and their contents.",
                "Installation": "The PHP directory functions are part of the PHP core. No installation is required to use these functions.",
                "PHP Directory Functions": ""
            }
        },
        "chdir()": {
            "title": "chdir()",
            "url": "https://www.w3schools.com/php/func_directory_chdir.asp",
            "info": {
                "Definition and Usage": "The chdir() function changes the current directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "chroot()": {
            "title": "chroot()",
            "url": "https://www.w3schools.com/php/func_directory_chroot.asp",
            "info": {
                "Definition and Usage": "The chroot() function changes the root directory of the current process todirectory, and changes the current working directory to \"/\".Note: This function requires root privileges, and is only available to GNU and BSD systems, and only when using the CLI, CGI or Embed SAPI.Note: This function is not implemented on Windows platforms.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "closedir()": {
            "title": "closedir()",
            "url": "https://www.w3schools.com/php/func_directory_closedir.asp",
            "info": {
                "Definition and Usage": "The closedir() function closes a directory handle.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "dir()": {
            "title": "dir()",
            "url": "https://www.w3schools.com/php/func_directory_dir.asp",
            "info": {
                "Definition and Usage": "The dir() function returns an instance of the Directory class. This function is used to read a directory, which includes the following:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getcwd()": {
            "title": "getcwd()",
            "url": "https://www.w3schools.com/php/func_directory_getcwd.asp",
            "info": {
                "Definition and Usage": "The getcwd() function returns the current working directory.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "opendir()": {
            "title": "opendir()",
            "url": "https://www.w3schools.com/php/func_directory_opendir.asp",
            "info": {
                "Definition and Usage": "The opendir() function opens a directory handle.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "readdir()": {
            "title": "readdir()",
            "url": "https://www.w3schools.com/php/func_directory_readdir.asp",
            "info": {
                "Definition and Usage": "The readdir() function returns the name of the next entry in a directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "rewinddir()": {
            "title": "rewinddir()",
            "url": "https://www.w3schools.com/php/func_directory_rewinddir.asp",
            "info": {
                "Definition and Usage": "The rewinddir() function resets the directory handle created by opendir().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "scandir()": {
            "title": "scandir()",
            "url": "https://www.w3schools.com/php/func_directory_scandir.asp",
            "info": {
                "Definition and Usage": "The scandir() function returns an array of files and directories of the specified directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "error": {
            "title": "PHP Error",
            "url": "https://www.w3schools.com/php/php_ref_error.asp",
            "info": {
                "PHP Error Introduction": "The error functions are used to deal with error handling and logging.The error functions allow us to define own error handling rules, and modify the way the errors can be logged.The logging functions allow us to send messages directly to other machines, emails, or system logs.The error reporting functions allow us to customize what level and kind of error feedback is given. ",
                "Installation": "The PHP error functions are part of the PHP core. No installation is required to use these functions.",
                "Runtime Configuration": "The behavior of the error functions is affected by settings in php.ini.Errors and logging configuration options:",
                "PHP Error and Logging Functions": "",
                "PHP Predefined Error and Logging Constants": "",
                "Definition and Usage": "The error / mysqli\\_error() function returns the last error description for the most recent function call, if any.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n// Perform a query, check for error\nif (!mysqli_query($con,\"INSERT INTO Persons (FirstName)\r\nVALUES ('Glenn')\")) {\n  echo(\"Error description: \" . mysqli_error($con));\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "debug_backtrace()": {
            "title": "debug_backtrace()",
            "url": "https://www.w3schools.com/php/func_error_debug_backtrace.asp",
            "info": {
                "Definition and Usage": "The debug\\_backtrace() function generates a PHP backtrace.This function displays data from the code that led up to the debug\\_backtrace() function.Returns an array of associative arrays. The possible returned elements are: ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "debug_print_backtrace()": {
            "title": "debug_print_backtrace()",
            "url": "https://www.w3schools.com/php/func_error_debug_print_backtrace.asp",
            "info": {
                "Definition and Usage": "The debug\\_print\\_backtrace() function prints a PHP backtrace.This function displays data from the code that led up to the debug\\_print\\_backtrace() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "error_get_last()": {
            "title": "error_get_last()",
            "url": "https://www.w3schools.com/php/func_error_get_last.asp",
            "info": {
                "Definition and Usage": "The error\\_get\\_last() function returns the last error that occurred (as an associative array).The associative array contains four keys:",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "error_log()": {
            "title": "error_log()",
            "url": "https://www.w3schools.com/php/func_error_log.asp",
            "info": {
                "Definition and Usage": "The error\\_log() function sends an error message to a log, to a file, or to a mail account.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "error_reporting()": {
            "title": "error_reporting()",
            "url": "https://www.w3schools.com/php/func_error_reporting.asp",
            "info": {
                "Definition and Usage": "The error\\_reporting() function specifies which errors are reported.PHP has many levels of errors, and using this function sets that level for the current script.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "restore_error_handler()": {
            "title": "restore_error_handler()",
            "url": "https://www.w3schools.com/php/func_error_restore_error_handler.asp",
            "info": {
                "Definition and Usage": "The restore\\_error\\_handler() function restores the previous error handler.This function is used to restore the previous error handler after changing it with the set\\_error\\_handler() function. Tip: The previous error handler could be the built-in error handler or a user-defined error handler function.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "restore_exception_handler()": {
            "title": "restore_exception_handler()",
            "url": "https://www.w3schools.com/php/func_error_restore_exception_handler.asp",
            "info": {
                "Definition and Usage": "The restore\\_exception\\_handler() function restores the previous exception handler.This function is used to restore the previous exception handler after changing it with the set\\_exception\\_handler() function. Tip: The previous exception handler could be the built-in exception handler or a user-defined exception handler function.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "set_error_handler()": {
            "title": "set_error_handler()",
            "url": "https://www.w3schools.com/php/func_error_set_error_handler.asp",
            "info": {
                "Definition and Usage": "The set\\_error\\_handler() function sets a user-defined error handler function.Note: The standard PHP error handler is completely bypassed if this function is used,and the user-defined error handler must terminate the script, die(), if necessary.Note: If errors occur before the script is executed the custom error handler cannot be used since it is not registered at that time.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "set_exception_handler()": {
            "title": "set_exception_handler()",
            "url": "https://www.w3schools.com/php/func_error_set_exception_handler.asp",
            "info": {
                "Definition and Usage": "The set\\_exception\\_handler() function sets a user-defined exception handler function.The script will stop executing after the exception handler is called.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "trigger_error()": {
            "title": "trigger_error()",
            "url": "https://www.w3schools.com/php/func_error_trigger_error.asp",
            "info": {
                "Definition and Usage": "The trigger\\_error() function creates a user-level error message.The trigger\\_error() function can be used with the built-in error handler, or with a user-defined function set by theset\\_error\\_handler() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filesystem": {
            "title": "PHP Filesystem",
            "url": "https://www.w3schools.com/php/php_ref_filesystem.asp",
            "info": {
                "PHP Filesystem Introduction": "The filesystem functions allow you to access and manipulate the filesystem.",
                "Installation": "The filesystem functions are part of the PHP core. There is no installation needed to use these functions.",
                "Unix / Windows Compatibility": "When specifying a path on Unix platforms, a forward slash (/) is used as directory separator.On Windows platforms, both forward slash (/) and backslash (\\) can be used.",
                "Runtime Configuration": "The behavior of the filesystem functions is affected by settings in php.ini.",
                "PHP Filesystem Functions": ""
            }
        },
        "basename()": {
            "title": "basename()",
            "url": "https://www.w3schools.com/php/func_filesystem_basename.asp",
            "info": {
                "Definition and Usage": "The basename() function returns the filename from a path.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "chgrp()": {
            "title": "chgrp()",
            "url": "https://www.w3schools.com/php/func_filesystem_chgrp.asp",
            "info": {
                "Definition and Usage": "The chgrp() function changes the usergroup of the specified file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "chmod()": {
            "title": "chmod()",
            "url": "https://www.w3schools.com/php/func_filesystem_chmod.asp",
            "info": {
                "Definition and Usage": "The chmod() function changes permissions of the specified file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "chown()": {
            "title": "chown()",
            "url": "https://www.w3schools.com/php/func_filesystem_chown.asp",
            "info": {
                "Definition and Usage": "The chown() function changes the owner of the specified file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "clearstatcache()": {
            "title": "clearstatcache()",
            "url": "https://www.w3schools.com/php/func_filesystem_clearstatcache.asp",
            "info": {
                "Definition and Usage": "The clearstatcache() function clears the file status cache.PHP caches data for some functions for better performance. If a file is to be checked several times in a script, you probably want to avoid caching to get correct results. To do this, use the clearstatcache() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Tips and Notes": "Tip: Functions that are caching:",
                "Technical Details": ""
            }
        },
        "copy()": {
            "title": "copy()",
            "url": "https://www.w3schools.com/php/func_filesystem_copy.asp",
            "info": {
                "Definition and Usage": "The copy() function copies a file.Note: If the to\\_file file already exists, it will be overwritten.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "delete()": {
            "title": "delete()",
            "url": "https://www.w3schools.com/php/func_filesystem_delete.asp",
            "info": {
                "Definition and Usage": "There is no delete() function in PHP.If you need to delete a file, look at theunlink() function."
            }
        },
        "dirname()": {
            "title": "dirname()",
            "url": "https://www.w3schools.com/php/func_filesystem_dirname.asp",
            "info": {
                "Definition and Usage": "The dirname() function returns the path of the parent directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "disk_free_space()": {
            "title": "disk_free_space()",
            "url": "https://www.w3schools.com/php/func_filesystem_disk_free_space.asp",
            "info": {
                "Definition and Usage": "The disk\\_free\\_space() function returns the free space, in bytes, of the specified filesystem or disk.Tip: Look at the disk\\_total\\_space()to get the total size of a filesystem or disk.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "disk_total_space()": {
            "title": "disk_total_space()",
            "url": "https://www.w3schools.com/php/func_filesystem_disk_total_space.asp",
            "info": {
                "Definition and Usage": "The disk\\_total\\_space() function returns the total size, in bytes, of the specified filesystem or disk.Tip: Look at thedisk\\_free\\_space() to get the free space of a filesystem or disk.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "diskfreespace()": {
            "title": "diskfreespace()",
            "url": "https://www.w3schools.com/php/func_filesystem_diskfreespace.asp",
            "info": {
                "Definition and Usage": "The diskfreespace() function is an alias of thedisk\\_free\\_space() function."
            }
        },
        "fclose()": {
            "title": "fclose()",
            "url": "https://www.w3schools.com/php/func_filesystem_fclose.asp",
            "info": {
                "Definition and Usage": "The fclose() function closes an open file.Note: The file must have been opened by fopen() or fsockopen().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "feof()": {
            "title": "feof()",
            "url": "https://www.w3schools.com/php/func_filesystem_feof.asp",
            "info": {
                "Definition and Usage": "The feof() function checks if the \"end-of-file\" (EOF) has been reached for an open file.Tip: This function is useful for looping through data of unknown length.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fflush()": {
            "title": "fflush()",
            "url": "https://www.w3schools.com/php/func_filesystem_fflush.asp",
            "info": {
                "Definition and Usage": "The fflush() function writes all buffered output to an open file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fgetc()": {
            "title": "fgetc()",
            "url": "https://www.w3schools.com/php/func_filesystem_fgetc.asp",
            "info": {
                "Definition and Usage": "The fgetc() function returns a single character from an open file.Note: This function is slow and should not be used on large files. If you need to read one character at a time from a large file, use fgets() to read data one line at a time and then process the line one single character at a time with fgetc().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$file = fopen(\"test.txt\",\"r\");\n\r\nwhile (! feof($file)) {\necho fgetc($file);\n}\n\r\nfclose($file);\n\r\n?>```"
            }
        },
        "fgetcsv()": {
            "title": "fgetcsv()",
            "url": "https://www.w3schools.com/php/func_filesystem_fgetcsv.asp",
            "info": {
                "Definition and Usage": "The fgetcsv() function parses a line from an open file, checking for CSV fields.Tip: Also see the fputcsv() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$file = fopen(\"contacts.csv\",\"r\");\n\n\r\nwhile(! feof($file))\n{\nprint_r(fgetcsv($file));\n}\n\n\r\nfclose($file);\n\r\n?>```"
            }
        },
        "fgets()": {
            "title": "fgets()",
            "url": "https://www.w3schools.com/php/func_filesystem_fgets.asp",
            "info": {
                "Definition and Usage": "The fgets() function returns a line from an open file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$file = fopen(\"test.txt\",\"r\");\n\n\r\nwhile(! feof($file))\n{\necho fgets($file). \"<br />\";\n}\n\n\r\nfclose($file);\n\r\n?>```"
            }
        },
        "fgetss()": {
            "title": "fgetss()",
            "url": "https://www.w3schools.com/php/func_filesystem_fgetss.asp",
            "info": {
                "Definition and Usage": "The fgetss() function returns a line from an open file - stripped from HTML and PHP tags.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "file()": {
            "title": "file()",
            "url": "https://www.w3schools.com/php/func_filesystem_file.asp",
            "info": {
                "Definition and Usage": "The file() reads a file into an array.Each array element contains a line from the file, with the newline character still attached.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "file_exists()": {
            "title": "file_exists()",
            "url": "https://www.w3schools.com/php/func_filesystem_file_exists.asp",
            "info": {
                "Definition and Usage": "The file\\_exists() function checks whether a file or directory exists.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "file_get_contents()": {
            "title": "file_get_contents()",
            "url": "https://www.w3schools.com/php/func_filesystem_file_get_contents.asp",
            "info": {
                "Definition and Usage": "The file\\_get\\_contents() reads a file into a string.This function is the preferred way to read the contents of a file into a string. It will use memory mapping techniques, if this is supported by the server, to enhance performance.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "file_put_contents()": {
            "title": "file_put_contents()",
            "url": "https://www.w3schools.com/php/func_filesystem_file_put_contents.asp",
            "info": {
                "Definition and Usage": "The file\\_put\\_contents() writes data to a file.This function follows these rules when accessing a file:Note: Use FILE\\_APPEND to avoid deleting the existing content of the file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fileatime()": {
            "title": "fileatime()",
            "url": "https://www.w3schools.com/php/func_filesystem_fileatime.asp",
            "info": {
                "Definition and Usage": "The fileatime() function returns the last access time of the specified file.Note: The result of this function is cached. Use clearstatcache() to clear the cache.Note: The atime of a file changes each time the data of a file are being read. This can decrease the performance if an application accesses a\u00a0 large number of files or directories. Some Unix systems have access time updates disabled to increase performance. In this case this function is useless.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filectime()": {
            "title": "filectime()",
            "url": "https://www.w3schools.com/php/func_filesystem_filectime.asp",
            "info": {
                "Definition and Usage": "The filectime() function returns the last time a file was changed.This function checks for inode changes as well as regular changes. Inode changes is when permissions, owner, group or other metadata is changed.Tip: Use the filemtime() function to return the last time the file content was changed.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filegroup()": {
            "title": "filegroup()",
            "url": "https://www.w3schools.com/php/func_filesystem_filegroup.asp",
            "info": {
                "Definition and Usage": "The filegroup() function returns the group ID of a file.Tip: Use the posix\\_getgrgid() function to convert the group ID to a group name.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fileinode()": {
            "title": "fileinode()",
            "url": "https://www.w3schools.com/php/func_filesystem_fileinode.asp",
            "info": {
                "Definition and Usage": "The fileinode() function returns the inode of the specified file.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filemtime()": {
            "title": "filemtime()",
            "url": "https://www.w3schools.com/php/func_filesystem_filemtime.asp",
            "info": {
                "Definition and Usage": "The filemtime() function returns the last time the file content was modified.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fileowner()": {
            "title": "fileowner()",
            "url": "https://www.w3schools.com/php/func_filesystem_fileowner.asp",
            "info": {
                "Definition and Usage": "The fileowner() function returns the user ID (owner) of the specified file.Tip: Use posix\\_getpwuid() to convert the user ID to a user name.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fileperms()": {
            "title": "fileperms()",
            "url": "https://www.w3schools.com/php/func_filesystem_fileperms.asp",
            "info": {
                "Definition and Usage": "The fileperms() function returns the permissions for a file.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho substr(sprintf(\"%o\",fileperms(\"test.txt\")),-4);\n\r\n?>```"
            }
        },
        "filesize()": {
            "title": "filesize()",
            "url": "https://www.w3schools.com/php/func_filesystem_filesize.asp",
            "info": {
                "Definition and Usage": "The filesize() function returns the size of a file.Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filetype()": {
            "title": "filetype()",
            "url": "https://www.w3schools.com/php/func_filesystem_filetype.asp",
            "info": {
                "Definition and Usage": "The filetype() function returns the file type of a file.Possible return values:Note: The result of this function is cached. Use clearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho filetype(\"/images/\");\n\r\n?>```"
            }
        },
        "flock()": {
            "title": "flock()",
            "url": "https://www.w3schools.com/php/func_filesystem_flock.asp",
            "info": {
                "Definition and Usage": "The flock() function locks and releases a file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fnmatch()": {
            "title": "fnmatch()",
            "url": "https://www.w3schools.com/php/func_filesystem_fnmatch.asp",
            "info": {
                "Definition and Usage": "The fnmatch() function checks if a string or filename matches the given shell wildcard pattern.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fopen()": {
            "title": "fopen()",
            "url": "https://www.w3schools.com/php/func_filesystem_fopen.asp",
            "info": {
                "Definition and Usage": "The fopen() function opens a file or URL.Note: When writing to a text file, be sure to use the correct line-ending character! Unix systems use \\n, Windows systems use \\r\\n, and Macintosh systems use \\r as the line ending character.Windows offers a translation flag ('t') which will translate \\n to \\r\\n when working with the file. You can also use 'b' to force binary mode. To use these flags, specify either 'b' or 't' as the last character of the mode parameter.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fpassthru()": {
            "title": "fpassthru()",
            "url": "https://www.w3schools.com/php/func_filesystem_fpassthru.asp",
            "info": {
                "Definition and Usage": "The fpassthru() function reads from the current position in a file - until EOF, and then writes the result to the output buffer.Note: When using fpassthru() on a binary file on Windows, remember to open the file in binary mode.Tip: Call rewind() to set the file pointer to the beginning of the file if you have already written to the file.Tip: To just dump the contents of a file to the output buffer, use thereadfile() function instead.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fputcsv()": {
            "title": "fputcsv()",
            "url": "https://www.w3schools.com/php/func_filesystem_fputcsv.asp",
            "info": {
                "Definition and Usage": "The fputcsv() function formats a line as CSV and writes it to an open file.Tip: Also see the fgetcsv() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fputs()": {
            "title": "fputs()",
            "url": "https://www.w3schools.com/php/func_filesystem_fputs.asp",
            "info": {
                "Definition and Usage": "The fputs() function is an alias of the fwrite() function."
            }
        },
        "fread()": {
            "title": "fread()",
            "url": "https://www.w3schools.com/php/func_filesystem_fread.asp",
            "info": {
                "Definition and Usage": "The fread() reads from an open file.The function will stop at the end of the file or when it reaches the specified length, whichever comes first.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$file = fopen(\"test.txt\",\"r\");\n\r\nfread($file,filesize(\"test.txt\"));\n\r\nfclose($file);\n\r\n?>```"
            }
        },
        "fscanf()": {
            "title": "fscanf()",
            "url": "https://www.w3schools.com/php/func_filesystem_fscanf.asp",
            "info": {
                "Definition and Usage": "The fscanf() function parses the input from an open file according to the specified format.Note: Any whitespace in the format string matches any whitespace in the input stream. This means that a tab (\\t) in the format string can match a single space character in the input stream.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fseek()": {
            "title": "fseek()",
            "url": "https://www.w3schools.com/php/func_filesystem_fseek.asp",
            "info": {
                "Definition and Usage": "The fseek() function seeks in an open file.This function moves the file pointer from its current position to a new position, forward or backward, specified by the number of bytes.Tip: You can find the current position by using ftell()!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fstat()": {
            "title": "fstat()",
            "url": "https://www.w3schools.com/php/func_filesystem_fstat.asp",
            "info": {
                "Definition and Usage": "The fstat() function returns information about an open file.Note: The results from this function will differ from server to server. The array may contain the number index, the name index, or both.Tip: This function is similar to stat(), except that with this function the file must be open.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftell()": {
            "title": "ftell()",
            "url": "https://www.w3schools.com/php/func_filesystem_ftell.asp",
            "info": {
                "Definition and Usage": "The ftell() function returns the current position of the read/write pointer in an open file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftruncate()": {
            "title": "ftruncate()",
            "url": "https://www.w3schools.com/php/func_filesystem_ftruncate.asp",
            "info": {
                "Definition and Usage": "The ftruncate() function truncates an open file to the specified length.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fwrite()": {
            "title": "fwrite()",
            "url": "https://www.w3schools.com/php/func_filesystem_fwrite.asp",
            "info": {
                "Definition and Usage": "The fwrite() writes to an open file.The function will stop at the end of the file (EOF) or when it reaches the specified length, whichever comes first.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "glob()": {
            "title": "glob()",
            "url": "https://www.w3schools.com/php/func_filesystem_glob.asp",
            "info": {
                "Definition and Usage": "The glob() function returns an array of filenames or directories matching a specified pattern.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nprint_r(glob(\"*.*\"));\n\r\n?>```"
            }
        },
        "is_dir()": {
            "title": "is_dir()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_dir.asp",
            "info": {
                "Definition and Usage": "The is\\_dir() function checks whether the specified filename is a directory.Note: The result of this function is cached. Useclearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_executable()": {
            "title": "is_executable()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_executable.asp",
            "info": {
                "Definition and Usage": "The is\\_executable() function checks whether the specified filename is executable.Note: The result of this function is cached. Useclearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_file()": {
            "title": "is_file()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_file.asp",
            "info": {
                "Definition and Usage": "The is\\_file() function checks whether the specified filename is a regular file.Note: The result of this function is cached. Useclearstatcache() to clear the cache.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_link()": {
            "title": "is_link()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_link.asp",
            "info": {
                "Definition and Usage": "The is\\_link() function checks whether the specified filename is a symbolic link.Note: The result of this function is cached. Useclearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_readable()": {
            "title": "is_readable()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_readable.asp",
            "info": {
                "Definition and Usage": "The is\\_readable() function checks whether the specified filename is readable.Note: The result of this function is cached. Useclearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_uploaded_file()": {
            "title": "is_uploaded_file()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_uploaded_file.asp",
            "info": {
                "Definition and Usage": "The is\\_uploaded\\_file() function checks whether the specified file is uploaded via HTTP POST.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_writable()": {
            "title": "is_writable()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_writable.asp",
            "info": {
                "Definition and Usage": "The is\\_writable() function checks whether the specified filename is writable.Note: The result of this function is cached. Useclearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_writeable()": {
            "title": "is_writeable()",
            "url": "https://www.w3schools.com/php/func_filesystem_is_writeable.asp",
            "info": {
                "Definition and Usage": "The is\\_writeable() function is an alias of theis\\_writable() function."
            }
        },
        "lchgrp()": {
            "title": "lchgrp()",
            "url": "https://www.w3schools.com/php/func_filesystem_lchgrp.asp",
            "info": {
                "Definition and Usage": "The lchgrp() function changes the group ownership of a symbolic link.Note: This is not an HTML link, but a link in the filesystem.Note: This function does not work on Windows platforms.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "lchown()": {
            "title": "lchown()",
            "url": "https://www.w3schools.com/php/func_filesystem_lchown.asp",
            "info": {
                "Definition and Usage": "The lchown() function changes the user ownership of a symbolic link.Note: This is not an HTML link, but a link in the filesystem.Note: This function does not work on Windows platforms.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "link()": {
            "title": "link()",
            "url": "https://www.w3schools.com/php/func_filesystem_link.asp",
            "info": {
                "Definition and Usage": "The link() function creates a hard link.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "linkinfo()": {
            "title": "linkinfo()",
            "url": "https://www.w3schools.com/php/func_filesystem_linkinfo.asp",
            "info": {
                "Definition and Usage": "The linkinfo() function returns information about a hard link, and is used to verify if a link really exists.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "lstat()": {
            "title": "lstat()",
            "url": "https://www.w3schools.com/php/func_filesystem_lstat.asp",
            "info": {
                "Definition and Usage": "The lstat() function returns information about a file or symbolic link.Note: The results from this function will differ from server to server. The array may contain the number index, the name index, or both.Note: The result of this function is cached. Useclearstatcache() to clear the cache.Tip: This function is similar to stat(), except that if thefilename parameter is a symbolic link, the status of the symbolic link is returned.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "mkdir()": {
            "title": "mkdir()",
            "url": "https://www.w3schools.com/php/func_filesystem_mkdir.asp",
            "info": {
                "Definition and Usage": "The mkdir() function creates a directory specified by a pathname.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "move_uploaded_file()": {
            "title": "move_uploaded_file()",
            "url": "https://www.w3schools.com/php/func_filesystem_move_uploaded_file.asp",
            "info": {
                "Definition and Usage": "The move\\_uploaded\\_file() function moves an uploaded file to a new destination.Note: This function only works on files uploaded via PHP's HTTP POST upload mechanism.Note: If the destination file already exists, it will be overwritten.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "parse_ini_file()": {
            "title": "parse_ini_file()",
            "url": "https://www.w3schools.com/php/func_filesystem_parse_ini_file.asp",
            "info": {
                "Definition and Usage": "The parse\\_ini\\_file() function parses a configuration (ini) file and returns the settings.Tip: This function can be used to read in your own  configuration files, and has nothing to do with the php.ini file.Note: The following reserved words must not be used as keys for ini files: null, yes, no, true, false, on, off, none. Furthermore, the following reserved characters must not be used in the key: {}|&~!()^\".",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n[names]\n\r\nme = Robert\n\r\nyou = Peter\n\n\r\n[urls]\n\r\nfirst = \"http://www.example.com\"\n\r\nsecond = \"https://www.w3schools.com\"```"
            }
        },
        "parse_ini_string()": {
            "title": "parse_ini_string()",
            "url": "https://www.w3schools.com/php/func_filesystem_parse_ini_string.asp",
            "info": {
                "Definition and Usage": "The parse\\_ini\\_file() function parses a configuration (ini) string and returns the settings.Tip: This function can be used to read in your own  configuration files, and has nothing to do with the php.ini file.Note: The following reserved words must not be used as keys for ini files: null, yes, no, true, false, on, off, none. Furthermore, the following reserved characters must not be used in the key: {}|&~!()^\".",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "pathinfo()": {
            "title": "pathinfo()",
            "url": "https://www.w3schools.com/php/func_filesystem_pathinfo.asp",
            "info": {
                "Definition and Usage": "The pathinfo() function returns information about a file path.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nprint_r(pathinfo(\"/testweb/test.txt\",PATHINFO_BASENAME));\n\r\n?>```"
            }
        },
        "pclose()": {
            "title": "pclose()",
            "url": "https://www.w3schools.com/php/func_filesystem_pclose.asp",
            "info": {
                "Definition and Usage": "The pclose() function closes a pipe opened by popen().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "popen()": {
            "title": "popen()",
            "url": "https://www.w3schools.com/php/func_filesystem_popen.asp",
            "info": {
                "Definition and Usage": "The popen() function opens a pipe to the program specified in the command parameter.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "readfile()": {
            "title": "readfile()",
            "url": "https://www.w3schools.com/php/func_filesystem_readfile.asp",
            "info": {
                "Definition and Usage": "The readfile() function reads a file and writes it to the output buffer.Tip: You can use a URL as a filename with this function if the fopen wrappers have been enabled in the php.ini file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "readlink()": {
            "title": "readlink()",
            "url": "https://www.w3schools.com/php/func_filesystem_readlink.asp",
            "info": {
                "Definition and Usage": "The readlink() function returns the target of a symbolic link.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "realpath()": {
            "title": "realpath()",
            "url": "https://www.w3schools.com/php/func_filesystem_realpath.asp",
            "info": {
                "Definition and Usage": "The realpath() function returns the absolute pathname.This function removes all symbolic links (like '/./', '/../' and extra '/') and returns the absolute pathname.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "realpath_cache_get()": {
            "title": "realpath_cache_get()",
            "url": "https://www.w3schools.com/php/func_filesystem_realpath_cache_get.asp",
            "info": {
                "Definition and Usage": "The realpath\\_cache\\_get() function returns realpath cache entries.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "realpath_cache_size()": {
            "title": "realpath_cache_size()",
            "url": "https://www.w3schools.com/php/func_filesystem_realpath_cache_size.asp",
            "info": {
                "Definition and Usage": "The realpath\\_cache\\_size() function returns realpath cache size.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "rename()": {
            "title": "rename()",
            "url": "https://www.w3schools.com/php/func_filesystem_rename.asp",
            "info": {
                "Definition and Usage": "The rename() function renames a file or directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "rewind()": {
            "title": "rewind()",
            "url": "https://www.w3schools.com/php/func_filesystem_rewind.asp",
            "info": {
                "Definition and Usage": "The rewind() function rewinds to the first element.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "rmdir()": {
            "title": "rmdir()",
            "url": "https://www.w3schools.com/php/func_filesystem_rmdir.asp",
            "info": {
                "Definition and Usage": "The rmdir() function removes an empty directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "set_file_buffer()": {
            "title": "set_file_buffer()",
            "url": "https://www.w3schools.com/php/func_filesystem_set_file_buffer.asp",
            "info": {
                "Definition and Usage": "The set\\_file\\_buffer() function specifies the number of bytes to buffer on the given file.Output using fwrite() is normally buffered at 8K. So, if two processes writes to the same file, each will write up to 8K before pausing, and allow the other to write. If buffer is 0, write operations are unbuffered (meaning that the first write process will be completed before allowing other processes to write).Tip: This function is an alias of stream\\_set\\_write\\_buffer().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "stat()": {
            "title": "stat()",
            "url": "https://www.w3schools.com/php/func_filesystem_stat.asp",
            "info": {
                "Definition and Usage": "The stat() function returns information about a file.Note: The results from this function will differ from server to server. The array may contain the number index, the name index, or both.Note: The result of this function is cached. Useclearstatcache() to clear the cache.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "symlink()": {
            "title": "symlink()",
            "url": "https://www.w3schools.com/php/func_filesystem_symlink.asp",
            "info": {
                "Definition and Usage": "The symlink() function creates a symbolic link from the existing target with the specified name link.Note: This is not an HTML link, but a link in the filesystem.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "tempnam()": {
            "title": "tempnam()",
            "url": "https://www.w3schools.com/php/func_filesystem_tempnam.asp",
            "info": {
                "Definition and Usage": "The tempnam() function creates a temporary file with a unique name in the specified directory.Note: If the specified directory does not exist, tempnam() may generate a file in the system's temporary directory.Tip: See also the tmpfile() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "tmpfile()": {
            "title": "tmpfile()",
            "url": "https://www.w3schools.com/php/func_filesystem_tmpfile.asp",
            "info": {
                "Definition and Usage": "The tmpfile() function creates a temporary file with a unique name in read-write (w+) mode.Note: The file is automatically removed when closed, with fclose() or when the script ends.Tip: See also the tempnam() function.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "touch()": {
            "title": "touch()",
            "url": "https://www.w3schools.com/php/func_filesystem_touch.asp",
            "info": {
                "Definition and Usage": "The touch() function sets the access and modification time of the specified file.Note: If the specified file does not exist, it will be created.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "umask()": {
            "title": "umask()",
            "url": "https://www.w3schools.com/php/func_filesystem_umask.asp",
            "info": {
                "Definition and Usage": "The umask() function changes the file permissions for files.This function sets PHP's umask to mask & 0777 and returns the old umask.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "unlink()": {
            "title": "unlink()",
            "url": "https://www.w3schools.com/php/func_filesystem_unlink.asp",
            "info": {
                "Definition and Usage": "The unlink() function deletes a file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filter": {
            "title": "PHP Filter",
            "url": "https://www.w3schools.com/php/php_ref_filter.asp",
            "info": {
                "PHP Filter Introduction": "This PHP filters is used to validate and filter data coming from insecure sources, like user input.",
                "Installation": "From PHP 5.2.0, the filter functions are enabled by default. There is no installation needed to use these functions.",
                "Runtime Configurations": "The behavior of these functions is affected by settings in php.ini:",
                "PHP Filter Functions": "",
                "PHP Predefined Filter Constants": ""
            }
        },
        "filter_has_var()": {
            "title": "filter_has_var()",
            "url": "https://www.w3schools.com/php/func_filter_has_var.asp",
            "info": {
                "Definition and Usage": "The filter\\_has\\_var() function checks whether a variable of a specified input type exist.This function checks the content received by the PHP page, so the variable must be sent to the page via e.g a querystring.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filter_id()": {
            "title": "filter_id()",
            "url": "https://www.w3schools.com/php/func_filter_id.asp",
            "info": {
                "Definition and Usage": "The filter\\_id() function returns filter ID of a specified filter name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<table>\n  <tr>\n    <td>Filter Name</td>\n    <td>Filter ID</td>\n  </tr>\n  <?php\n  foreach (filter_list() as $id =>$filter) {\n    echo '<tr><td>' . $filter . '</td><td>' . filter_id($filter) . '</td></tr>';\n  }\n?>\n\r\n </table>```"
            }
        },
        "filter_input()": {
            "title": "filter_input()",
            "url": "https://www.w3schools.com/php/func_filter_input.asp",
            "info": {
                "Definition and Usage": "The filter\\_input() function gets an external variable (e.g. from form input) and optionally filters it.This function is used to validate variables from insecure sources, such as user input.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filter_input_array()": {
            "title": "filter_input_array()",
            "url": "https://www.w3schools.com/php/func_filter_input_array.asp",
            "info": {
                "Definition and Usage": "The filter\\_input\\_array() function gets external variables (e.g. from form input) and optionally filters them.This function is useful for retrieving/filtering many values instead of calling filter\\_input() many times.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "filter_list()": {
            "title": "filter_list()",
            "url": "https://www.w3schools.com/php/func_filter_list.asp",
            "info": {
                "Definition and Usage": "The filter\\_list() function returns a list of all the supported filter names.",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```php\n<table>\n  <tr>\n    <td>Filter Name</td>\n    <td>Filter ID</td>\n  </tr>\n  <?php\n  foreach (filter_list() as $id =>$filter) {\n    echo '<tr><td>' . $filter . '</td><td>' . filter_id($filter) . '</td></tr>';\n  }\n?>\n\r\n </table>```"
            }
        },
        "filter_var()": {
            "title": "filter_var()",
            "url": "https://www.w3schools.com/php/func_filter_var.asp",
            "info": {
                "Definition and Usage": "The filter\\_var() function filters a variable with the specified filter.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "The example below both sanitizes and validates an email address:```php\n<?php\n$email = \"john.doe@example.com\";\n// Remove all illegal characters from email\n$email = filter_var($email, FILTER_SANITIZE_EMAIL);\n\n// Validate e-mail\nif (filter_var($email, FILTER_VALIDATE_EMAIL)) {\n    echo(\"$email is a valid email address\");\n} else {\n    echo(\"$email is not a valid email address\");\n\r\n }\n?>```"
            }
        },
        "filter_var_array()": {
            "title": "filter_var_array()",
            "url": "https://www.w3schools.com/php/func_filter_var_array.asp",
            "info": {
                "Definition and Usage": "The filter\\_var\\_array() function gets multiple variables and optionally filters them.This function is useful for filtering many values without calling filter\\_var() many times.Tip: Check the PHP Filter Reference for possible filters to use with this function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp": {
            "title": "PHP FTP",
            "url": "https://www.w3schools.com/php/php_ref_ftp.asp",
            "info": {
                "PHP FTP Introduction": "The FTP functions give client access to file servers through the File Transfer Protocol (FTP).The FTP functions are used to open, login and close connections, as well as upload, download, rename, delete, and get information on files from file servers. Not all of the FTP functions will work with every server or return the same results. The FTP functions became available with PHP 3.If you only wish to read from or write to a file on an FTP server, consider using the ftp:// wrapper with the Filesystem functions which provide a simpler and more intuitive interface.",
                "Installation": "For these functions to work, you have to compile PHP with --enable-ftp.The Windows version of PHP has built-in support for this extension.",
                "PHP FTP Functions": "",
                "PHP Predefined FTP Constants": ""
            }
        },
        "ftp_alloc()": {
            "title": "ftp_alloc()",
            "url": "https://www.w3schools.com/php/func_ftp_alloc.asp",
            "info": {
                "Definition and Usage": "The ftp\\_alloc() function allocates space for a file to be uploaded to the FTP server.Note: Many FTP servers do not support this command!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_cdup()": {
            "title": "ftp_cdup()",
            "url": "https://www.w3schools.com/php/func_ftp_cdup.asp",
            "info": {
                "Definition and Usage": "The ftp\\_cdup() function changes to the parent directory on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_chdir()": {
            "title": "ftp_chdir()",
            "url": "https://www.w3schools.com/php/func_ftp_chdir.asp",
            "info": {
                "Definition and Usage": "The ftp\\_chdir() function changes the current directory on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_chmod()": {
            "title": "ftp_chmod()",
            "url": "https://www.w3schools.com/php/func_ftp_chmod.asp",
            "info": {
                "Definition and Usage": "The ftp\\_chmod() function sets permissions on the specified file via FTP.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_close()": {
            "title": "ftp_close()",
            "url": "https://www.w3schools.com/php/func_ftp_close.asp",
            "info": {
                "Definition and Usage": "The ftp\\_close() function closes an FTP connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_connect()": {
            "title": "ftp_connect()",
            "url": "https://www.w3schools.com/php/func_ftp_connect.asp",
            "info": {
                "Definition and Usage": "The ftp\\_connect() function opens an FTP connection to the specified host.When the connection is open, you can run FTP functions against the server. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_delete()": {
            "title": "ftp_delete()",
            "url": "https://www.w3schools.com/php/func_ftp_delete.asp",
            "info": {
                "Definition and Usage": "The ftp\\_delete() function deletes a file on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_exec()": {
            "title": "ftp_exec()",
            "url": "https://www.w3schools.com/php/func_ftp_exec.asp",
            "info": {
                "Definition and Usage": "The ftp\\_exec() function requests for execution of a command on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_fget()": {
            "title": "ftp_fget()",
            "url": "https://www.w3schools.com/php/func_ftp_fget.asp",
            "info": {
                "Definition and Usage": "The ftp\\_fget() function gets (downloads) a file from the FTP server, and saves it into an open local file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_fput()": {
            "title": "ftp_fput()",
            "url": "https://www.w3schools.com/php/func_ftp_fput.asp",
            "info": {
                "Definition and Usage": "The ftp\\_fput() function uploads from an open file and saves it to a file on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_get()": {
            "title": "ftp_get()",
            "url": "https://www.w3schools.com/php/func_ftp_get.asp",
            "info": {
                "Definition and Usage": "The ftp\\_get() function gets (downloads) a file from the FTP server, and saves it into a local file.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_get_option()": {
            "title": "ftp_get_option()",
            "url": "https://www.w3schools.com/php/func_ftp_get_option.asp",
            "info": {
                "Definition and Usage": "The ftp\\_get\\_option() function returns runtime options of the current FTP connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_login()": {
            "title": "ftp_login()",
            "url": "https://www.w3schools.com/php/func_ftp_login.asp",
            "info": {
                "Definition and Usage": "The ftp\\_login() function logs in to the specified FTP connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_mdtm()": {
            "title": "ftp_mdtm()",
            "url": "https://www.w3schools.com/php/func_ftp_mdtm.asp",
            "info": {
                "Definition and Usage": "The ftp\\_mdtm() function returns when the specified file was last modified.Note: Not all servers support this function, and this function does not work with directories.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_mkdir()": {
            "title": "ftp_mkdir()",
            "url": "https://www.w3schools.com/php/func_ftp_mkdir.asp",
            "info": {
                "Definition and Usage": "The ftp\\_mkdir() function creates a new directory on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_mlsd()": {
            "title": "ftp_mlsd()",
            "url": "https://www.w3schools.com/php/func_ftp_mlsd.asp",
            "info": {
                "Definition and Usage": "The ftp\\_mlsd() function returns the list of files in the specified directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_nb_continue()": {
            "title": "ftp_nb_continue()",
            "url": "https://www.w3schools.com/php/func_ftp_nb_continue.asp",
            "info": {
                "Definition and Usage": "The ftp\\_nb\\_continue() function continues to receive/send a file to the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_nb_fget()": {
            "title": "ftp_nb_fget()",
            "url": "https://www.w3schools.com/php/func_ftp_nb_fget.asp",
            "info": {
                "Definition and Usage": "The ftp\\_nb\\_fget() function gets (downloads) a file from the FTP server, and saves it into an open local file (non-blocking).Tip: This function (as opposite toftp\\_fget()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded. \u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_nb_fput()": {
            "title": "ftp_nb_fput()",
            "url": "https://www.w3schools.com/php/func_ftp_nb_fput.asp",
            "info": {
                "Definition and Usage": "The ftp\\_nb\\_fput() function uploads an open local file to the FTP server (non-blocking).Tip: This function (as opposite toftp\\_fput()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_nb_get()": {
            "title": "ftp_nb_get()",
            "url": "https://www.w3schools.com/php/func_ftp_nb_get.asp",
            "info": {
                "Definition and Usage": "The ftp\\_nb\\_get() function gets (downloads) a file from the FTP server, and saves it into a local file (non-blocking).Tip: This function (as opposite toftp\\_get()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_nb_put()": {
            "title": "ftp_nb_put()",
            "url": "https://www.w3schools.com/php/func_ftp_nb_put.asp",
            "info": {
                "Definition and Usage": "The ftp\\_nb\\_put() function uploads a file to the FTP server (non-blocking).Tip: This function (as opposite toftp\\_put()) retrieves the file asynchronously, so you can perform other operations while the file is being downloaded. \u00a0\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_nlist()": {
            "title": "ftp_nlist()",
            "url": "https://www.w3schools.com/php/func_ftp_nlist.asp",
            "info": {
                "Definition and Usage": "The ftp\\_nlist() function returns a list of files in the specified directory on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_pasv()": {
            "title": "ftp_pasv()",
            "url": "https://www.w3schools.com/php/func_ftp_pasv.asp",
            "info": {
                "Definition and Usage": "The ftp\\_pasv() function turns passive mode on or off.In passive mode, data connections are initiated by the client, not the server. This is useful if the client is behind a firewall.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_put()": {
            "title": "ftp_put()",
            "url": "https://www.w3schools.com/php/func_ftp_put.asp",
            "info": {
                "Definition and Usage": "The ftp\\_put() function uploads a file to the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_pwd()": {
            "title": "ftp_pwd()",
            "url": "https://www.w3schools.com/php/func_ftp_pwd.asp",
            "info": {
                "Definition and Usage": "The ftp\\_pwd() function returns the current directory name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_quit()": {
            "title": "ftp_quit()",
            "url": "https://www.w3schools.com/php/func_ftp_quit.asp",
            "info": {
                "Definition and Usage": "The ftp\\_quit() function is an alias of ftp\\_close()."
            }
        },
        "ftp_raw()": {
            "title": "ftp_raw()",
            "url": "https://www.w3schools.com/php/func_ftp_raw.asp",
            "info": {
                "Definition and Usage": "The ftp\\_raw() function sends a raw command to the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_rawlist()": {
            "title": "ftp_rawlist()",
            "url": "https://www.w3schools.com/php/func_ftp_rawlist.asp",
            "info": {
                "Definition and Usage": "The ftp\\_rawlist() function returns a list of files with file information (from a specified directory on the FTP server).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_rename()": {
            "title": "ftp_rename()",
            "url": "https://www.w3schools.com/php/func_ftp_rename.asp",
            "info": {
                "Definition and Usage": "The ftp\\_rename() function renames a file or directory on the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_rmdir()": {
            "title": "ftp_rmdir()",
            "url": "https://www.w3schools.com/php/func_ftp_rmdir.asp",
            "info": {
                "Definition and Usage": "The ftp\\_rmdir() function deletes a directory on the FTP server.Note: A directory must be empty before it can be deleted!Tip: Use the ftp\\_mkdir() function to create a new directory.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_set_option()": {
            "title": "ftp_set_option()",
            "url": "https://www.w3schools.com/php/func_ftp_set_option.asp",
            "info": {
                "Definition and Usage": "The ftp\\_set\\_option() function sets runtime options of the current FTP connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_site()": {
            "title": "ftp_site()",
            "url": "https://www.w3schools.com/php/func_ftp_site.asp",
            "info": {
                "Definition and Usage": "The ftp\\_site() function sends a SITE command to the FTP server.Note: SITE commands vary from server to server. They are useful for handling OS specific features such as file permissions and group membership.Tip: To see what SITE commands are available, send the REMOTEHELP command using the ftp\\_raw() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_size()": {
            "title": "ftp_size()",
            "url": "https://www.w3schools.com/php/func_ftp_size.asp",
            "info": {
                "Definition and Usage": "The ftp\\_size() function returns the size of a specified file on the FTP server.Note: Not all FTP servers support this function!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_ssl_connect()": {
            "title": "ftp_ssl_connect()",
            "url": "https://www.w3schools.com/php/func_ftp_ssl_connect.asp",
            "info": {
                "Definition and Usage": "The ftp\\_ssl\\_connect() function opens a secure SSL-FTP connection.When the connection is open, you can run FTP functions against the server.Note: This function is only available if both the ftp module and the OpenSSL support is built statically into PHP. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ftp_systype()": {
            "title": "ftp_systype()",
            "url": "https://www.w3schools.com/php/func_ftp_systype.asp",
            "info": {
                "Definition and Usage": "The ftp\\_systype() function returns the system type identifier of the FTP server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "json_decode()": {
            "title": "json_decode()",
            "url": "https://www.w3schools.com/php/func_json_decode.asp",
            "info": {
                "Definition and Usage": "The json\\_decode() function is used to decode or convert a JSON object to a PHP object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\nvar_dump(json_decode($jsonobj, true));\n?>``````php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n$obj = json_decode($jsonobj);\necho $obj->Peter;\necho $obj->Ben;\necho $obj->Joe;\n?>``````php\n<?php\n$jsonobj = '{\"Peter\":35,\"Ben\":37,\"Joe\":43}';\n$arr = json_decode($jsonobj, true);\necho $arr[\"Peter\"];\necho $arr[\"Ben\"];\necho $arr[\"Joe\"];\n?>```"
            }
        },
        "json_encode()": {
            "title": "json_encode()",
            "url": "https://www.w3schools.com/php/func_json_encode.asp",
            "info": {
                "Definition and Usage": "The json\\_encode() function is used to encode a value to JSON format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$cars = array(\"Volvo\", \"BMW\", \"Toyota\");\necho json_encode($cars);\n?>```"
            }
        },
        "libxml": {
            "title": "PHP Libxml",
            "url": "https://www.w3schools.com/php/php_ref_libxml.asp",
            "info": {
                "PHP libxml Introduction": "The libxml functions and constants are used together with SimpleXML, XSLT and DOM functions.",
                "Installation": "These functions require the libxml package. Download at xmlsoft.org",
                "PHP libxml Functions": "PHP: indicates the earliest version of PHP that supports the   function.",
                "PHP Predefined libxml Constants": ""
            }
        },
        "libxml_clear_errors()": {
            "title": "libxml_clear_errors()",
            "url": "https://www.w3schools.com/php/func_libxml_clear_errors.asp",
            "info": {
                "Definition and Usage": "The libxml\\_clear\\_errors() function clears the libxml error buffer.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "libxml_disable_entity_loader()": {
            "title": "libxml_disable_entity_loader()",
            "url": "https://www.w3schools.com/php/func_libxml_disable_entity_loader.asp",
            "info": {
                "Definition and Usage": "The libxml\\_disable\\_entity\\_loader() function enables the ability to load external entities.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "libxml_get_errors()": {
            "title": "libxml_get_errors()",
            "url": "https://www.w3schools.com/php/func_libxml_get_errors.asp",
            "info": {
                "Definition and Usage": "The libxml\\_get\\_errors() function gets the errors from the the libxml error buffer.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "libxml_get_last_error()": {
            "title": "libxml_get_last_error()",
            "url": "https://www.w3schools.com/php/func_libxml_get_last_error.asp",
            "info": {
                "Definition and Usage": "The libxml\\_get\\_last\\_error() function gets the last error from the libxml error buffer.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "libxml_set_external_entity_loader()": {
            "title": "libxml_set_external_entity_loader()",
            "url": "https://www.w3schools.com/php/func_libxml_set_external_entity_loader.asp",
            "info": {
                "Definition and Usage": "The libxml\\_set\\_external\\_entity\\_loader() function changes the default external entity loader.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "libxml_set_streams_context()": {
            "title": "libxml_set_streams_context()",
            "url": "https://www.w3schools.com/php/func_libxml_set_streams_context.asp",
            "info": {
                "Definition and Usage": "The libxml\\_set\\_streams\\_context() function sets the streams context for the next libxml document load or write.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "libxml_use_internal_errors()": {
            "title": "libxml_use_internal_errors()",
            "url": "https://www.w3schools.com/php/func_libxml_use_internal_errors.asp",
            "info": {
                "Definition and Usage": "The libxml\\_use\\_internal\\_errors() function disables the standard libxml errors and enables user error handling.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "mail": {
            "title": "PHP Mail",
            "url": "https://www.w3schools.com/php/php_ref_mail.asp",
            "info": {
                "PHP Mail Introduction": "The mail() function allows you to send emails directly from a script.",
                "Requirements": "For the mail functions to be available, PHP requires an installed and working email system. The program to be used is defined by the configuration settings in the php.ini file.",
                "Installation": "The mail functions are part of the PHP core. There is no installation needed to use these functions.",
                "Runtime Configuration": "The behavior of the mail functions is affected by settings in php.ini:",
                "PHP Mail Functions": ""
            }
        },
        "ezmlm_hash()": {
            "title": "ezmlm_hash()",
            "url": "https://www.w3schools.com/php/func_mail_ezmlm_hash.asp",
            "info": {
                "Definition and Usage": "The ezmlm\\_hash() function calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database.This function accepts an email address, for which it calculates an integer hash value. This value is compatible with the EZMLM mailing list manager, and can then be used with the EZMLM database for user management. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "mail()": {
            "title": "mail()",
            "url": "https://www.w3schools.com/php/func_mail_mail.asp",
            "info": {
                "Definition and Usage": "The mail() function allows you to send emails directly from a script.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "Send an email with extra headers:Send an HTML email:"
            }
        },
        "abs()": {
            "title": "abs()",
            "url": "https://www.w3schools.com/php/func_math_abs.asp",
            "info": {
                "Definition and Usage": "The abs() function returns the absolute (positive) value of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "acos()": {
            "title": "acos()",
            "url": "https://www.w3schools.com/php/func_math_acos.asp",
            "info": {
                "Definition and Usage": "The acos() function returns the arc cosine of a number.Tip: acos(-1) returns the value of Pi.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "acosh()": {
            "title": "acosh()",
            "url": "https://www.w3schools.com/php/func_math_acosh.asp",
            "info": {
                "Definition and Usage": "The acosh() function returns the inverse hyperbolic cosine of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "asin()": {
            "title": "asin()",
            "url": "https://www.w3schools.com/php/func_math_asin.asp",
            "info": {
                "Definition and Usage": "The asin() function returns the arc sine of a number.Tip: asin(1) returns the value of Pi/2.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "asinh()": {
            "title": "asinh()",
            "url": "https://www.w3schools.com/php/func_math_asinh.asp",
            "info": {
                "Definition and Usage": "The asinh() function returns the inverse hyperbolic sine of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "atan()": {
            "title": "atan()",
            "url": "https://www.w3schools.com/php/func_math_atan.asp",
            "info": {
                "Definition and Usage": "The atan() function returns the arc tangent of arg as a numeric value between -Pi/2 and Pi/2 radians.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "atan2()": {
            "title": "atan2()",
            "url": "https://www.w3schools.com/php/func_math_atan2.asp",
            "info": {
                "Definition and Usage": "The atan2() function returns the arc tangent of two variables x and y.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "atanh()": {
            "title": "atanh()",
            "url": "https://www.w3schools.com/php/func_math_atanh.asp",
            "info": {
                "Definition and Usage": "The atanh() function returns the inverse hyperbolic tangent of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "base_convert()": {
            "title": "base_convert()",
            "url": "https://www.w3schools.com/php/func_math_base_convert.asp",
            "info": {
                "Definition and Usage": "The base\\_convert() function converts a number from one number base to another.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$oct = \"0031\";\n\r\n echo base_convert($oct,8,10);\n\r\n ?>``````php\n<?php\n\r\n$oct = \"364\";\n\r\n echo base_convert($oct,8,16);\n\r\n ?>```"
            }
        },
        "bindec()": {
            "title": "bindec()",
            "url": "https://www.w3schools.com/php/func_math_bindec.asp",
            "info": {
                "Definition and Usage": "The bindec() function converts a binary number to a decimal number.Tip: To convert decimal to binary, look at the decbin() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ceil()": {
            "title": "ceil()",
            "url": "https://www.w3schools.com/php/func_math_ceil.asp",
            "info": {
                "Definition and Usage": "The ceil() function rounds a number UP to the nearest integer, if necessary.Tip: To round a number DOWN to the nearest integer, look at thefloor() function.Tip: To round a floating-point number, look at theround() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "cos()": {
            "title": "cos()",
            "url": "https://www.w3schools.com/php/func_math_cos.asp",
            "info": {
                "Definition and Usage": "The cos() function returns the cosine of a number.Note: The cos() function returns a numeric value between -1 and 1, which represents the cosine of the angle.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "cosh()": {
            "title": "cosh()",
            "url": "https://www.w3schools.com/php/func_math_cosh.asp",
            "info": {
                "Definition and Usage": "The cosh() function returns the  hyperbolic cosine of a number (equivalent to (exp(number) + exp(-number)) / 2).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "decbin()": {
            "title": "decbin()",
            "url": "https://www.w3schools.com/php/func_math_decbin.asp",
            "info": {
                "Definition and Usage": "The decbin() function converts a decimal number to a binary number.Tip: To convert binary to decimal, look at the bindec() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "dechex()": {
            "title": "dechex()",
            "url": "https://www.w3schools.com/php/func_math_dechex.asp",
            "info": {
                "Definition and Usage": "The dechex() function converts a decimal number to a hexadecimal number.Tip: To convert hexadecimal to decimal, look at the hexdec() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "decoct()": {
            "title": "decoct()",
            "url": "https://www.w3schools.com/php/func_math_decoct.asp",
            "info": {
                "Definition and Usage": "The decoct() function converts a decimal number to an octal number.Tip: To convert octal to decimal, look at the octdec() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "deg2rad()": {
            "title": "deg2rad()",
            "url": "https://www.w3schools.com/php/func_math_deg2rad.asp",
            "info": {
                "Definition and Usage": "The deg2rad() function converts a degree value to a radian value.Tip: To convert a radian value to a degree value, look at therad2deg() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$deg = 180;\n\r\n$rad = deg2rad($deg);\n\r\necho \"$deg degrees is equal to $rad radians.\";\n\r\n ?>```"
            }
        },
        "exp()": {
            "title": "exp()",
            "url": "https://www.w3schools.com/php/func_math_exp.asp",
            "info": {
                "Definition and Usage": "The exp() function returns e raised to the power of x (ex).'e' is the base of the natural system of logarithms (approximately 2.718282) and x is the number passed to it.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "expm1()": {
            "title": "expm1()",
            "url": "https://www.w3schools.com/php/func_math_expm1.asp",
            "info": {
                "Definition and Usage": "The expm1() function returns exp(x) - 1.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "floor()": {
            "title": "floor()",
            "url": "https://www.w3schools.com/php/func_math_floor.asp",
            "info": {
                "Definition and Usage": "The floor() function rounds a number DOWN to the nearest integer, if necessary.Tip: To round a number UP to the nearest integer, look at theceil() function.Tip: To round a floating-point number, look at theround() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fmod()": {
            "title": "fmod()",
            "url": "https://www.w3schools.com/php/func_math_fmod.asp",
            "info": {
                "Definition and Usage": "The fmod() function returns the remainder (modulo) of x/y.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getrandmax()": {
            "title": "getrandmax()",
            "url": "https://www.w3schools.com/php/func_math_getrandmax.asp",
            "info": {
                "Definition and Usage": "The getrandmax() function returns the largest possible value that can be returned by rand().",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "hexdec()": {
            "title": "hexdec()",
            "url": "https://www.w3schools.com/php/func_math_hexdec.asp",
            "info": {
                "Definition and Usage": "The hexdec() function converts a hexadecimal number to a decimal number.Tip: To convert decimal to hexadecimal, look at thedechex() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "hypot()": {
            "title": "hypot()",
            "url": "https://www.w3schools.com/php/func_math_hypot.asp",
            "info": {
                "Definition and Usage": "The hypot() function calculates the hypotenuse of a right-angle triangle.Tip: This function is equivalent to sqrt(x\\*x + y\\*y).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "intdiv()": {
            "title": "intdiv()",
            "url": "https://www.w3schools.com/php/func_math_intdiv.asp",
            "info": {
                "Definition and Usage": "The intdiv() function is used for integer division.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_finite()": {
            "title": "is_finite()",
            "url": "https://www.w3schools.com/php/func_math_is_finite.asp",
            "info": {
                "Definition and Usage": "The is\\_finite() function checks whether a value is finite or not.This function returns true (1) if the specified value is a finite number, otherwise it returns false/nothing.The value is finite if it is within the allowed range for a PHP float on this platform.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_infinite()": {
            "title": "is_infinite()",
            "url": "https://www.w3schools.com/php/func_math_is_infinite.asp",
            "info": {
                "Definition and Usage": "The is\\_infinite() function checks whether a value is infinite or not.This function returns true (1) if the specified value is an infinite number, otherwise it returns false/nothing.The value is infinite if it is outside the allowed range for a PHP float on this platform.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_nan()": {
            "title": "is_nan()",
            "url": "https://www.w3schools.com/php/func_math_is_nan.asp",
            "info": {
                "Definition and Usage": "The is\\_nan() function checks whether a value is 'not a number'.This function returns true (1) if the specified value is 'not-a-number', otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "lcg_value()": {
            "title": "lcg_value()",
            "url": "https://www.w3schools.com/php/func_math_lcg_value.asp",
            "info": {
                "Definition and Usage": "The lcg\\_value() function returns a pseudo random number in a range between 0 and 1.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "log()": {
            "title": "log()",
            "url": "https://www.w3schools.com/php/func_math_log.asp",
            "info": {
                "Definition and Usage": "The log() function returns the natural logarithm of a number, or the logarithm of number to base.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "log10()": {
            "title": "log10()",
            "url": "https://www.w3schools.com/php/func_math_log10.asp",
            "info": {
                "Definition and Usage": "The log10() function returns the base-10 logarithm of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "log1p()": {
            "title": "log1p()",
            "url": "https://www.w3schools.com/php/func_math_log1p.asp",
            "info": {
                "Definition and Usage": "The log1p() function returns log(1+number), computed in a way that is accurate even when the value of number is close to zero.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "max()": {
            "title": "max()",
            "url": "https://www.w3schools.com/php/func_math_max.asp",
            "info": {
                "Definition and Usage": "The max() function returns the highest value in an array, or the highest value of several specified values.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "min()": {
            "title": "min()",
            "url": "https://www.w3schools.com/php/func_math_min.asp",
            "info": {
                "Definition and Usage": "The min() function returns the lowest value in an array, or the lowest value of several specified values.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "mt_getrandmax()": {
            "title": "mt_getrandmax()",
            "url": "https://www.w3schools.com/php/func_math_mt_getrandmax.asp",
            "info": {
                "Definition and Usage": "The mt\\_getrandmax() function returns the largest possible value that can be returned bymt\\_rand().",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "mt_rand()": {
            "title": "mt_rand()",
            "url": "https://www.w3schools.com/php/func_math_mt_rand.asp",
            "info": {
                "Definition and Usage": "The mt\\_rand() function generates a random integer using the Mersenne Twister algorithm.Tip: This function produces a better random value, and is 4 times faster thanrand().Tip: If you want a random integer between 10 and 100 (inclusive), use mt\\_rand (10,100).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "mt_srand()": {
            "title": "mt_srand()",
            "url": "https://www.w3schools.com/php/func_math_mt_srand.asp",
            "info": {
                "Definition and Usage": "The mt\\_srand() function seeds the Mersenne Twister random number generator.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "octdec()": {
            "title": "octdec()",
            "url": "https://www.w3schools.com/php/func_math_octdec.asp",
            "info": {
                "Definition and Usage": "The octdec() function converts an octal number to a decimal number.Tip: To convert decimal to octal, look at the decoct() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "pi()": {
            "title": "pi()",
            "url": "https://www.w3schools.com/php/func_math_pi.asp",
            "info": {
                "Definition and Usage": "The pi() function returns the value of PI.Tip: The named constant M\\_PI is identical to pi().",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "pow()": {
            "title": "pow()",
            "url": "https://www.w3schools.com/php/func_math_pow.asp",
            "info": {
                "Definition and Usage": "The pow() function returns x raised to the power of y.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "rad2deg()": {
            "title": "rad2deg()",
            "url": "https://www.w3schools.com/php/func_math_rad2deg.asp",
            "info": {
                "Definition and Usage": "The rad2deg() function converts a radian value to a degree value.Tip: To convert a degree value to a radian value, look at thedeg2rad() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "rand()": {
            "title": "rand()",
            "url": "https://www.w3schools.com/php/func_math_rand.asp",
            "info": {
                "Definition and Usage": "The rand() function generates a random integer.Tip: If you want a random integer between 10 and 100 (inclusive), use rand (10,100).Tip: The mt\\_rand() function produces a better random value, and is 4 times faster than rand().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "round()": {
            "title": "round()",
            "url": "https://www.w3schools.com/php/func_math_round.asp",
            "info": {
                "Definition and Usage": "The round() function rounds a floating-point number.Tip: To round a number UP to the nearest integer, look at theceil() function.Tip: To round a number DOWN to the nearest integer, look at thefloor() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n echo(round(4.96754,2) . \"<br>\");\necho(round(7.045,2) . \"<br>\");\n\r\n echo(round(7.055,2));\n\r\n ?>``````php\n<?php\n\r\n echo(round(1.5,0,PHP_ROUND_HALF_UP) . \"<br>\");\n\r\n echo(round(-1.5,0,PHP_ROUND_HALF_UP) . \"<br>\");\n\r\n echo(round(1.5,0,PHP_ROUND_HALF_DOWN) . \"<br>\");\n\r\n echo(round(-1.5,0,PHP_ROUND_HALF_DOWN) . \"<br>\");\n\r\n echo(round(1.5,0,PHP_ROUND_HALF_EVEN) . \"<br>\");\n\r\n echo(round(-1.5,0,PHP_ROUND_HALF_EVEN) . \"<br>\");\n\r\n echo(round(1.5,0,PHP_ROUND_HALF_ODD) . \"<br>\");\n\r\n echo(round(-1.5,0,PHP_ROUND_HALF_ODD));\n\r\n ?>```"
            }
        },
        "sin()": {
            "title": "sin()",
            "url": "https://www.w3schools.com/php/func_math_sin.asp",
            "info": {
                "Definition and Usage": "The sin() function returns the sine of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "sinh()": {
            "title": "sinh()",
            "url": "https://www.w3schools.com/php/func_math_sinh.asp",
            "info": {
                "Definition and Usage": "The sinh() function returns the hyperbolic sine of a number, which is equal to (exp(number) - exp(-number))/2).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "sqrt()": {
            "title": "sqrt()",
            "url": "https://www.w3schools.com/php/func_math_sqrt.asp",
            "info": {
                "Definition and Usage": "The sqrt() function returns the square root of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "srand()": {
            "title": "srand()",
            "url": "https://www.w3schools.com/php/func_math_srand.asp",
            "info": {
                "Definition and Usage": "The srand() function seeds the random number generator (rand()).Tip: From PHP 4.2.0, the random number generator is seeded automatically and there is no need to use this function. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "tan()": {
            "title": "tan()",
            "url": "https://www.w3schools.com/php/func_math_tan.asp",
            "info": {
                "Definition and Usage": "The tan() function returns the tangent of a number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "tanh()": {
            "title": "tanh()",
            "url": "https://www.w3schools.com/php/func_math_tanh.asp",
            "info": {
                "Definition and Usage": "The tanh() function returns the hyperbolic tangent of a number, which is equal to sinh(x)/cosh(x).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "misc": {
            "title": "PHP Misc",
            "url": "https://www.w3schools.com/php/php_ref_misc.asp",
            "info": {
                "PHP Miscellaneous Introduction": "The misc. functions were only placed here because none of the other categories seemed to fit.",
                "Installation": "The misc. functions are part of the PHP core. No installation is required to use these functions.",
                "Runtime Configuration": "The behavior of the misc. functions is affected by settings in the php.ini file.Misc. configuration options:",
                "PHP Miscellaneous Functions": "",
                "PHP Predefined Misc. Constants": ""
            }
        },
        "connection_aborted()": {
            "title": "connection_aborted()",
            "url": "https://www.w3schools.com/php/func_misc_connection_aborted.asp",
            "info": {
                "Definition and Usage": "The connection\\_aborted() function checks whether the client has disconnected.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "connection_status()": {
            "title": "connection_status()",
            "url": "https://www.w3schools.com/php/func_misc_connection_status.asp",
            "info": {
                "Definition and Usage": "The connection\\_status() function returns the current connection status.Possible values that can be returned are: ",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "connection_timeout()": {
            "title": "connection_timeout()",
            "url": "https://www.w3schools.com/php/func_misc_connection_timeout.asp",
            "info": {
                "Definition and Usage": "The connection\\_timeout() function was deprecated and removed in PHP version 4.0.5.The connection\\_timeout() function checks whether the script has timed out.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "constant()": {
            "title": "constant()",
            "url": "https://www.w3schools.com/php/func_misc_constant.asp",
            "info": {
                "Definition and Usage": "The constant() function returns the value of a constant.Note:This function also works with class constants. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "define()": {
            "title": "define()",
            "url": "https://www.w3schools.com/php/func_misc_define.asp",
            "info": {
                "Definition and Usage": "The define() function defines a constant.Constants are much like variables, except for the following differences: ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "defined()": {
            "title": "defined()",
            "url": "https://www.w3schools.com/php/func_misc_defined.asp",
            "info": {
                "Definition and Usage": "The defined() function checks whether a constant exists.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "die()": {
            "title": "die()",
            "url": "https://www.w3schools.com/php/func_misc_die.asp",
            "info": {
                "Definition and Usage": "The die() function is an alias of the exit() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "eval()": {
            "title": "eval()",
            "url": "https://www.w3schools.com/php/func_misc_eval.asp",
            "info": {
                "Definition and Usage": "The eval() function evaluates a string as PHP code.The string must be valid PHP code and must end with semicolon.Note: A return statement will terminate the evaluation of the string immediately.Tip: This function can be useful for storing PHP code in a database.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "exit()": {
            "title": "exit()",
            "url": "https://www.w3schools.com/php/func_misc_exit.asp",
            "info": {
                "Definition and Usage": "The exit() function prints a message and terminates the current script.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "get_browser()": {
            "title": "get_browser()",
            "url": "https://www.w3schools.com/php/func_misc_get_browser.asp",
            "info": {
                "Definition and Usage": "The get\\_browser() function looks up the user's browscap.ini file and returns the capabilities of the user's browser.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "__halt_compiler()": {
            "title": "__halt_compiler()",
            "url": "https://www.w3schools.com/php/func_misc___halt_compiler.asp",
            "info": {
                "Definition and Usage": "The \\_\\_halt\\_compiler() function halts the compiler execution.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "highlight_file()": {
            "title": "highlight_file()",
            "url": "https://www.w3schools.com/php/func_misc_highlight_file.asp",
            "info": {
                "Definition and Usage": "The highlight\\_file() function outputs a file with the PHP syntax highlighted. The syntax is highlighted by using HTML tags.Tip: The colors used for syntax highlighting can be set in the php.ini file or with the ini\\_set() function.Note: When using this function, the entire file will be displayed - including passwords and any other sensitive information!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "highlight_string()": {
            "title": "highlight_string()",
            "url": "https://www.w3schools.com/php/func_misc_highlight_string.asp",
            "info": {
                "Definition and Usage": "The highlight\\_string() function outputs a string with the PHP syntax highlighted. The string is highlighted by using HTML tags.The colors used for syntax highlighting can be set in the php.ini file or with the ini\\_set() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "hrtime()": {
            "title": "hrtime()",
            "url": "https://www.w3schools.com/php/func_misc_hrtime.asp",
            "info": {
                "Definition and Usage": "The hrtime() function returns the system's high resolution time.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ignore_user_abort()": {
            "title": "ignore_user_abort()",
            "url": "https://www.w3schools.com/php/func_misc_ignore_user_abort.asp",
            "info": {
                "Definition and Usage": "The ignore\\_user\\_abort() function sets whether a user should abort a script execution when he/she disconnects.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "pack()": {
            "title": "pack()",
            "url": "https://www.w3schools.com/php/func_misc_pack.asp",
            "info": {
                "Definition and Usage": "The pack() function packs data into a binary string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\necho pack(\"C*\",80,72,80);\n\r\n ?>```"
            }
        },
        "_strip_whitespace()": {
            "title": "php_strip_whitespace()",
            "url": "https://www.w3schools.com/php/func_misc_php_strip_whitespace.asp",
            "info": {
                "Definition and Usage": "The php\\_strip\\_whitespace() function returns the source code of the specified file with PHP comments and whitespace removed.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "show_source()": {
            "title": "show_source()",
            "url": "https://www.w3schools.com/php/func_misc_show_source.asp",
            "info": {
                "Definition and Usage": "The show\\_source() function outputs a file with the PHP syntax highlighted. The syntax is highlighted by using HTML tags.The colors used for highlighting can be set in the php.ini file or with the ini\\_set() function.show\\_source() is an alias of highlight\\_file().Note: When using this function, the entire file will be displayed - including passwords and any other sensitive information!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "sleep()": {
            "title": "sleep()",
            "url": "https://www.w3schools.com/php/func_misc_sleep.asp",
            "info": {
                "Definition and Usage": "The sleep() function delays execution of the current script for a specified number of seconds.Note: This function throws an error if the specified number of seconds is negative.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "sys_getloadavg()": {
            "title": "sys_getloadavg()",
            "url": "https://www.w3schools.com/php/func_misc_sys_getloadavg.asp",
            "info": {
                "Definition and Usage": "The sys\\_getloadavg() function returns the system load average.This function returns an array with three numbers that represents the average system load over the last 1, 5 and 15 minutes.Note: This function does not work on Windows platforms.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "time_nanosleep()": {
            "title": "time_nanosleep()",
            "url": "https://www.w3schools.com/php/func_misc_time_nanosleep.asp",
            "info": {
                "Definition and Usage": "The time\\_nanosleep() function delays execution of the current script for a specified number of seconds and nanoseconds.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "time_sleep_until()": {
            "title": "time_sleep_until()",
            "url": "https://www.w3schools.com/php/func_misc_time_sleep_until.asp",
            "info": {
                "Definition and Usage": "The time\\_sleep\\_until() function is used to make a script sleep until the specified time.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "uniqid()": {
            "title": "uniqid()",
            "url": "https://www.w3schools.com/php/func_misc_uniqid.asp",
            "info": {
                "Definition and Usage": "The uniqid() function generates a unique ID based on the microtime (the current time in microseconds).Note: The generated ID from this function does not guarantee uniqueness of the return value! To generate an extremely difficult to predict ID, use the md5() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "unpack()": {
            "title": "unpack()",
            "url": "https://www.w3schools.com/php/func_misc_unpack.asp",
            "info": {
                "Definition and Usage": "The unpack() function unpacks data from a binary string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$data = \"PHP\";\n\r\nprint_r(unpack(\"C*myint\",$data));\n\r\n ?>``````php\n<?php\n$bin = pack(\"c2n2\",0x1234,0x5678,65,66);\n\r\nprint_r(unpack(\"c2chars/n2int\",$bin));\n\r\n ?>```"
            }
        },
        "usleep()": {
            "title": "usleep()",
            "url": "https://www.w3schools.com/php/func_misc_usleep.asp",
            "info": {
                "Definition and Usage": "The usleep() function delays execution of the current script for a specified number of microseconds (a microsecond equals one millionth of a second).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "mysqli": {
            "title": "PHP MySQLi",
            "url": "https://www.w3schools.com/php/php_ref_mysqli.asp",
            "info": {
                "PHP MySQLi Introduction": "The MySQLi functions allows you to access MySQL database servers.Note: The MySQLi extension is designed to work with MySQL version 4.1.13 or newer.",
                "Installation / Runtime Configuration": "For the MySQLi functions to be available, you must compile PHP with support for the MySQLi extension.The MySQLi extension was introduced with PHP version 5.0.0. The MySQL Native Driver was included in PHP version 5.3.0.For installation details, go to:http://php.net/manual/en/mysqli.installation.phpFor runtime configuration details, go to:http://php.net/manual/en/mysqli.configuration.php",
                "PHP MySQLi Functions": ""
            }
        },
        "affected_rows": {
            "title": "affected_rows",
            "url": "https://www.w3schools.com/php/func_mysqli_affected_rows.asp",
            "info": {
                "Definition and Usage": "The affected\\_rows / mysqli\\_affected\\_rows() function returns the number of affected rows in the previous SELECT, INSERT, UPDATE, REPLACE, or DELETE query.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n// Perform queries and print out affected rows\nmysqli_query($con, \"SELECT * FROM Persons\");\necho \"Affected rows: \" . mysqli_affected_rows($con);\n\r\nmysqli_query($con, \"DELETE FROM Persons WHERE Age>32\");\necho \"Affected rows: \" . mysqli_affected_rows($con);\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "autocommit": {
            "title": "autocommit",
            "url": "https://www.w3schools.com/php/func_mysqli_autocommit.asp",
            "info": {
                "Definition and Usage": "The autocommit() / mysqli\\_autocommit() function turns on or off auto-committing database modifications.Tip: Also look at the commit() function, which commits the current transaction for the specified database connection, and the rollback() function, which rolls back the current transaction.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n// Turn autocommit off\nmysqli_autocommit($con,FALSE);\n\n// Insert some values \nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\n\r\nVALUES ('Peter','Griffin',35)\");\n\r\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age) \n\r\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli_commit($con)) {\n  echo \"Commit transaction failed\";\n  exit();\n}\n// Close connection\n\r\n mysqli_close($con);\n?>```"
            }
        },
        "change_user": {
            "title": "change_user",
            "url": "https://www.w3schools.com/php/func_mysqli_change_user.asp",
            "info": {
                "Definition and Usage": "The change\\_user() / mysqli\\_change\\_user() function changes the user of the specified database connection, and sets the current database.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n// Reset all and select a new database\n\r\n mysqli_change_user($con, \"my_user\", \"my_password\", \"test\");\n\r\n mysqli_close($con);\n\r\n?>```"
            }
        },
        "character_set_name": {
            "title": "character_set_name",
            "url": "https://www.w3schools.com/php/func_mysqli_character_set_name.asp",
            "info": {
                "Definition and Usage": "The character\\_set\\_name() / mysqli\\_character\\_set\\_name() function returns the default character set for the database connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$charset=mysqli_character_set_name($con);\necho \"Default character set is: \" . $charset;\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "close": {
            "title": "close",
            "url": "https://www.w3schools.com/php/func_mysqli_close.asp",
            "info": {
                "Definition and Usage": "The close() / mysqli\\_close() function closes a previously opened database connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n\n// ....some PHP code...\n\n\r\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "commit": {
            "title": "commit",
            "url": "https://www.w3schools.com/php/func_mysqli_commit.asp",
            "info": {
                "Definition and Usage": "The commit() / mysqli\\_commit() function commits the current transaction for the specified database connection.Tip: Also look at the autocommit() function,which turns on or off auto-committing database modifications, and therollback() function, which rolls back the current transaction.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n// Turn autocommit off\nmysqli_autocommit($con,FALSE);\n\n// Insert some values \nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\n\r\nVALUES ('Peter','Griffin',35)\");\n\r\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age) \n\r\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli_commit($con)) {\n  echo \"Commit transaction failed\";\n  exit();\n}\n// Close connection\n\r\n mysqli_close($con);\n?>```"
            }
        },
        "connect": {
            "title": "connect",
            "url": "https://www.w3schools.com/php/func_mysqli_connect.asp",
            "info": {
                "Definition and Usage": "The connect() / mysqli\\_connect() function opens a new connection to the MySQL server.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n\r\n?>```"
            }
        },
        "connect_errno": {
            "title": "connect_errno",
            "url": "https://www.w3schools.com/php/func_mysqli_connect_errno.asp",
            "info": {
                "Definition and Usage": "The connect\\_errno / mysqli\\_connect\\_errno() function returns the error code from the last connection error, if any.",
                "Syntax": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n\r\n?>```"
            }
        },
        "connect_error": {
            "title": "connect_error",
            "url": "https://www.w3schools.com/php/func_mysqli_connect_error.asp",
            "info": {
                "Definition and Usage": "The connect\\_error / mysqli\\_connect\\_error() function returns the error description from the last connection error, if any.",
                "Syntax": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n\r\n?>```"
            }
        },
        "data_seek": {
            "title": "data_seek",
            "url": "https://www.w3schools.com/php/func_mysqli_data_seek.asp",
            "info": {
                "Definition and Usage": "The mysqli\\_data\\_seek() function adjusts the result pointer to an arbitrary row in the result-set.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "debug": {
            "title": "debug",
            "url": "https://www.w3schools.com/php/func_mysqli_debug.asp",
            "info": {
                "Definition and Usage": "The mysqli\\_debug() function is used to perform debugging operations.Note: In order to use this function, you must compile the MySQL client library to support debugging.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "dump_debug_info": {
            "title": "dump_debug_info",
            "url": "https://www.w3schools.com/php/func_mysqli_dump_debug_info.asp",
            "info": {
                "Definition and Usage": "The dump\\_debug\\_info() / mysqli\\_dump\\_debug\\_info() function dumps debugging info into the log.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\r\n mysqli_dump_debug_info($con);\n?>```"
            }
        },
        "errno": {
            "title": "errno",
            "url": "https://www.w3schools.com/php/func_mysqli_errno.asp",
            "info": {
                "Definition and Usage": "The errno / mysqli\\_errno() function returns the last error code for the most recent function call, if any.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n// Perform a query, check for error\nif (!mysqli_query($con,\"INSERT INTO Persons (FirstName)\r\nVALUES ('Glenn')\")) {\n  echo(\"Errorcode: \" . mysqli_errno($con));\n}  \n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "error_list": {
            "title": "error_list",
            "url": "https://www.w3schools.com/php/func_mysqli_error_list.asp",
            "info": {
                "Definition and Usage": "The error\\_list / mysqli\\_error\\_list() function returns a list of errors from the last executed command, if any.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n// Perform a query, check for error\nif (!mysqli_query($con,\"INSERT INTO Persons (FirstName)\r\nVALUES ('Glenn')\")) {\n  print_r(mysqli_error_list($con));\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_all": {
            "title": "fetch_all",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_all.asp",
            "info": {
                "Definition and Usage": "The fetch\\_all() / mysqli\\_fetch\\_all() function fetches all result rows and returns the result-set as an associative array, a numeric array, or both.Note: This function is available only with MySQL Native Driver.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n} \n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\r\n $result = mysqli_query($con, $sql);\n// Fetch all\nmysqli_fetch_all($result, MYSQLI_ASSOC);\n\n// Free result set\nmysqli_free_result($result);\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_array": {
            "title": "fetch_array",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_array.asp",
            "info": {
                "Definition and Usage": "The fetch\\_array() / mysqli\\_fetch\\_array() function fetches a result row as an associative array, a numeric array, or both.Note: Fieldnames returned from this function are case-sensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\r\n $result = mysqli_query($con,$sql);\n// Numeric array\n\r\n $row = mysqli_fetch_array($result, MYSQLI_NUM);\nprintf (\"%s (%s)\\n\", $row[0], $row[1]);\n// Associative array\n\r\n $row = mysqli_fetch_array($result, MYSQLI_ASSOC);\nprintf (\"%s (%s)\\n\", $row[\"Lastname\"], $row[\"Age\"]);\n\n// Free result set\nmysqli_free_result($result);\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_assoc": {
            "title": "fetch_assoc",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_assoc.asp",
            "info": {
                "Definition and Usage": "The fetch\\_assoc() / mysqli\\_fetch\\_assoc() function fetches a result row as an associative array.Note: Fieldnames returned from this function are case-sensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\r\n $result = mysqli_query($con, $sql);\n// Associative array\n\r\n $row = mysqli_fetch_assoc($result);\nprintf (\"%s (%s)\\n\", $row[\"Lastname\"], $row[\"Age\"]);\n\n// Free result set\nmysqli_free_result($result);\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_field": {
            "title": "fetch_field",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_field.asp",
            "info": {
                "Definition and Usage": "The fetch\\_field() / mysqli\\_fetch\\_field() function returns the next field (column) in the result-set, as an object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n  // Get field information for all fields\n  while ($fieldinfo = mysqli_fetch_field($result)) {\n    printf(\"Name: %s\\n\", $fieldinfo -> name);\n    printf(\"Table: %s\\n\", $fieldinfo -> table);\n    printf(\"max. Len: %d\\n\", $fieldinfo -> max_length);\n  }\n  mysqli_free_result($result);\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_field_direct": {
            "title": "fetch_field_direct",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_field_direct.asp",
            "info": {
                "Definition and Usage": "The fetch\\_field\\_direct() / mysqli\\_fetch\\_field\\_direct() function returns meta-data for a single field in a result-set, as an object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n  // Get field information for column \"Age\"\n  $fieldinfo = mysqli_fetch_field_direct($result, 1);\n\n  printf(\"Name: %s\\n\", $fieldinfo -> name);\n  printf(\"Table: %s\\n\", $fieldinfo -> table);\n  printf(\"Max. Len: %d\\n\", $fieldinfo -> max_length);\n\n  mysqli_free_result($result);\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_fields": {
            "title": "fetch_fields",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_fields.asp",
            "info": {
                "Definition and Usage": "The fetch\\_fields() / mysqli\\_fetch\\_fields() function returns an array of objects that represent the fields in a result-set.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con , $sql)) {\n  // Get field information for all fields\n  $fieldinfo = mysqli_fetch_fields($result);\n  foreach ($fieldinfo as $val) {\n    printf(\"Name: %s\\n\", $val->name);\n    printf(\"Table: %s\\n\", $val->table);\n    printf(\"Max. Len: %d\\n\", $val->max_length);\n  }\n  mysqli_free_result($result);\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_lengths": {
            "title": "fetch_lengths",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_lengths.asp",
            "info": {
                "Definition and Usage": "The lengths / mysqli\\_fetch\\_lengths() function returns the length of the fields of the current row in the result-set.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT * FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n  $row = mysqli_fetch_row($result);\n  // Display field lengths\n  foreach (mysqli_fetch_lengths($result) as $i => $val) {\n    printf(\"Field %2d has length: %2d\\n\", $i+1, $val);\n  }\n\n  mysqli_free_result($result);\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_object": {
            "title": "fetch_object",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_object.asp",
            "info": {
                "Definition and Usage": "The fetch\\_object() / mysqli\\_fetch\\_object() function returns the current row of a result-set, as an object.Note: Fieldnames returned from this function are case-sensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();  \n}\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n  while ($obj = mysqli_fetch_object($result)) {\n    printf(\"%s (%s)\\n\", $obj->Lastname, $obj->Age);\n  }\n  mysqli_free_result($result);\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "fetch_row": {
            "title": "fetch_row",
            "url": "https://www.w3schools.com/php/func_mysqli_fetch_row.asp",
            "info": {
                "Definition and Usage": "The fetch\\_row() / mysqli\\_fetch\\_row() function fetches one row from a result-set and returns it as an enumerated array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con, $sql)) {\n  // Fetch one and one row\n  while ($row = mysqli_fetch_row($result)) {\n    printf (\"%s (%s)\\n\", $row[0], $row[1]);\n  }\n  mysqli_free_result($result);\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "field_count": {
            "title": "field_count",
            "url": "https://www.w3schools.com/php/func_mysqli_field_count.asp",
            "info": {
                "Definition and Usage": "The field\\_count() / mysqli\\_field\\_count() function returns the number of columns for the most recent query.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\nmysqli_query($con, \"SELECT * FROM Friends\");\n// Get number of columns - will return 3\nmysqli_field_count($con);\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "field_seek": {
            "title": "field_seek",
            "url": "https://www.w3schools.com/php/func_mysqli_field_seek.asp",
            "info": {
                "Definition and Usage": "The field\\_seek() / mysqli\\_field\\_seek() function sets the field cursor to the given field offset.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n$sql=\"SELECT Lastname, Age FROM Persons ORDER BY Lastname\";\n\nif ($result = mysqli_query($con,$sql)) {\n  // Get field information for second column\n  mysqli_field_seek($result, 1);\n  $fieldinfo = mysqli_fetch_field($result);\n  printf(\"Name: %s\\n\", $fieldinfo -> name);\n  printf(\"Table: %s\\n\", $fieldinfo -> table);\n  printf(\"max. Len: %d\\n\", $fieldinfo -> max_length);\n  mysqli_free_result($result);\n}\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "get_charset": {
            "title": "get_charset",
            "url": "https://www.w3schools.com/php/func_mysqli_get_charset.asp",
            "info": {
                "Definition and Usage": "The get\\_charset() / mysqli\\_get\\_charset() function returns a character set object with several properties for the current character set.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\nvar_dump(mysqli_get_charset($con));\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "get_client_info": {
            "title": "get_client_info",
            "url": "https://www.w3schools.com/php/func_mysqli_get_client_info.asp",
            "info": {
                "Definition and Usage": "The get\\_client\\_info() / mysqli\\_get\\_client\\_info() function returns the MySQL client library version.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "get_client_stats": {
            "title": "get_client_stats",
            "url": "https://www.w3schools.com/php/func_mysqli_get_client_stats.asp",
            "info": {
                "Definition and Usage": "The mysqli\\_get\\_client\\_stats() function returns client per-process statistics.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "get_client_version": {
            "title": "get_client_version",
            "url": "https://www.w3schools.com/php/func_mysqli_get_client_version.asp",
            "info": {
                "Definition and Usage": "The client\\_version / mysqli\\_get\\_client\\_version() function returns the MySQL client version as an integer.The MySQL client version is returned in the following format: main\\_version\\*10000 + minor\\_version\\*100 + sub\\_version. So, version 6.3.0 is returned as 60300.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "get_connection_stats": {
            "title": "get_connection_stats",
            "url": "https://www.w3schools.com/php/func_mysqli_get_connection_stats.asp",
            "info": {
                "Definition and Usage": "The mysqli\\_get\\_connection\\_stats() function returns statistics about the client connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "get_host_info": {
            "title": "get_host_info",
            "url": "https://www.w3schools.com/php/func_mysqli_get_host_info.asp",
            "info": {
                "Definition and Usage": "The host\\_info() / mysqli\\_get\\_host\\_info() function returns the MySQL server hostname and the connection type.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\necho mysqli_get_host_info($con);\n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "get_proto_info": {
            "title": "get_proto_info",
            "url": "https://www.w3schools.com/php/func_mysqli_get_proto_info.asp",
            "info": {
                "Definition and Usage": "The mysqli\\_get\\_proto\\_info() function returns the MySQL protocol version.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\necho mysqli_get_proto_info($con);\n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "get_server_info": {
            "title": "get_server_info",
            "url": "https://www.w3schools.com/php/func_mysqli_get_server_info.asp",
            "info": {
                "Definition and Usage": "The server\\_info / mysqli\\_get\\_server\\_info() function returns the MySQL server version.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\necho mysqli_get_server_info($con);\n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "get_server_version": {
            "title": "get_server_version",
            "url": "https://www.w3schools.com/php/func_mysqli_get_server_version.asp",
            "info": {
                "Definition and Usage": "The server\\_version / mysqli\\_get\\_server\\_version() function returns the MySQL server version as an integer.The server version is returned in the following format: main\\_version\\*10000 + minor\\_version\\*100 + sub\\_version.\u00a0 So, version 6.3.0 is returned as 60300.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\necho mysqli_get_server_version($con);\n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "info": {
            "title": "info",
            "url": "https://www.w3schools.com/php/func_mysqli_info.asp",
            "info": {
                "Definition and Usage": "The info / mysqli\\_info() function returns information about the last executed query.This function works with the following query types:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n// Perform som queries\nmysqli_query($con, \"CREATE TABLE testPersons LIKE Persons\");\nmysqli_query($con, \"INSERT INTO testPersons SELECT * FROM Persons ORDER BY LastName\");\necho mysqli_info($con); \n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "init": {
            "title": "init",
            "url": "https://www.w3schools.com/php/func_mysqli_init.asp",
            "info": {
                "Definition and Usage": "The init / mysqli\\_init() function initializes MySQLi and returns an object to use with the mysqli\\_real\\_connect() function.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "insert_id": {
            "title": "insert_id",
            "url": "https://www.w3schools.com/php/func_mysqli_insert_id.asp",
            "info": {
                "Definition and Usage": "The mysqli\\_insert\\_id() function returns the id (generated with AUTO\\_INCREMENT) from the last query.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\nmysqli_query($con, \"INSERT INTO Persons (FirstName, LastName, Age)\r\nVALUES ('Glenn', 'Quagmire', 33)\");\n// Print auto-generated id\necho \"New record has id: \" . mysqli_insert_id($con); \n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "kill": {
            "title": "kill",
            "url": "https://www.w3schools.com/php/func_mysqli_kill.asp",
            "info": {
                "Definition and Usage": "The kill() / mysqli\\_kill() function asks the server to kill a MySQL thread specified by the processid parameter.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n// Get thread id\n$t_id=mysqli_thread_id($con);\n// Kill connection\nmysqli_kill($con, $t_id);\n\nmysqli_close($con);\n?>```"
            }
        },
        "more_results": {
            "title": "more_results",
            "url": "https://www.w3schools.com/php/func_mysqli_more_results.asp",
            "info": {
                "Definition and Usage": "The more\\_results() / mysqli\\_more\\_results() function checks if there are any more query results from a multi query.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n\r\n $sql .= \"SELECT Country FROM Customers\";\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\n  do {\n    // Store first result set\n    if ($result = mysqli_store_result($con)) {\n      while ($row = mysqli_fetch_row($result)) {\n        printf(\"%s\\n\", $row[0]);\n      }\n      mysqli_free_result($result);\n    }\n    // if there are more result-sets, the print a divider\n    if (mysqli_more_results($con)) {\n      printf(\"-------------\\n\");\n    }\n     //Prepare next result set\n  } while (mysqli_next_result($con));\n}\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "multi_query": {
            "title": "multi_query",
            "url": "https://www.w3schools.com/php/func_mysqli_multi_query.asp",
            "info": {
                "Definition and Usage": "The multi\\_query() / mysqli\\_multi\\_query() function performs one or more queries against the database. The queries are separated with a semicolon.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n\r\n $sql .= \"SELECT Country FROM Customers\";\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\n  do {\n    // Store first result set\n    if ($result = mysqli_store_result($con)) {\n      while ($row = mysqli_fetch_row($result)) {\n        printf(\"%s\\n\", $row[0]);\n      }\n      mysqli_free_result($result);\n    }\n    // if there are more result-sets, the print a divider\n    if (mysqli_more_results($con)) {\n      printf(\"-------------\\n\");\n    }\n     //Prepare next result set\n  } while (mysqli_next_result($con));\n}\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "next_result": {
            "title": "next_result",
            "url": "https://www.w3schools.com/php/func_mysqli_next_result.asp",
            "info": {
                "Definition and Usage": "The next\\_result() / mysqli\\_next\\_result() function prepares the next result-set frommulti\\_query().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n\r\n $sql .= \"SELECT Country FROM Customers\";\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\n  do {\n    // Store first result set\n    if ($result = mysqli_store_result($con)) {\n      while ($row = mysqli_fetch_row($result)) {\n        printf(\"%s\\n\", $row[0]);\n      }\n      mysqli_free_result($result);\n    }\n    // if there are more result-sets, the print a divider\n    if (mysqli_more_results($con)) {\n      printf(\"-------------\\n\");\n    }\n     //Prepare next result set\n  } while (mysqli_next_result($con));\n}\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "options": {
            "title": "options",
            "url": "https://www.w3schools.com/php/func_mysqli_options.asp",
            "info": {
                "Definition and Usage": "The options() / mysqli\\_options() function is used to set extra connect options and affect behavior for a connection.Note: This function should be called afterinit() and beforereal\\_connect().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n$con = mysqli_init();\nif (!$con) {\n  die(\"mysqli_init failed\");\n}\n\n// Specify connection timeout\nmysqli_options($con, MYSQLI_OPT_CONNECT_TIMEOUT, 10);\n// Specify read options from named file instead of my.cnf\nmysqli_options($con, MYSQLI_READ_DEFAULT_FILE, \"myfile.cnf\");\n\nmysqli_real_connect($con,\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n?>```"
            }
        },
        "ping": {
            "title": "ping",
            "url": "https://www.w3schools.com/php/func_mysqli_ping.asp",
            "info": {
                "Definition and Usage": "The ping() / mysqli\\_ping() function pings a server connection, to check if the server is alive. It also tries to reconnect - if the connection has gone down.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\nexit();\n}\n// Check if server is alive\nif (mysqli_ping($con)) {\n  echo \"Connection is ok!\";\n} else {\n  echo \"Error: \". mysqli_error($con);\n}\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "poll": {
            "title": "poll",
            "url": "https://www.w3schools.com/php/func_mysqli_poll.asp",
            "info": {
                "Definition and Usage": "The poll() / mysqli\\_poll() function is used to poll connections.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "prepare": {
            "title": "prepare",
            "url": "https://www.w3schools.com/php/func_mysqli_prepare.asp",
            "info": {
                "Definition and Usage": "The prepare() / mysqli\\_prepare() function is used to prepare an SQL statement for execution.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "query": {
            "title": "query",
            "url": "https://www.w3schools.com/php/func_mysqli_query.asp",
            "info": {
                "Definition and Usage": "The query() / mysqli\\_query() function performs a query against a database.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n// Perform query \nif ($result = mysqli_query($con, \"SELECT * FROM Persons\")) {\n  echo \"Returned rows are: \" . mysqli_num_rows($result);\n  // Free result set\n  mysqli_free_result($result);\n}\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "real_connect": {
            "title": "real_connect",
            "url": "https://www.w3schools.com/php/func_mysqli_real_connect.asp",
            "info": {
                "Definition and Usage": "The real\\_connect() / mysqli\\_real\\_connect() function opens a new connection to the MySQL server.This function differs from connect() in the following ways:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n$con = mysqli_init();\nif (!$con) {\n  die(\"mysqli_init failed\");\n}\n\n// Specify connection timeout\nmysqli_options($con, MYSQLI_OPT_CONNECT_TIMEOUT, 10);\n// Specify read options from named file instead of my.cnf\nmysqli_options($con, MYSQLI_READ_DEFAULT_FILE, \"myfile.cnf\");\n\nmysqli_real_connect($con,\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n?>```"
            }
        },
        "real_escape_string": {
            "title": "real_escape_string",
            "url": "https://www.w3schools.com/php/func_mysqli_real_escape_string.asp",
            "info": {
                "Definition and Usage": "The real\\_escape\\_string() / mysqli\\_real\\_escape\\_string() function escapes special characters in a string for use in an SQL query, taking into account the current character set of the connection.This function is used to create a legal SQL string that can be used in an SQL statement. Assume we have the following code:```php\n<?php\n\r\n $lastname = \"D'Ore\";\n$sql=\"INSERT INTO Persons (LastName) VALUES ('$lastname')\";\n\n// This query will fail, cause we didn't escape $lastname\nif (!$mysqli -> query($sql)) {\n  printf(\"%d Row inserted.\\n\", $mysqli->affected_rows);\n}\n\n?>```",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno())\r\n {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n\r\n }\n// Escape special characters, if any\n$firstname = mysqli_real_escape_string($con, $_POST['firstname']);\n\r\n $lastname = mysqli_real_escape_string($con, $_POST['lastname']);\n$age = mysqli_real_escape_string($con, $_POST['age']);\n$sql=\"INSERT INTO Persons (FirstName, LastName, Age) VALUES ('$firstname', '$lastname', '$age')\";\nif (!mysqli_query($con, $sql))\r\n {\n  printf(\"%d Row inserted.\\n\", mysqli_affected_rows($con));\n}\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "real_query": {
            "title": "real_query",
            "url": "https://www.w3schools.com/php/func_mysqli_real_query.asp",
            "info": {
                "Definition and Usage": "The real\\_query() / mysqli\\_real\\_query() function executes a single SQL query. The result can be retrieved or stored with the store\\_result() or use\\_result() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "reap_async_query": {
            "title": "reap_async_query",
            "url": "https://www.w3schools.com/php/func_mysqli_reap_async_query.asp",
            "info": {
                "Definition and Usage": "The reap\\_async\\_query() / mysqli\\_reap\\_async\\_query() function returns result from an async SQL query.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "refresh": {
            "title": "refresh",
            "url": "https://www.w3schools.com/php/func_mysqli_refresh.asp",
            "info": {
                "Definition and Usage": "The refresh() / mysqli\\_refresh() function refreshes/flushes tables or caches, or resets the replication server information.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "rollback": {
            "title": "rollback",
            "url": "https://www.w3schools.com/php/func_mysqli_rollback.asp",
            "info": {
                "Definition and Usage": "The rollback() / mysqli\\_rollback() function rolls back the current transaction for the specified database connection.Tip: Also look at the commit() function, which commits the current transaction, and the autocommit() function, which turns on or off auto-committing database modifications.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n// Turn autocommit off\nmysqli_autocommit($con,FALSE);\n\n// Insert some values \nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age)\n\r\nVALUES ('Peter','Griffin',35)\");\n\r\nmysqli_query($con,\"INSERT INTO Persons (FirstName,LastName,Age) \n\r\nVALUES ('Glenn','Quagmire',33)\");\n\n// Commit transaction\nif (!$mysqli_commit($con)) {\n  echo \"Commit transaction failed\";\n  exit();\n}\n// Rollback transaction\nmysqli_rollback($con);\n// Close connection\n\r\n mysqli_close($con);\n?>```"
            }
        },
        "select_db": {
            "title": "select_db",
            "url": "https://www.w3schools.com/php/func_mysqli_select_db.asp",
            "info": {
                "Definition and Usage": "The select\\_db() / mysqli\\_select\\_db() function is used to change the default database for the connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n// Return name of current default database\nif ($result = mysqli_query($con, \"SELECT DATABASE()\")) {\n  $row = mysqli_fetch_row($result);\n  echo \"Default database is \" . $row[0];\n  mysqli_free_result($result);\n}\n// Change db to \"test\" db\nmysqli_select_db($con, \"test\");\n// Return name of current default database\nif ($result = mysqli_query($con, \"SELECT DATABASE()\")) {\n  $row = mysqli_fetch_row($result);\n  echo \"Default database is \" . $row[0];\n  mysqli_free_result($result);\n}\n// Close connection\n\r\n mysqli_close($con);\n?>```"
            }
        },
        "set_charset": {
            "title": "set_charset",
            "url": "https://www.w3schools.com/php/func_mysqli_set_charset.asp",
            "info": {
                "Definition and Usage": "The set\\_charset() / mysqli\\_set\\_charset() function specifies the default character set to be used when sending data to and from the database server.Note: For this function to work on a Windows platform, you need MySQL client library 4.1.11 or above (for MySQL 5.0, you need 5.0.6 or above). ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\necho \"Initial character set is: \" . mysqli_character_set_name($con);\n// Change character set to utf8\n\r\n mysqli_set_charset($con,\"utf8\");\necho \"Current character set is: \" . mysqli_character_set_name($con);\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "set_local_infile_handler": {
            "title": "set_local_infile_handler",
            "url": "https://www.w3schools.com/php/func_mysqli_set_local_infile_handler.asp",
            "info": {
                "Definition and Usage": "The set\\_local\\_infile\\_handler() / mysqli\\_set\\_local\\_infile\\_handler() function sets a callback function for LOAD DATA LOCAL INFILE command.The callback functions tasks are to read input from the file specified in  LOAD DATA LOCAL INFILE, and to reformat it into the format understood by LOAD DATA INFILE.The returned data must match the format specified in the LOAD DATA.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "sqlstate": {
            "title": "sqlstate",
            "url": "https://www.w3schools.com/php/func_mysqli_sqlstate.asp",
            "info": {
                "Definition and Usage": "The sqlstate / mysqli\\_sqlstate() function returns the SQLSTATE error code for the last error.The error code consists of five characters. \"00000\" indicates no error. The values are specified by ANSI SQL and ODBC.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n// Check connection\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n// Table Persons already exists, so we should get an error\n\r\n $sql = \"CREATE TABLE Persons (Firstname VARCHAR(30), Lastname VARCHAR(30), Age INT)\"\nif (!mysqli_query($con, $sql)) {\n  echo \"SQLSTATE error: \". mysqli_sqlstate($con);\n}\n\n// Close connection\n\r\n mysqli_close($con);\n?>```"
            }
        },
        "ssl_set": {
            "title": "ssl_set",
            "url": "https://www.w3schools.com/php/func_mysqli_ssl_set.asp",
            "info": {
                "Definition and Usage": "The ssl\\_set() / mysqli\\_ssl\\_set() function is used to establish secure connections using SSL. However, this function does nothing unless OpenSSL support is enabled.Note: This function must be called beforereal\\_connect().Note: MySQL Native Driver does not support SSL before PHP 5.3.3. MySQL Native Driver is enabled by default on Microsoft Windows from PHP 5.3+.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n $con = mysqli_init();\nif (!$con) {\n  die(\"mysqli_init failed\");\n}\n\r\n mysqli_ssl_set($con, \"key.pem\", \"cert.pem\", \"cacert.pem\", NULL, NULL); \nif (!mysqli_real_connect($con, \"localhost\", \"my_user\", \"my_password\", \"my_db\")) {\n  die(\"Connect Error: \" . mysqli_connect_error());\n}\n\n// Some queries...\n\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "stat": {
            "title": "stat",
            "url": "https://www.w3schools.com/php/func_mysqli_stat.asp",
            "info": {
                "Definition and Usage": "The stat() / mysqli\\_stat() function returns the current system status.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\necho \"System status: \". mysqli_stat($con); \n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "stmt_init": {
            "title": "stmt_init",
            "url": "https://www.w3schools.com/php/func_mysqli_stmt_init.asp",
            "info": {
                "Definition and Usage": "The stmt\\_init() / mysqli\\_stmt\\_init() function initializes a statement and returns an object suitable for mysqli\\_stmt\\_prepare().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\r\n if (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n$city=\"Sandnes\";\n// Create a prepared statement\n\r\n $stmt = mysqli_stmt_init($con);\nif (mysqli_stmt_prepare($stmt, \"SELECT District FROM City WHERE Name=?\")) {\n  // Bind parameters\n  mysqli_stmt_bind_param($stmt, \"s\", $city);\n  // Execute query\n  mysqli_stmt_execute($stmt);\n  // Bind result variables\n  mysqli_stmt_bind_result($stmt, $district);\n  // Fetch value\n  mysqli_stmt_fetch($stmt);\n  printf(\"%s is in district %s\", $city, $district);\n  // Close statement\n  mysqli_stmt_close($stmt);\n}\n\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "thread_id": {
            "title": "thread_id",
            "url": "https://www.w3schools.com/php/func_mysqli_thread_id.asp",
            "info": {
                "Definition and Usage": "The thread\\_id() / mysqli\\_thread\\_id() function returns the thread ID for the current connection. The connection can then be killed with thekill() function.Note: If the connection is broken and you reconnect, the thread ID will be changed. Therefore; get the thread ID only when you need it. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con=mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit;\n}\n// Get thread id\n$thread_id = mysqli_thread_id($con);\n// Kill connection\nmysqli_kill($con, $thread_id);\n?>```"
            }
        },
        "thread_safe": {
            "title": "thread_safe",
            "url": "https://www.w3schools.com/php/func_mysqli_thread_safe.asp",
            "info": {
                "Definition and Usage": "The mysqli\\_thread\\_safe() function returns whether the client library is compiled as thread-safe.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "use_result": {
            "title": "use_result",
            "url": "https://www.w3schools.com/php/func_mysqli_use_result.asp",
            "info": {
                "Definition and Usage": "The use\\_result() / mysqli\\_use\\_result() function initiates the retrieval of a result-set from the last query executed.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\n$sql = \"SELECT Lastname FROM Persons ORDER BY LastName;\";\n\r\n $sql .= \"SELECT Country FROM Customers\";\n// Execute multi query\nif (mysqli_multi_query($con, $sql)) {\n  do {\n    // Store first result set\n    if ($result = mysqli_use_result($con)) {\n      while ($row = mysqli_fetch_row($result)) {\n        printf(\"%s\\n\", $row[0]);\n      }\n      mysqli_free_result($result);\n    }\n    // if there are more result-sets, the print a divider\n    if (mysqli_more_results($con)) {\n      printf(\"-------------\\n\");\n    }\n     //Prepare next result set\n  } while (mysqli_next_result($con));\n}\nmysqli_close($con);\n\r\n ?>```"
            }
        },
        "warning_count": {
            "title": "warning_count",
            "url": "https://www.w3schools.com/php/func_mysqli_warning_count.asp",
            "info": {
                "Definition and Usage": "The warning\\_count / mysqli\\_warning\\_count() function returns the number of warnings from the last query.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "```php\n<?php\n\r\n$con = mysqli_connect(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\nif (mysqli_connect_errno()) {\necho \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  exit();\n}\nmysqli_query($con, \"CREATE TABLE myPersons LIKE Persons\");\n$sql = \"INSERT INTO myPersons (FirstName) VALUES(\n'Hdghfhjgjtjyjn.,,\u00f8\u00e6l\u00f8jkghfjbmbngfgffdhfhjgjgkjhlkhlkjljljlkjkljlkjkljkljlkj')\";\n\nmysqli_query($con, $sql);\nif (mysqli_warning_count($con)) {\n  if ($result = mysqli_query($con, \"SHOW WARNINGS\")) {\n    $row = mysql_fetch_row($result);\n    printf(\"%s (%d): %s\\n\", $row[0], $row[1], $row[2]);\n    mysqli_free_result($result);\n  }\n}\nmysqli_close($con);\n\r\n?>```"
            }
        },
        "network": {
            "title": "PHP Network",
            "url": "https://www.w3schools.com/php/php_ref_network.asp",
            "info": {
                "PHP Network Introduction": "The Network functions contains various network function and let you manipulate information sent to the browser by the Web server, before any other output has been sent.",
                "Installation": "The Network functions are part of the PHP core. There is no installation needed to use these functions.",
                "PHP Network Functions": ""
            }
        },
        "checkdnsrr()": {
            "title": "checkdnsrr()",
            "url": "https://www.w3schools.com/php/func_network_checkdnsrr.asp",
            "info": {
                "Definition and Usage": "The checkdnsrr() function checks DNS records for type corresponding to host.We can use the checkdnsrr() function to check our DNS record to verify the existence of a domain name or not.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "closelog()": {
            "title": "closelog()",
            "url": "https://www.w3schools.com/php/func_network_closelog.asp",
            "info": {
                "Definition and Usage": "The closelog() function closes the connection of system logger.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "dns_check_record()": {
            "title": "dns_check_record()",
            "url": "https://www.w3schools.com/php/func_network_dns_check_record.asp",
            "info": {
                "Definition and Usage": "The dns\\_check\\_record() function is an alias of the checkdnsrr() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "dns_get_mx()": {
            "title": "dns_get_mx()",
            "url": "https://www.w3schools.com/php/func_network_dns_get_mx.asp",
            "info": {
                "Definition and Usage": "The dns\\_get\\_mx() function is an alias of the getmxrr() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "dns_get_record()": {
            "title": "dns_get_record()",
            "url": "https://www.w3schools.com/php/func_network_dns_get_record.asp",
            "info": {
                "Definition and Usage": "The dns\\_get\\_record() function gets the DNS resource records associated with the specified hostname.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "fsockopen()": {
            "title": "fsockopen()",
            "url": "https://www.w3schools.com/php/func_network_fsockopen.asp",
            "info": {
                "Definition and Usage": "The fsockopen() function opens an Internet or Unix domain socket connection.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gethostbyaddr()": {
            "title": "gethostbyaddr()",
            "url": "https://www.w3schools.com/php/func_network_gethostbyaddr.asp",
            "info": {
                "Definition and Usage": "The gethostbyaddr() function returns the domain name for a given IP address.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gethostbyname()": {
            "title": "gethostbyname()",
            "url": "https://www.w3schools.com/php/func_network_gethostbyname.asp",
            "info": {
                "Definition and Usage": "The gethostbyname() function returns the IPv4 address for a given domain/host name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gethostbynamel()": {
            "title": "gethostbynamel()",
            "url": "https://www.w3schools.com/php/func_network_gethostbynamel.asp",
            "info": {
                "Definition and Usage": "The gethostbynamel() function returns a list of IPv4 address for a given domain/host name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gethostname()": {
            "title": "gethostname()",
            "url": "https://www.w3schools.com/php/func_network_gethostname.asp",
            "info": {
                "Definition and Usage": "The gethostname() function returns the host name for the local machine.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "getmxrr()": {
            "title": "getmxrr()",
            "url": "https://www.w3schools.com/php/func_network_getmxrr.asp",
            "info": {
                "Definition and Usage": "The getmxrr() function returns the MX records for the specified internet host name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getprotobyname()": {
            "title": "getprotobyname()",
            "url": "https://www.w3schools.com/php/func_network_getprotobyname.asp",
            "info": {
                "Definition and Usage": "The getprotobyname() function returns the protocol number for a given protocol name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getprotobynumber()": {
            "title": "getprotobynumber()",
            "url": "https://www.w3schools.com/php/func_network_getprotobynumber.asp",
            "info": {
                "Definition and Usage": "The getprotobynumber() function returns the protocol name for a given protocol number.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getservbyname()": {
            "title": "getservbyname()",
            "url": "https://www.w3schools.com/php/func_network_getservbyname.asp",
            "info": {
                "Definition and Usage": "The getservbyname() function returns the port number for a given Internet service and protocol.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getservbyport()": {
            "title": "getservbyport()",
            "url": "https://www.w3schools.com/php/func_network_getservbyport.asp",
            "info": {
                "Definition and Usage": "The getservbyport() function returns the Internet service for a given port and protocol.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "header_register_callback()": {
            "title": "header_register_callback()",
            "url": "https://www.w3schools.com/php/func_network_header_register_callback.asp",
            "info": {
                "Definition and Usage": "The header\\_register\\_callback() function calls a header function (will be executed after PHP has prepared all headers to be sent, and before any other output is sent).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "header_remove()": {
            "title": "header_remove()",
            "url": "https://www.w3schools.com/php/func_network_header_remove.asp",
            "info": {
                "Definition and Usage": "The header\\_remove() function removes an HTTP header previously set with theheader() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nheader(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\n\r\nheader(\"Cache-Control: no-cache\");\n\r\nheader(\"Pragma: no-cache\");\nheader_remove(); \n?>```"
            }
        },
        "header()": {
            "title": "header()",
            "url": "https://www.w3schools.com/php/func_network_header.asp",
            "info": {
                "Definition and Usage": "The header() function sends a raw HTTP header to a client.It is important to notice that the header() function must be called before any actual output is sent!",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nheader(\"Content-type:application/pdf\");\n\n\r\n// It will be called downloaded.pdf\n\r\nheader(\"Content-Disposition:attachment;filename='downloaded.pdf'\");\n\n\r\n// The PDF source is in original.pdf\n\r\nreadfile(\"original.pdf\");\n\r\n?>\n\n\r\n<html>\n\r\n<body>\n\n\r\n...\n\r\n...```"
            }
        },
        "headers_list()": {
            "title": "headers_list()",
            "url": "https://www.w3schools.com/php/func_network_headers_list.asp",
            "info": {
                "Definition and Usage": "The headers\\_list() function returns a list of response headers to be sent to the browser.Tip: To determine whether or not the headers have been sent yet, use the headers\\_sent() function.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "headers_sent()": {
            "title": "headers_sent()",
            "url": "https://www.w3schools.com/php/func_network_headers_sent.asp",
            "info": {
                "Definition and Usage": "The headers\\_sent() function checks if/where headers have been sent.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n// $file and $line are passed in for later use\n\r\n// Do not assign them values beforehand\n\r\nif (!headers_sent($file, $line))\n{\nheader(\"Location: https://www.w3schools.com/\");\nexit;\n// Trigger an error here\n}\n\r\nelse\n{\necho \"Headers sent in $file on line $line\";\nexit;\n}\n\r\n?>\n\n\r\n<html>\n\r\n<body>\n\n\r\n...\n\r\n...```"
            }
        },
        "http_response_code()": {
            "title": "http_response_code()",
            "url": "https://www.w3schools.com/php/func_network_http_response_code.asp",
            "info": {
                "Definition and Usage": "The http\\_response\\_code() function sets or returns the HTTP response status code.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "inet_ntop()": {
            "title": "inet_ntop()",
            "url": "https://www.w3schools.com/php/func_network_inet_ntop.asp",
            "info": {
                "Definition and Usage": "The inet\\_ntop() function converts a 32bit IPv4 or 128bit IPv6 address into a readable format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "inet_pton()": {
            "title": "inet_pton()",
            "url": "https://www.w3schools.com/php/func_network_inet_pton.asp",
            "info": {
                "Definition and Usage": "The inet\\_pton() function converts a readable IP address into a packed 32bit IPv4 or 128bit IPv6 format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ip2long()": {
            "title": "ip2long()",
            "url": "https://www.w3schools.com/php/func_network_ip2long.asp",
            "info": {
                "Definition and Usage": "The ip2long() function converts an IPv4 address into a long integer.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "long2ip()": {
            "title": "long2ip()",
            "url": "https://www.w3schools.com/php/func_network_long2ip.asp",
            "info": {
                "Definition and Usage": "The long2ip() function converts a long integer address into a string in IPv4 format.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "openlog()": {
            "title": "openlog()",
            "url": "https://www.w3schools.com/php/func_network_openlog.asp",
            "info": {
                "Definition and Usage": "The openlog() function opens the connection of system logger.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "pfsockopen()": {
            "title": "pfsockopen()",
            "url": "https://www.w3schools.com/php/func_network_pfsockopen.asp",
            "info": {
                "Definition and Usage": "The pfsockopen() function opens a persistent Internet or Unix domain socket connection.Note: This function is almost identical tofsockopen(). The difference is that the connection is not closed after the script finishes. This function is the persistent version of fsockopen(). ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "setcookie()": {
            "title": "setcookie()",
            "url": "https://www.w3schools.com/php/func_network_setcookie.asp",
            "info": {
                "Definition and Usage": "The setcookie() function defines a cookie to be sent along with the rest of the HTTP headers.A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.The name of the cookie is automatically assigned to a variable of the same name. For example, if a cookie was sent with the name \"user\", a variable is automatically created called $user, containing the cookie value.Note: The setcookie() function must appear BEFORE the <html> tag.Note: The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$value = \"Hello world!\";\n// cookie will expire when the browser close\nsetcookie(\"myCookie\", $value);\n// cookie will expire in 1 hour\nsetcookie(\"myCookie\", $value, time() + 3600);\n// cookie will expire in 1 hour, and will only be available\n// within the php directory + all sub-directories of php\nsetcookie(\"myCookie\", $value, time() + 3600, \"/php/\");\n?> \n<html>\n<body>\n...some code...\n\n</body>\n</html>``````php\n<?php\n$cookie_name = \"user\";\n$cookie_value = \"Alex Porter\";\n\r\n setcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\");\n?>\n<html>\n<body>\n<?php\nif(!isset($_COOKIE[$cookie_name])) {\n    echo \"Cookie named '\" . $cookie_name . \"' is not set!\";\n} else {\n    echo \"Cookie '\" . $cookie_name . \"' is set!<br>\";\n    echo \"Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n</body>\n</html>``````php\n<?php\n// set the expiration date to one hour ago\nsetcookie(\"user\", \"\", time() - 3600);\n?>\n<html>\n<body>\n<?php\necho \"Cookie 'user' is deleted.\";\n?>\n</body>\n</html>```"
            }
        },
        "setrawcookie()": {
            "title": "setrawcookie()",
            "url": "https://www.w3schools.com/php/func_network_setrawcookie.asp",
            "info": {
                "Definition and Usage": "The setrawcookie() function defines a cookie (without URL encoding) to be sent along with the rest of the HTTP headers.A cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.The name of the cookie is automatically assigned to a variable of the same name. For example, if a cookie was sent with the name \"user\", a variable is automatically created called $user, containing the cookie value.Note: The setrawcookie() function must appear BEFORE the <html> tag.Note: To automatically URL-encode the cookie value when sending, and automatically decode when receiving, use the setcookie() function instead.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<html>\n<body>\n<?php\n$cookie_name = \"user\";\nif(!isset($_COOKIE[$cookie_name])) {\n    echo \"Cookie named '\" . $cookie_name . \"' does not exist!\";\n} else {\n    echo \"Cookie is named: \" . $cookie_name . \"<br>Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n</body>\n</html>``````php\n<?php\n$cookie_name = \"user\";\n$cookie_value = \"Alex\";\n\r\n setrawcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\");\n?>\n<html>\n<body>\n<?php\n$cookie_name = \"user\";\nif(!isset($_COOKIE[$cookie_name])) {\n    echo \"Cookie named '\" . $cookie_name . \"' does not exist!\";\n} else {\n    echo \"Cookie is named: \" . $cookie_name . \"<br>Value is: \" . $_COOKIE[$cookie_name];\n}\n?>\n</body>\n</html>``````php\n<?php\n$cookie_name = \"user\";\n\r\n unset($_COOKIE[$cookie_name]);\n// empty value and expiration one hour before\n$res = setrawcookie($cookie_name, '', time() - 3600);\n?>\n<html>\n<body>\n<?php\necho \"Cookie 'user' is deleted.\";\n?>\n</body>\n</html>```"
            }
        },
        "socket_get_status()": {
            "title": "socket_get_status()",
            "url": "https://www.w3schools.com/php/func_network_socket_get_status.asp",
            "info": {
                "Definition and Usage": "The socket\\_get\\_status() function is an alias of the stream\\_get\\_meta\\_data() function.\u276e PHP Network Reference"
            }
        },
        "socket_set_blocking()": {
            "title": "socket_set_blocking()",
            "url": "https://www.w3schools.com/php/func_network_socket_set_blocking.asp",
            "info": {
                "Definition and Usage": "The socket\\_set\\_blocking() function is an alias of the stream\\_get\\_meta\\_data() function.\u276e PHP Network Reference"
            }
        },
        "socket_set_timeout()": {
            "title": "socket_set_timeout()",
            "url": "https://www.w3schools.com/php/func_network_socket_set_timeout.asp",
            "info": {
                "Definition and Usage": "The socket\\_set\\_timeout() function is an alias of the stream\\_get\\_meta\\_data() function.\u276e PHP Network Reference"
            }
        },
        "syslog()": {
            "title": "syslog()",
            "url": "https://www.w3schools.com/php/func_network_syslog.asp",
            "info": {
                "Definition and Usage": "The syslog() function generates a system log message.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "preg_filter()": {
            "title": "preg_filter()",
            "url": "https://www.w3schools.com/php/func_regex_preg_filter.asp",
            "info": {
                "Definition and Usage": "The preg\\_filter() function returns a string or array of strings in which matches of the patternhave been replaced with the replacement string.If the input is an array, this function returns an array. If the input is a string then thisfunction returns a string.This function is similar to preg\\_replace() with one difference: When a match for the patternis not found in an input string, the string will not be used in the return value. In thisscenario, if the input is a string instead of an array then the function returns null.Replacement strings may contain backreferences in the form \\n or $n where n is the indexof a group in the pattern. In the returned string, instances of \\n and $n will be replaced withthe substring that was matched by the group or, if \\0 or $0 are used, by the wholeexpression.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "preg_grep()": {
            "title": "preg_grep()",
            "url": "https://www.w3schools.com/php/func_regex_preg_grep.asp",
            "info": {
                "Definition and Usage": "The preg\\_grep() function returns an array containing only elements from the input thatmatch the given pattern.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "preg_last_error()": {
            "title": "preg_last_error()",
            "url": "https://www.w3schools.com/php/func_regex_preg_last_error.asp",
            "info": {
                "Definition and Usage": "The preg\\_last\\_error() function returns an error code for the most recently evaluated regular expression. The returnedvalue will match one of the following constants:",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "preg_match()": {
            "title": "preg_match()",
            "url": "https://www.w3schools.com/php/func_regex_preg_match.asp",
            "info": {
                "Definition and Usage": "The preg\\_match() function returns whether a match was found in a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = \"Welcome to W3Schools\";\n$pattern = \"/w3schools/i\";\npreg_match($pattern, $str, $matches, PREG_OFFSET_CAPTURE);\nprint_r($matches);\n?>```"
            }
        },
        "preg_match_all()": {
            "title": "preg_match_all()",
            "url": "https://www.w3schools.com/php/func_regex_preg_match_all.asp",
            "info": {
                "Definition and Usage": "The preg\\_match\\_all() function returns the number of matches of a pattern that were foundin a string and populates a variable with the matches that were found.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = \"abc ABC\";\n$pattern = \"/((a)b)(c)/i\";\nif(preg_match_all($pattern, $str, $matches, PREG_PATTERN_ORDER)) {\n  print_r($matches);\n}\n?>```"
            }
        },
        "preg_replace": {
            "title": "preg_replace",
            "url": "https://www.w3schools.com/php/func_regex_preg_replace.asp",
            "info": {
                "Definition and Usage": "The preg\\_replace()  function returns a string or array of strings where all matches of apattern or list of patterns found in the input are replaced with substrings.There are three different ways to use this function:1. One pattern and a replacement string. Matches of the pattern are replaced with thereplacement string.2. An array of patterns and a replacement string. Matches any of the patterns arereplaced with the replacement string.3. An array of patterns and an array of replacement strings. Matches of each patternare replaced with the replacement string at the same position in the replacementsarray. If no item is found at that position the match is replaced with an empty string.Replacement strings may contain a backreference in the form \\n or $n where n is the indexof a group in the pattern. In the returned string, instances of \\n and $n will be replaced withthe substring that was matched by the group or, if \\0 or $0 are used, by the wholeexpression.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "preg_replace_callback": {
            "title": "preg_replace_callback",
            "url": "https://www.w3schools.com/php/func_regex_preg_replace_callback.asp",
            "info": {
                "Definition and Usage": "The preg\\_replace\\_callback() function, given an expression and a callback, returns a string where all matches of the expressionare replaced with the substring returned by the callback function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "preg_replace_callback_array": {
            "title": "preg_replace_callback_array",
            "url": "https://www.w3schools.com/php/func_regex_preg_replace_callback_array.asp",
            "info": {
                "Definition and Usage": "The preg\\_replace\\_callback\\_array() function returns a string or an array of strings in which matches of a set of regular expressions arereplaced with the return value of a callback function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\nfunction countLetters($matches) {\n  return $matches[0] . '[' . strlen($matches[0]) . 'letter]';\n}\nfunction countDigits($matches) {\n  return $matches[0] . '[' . strlen($matches[0]) . 'digit]';\n}\n$input = \"365 days\";\n$patterns = [\n  '/[a-z]+/i' => 'countLetters',\n  '/[0-9]+/' => 'countDigits'\n];\n$result = preg_replace_callback_array($patterns, $input);\necho $result;\n?>```"
            }
        },
        "preg_split": {
            "title": "preg_split",
            "url": "https://www.w3schools.com/php/func_regex_preg_split.asp",
            "info": {
                "Definition and Usage": "The preg\\_split() function breaks a string into an array using matches of a regular expression as separators.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$date = \"1970-01-01 00:00:00\";\n$pattern = \"/([-\\s:])/\";\n$components = preg_split($pattern, $date, -1,\nPREG_SPLIT_DELIM_CAPTURE);\nprint_r($components);\n?>``````php\n<?php\n$date = \"1970-01-01\";\n$pattern = \"/-/\";\n$components = preg_split($pattern, $date, -1,\nPREG_SPLIT_OFFSET_CAPTURE);\nprint_r($components);\n?>```"
            }
        },
        "preg_quote": {
            "title": "preg_quote",
            "url": "https://www.w3schools.com/php/func_regex_preg_quote.asp",
            "info": {
                "Definition and Usage": "The preg\\_quote() function adds a backslash to characters that have a special meaning inregular expressions so that searches for the literal characters can be done. This function isuseful when using user input in regular expressions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "simplexml": {
            "title": "PHP SimpleXML",
            "url": "https://www.w3schools.com/php/php_ref_simplexml.asp",
            "info": {
                "PHP SimpleXML Introduction": "SimpleXML is an extension that allows us to easily manipulate and get XML data.SimpleXML provides an easy way of getting an element's name, attributes and textual content if you know the XML document's structure or layout.SimpleXML turns an XML document into a data structure you can iterate through like a collection of arrays and objects.",
                "Installation": "From PHP 5, the SimpleXML functions are part of the PHP core. No installation is required to use these functions.",
                "PHP SimpleXML Functions": "",
                "PHP SimpleXML Iteration Functions": ""
            }
        },
        "__construct()": {
            "title": "__construct()",
            "url": "https://www.w3schools.com/php/func_simplexml__construct.asp",
            "info": {
                "Definition and Usage": "The \\_\\_construct() function creates a new SimpleXMLElement object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "Assume we have the following XML file, \"note.xml\":```php\n<?php\n$xml=new SimpleXMLElement(\"note.xml\", 0, TRUE);\necho $xml->asXML();\n?>```"
            }
        },
        "__tostring()": {
            "title": "__tostring()",
            "url": "https://www.w3schools.com/php/func_simplexml__tostring.asp",
            "info": {
                "Definition and Usage": "The \\_\\_toString() function returns the string content of an element.This function returns the string content that is directly in the element - not the string content that is inside this element's children!",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "addattribute()": {
            "title": "addAttribute()",
            "url": "https://www.w3schools.com/php/func_simplexml_addattribute.asp",
            "info": {
                "Definition and Usage": "The addAttribute() function appends an attribute to the SimpleXML element.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "addchild()": {
            "title": "addChild()",
            "url": "https://www.w3schools.com/php/func_simplexml_addchild.asp",
            "info": {
                "Definition and Usage": "The addChild() function appends a child element to the SimpleXML element.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "asxml()": {
            "title": "asXML()",
            "url": "https://www.w3schools.com/php/func_simplexml_asxml.asp",
            "info": {
                "Definition and Usage": "The asXML() function returns a well-formed XML string (XML version 1.0) from a SimpleXML object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "attributes()": {
            "title": "attributes()",
            "url": "https://www.w3schools.com/php/func_simplexml_attributes.asp",
            "info": {
                "Definition and Usage": "The attributes() function returns the attributes and values of an XML element.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "children()": {
            "title": "children()",
            "url": "https://www.w3schools.com/php/func_simplexml_children.asp",
            "info": {
                "Definition and Usage": "The children() function finds the children of a specified node.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n\r\n <heading>Reminder</heading>\n<body><span>Important!</span> Do not forget me this weekend!</body>\n</note>\nXML;\n\r\n $xml=simplexml_load_string($note);\nforeach ($xml->body[0]->children() as $child)\n  {\n  echo \"Child node: \" . $child . \"<br>\";\n  }\n?>```"
            }
        },
        "getdocnamespaces()": {
            "title": "getDocNamespaces()",
            "url": "https://www.w3schools.com/php/func_simplexml_getdocnamespaces.asp",
            "info": {
                "Definition and Usage": "The getDocNamespaces() function returns the namespaces declared in an XML document.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$xml=<<<XML\n<?xml version=\"1.0\" standalone=\"yes\"?>\n<cars xmlns:c=\"http://w3schools.com/ns\">\n  <c:car id=\"1\">Volvo</c:car>\n  <c:car id=\"2\">BMW</c:car>\n  <c:car id=\"3\" a:country=\"Sweden\" xmlns:a=\"http://w3schools.com/country\">Saab</c:car> \n</cars>\nXML;\n\n$sxe=new SimpleXMLElement($xml);\n$ns=$sxe->getDocNamespaces(TRUE);\n\r\n var_dump($ns);\n?>```"
            }
        },
        "getname()": {
            "title": "getName()",
            "url": "https://www.w3schools.com/php/func_simplexml_getname.asp",
            "info": {
                "Definition and Usage": "The getName() function returns the name of the XML element.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "getnamespaces()": {
            "title": "getNamespaces()",
            "url": "https://www.w3schools.com/php/func_simplexml_getnamespaces.asp",
            "info": {
                "Definition and Usage": "The getNamespaces() function returns the namespaces used in an XML document.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "registerxpathnamespace()": {
            "title": "registerXPathNamespace()",
            "url": "https://www.w3schools.com/php/func_simplexml_registerxpathnamespace.asp",
            "info": {
                "Definition and Usage": "The registerXPathNamespace() function creates a namespace context for the next XPath query.This function is useful if a namespace prefix is changed in an XML document. The registerXPathNamespace() function will create a prefix for specified namespace, so thatthe affected XML nodes can be accessed without altering the application code too much.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "savexml()": {
            "title": "saveXML()",
            "url": "https://www.w3schools.com/php/func_simplexml_savexml.asp",
            "info": {
                "Definition and Usage": "The saveXML() function is an alias of the asXML() function."
            }
        },
        "simplexml_import_dom()": {
            "title": "simplexml_import_dom()",
            "url": "https://www.w3schools.com/php/func_simplexml_import_dom.asp",
            "info": {
                "Definition and Usage": "The simplexml\\_import\\_dom() function returns a SimpleXMLElement object from a DOM node.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$dom=new domDocument;\n\r\n $dom->loadXML(\"<books><book><title>Title1</title></book><book><title>Title2</title></book></books>\");\n\r\n $x=simplexml_import_dom($dom);\necho $x->book[1]->title;\n?>```"
            }
        },
        "simplexml_load_file()": {
            "title": "simplexml_load_file()",
            "url": "https://www.w3schools.com/php/func_simplexml_load_file.asp",
            "info": {
                "Definition and Usage": "The simplexml\\_load\\_file() function converts an XML document to an object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "Assume we have the following XML file, \"note.xml\":```php\n<?php\n$xml=simplexml_load_file(\"note.xml\");\necho $xml->to . \"<br>\";\n\r\n echo $xml->from . \"<br>\";\necho $xml->heading . \"<br>\";\necho $xml->body;\n?>``````php\n<?php\n\r\n$xml=simplexml_load_file(\"note.xml\");\n\r\necho $xml->getName() . \"<br>\";\n\n\r\nforeach($xml->children() as $child)\n{\necho $child->getName() . \": \" . $child . \"<br>\";\n}\n\r\n?>```"
            }
        },
        "simplexml_load_string()": {
            "title": "simplexml_load_string()",
            "url": "https://www.w3schools.com/php/func_simplexml_load_string.asp",
            "info": {
                "Definition and Usage": "The simplexml\\_load\\_string() function converts a well-formed XML string into an object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n\r\n <body>Do not forget me this weekend!</body>\n</note>\nXML;\n\r\n $xml=simplexml_load_string($note);\necho $xml->to . \"<br>\";\necho $xml->from . \"<br>\";\necho $xml->heading . \"<br>\";\necho $xml->body;\n\r\n ?>``````php\n<?php\n$note=<<<XML\n<note>\n<to>Tove</to>\n<from>Jani</from>\n<heading>Reminder</heading>\n\r\n <body>Do not forget me this weekend!</body>\n</note>\nXML;\n\r\n $xml=simplexml_load_string($note);\necho $xml->getName() . \"<br>\";\n\r\n foreach($xml->children() as $child)\n  {\n  echo $child->getName() . \": \" . $child . \"<br>\";\n  }\n?>```"
            }
        },
        "xpath()": {
            "title": "xpath()",
            "url": "https://www.w3schools.com/php/func_simplexml_xpath.asp",
            "info": {
                "Definition and Usage": "The xpath() function runs an XPath query on the XML document.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "getchildren()": {
            "title": "getchildren()",
            "url": "https://www.w3schools.com/php/func_simplexml_getchildren.asp",
            "info": {
                "Definition and Usage": "The getChildren() function returns the child elements of the current element.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "haschildren()": {
            "title": "haschildren()",
            "url": "https://www.w3schools.com/php/func_simplexml_haschildren.asp",
            "info": {
                "Definition and Usage": "The hasChildren() function checks whether the current element has children.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "valid()": {
            "title": "valid()",
            "url": "https://www.w3schools.com/php/func_simplexml_valid.asp",
            "info": {
                "Definition and Usage": "The valid() function checks whether the current element is valid after a call to rewind() or next().",
                "Syntax": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$xml = new SimpleXMLIterator('<books><book>Learn PHP</book></books>');\n// rewind to the first element\n$xml->rewind();\n\n// check if valid\nvar_dump($xml->valid());\n// move to the next element\n$xml->next();\n// check if valid - will be bool(false) because there is only one element\nvar_dump($xml->valid());\n?>```"
            }
        },
        "stream": {
            "title": "PHP Stream",
            "url": "https://www.w3schools.com/php/php_ref_stream.asp",
            "info": {
                "PHP Stream Introduction": "Streams are the way of generalizing file, network, data compression, and other operations which share a common set of functions and uses. In its simplest definition, a stream is a resource object which exhibits streamable behavior. That is, it can be read from or written to in a linear fashion, and may be able to fseek() to an arbitrary location within the stream. A wrapper is additional code which tells the stream how to handle specific protocols/encodings.",
                "Installation": "The Stream functions are part of the PHP core. There is no installation needed to use these functions.",
                "PHP Stream Functions": ""
            }
        },
        "string": {
            "title": "PHP String",
            "url": "https://www.w3schools.com/php/php_ref_string.asp",
            "info": {
                "PHP String Functions": "The PHP string functions are part of the PHP core. No installation is required to use these functions."
            }
        },
        "addcslashes()": {
            "title": "addcslashes()",
            "url": "https://www.w3schools.com/php/func_string_addcslashes.asp",
            "info": {
                "Definition and Usage": "The addcslashes() function returns a string with backslashes in front of the specified characters.Note: The addcslashes() function is case-sensitive.Note: Be careful using addcslashes() on 0 (NULL), r (carriage return), n (newline), f (form feed), t (tab) and v (vertical tab). In PHP, \\0, \\r, \\n, \\t, \\f and \\v are predefined escape sequences.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Welcome to my humble Homepage!\";\n\r\necho $str.\"<br>\";\n\r\necho addcslashes($str,'m').\"<br>\";\n\r\necho addcslashes($str,'H').\"<br>\";\n\r\n?>``````php\n<?php\n\r\n$str = \"Welcome to my humble Homepage!\";\n\r\necho $str.\"<br>\";\n\r\necho addcslashes($str,'A..Z').\"<br>\";\n\r\necho addcslashes($str,'a..z').\"<br>\";\n\r\necho addcslashes($str,'a..g');\n\r\n?>```"
            }
        },
        "addslashes()": {
            "title": "addslashes()",
            "url": "https://www.w3schools.com/php/func_string_addslashes.asp",
            "info": {
                "Definition and Usage": "The addslashes() function returns a string with backslashes in front of predefined characters.The predefined characters are:Tip: This function can be used to prepare a string for storage in a database and database queries.Note: Prior to PHP 5.4, the PHP dir magic\\_quotes\\_gpc was on by default and it ran addslashes() on all GET, POST, and COOKIE data by default. You should not use addslashes() on strings that have already been escaped, as it will cause double escaping. The function get\\_magic\\_quotes\\_gpc() can be used to check this.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Who's Peter Griffin?\";\n\r\necho $str . \" This is not safe in a database query.<br>\";\n\r\necho addslashes($str) . \" This is safe in a database query.\";\n\r\n?>```"
            }
        },
        "bin2hex()": {
            "title": "bin2hex()",
            "url": "https://www.w3schools.com/php/func_string_bin2hex.asp",
            "info": {
                "Definition and Usage": "The bin2hex() function converts a string of ASCII characters to hexadecimal values. The string can be converted back using the pack() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Hello world!\";\n\r\necho bin2hex($str) . \"<br>\";\n\r\necho pack(\"H*\",bin2hex($str)) . \"<br>\";\n\r\n?>```"
            }
        },
        "chop()": {
            "title": "chop()",
            "url": "https://www.w3schools.com/php/func_string_chop.asp",
            "info": {
                "Definition and Usage": "The chop() function removes whitespaces or other predefined characters from the right end of a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = \"Hello World!\\n\\n\";\necho $str;\necho chop($str);\n?>```"
            }
        },
        "chr()": {
            "title": "chr()",
            "url": "https://www.w3schools.com/php/func_string_chr.asp",
            "info": {
                "Definition and Usage": "The chr() function returns a character from the specified ASCII value.The ASCII value can be specified in decimal, octal, or hex values. Octal values are defined by a leading 0, while hex values are defined by a leading 0x.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = chr(046);\n\r\n echo(\"You $str me forever!\");\n?>``````php\n<?php \n$str = chr(43);\n$str2 = chr(61);\necho(\"2 $str 2  $str2 4\"); \n?>```"
            }
        },
        "chunk_split()": {
            "title": "chunk_split()",
            "url": "https://www.w3schools.com/php/func_string_chunk_split.asp",
            "info": {
                "Definition and Usage": "The chunk\\_split() function splits a string into a series of smaller parts.Note: This function does not alter the original string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Hello world!\";\n\r\necho chunk_split($str,6,\"...\");\n\r\n?>```"
            }
        },
        "convert_cyr_string()": {
            "title": "convert_cyr_string()",
            "url": "https://www.w3schools.com/php/func_string_convert_cyr_string.asp",
            "info": {
                "Definition and Usage": "The convert\\_cyr\\_string() function converts a string from one Cyrillic character-set to another.The supported Cyrillic character-sets are:Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "convert_uudecode()": {
            "title": "convert_uudecode()",
            "url": "https://www.w3schools.com/php/func_string_convert_uudecode.asp",
            "info": {
                "Definition and Usage": "The convert\\_uudecode() function decodes a uuencoded string.This function is often used together with the convert\\_uuencode() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = \"Hello world!\";\n// Encode the string\n$encodeString = convert_uuencode($str);\necho $encodeString . \"<br>\";\n// Decode the string\n$decodeString = convert_uudecode($encodeString);\necho $decodeString;\n\r\n ?>```"
            }
        },
        "convert_uuencode()": {
            "title": "convert_uuencode()",
            "url": "https://www.w3schools.com/php/func_string_convert_uuencode.asp",
            "info": {
                "Definition and Usage": "The convert\\_uuencode() function encodes a string using the uuencode algorithm.Note: This function encodes all strings (including binary) into printable characters.This will fix any problems with obscure binary data when storing in a database or transmit data over a network.Remember to use the convert\\_uudecode() function before using the data again.Note: Uuencoded data is about 35% larger than the original.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = \"Hello world!\";\n// Encode the string\n$encodeString = convert_uuencode($str);\necho $encodeString . \"<br>\";\n// Decode the string\n$decodeString = convert_uudecode($encodeString);\necho $decodeString;\n\r\n ?>```"
            }
        },
        "count_chars()": {
            "title": "count_chars()",
            "url": "https://www.w3schools.com/php/func_string_count_chars.asp",
            "info": {
                "Definition and Usage": "The count\\_chars() function returns information about characters used in a string (for example, how many times an ASCII character occurs in a string, or which characters that have been used or not been used in a string). ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Hello World!\";\n\r\necho count_chars($str,4);\n\r\n?>``````php\n<?php\n\r\n$str = \"Hello World!\";\n\r\nprint_r(count_chars($str,1));\n\r\n?>``````php\n<?php\n$str = \"PHP is pretty fun!!\";\n$strArray = count_chars($str,1);\n\nforeach ($strArray as $key=>$value)\n  {\necho \"The character <b>'\".chr($key).\"'</b> was found $value time(s)<br>\";\n  }\n?>```"
            }
        },
        "crc32()": {
            "title": "crc32()",
            "url": "https://www.w3schools.com/php/func_string_crc32.asp",
            "info": {
                "Definition and Usage": "The crc32() function calculates a 32-bit CRC (cyclic redundancy checksum) for a string.This function can be used to validate data integrity.Tip: To ensure that you get the correct string representation from the crc32() function,you'll need to use the %u formatter of the printf() or sprintf() function. If the %u formatter is not used,the result may display in incorrect and negative numbers.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "In this example we will print the result of crc32() with and without the \"%u\" formatter (note that the result is equal):The output of the code above will be:In this example we will print the result of crc32() with and without the \"%u\" formatter (note that the result is not equal):The output of the code above will be:"
            }
        },
        "crypt()": {
            "title": "crypt()",
            "url": "https://www.w3schools.com/php/func_string_crypt.asp",
            "info": {
                "Definition and Usage": "The crypt() function returns a hashed string using DES, Blowfish, or MD5 algorithms.This function behaves different on different operating systems. PHP checks what algorithms are available and what algorithms to use when it is installed.The salt parameter is optional. However, crypt() creates a weak password without the salt. Make sure to specify a strong enough salt for better security.There are some constants that are used together with the crypt() function. The value of these constants are set by PHP when it is installed.Constants:On systems where this function supports multiple algorithms, the constants above are set to \"1\" if supported and \"0\" otherwise.Note: There is no decrypt function. The crypt() function uses a one-way algorithm.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": ""
            }
        },
        "echo()": {
            "title": "echo()",
            "url": "https://www.w3schools.com/php/func_string_echo.asp",
            "info": {
                "Definition and Usage": "The echo() function outputs one or more strings.Note: The echo() function is not actually a function, so you are not required to use parentheses with it.However, if you want to pass more than one parameter to echo(), using parentheses will generate a parse error.Tip: The echo() function is slightly faster than print().Tip: The echo() function also has a shortcut syntax. Prior to PHP 5.4.0, this syntax onlyworks with the short\\_open\\_tag configuration setting enabled.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Hello world!\";\n\r\necho $str;\n\r\n?>``````php\n<?php\n$str = \"Hello world!\";\necho $str;\necho \"<br>What a nice day!\";\n?>``````php\n<?php\n$str1=\"Hello world!\";\n$str2=\"What a nice day!\";\necho $str1 . \" \" . $str2;\n?>``````php\n<?php\n$age=array(\"Peter\"=>\"35\");\necho \"Peter is \" . $age['Peter'] . \" years old.\";\n?>``````php\n<?php\n\r\necho \"This text\n\r\nspans multiple\n\r\nlines.\";\n\r\n?>``````php\n<?php\n\r\necho 'This ','string ','was ','made ','with multiple parameters.';\n\r\n?>``````php\n<?php\n\r\n$color = \"red\";\n\r\necho \"Roses are $color\";\n\r\necho \"<br>\";\n\r\necho 'Roses are $color';\n\r\n?>``````php\n<?php\n\r\n$color = \"red\";\n\r\n?>\n\n\r\n<p>Roses are <?=$color?></p>```"
            }
        },
        "explode()": {
            "title": "explode()",
            "url": "https://www.w3schools.com/php/func_string_explode.asp",
            "info": {
                "Definition and Usage": "The explode() function breaks a string into an array.Note: The \"separator\" parameter cannot be an empty string.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = 'one,two,three,four';\n// zero limit\nprint_r(explode(',',$str,0));\n\n// positive limit\nprint_r(explode(',',$str,2));\n// negative limit \nprint_r(explode(',',$str,-1));\n?>```"
            }
        },
        "fprint()": {
            "title": "fprint()",
            "url": "https://www.w3schools.com/php/func_string_fprintf.asp",
            "info": {
                "Definition and Usage": "The fprintf() function writes a formatted string to a specified output stream (example: file or database).The arg1, arg2, ++ parameters will be inserted at percent (%) signs in the main string.This function works \"step-by-step\". At the first % sign, arg1 is inserted, at the second % sign, arg2 is inserted, etc.Note: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.Tip: Related functions: printf(),sprintf(),vprintf(),vsprintf() andvfprintf()",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$number = 123;\n\r\n$file = fopen(\"test.txt\",\"w\");\n\r\nfprintf($file,\"%f\",$number);\n\r\n?>``````php\n<?php\n\r\n$number = 123;\n\r\n$file = fopen(\"test.txt\",\"w\");\n\r\nfprintf($file,\"With 2 decimals: %1\\$.2f\n\r\n\\nWith no decimals: %1\\$u\",$number);\n\r\n ?>```"
            }
        },
        "get_html_translation_table()": {
            "title": "get_html_translation_table()",
            "url": "https://www.w3schools.com/php/func_string_get_html_translation_table.asp",
            "info": {
                "Definition and Usage": "The get\\_html\\_translation\\_table() function returns the translation table used by the htmlentities() andhtmlspecialchars() functions.Tip: Some characters can be encoded several ways. The get\\_html\\_translation\\_table() function returns the most common encoding.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nprint_r (get_html_translation_table(HTML_SPECIALCHARS));\n\r\n ?>``````php\n<?php\n\r\nprint_r (get_html_translation_table(HTML_ENTITIES));\n\r\n?>```"
            }
        },
        "hebrev()": {
            "title": "hebrev()",
            "url": "https://www.w3schools.com/php/func_string_hebrev.asp",
            "info": {
                "Definition and Usage": "The hebrev() function converts Hebrew text from a right-to-left flow to a left-to-right flow.Tip: hebrev() and hebrevc() can convert Hebrew logical text (the Windows encoding) to Hebrew visual text. Hebrew visual requires no special right-to-left character support to be displayed properly, making it very useful for displaying Hebrew text on the web.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u00e2\u009d\u00ae PHP String Reference"
            }
        },
        "hebrevc()": {
            "title": "hebrevc()",
            "url": "https://www.w3schools.com/php/func_string_hebrevc.asp",
            "info": {
                "Definition and Usage": "The hebrevc() function converts Hebrew text from a right-to-left flow to a left-to-right flow. It also converts new lines (\\n) into <br>.Tip: hebrevc() and hebrev() can convert Hebrew logical text (the Windows encoding) to Hebrew visual text. Hebrew visual requires no special right-to-left character support to be displayed properly, making it very useful for displaying Hebrew text on the web.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "\u276e PHP String Reference"
            }
        },
        "hex2bin()": {
            "title": "hex2bin()",
            "url": "https://www.w3schools.com/php/func_string_hex2bin.asp",
            "info": {
                "Definition and Usage": "The hex2bin() function converts a string of hexadecimal values to ASCII characters.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "html_entity_decode()": {
            "title": "html_entity_decode()",
            "url": "https://www.w3schools.com/php/func_string_html_entity_decode.asp",
            "info": {
                "Definition and Usage": "The html\\_entity\\_decode() function converts HTML entities to characters.The html\\_entity\\_decode() function is the opposite ofhtmlentities().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = \"Albert Einstein said: &#039;E=MC&sup2;&#039;\";\necho html_entity_decode($str, ENT_COMPAT); // Will only convert double quotes\necho \"<br>\";\necho html_entity_decode($str, ENT_QUOTES); // Converts double and single quotes\necho \"<br>\";\necho html_entity_decode($str, ENT_NOQUOTES); // Does not convert any quotes\n?>``````php\n<?php\n$str = \"My name is &Oslash;yvind &Aring;sane. I&#039;m Norwegian.\";\necho html_entity_decode($str, ENT_QUOTES, \"UTF-8\");\n?>```"
            }
        },
        "htmlentities()": {
            "title": "htmlentities()",
            "url": "https://www.w3schools.com/php/func_string_htmlentities.asp",
            "info": {
                "Definition and Usage": "The htmlentities() function converts characters to HTML entities.Tip: To convert HTML entities back to characters, use thehtml\\_entity\\_decode() function.Tip: Use the get\\_html\\_translation\\_table() function to return the translation table used by htmlentities(). ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n $str = \"Albert Einstein said: 'E=MC\u00c2\u00b2'\";\necho htmlentities($str, ENT_COMPAT); // Will only convert double quotes\necho \"<br>\";\necho htmlentities($str, ENT_QUOTES); // Converts double and single  quotes\necho \"<br>\";\necho htmlentities($str, ENT_NOQUOTES); // Does not convert any quotes\n?>``````php\n<?php\n$str = \"My name is \u00c3\u0098yvind \u00c3\u0085sane. I'm Norwegian.\";\necho  htmlentities($str, ENT_QUOTES, \"UTF-8\"); // Will only convert  double quotes (not single quotes), and uses the character-set Western  European\n?>```"
            }
        },
        "htmlspecialchars_decode()": {
            "title": "htmlspecialchars_decode()",
            "url": "https://www.w3schools.com/php/func_string_htmlspecialchars_decode.asp",
            "info": {
                "Definition and Usage": "The htmlspecialchars\\_decode() function converts some predefined HTML entities to characters.HTML entities that will be decoded are:The htmlspecialchars\\_decode() function is the opposite ofhtmlspecialchars().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Jane &amp; &#039;Tarzan&#039;\";\n\r\necho htmlspecialchars_decode($str, ENT_COMPAT); // Will only convert double quotes\n\r\necho \"<br>\";\n\r\necho htmlspecialchars_decode($str, ENT_QUOTES); // Converts double and single quotes\n\r\necho \"<br>\";\n\r\necho htmlspecialchars_decode($str, ENT_NOQUOTES); // Does not convert any quotes\n\r\n?>``````php\n<?php\n\r\n $str = 'I love &quot;PHP&quot;.';\necho htmlspecialchars_decode($str, ENT_QUOTES); // Converts double and single quotes\n\r\n ?>```"
            }
        },
        "htmlspecialchars()": {
            "title": "htmlspecialchars()",
            "url": "https://www.w3schools.com/php/func_string_htmlspecialchars.asp",
            "info": {
                "Definition and Usage": "The htmlspecialchars() function converts some predefined characters to HTML entities.The predefined characters are:Tip: To convert special HTML entities back to characters, use the htmlspecialchars\\_decode() function. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Jane & 'Tarzan'\";\n\r\necho htmlspecialchars($str, ENT_COMPAT); // Will only convert double quotes\n\r\necho \"<br>\";\n\r\necho htmlspecialchars($str, ENT_QUOTES); // Converts double and single quotes\n\r\necho \"<br>\";\n\r\necho htmlspecialchars($str, ENT_NOQUOTES); // Does not convert any quotes\n\r\n ?>``````php\n<?php\n\r\n $str = 'I love \"PHP\".';\necho htmlspecialchars($str, ENT_QUOTES); // Converts double and single quotes\n\r\n ?>```"
            }
        },
        "implode()": {
            "title": "implode()",
            "url": "https://www.w3schools.com/php/func_string_implode.asp",
            "info": {
                "Definition and Usage": "The implode() function returns a string from the elements of an array.Note: The implode() function accept its parameters in either order. However, for consistency with explode(), you should use the documented order of arguments.Note: The separator parameter of implode() is optional. However, it is recommended toalways use two parameters for backwards compatibility.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$arr = array('Hello','World!','Beautiful','Day!');\necho implode(\" \",$arr).\"<br>\";\necho implode(\"+\",$arr).\"<br>\";\necho implode(\"-\",$arr).\"<br>\";\r\n \necho implode(\"X\",$arr);\n?>```"
            }
        },
        "join()": {
            "title": "join()",
            "url": "https://www.w3schools.com/php/func_string_join.asp",
            "info": {
                "Definition and Usage": "The join() function returns a string from the elements of an array.The join() function is an alias of the implode() function.Note: The join() function accept its parameters in either order. However, for consistency with explode(), you should use the documented order of arguments.Note: The separator parameter of join() is optional. However, it is recommended to always use twoparameters for backwards compatibility.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$arr = array('Hello','World!','Beautiful','Day!');\necho join(\" \",$arr).\"<br>\";\necho join(\"+\",$arr).\"<br>\";\necho join(\"-\",$arr).\"<br>\";\r\n \necho join(\"X\",$arr);\n?>```"
            }
        },
        "lcfirst()": {
            "title": "lcfirst()",
            "url": "https://www.w3schools.com/php/func_string_lcfirst.asp",
            "info": {
                "Definition and Usage": "The lcfirst() function converts the first character of a string to lowercase.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "levenshtein()": {
            "title": "levenshtein()",
            "url": "https://www.w3schools.com/php/func_string_levenshtein.asp",
            "info": {
                "Definition and Usage": "The levenshtein() function returns the Levenshtein distance between two strings.The Levenshtein distance is the number of characters you have to replace, insert or delete to transform string1 into string2.By default, PHP gives each operation (replace, insert, and delete) equal weight. However, you can define the cost of each operation by setting the optional insert, replace, and delete parameters.Note: The levenshtein() function is not case-sensitive.Note: The levenshtein() function is faster than the similar\\_text() function. However, similar\\_text() will give you a more accurate result with less modifications needed.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "localeconv()": {
            "title": "localeconv()",
            "url": "https://www.w3schools.com/php/func_string_localeconv.asp",
            "info": {
                "Definition and Usage": "The localeconv() function returns an array containing local numeric and monetary formatting information.The localeconv() function will return the following array elements:Tip: To define locale settings, see the setlocale() function.Tip: To view all available language codes, go to our Language code reference.",
                "Syntax": "",
                "Technical Details": ""
            }
        },
        "ltrim()": {
            "title": "ltrim()",
            "url": "https://www.w3schools.com/php/func_string_ltrim.asp",
            "info": {
                "Definition and Usage": "The ltrim() function removes whitespace or other predefined characters from the left side of a string.Related functions: ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"    Hello World!\";\n\r\necho \"Without ltrim: \" . $str;\n\r\necho \"<br>\";\n\r\necho \"With ltrim: \" . ltrim($str);\n\r\n?>``````php\n<?php\n\r\n$str = \"\\n\\n\\nHello World!\";\n\r\necho \"Without ltrim: \" . $str;\n\r\necho \"<br>\";\n\r\necho \"With ltrim: \" . ltrim($str);\n\r\n?>```"
            }
        },
        "md5()": {
            "title": "md5()",
            "url": "https://www.w3schools.com/php/func_string_md5.asp",
            "info": {
                "Definition and Usage": "The md5() function calculates the MD5 hash of a string.The md5() function uses the RSA Data Security, Inc. MD5 Message-Digest Algorithm.From RFC 1321 - The MD5 Message-Digest Algorithm: \"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit \"fingerprint\" or \"message digest\" of the input. The MD5 algorithm is intended for digital signature applications, where a large file must be \"compressed\" in a secure manner before being encrypted with a private (secret) key under a public-key cryptosystem such as RSA.\"To calculate the MD5 hash of a file, use the md5\\_file() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php \n$str = \"Hello\"; \necho \"The string: \".$str.\"<br>\"; \necho \"TRUE - Raw 16 character binary format: \".md5($str, TRUE).\"<br>\"; \necho \"FALSE - 32 character hex number: \".md5($str).\"<br>\"; \n?>``````php\n<?php\n$str = \"Hello\";\necho md5($str);\nif (md5($str) == \"8b1a9953c4611296a827abf8c47804d7\")\n  {\n  echo \"<br>Hello world!\";\n  exit;\n  }\n?>```"
            }
        },
        "md5_file()": {
            "title": "md5_file()",
            "url": "https://www.w3schools.com/php/func_string_md5_file.asp",
            "info": {
                "Definition and Usage": "The md5\\_file() function calculates the MD5 hash of a file.The md5\\_file() function uses the RSA Data Security, Inc. MD5 Message-Digest Algorithm.From RFC 1321 - The MD5 Message-Digest Algorithm: \"The MD5 message-digest algorithm takes as input a message of arbitrary length and produces as output a 128-bit \"fingerprint\" or \"message digest\" of the input. The MD5 algorithm is intended for digital signature applications, where a large file must be \"compressed\" in a secure manner before being encrypted with a private (secret) key under a public-key cryptosystem such as RSA.\"To calculate the MD5 hash of a string, use the md5() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$md5file = md5_file(\"test.txt\");\n\r\nfile_put_contents(\"md5file.txt\",$md5file);\n\r\n?>```"
            }
        },
        "metaphone()": {
            "title": "metaphone()",
            "url": "https://www.w3schools.com/php/func_string_metaphone.asp",
            "info": {
                "Definition and Usage": "The metaphone() function calculates the metaphone key of a string.A metaphone key represents how a string sounds if said by an English speaking person.The metaphone() function can be used for spelling applications.Note: The metaphone() function creates the same key for similar sounding words.Note: The generated metaphone keys vary in length.Tip: metaphone() is more accurate than the soundex() function, because metaphone() knows the basic rules of English pronunciation. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Assistance\";\n\r\n$str2 = \"Assistants\";\n\n\r\necho metaphone($str);\n\r\necho \"<br>\";\n\r\necho metaphone($str2);\n\r\n?>``````php\n<?php\n\r\n$str = \"Assistance\";\n\r\n$str2 = \"Assistants\";\n\n\r\necho metaphone($str,5);\n\r\necho \"<br>\";\n\r\necho metaphone($str2,5);\n\r\n?>```"
            }
        },
        "money_format()": {
            "title": "money_format()",
            "url": "https://www.w3schools.com/php/func_string_money_format.asp",
            "info": {
                "Definition and Usage": "The money\\_format() function returns a string formatted as a currency string.This function inserts a formatted number where there is a percent (%) sign in the main string.Note: The money\\_format() function does not work on Windows platforms.Tip: This function is often used together with thesetlocale() function.Tip: To view all available language codes, go to our Language code reference.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$number = 1234.56;\n\r\nsetlocale(LC_MONETARY,\"de_DE\");\n\r\necho money_format(\"%.2n\", $number);\n\r\n?>``````php\n<?php\n\r\n$number = -1234.5672;\n\r\necho money_format(\"%=*(#10.2n\",$number);\n\r\n?>```"
            }
        },
        "nl_langinfo()": {
            "title": "nl_langinfo()",
            "url": "https://www.w3schools.com/php/func_string_nl_langinfo.asp",
            "info": {
                "Definition and Usage": "The nl\\_langinfo() function returns specific local information.Note: This function does not work on Windows platforms.Tip: Unlike the localeconv() function, which returns all local formatting information, the nl\\_langinfo() function returns specific information.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "nl2br()": {
            "title": "nl2br()",
            "url": "https://www.w3schools.com/php/func_string_nl2br.asp",
            "info": {
                "Definition and Usage": "The nl2br() function inserts HTML line breaks (<br> or <br />) in front of each newline (\\n) in a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho nl2br(\"One line.\\nAnother line.\",false);\n\r\n?>```"
            }
        },
        "number_format()": {
            "title": "number_format()",
            "url": "https://www.w3schools.com/php/func_string_number_format.asp",
            "info": {
                "Definition and Usage": "The number\\_format() function formats a number with grouped thousands.Note: This function supports one, two, or four parameters (not three).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$num = 1999.9;\n$formattedNum = number_format($num).\"<br>\";\n\r\n echo $formattedNum;\n$formattedNum = number_format($num, 2);\necho $formattedNum;\n?>```"
            }
        },
        "ord()": {
            "title": "ord()",
            "url": "https://www.w3schools.com/php/func_string_ord.asp",
            "info": {
                "Definition and Usage": "The ord() function returns the ASCII value of the first character of a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "parse_str()": {
            "title": "parse_str()",
            "url": "https://www.w3schools.com/php/func_string_parse_str.asp",
            "info": {
                "Definition and Usage": "The parse\\_str() function parses a query string into variables.Note: The magic\\_quotes\\_gpc setting in the php.ini file affects the output of this function. If enabled, the variables are converted by addslashes() before parsed by parse\\_str().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nparse_str(\"name=Peter&age=43\",$myArray);\n\r\nprint_r($myArray);\n\r\n?>```"
            }
        },
        "print()": {
            "title": "print()",
            "url": "https://www.w3schools.com/php/func_string_print.asp",
            "info": {
                "Definition and Usage": "The print() function outputs one or more strings.Note: The print() function is not actually a function, so you are not required to use parentheses with it.Tip: The print() function is slightly slower than echo().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Hello world!\";\n\r\n print $str;\n\r\n?>``````php\n<?php\n$str = \"Hello world!\";\nprint $str;\nprint \"<br>What a nice day!\";\n?>``````php\n<?php\n$str1=\"Hello world!\";\n$str2=\"What a nice day!\";\n\r\nprint $str1 . \" \" . $str2;\n?>``````php\n<?php\n$age=array(\"Peter\"=>\"35\");\nprint \"Peter is \" . $age['Peter'] . \" years old.\";\n?>``````php\n<?php\n\r\n print \"This text\n\r\nspans multiple\n\r\nlines.\";\n\r\n?>``````php\n<?php\n\r\n$color = \"red\";\n\r\n print \"Roses are $color\";\n\r\n print \"<br>\";\n\r\n print 'Roses are $color';\n\r\n?>```"
            }
        },
        "printf()": {
            "title": "printf()",
            "url": "https://www.w3schools.com/php/func_string_printf.asp",
            "info": {
                "Definition and Usage": "The printf() function outputs a formatted string.The arg1, arg2, ++ parameters will be inserted at percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, arg1 is inserted, at the second % sign, arg2 is inserted, etc.Note: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.Tip: Related functions: sprintf(),vprintf(),vsprintf(),fprintf() andvfprintf()",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$number = 123;\n\r\nprintf(\"%f\",$number);\n\r\n?>``````php\n<?php\n\r\n$number = 123;\n\r\nprintf(\"With 2 decimals: %1\\$.2f\n\r\n<br>With no decimals: %1\\$u\",$number);\n\r\n?>``````php\n<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\nprintf(\"[%s]<br>\",$str1);\n\r\nprintf(\"[%8s]<br>\",$str1);\nprintf(\"[%-8s]<br>\",$str1);\nprintf(\"[%08s]<br>\",$str1); \nprintf(\"[%'*8s]<br>\",$str1);\nprintf(\"[%8.8s]<br>\",$str2);\r\n \n?>```"
            }
        },
        "quoted_printable_decode()": {
            "title": "quoted_printable_decode()",
            "url": "https://www.w3schools.com/php/func_string_quoted_printable_decode.asp",
            "info": {
                "Definition and Usage": "The quoted\\_printable\\_decode() function decodes a quoted-printable string to an 8-bit ASCII string.Tip: Data encoded in quoted-printable are unlikely to be modified by mail transport. A text which is entirely US-ASCII may be encoded in quoted-printable to ensure the integrity of the data should the message pass through a character-translating, or line-wrapping gateway.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "quoted_printable_encode()": {
            "title": "quoted_printable_encode()",
            "url": "https://www.w3schools.com/php/func_string_quoted_printable_encode.asp",
            "info": {
                "Definition and Usage": "The quoted\\_printable\\_encode() function converts an 8-bit string to a quoted-printable string.Tip: Data encoded in quoted-printable are unlikely to be modified by mail transport. A text which is entirely US-ASCII may be encoded in quoted-printable to ensure the integrity of the data should the message pass through a character-translating, or line-wrapping gateway.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "quotemeta()": {
            "title": "quotemeta()",
            "url": "https://www.w3schools.com/php/func_string_quotemeta.asp",
            "info": {
                "Definition and Usage": "The quotemeta() function adds backslashes in front of some predefined characters in a string.The predefined characters are:Tip: This function can be used to escape characters with special meanings, such as ( ), [ ], and \\* in SQL.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str1 = \"1 + 1 = 2\";\n$str2 = \"1 * 1 = 1\";\n$str3 = \"Could you borrow me 5$?\";\n$str4 = \"Are you not entertained? (I am..)\";\n$str5 = \"The caret [ ^ ] Looks like a hat!\";\necho quotemeta($str1).\"<br>\";\n\r\necho quotemeta($str2).\"<br>\";\necho quotemeta($str3).\"<br>\";\necho quotemeta($str4).\"<br>\";\necho quotemeta($str5).\"<br>\";\n?>```"
            }
        },
        "rtrim()": {
            "title": "rtrim()",
            "url": "https://www.w3schools.com/php/func_string_rtrim.asp",
            "info": {
                "Definition and Usage": "The rtrim() function removes whitespace or other predefined characters from the right side of a string.Related functions: ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Hello World!    \";\n\r\necho \"Without rtrim: \" . $str;\n\r\necho \"<br>\";\n\r\necho \"With rtrim: \" . rtrim($str);\n\r\n?>``````php\n<?php\n\r\n$str = \"Hello World!\\n\\n\\n\";\n\r\necho \"Without rtrim: \" . $str;\n\r\necho \"<br>\";\n\r\necho \"With rtrim: \" . rtrim($str);\n\r\n?>```"
            }
        },
        "setlocale()": {
            "title": "setlocale()",
            "url": "https://www.w3schools.com/php/func_string_setlocale.asp",
            "info": {
                "Definition and Usage": "The setlocale() function sets locale information.Locale information is language, monetary, time and other information specific for a geographical area.Note: The setlocale() function changes the locale only for the current script.Tip: The locale information can be set to system default with setlocale(LC\\_ALL,NULL)Tip: To get numeric formatting information, see thelocaleconv() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "sha1()": {
            "title": "sha1()",
            "url": "https://www.w3schools.com/php/func_string_sha1.asp",
            "info": {
                "Definition and Usage": "The sha1() function calculates the SHA-1 hash of a string.The sha1() function uses the US Secure Hash Algorithm 1.From RFC 3174 - The US Secure Hash Algorithm 1: \"SHA-1 produces a 160-bit output called a message digest. The message digest can then, for example, be input to a signature algorithm which generates or verifies the signature for the message. Signing the message digest rather than the message often improves the efficiency of the process because the message digest is usually much smaller in size than the message. The same hash algorithm must be used by the verifier of a digital signature as was used by the creator of the digital signature.\"Tip: To calculate the SHA-1 hash of a file, use thesha1\\_file() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php \n$str = \"Hello\"; \necho \"The string: \".$str.\"<br>\"; \necho \"TRUE - Raw 20 character binary format: \".sha1($str, TRUE).\"<br>\"; \necho \"FALSE - 40 character hex number: \".sha1($str).\"<br>\"; \n?>``````php\n<?php\n$str = \"Hello\";\necho sha1($str);\nif (sha1($str) == \"f7ff9e8b7bb2e09b70935a5d785e0cc5d9d0abf0\")\n  {\n  echo \"<br>Hello world!\";\n  exit;\n  }\n?>```"
            }
        },
        "sha1_file()": {
            "title": "sha1_file()",
            "url": "https://www.w3schools.com/php/func_string_sha1_file.asp",
            "info": {
                "Definition and Usage": "The sha1\\_file() function calculates the SHA-1 hash of a file.The sha1\\_file() function uses the US Secure Hash Algorithm 1.From RFC 3174 - The US Secure Hash Algorithm 1: \"SHA-1 produces a 160-bit output called a message digest. The message digest can then, for example, be input to a signature algorithm which generates or verifies the signature for the message. Signing the message digest rather than the message often improves the efficiency of the process because the message digest is usually much smaller in size than the message. The same hash algorithm must be used by the verifier of a digital signature as was used by the creator of the digital signature.\"This function returns the calculated SHA-1 hash on success, or FALSE on failure.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$sha1file = sha1_file(\"test.txt\");\n\r\nfile_put_contents(\"sha1file.txt\",$sha1file);\n\r\n?>```"
            }
        },
        "similar_text()": {
            "title": "similar_text()",
            "url": "https://www.w3schools.com/php/func_string_similar_text.asp",
            "info": {
                "Definition and Usage": "The similar\\_text() function calculates the similarity between two strings.It can also calculate the similarity of the two strings in percent.Note: The levenshtein() function is faster than the similar\\_text() function. However, the similar\\_text() function will give you a more accurate result with less modifications needed.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nsimilar_text(\"Hello World\",\"Hello Peter\",$percent);\n\r\necho $percent;\n\r\n?>```"
            }
        },
        "soundex()": {
            "title": "soundex()",
            "url": "https://www.w3schools.com/php/func_string_soundex.asp",
            "info": {
                "Definition and Usage": "The soundex() function calculates the soundex key of a string.A soundex key is a four character long alphanumeric string that represent English pronunciation of a word.The soundex() function can be used for spelling applications.Note: The soundex() function creates the same key for similar sounding words.Tip: metaphone() is more accurate than soundex(), because metaphone() knows the basic rules of English pronunciation. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Assistance\";\n\r\n$str2 = \"Assistants\";\n\n\r\necho soundex($str);\n\r\necho \"<br>\";\n\r\necho soundex($str2);\n\r\n?>```"
            }
        },
        "sprintf()": {
            "title": "sprintf()",
            "url": "https://www.w3schools.com/php/func_string_sprintf.asp",
            "info": {
                "Definition and Usage": "The sprintf() function writes a formatted string to a variable.The arg1, arg2, ++ parameters will be inserted at percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, arg1 is inserted, at the second % sign, arg2 is inserted, etc.Note: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.Tip: Related functions: printf(),vprintf(),vsprintf(),fprintf() andvfprintf()",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$number = 123;\n\r\n$txt = sprintf(\"%f\",$number);\n\r\necho $txt;\n\r\n?>``````php\n<?php\n\r\n$number = 123;\n\r\n$txt = sprintf(\"With 2 decimals: %1\\$.2f\n\r\n<br>With no decimals: %1\\$u\",$number);\n\r\necho $txt;\n\r\n?>``````php\n<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\necho sprintf(\"[%s]\",$str1).\"<br>\";\n\r\n echo sprintf(\"[%8s]\",$str1).\"<br>\";\necho sprintf(\"[%-8s]\",$str1).\"<br>\";\n\r\n echo sprintf(\"[%08s]\",$str1).\"<br>\"; \n\r\n echo sprintf(\"[%'*8s]\",$str1).\"<br>\";\necho sprintf(\"[%8.8s]\",$str2).\"<br>\"; \n?>```"
            }
        },
        "sscanf()": {
            "title": "sscanf()",
            "url": "https://www.w3schools.com/php/func_string_sscanf.asp",
            "info": {
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$str = \"If you divide 4 by 2 you'll get 2\";\n$format = sscanf($str,\"%s %s %s %d %s %d %s %s %c\");\nprint_r($format);\n?>```"
            }
        },
        "str_getcsv()": {
            "title": "str_getcsv()",
            "url": "https://www.w3schools.com/php/func_string_str_getcsv.asp",
            "info": {
                "Definition and Usage": "The str\\_getcsv() function parses a string for fields in CSV format and returns an array containing the fields read.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "str_ireplace()": {
            "title": "str_ireplace()",
            "url": "https://www.w3schools.com/php/func_string_str_ireplace.asp",
            "info": {
                "Definition and Usage": "The str\\_ireplace() function replaces some characters with some other characters in a string.This function works by the following rules:Note: This function is case-insensitive. Use thestr\\_replace() function to perform a case-sensitive search.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$arr = array(\"blue\",\"red\",\"green\",\"yellow\");\n\r\nprint_r(str_ireplace(\"RED\",\"pink\",$arr,$i)); // This function is case-insensitive\n\r\necho \"Replacements: $i\";\n\r\n?>``````php\n<?php\n\r\n$find = array(\"HELLO\",\"WORLD\");\n\r\n$replace = array(\"B\");\n\r\n$arr = array(\"Hello\",\"world\",\"!\");\n\r\nprint_r(str_ireplace($find,$replace,$arr));\n\r\n?>```"
            }
        },
        "str_pad()": {
            "title": "str_pad()",
            "url": "https://www.w3schools.com/php/func_string_str_pad.asp",
            "info": {
                "Definition and Usage": "The str\\_pad() function pads a string to a new length.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"Hello World\";\n\r\necho str_pad($str,20,\".\",STR_PAD_LEFT);\n\r\n?>``````php\n<?php\n\r\n$str = \"Hello World\";\n\r\necho str_pad($str,20,\".:\",STR_PAD_BOTH);\n\r\n?>```"
            }
        },
        "str_repeat()": {
            "title": "str_repeat()",
            "url": "https://www.w3schools.com/php/func_string_str_repeat.asp",
            "info": {
                "Definition and Usage": "The str\\_repeat() function repeats a string a specified number of times.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "str_replace()": {
            "title": "str_replace()",
            "url": "https://www.w3schools.com/php/func_string_str_replace.asp",
            "info": {
                "Definition and Usage": "The str\\_replace() function replaces some characters with some other characters in a string.This function works by the following rules:Note: This function is case-sensitive. Use the str\\_ireplace() function to perform a case-insensitive search.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$arr = array(\"blue\",\"red\",\"green\",\"yellow\");\n\r\nprint_r(str_replace(\"red\",\"pink\",$arr,$i));\n\r\necho \"Replacements: $i\";\n\r\n?>``````php\n<?php\n\r\n$find = array(\"Hello\",\"world\");\n\r\n$replace = array(\"B\");\n\r\n$arr = array(\"Hello\",\"world\",\"!\");\n\r\nprint_r(str_replace($find,$replace,$arr));\n\r\n?>```"
            }
        },
        "str_rot13()": {
            "title": "str_rot13()",
            "url": "https://www.w3schools.com/php/func_string_str_rot13.asp",
            "info": {
                "Definition and Usage": "The str\\_rot13() function performs the ROT13 encoding on a string.The ROT13 encoding shifts every letter 13 places in the alphabet. Numeric and non-alphabetical characters remains untouched.Tip: Encoding and decoding are done by the same function. If you pass an encoded string as argument, the original string will be returned.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "str_shuffle()": {
            "title": "str_shuffle()",
            "url": "https://www.w3schools.com/php/func_string_str_shuffle.asp",
            "info": {
                "Definition and Usage": "The str\\_shuffle() function randomly shuffles all the characters of a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "str_split()": {
            "title": "str_split()",
            "url": "https://www.w3schools.com/php/func_string_str_split.asp",
            "info": {
                "Definition and Usage": "The str\\_split() function splits a string into an array.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nprint_r(str_split(\"Hello\",3));\n\r\n?>```"
            }
        },
        "str_word_count()": {
            "title": "str_word_count()",
            "url": "https://www.w3schools.com/php/func_string_str_word_count.asp",
            "info": {
                "Definition and Usage": "The str\\_word\\_count() function counts the number of words in a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\nprint_r(str_word_count(\"Hello world!\",1));\n\r\n?>``````php\n<?php\n\r\nprint_r(str_word_count(\"Hello world!\",2));\n\r\n?>``````php\n<?php\n\r\nprint_r(str_word_count(\"Hello world & good morning!\",1));\n\r\nprint_r(str_word_count(\"Hello world & good morning!\",1,\"&\"));\n\r\n?>```"
            }
        },
        "strcasecmp()": {
            "title": "strcasecmp()",
            "url": "https://www.w3schools.com/php/func_string_strcasecmp.asp",
            "info": {
                "Definition and Usage": "The strcasecmp() function compares two strings.Tip: The strcasecmp() function is binary-safe and case-insensitive.Tip: This function is similar to thestrncasecmp() function, with the difference that you can specify the number of characters from each string to be used in the comparison with strncasecmp(). ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strcasecmp(\"Hello\",\"HELLO\");\necho \"<br>\";\necho strcasecmp(\"Hello\",\"hELLo\");\n\r\n?>``````php\n<?php\n\r\n echo strcasecmp(\"Hello world!\",\"HELLO WORLD!\"); // The two strings are equal\n\r\n echo strcasecmp(\"Hello world!\",\"HELLO\"); // String1 is greater than string2\n\r\n echo strcasecmp(\"Hello world!\",\"HELLO WORLD! HELLO!\"); // String1 is less than string2 \n\r\n?>```"
            }
        },
        "strchr()": {
            "title": "strchr()",
            "url": "https://www.w3schools.com/php/func_string_strchr.asp",
            "info": {
                "Definition and Usage": "The strchr() function searches for the first occurrence of a string inside another string.This function is an alias of the strstr() function.Note: This function is binary-safe.Note: This function is case-sensitive. For a case-insensitive search, use stristr() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strchr(\"Hello world!\",111);\n\r\n?>``````php\n<?php\n\r\necho strchr(\"Hello world!\",\"world\",true);\n\r\n?>```\u276e PHP String Reference"
            }
        },
        "strcmp()": {
            "title": "strcmp()",
            "url": "https://www.w3schools.com/php/func_string_strcmp.asp",
            "info": {
                "Definition and Usage": "The strcmp() function compares two strings.Note: The strcmp() function is binary-safe and case-sensitive.Tip: This function is similar to thestrncmp() function, with the difference that you can specify the number of characters from each string to be used in the comparison with strncmp().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\necho strcmp(\"Hello\",\"Hello\");\necho \"<br>\";\necho strcmp(\"Hello\",\"hELLo\");\n\r\n?>``````php\n<?php\n\r\n echo strcmp(\"Hello world!\",\"Hello world!\"); // the two strings are equal\n\r\n echo strcmp(\"Hello world!\",\"Hello\"); // string1 is greater than string2\n\r\n echo strcmp(\"Hello world!\",\"Hello world! Hello!\"); // string1 is less than string2 \n\r\n?>```"
            }
        },
        "strcoll()": {
            "title": "strcoll()",
            "url": "https://www.w3schools.com/php/func_string_strcoll.asp",
            "info": {
                "Definition and Usage": "The strcoll() function compares two strings.The comparison of the strings may vary depending on the locale settings (A<a or A>a).Note: The strcoll() is case-sensitive but not binary-safe.Note: If the current locale is C or POSIX, this function works the same way as strcmp().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strcspn()": {
            "title": "strcspn()",
            "url": "https://www.w3schools.com/php/func_string_strcspn.asp",
            "info": {
                "Definition and Usage": "The strcspn() function returns the number of characters (including whitespaces) found in a string before any part of the specified characters are found.Tip: Use the strspn() function to the number of characters found in the string that contains only characters from a specified character list.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strcspn(\"Hello world!\",\"w\",0,6); // The start position is 0 and the length of the search string is 6.\n\r\n?>```"
            }
        },
        "strip_tags()": {
            "title": "strip_tags()",
            "url": "https://www.w3schools.com/php/func_string_strip_tags.asp",
            "info": {
                "Definition and Usage": "The strip\\_tags() function strips a string from HTML, XML, and PHP tags.Note: HTML comments are always stripped. This cannot be changed with the allow parameter.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strip_tags(\"Hello <b><i>world!</i></b>\",\"<b>\");\n\r\n?>```"
            }
        },
        "stripcslashes()": {
            "title": "stripcslashes()",
            "url": "https://www.w3schools.com/php/func_string_stripcslashes.asp",
            "info": {
                "Definition and Usage": "The stripcslashes() function removes backslashes added by the addcslashes() function.Tip: This function can be used to clean up data retrieved from a database or from an HTML form.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "stripslashes()": {
            "title": "stripslashes()",
            "url": "https://www.w3schools.com/php/func_string_stripslashes.asp",
            "info": {
                "Definition and Usage": "The stripslashes() function removes backslashes added by the addslashes() function.Tip: This function can be used to clean up data retrieved from a database or from an HTML form.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "stripos()": {
            "title": "stripos()",
            "url": "https://www.w3schools.com/php/func_string_stripos.asp",
            "info": {
                "Definition and Usage": "The stripos() function finds the position of the first occurrence of a string inside another string.Note: The stripos() function is case-insensitive.Note: This function is binary-safe.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "stristr()": {
            "title": "stristr()",
            "url": "https://www.w3schools.com/php/func_string_stristr.asp",
            "info": {
                "Definition and Usage": "The stristr() function searches for the first occurrence of a string inside another string.Note: This function is binary-safe.Note: This function is case-insensitive. For a case-sensitive search, use strstr() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho stristr(\"Hello world!\",111);\n\r\n?>``````php\n<?php\n\r\necho stristr(\"Hello world!\",\"WORLD\",true);\n\r\n?>```"
            }
        },
        "strlen()": {
            "title": "strlen()",
            "url": "https://www.w3schools.com/php/func_string_strlen.asp",
            "info": {
                "Definition and Usage": "The strlen() function returns the length of a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strlen(\"Hello world!\");\n\r\n?>```"
            }
        },
        "strnatcasecmp()": {
            "title": "strnatcasecmp()",
            "url": "https://www.w3schools.com/php/func_string_strnatcasecmp.asp",
            "info": {
                "Definition and Usage": "The strnatcasecmp() function compares two strings using a \"natural\" algorithm.In a natural algorithm, the number 2 is less than the number 10. In  computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.Note: The strnatcasecmp() is case-insensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$arr1 = $arr2 = array(\"pic1\",\"pic2\",\"pic10\",\"pic01\",\"pic100\",\"pic20\",\"pic30\",\"pic200\");\n\r\n echo \"Standard string comparison\".\"<br>\";\nusort($arr1,\"strcmp\");\n\r\n print_r($arr1);\necho \"<br>\";\necho \"Natural order string comparison\".\"<br>\";\nusort($arr2,\"strnatcmp\");\nprint_r($arr2);\n\r\n?>```"
            }
        },
        "strnatcmp()": {
            "title": "strnatcmp()",
            "url": "https://www.w3schools.com/php/func_string_strnatcmp.asp",
            "info": {
                "Definition and Usage": "The strnatcmp() function compares two strings using a \"natural\" algorithm.In a natural algorithm, the number 2 is less than the number 10. In  computer sorting, 10 is less than 2, because the first number in \"10\" is less than 2.Note: This function is case-sensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$arr1 = $arr2 = array(\"pic1\",\"pic2\",\"pic10\",\"pic01\",\"pic100\",\"pic20\",\"pic30\",\"pic200\");\n\r\n echo \"Standard string comparison\".\"<br>\";\nusort($arr1,\"strcmp\");\n\r\n print_r($arr1);\necho \"<br>\";\necho \"Natural order string comparison\".\"<br>\";\nusort($arr2,\"strnatcmp\");\nprint_r($arr2);\n\r\n?>```"
            }
        },
        "strncasecmp()": {
            "title": "strncasecmp()",
            "url": "https://www.w3schools.com/php/func_string_strncasecmp.asp",
            "info": {
                "Definition and Usage": "The strncasecmp() function compares two strings.Note: The strncasecmp() is binary-safe and case-insensitive.Tip: This function is similar to thestrcasecmp() function, except that strcasecmp() does not have the length parameter. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\necho strncasecmp(\"Hello\",\"Hello\",6);\necho \"<br>\";\necho strncasecmp(\"Hello\",\"hELLo\",6);\n\r\n?>```"
            }
        },
        "strncmp()": {
            "title": "strncmp()",
            "url": "https://www.w3schools.com/php/func_string_strncmp.asp",
            "info": {
                "Definition and Usage": "The strncmp() function compares two strings.Note: The strncmp() is binary-safe and case-sensitive.Tip: This function is similar to thestrcmp() function, except that strcmp() does not have the length parameter. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\necho strncmp(\"Hello\",\"Hello\",6);\necho \"<br>\";\necho strncmp(\"Hello\",\"hELLo\",6);\n\r\n?>```"
            }
        },
        "strpbrk()": {
            "title": "strpbrk()",
            "url": "https://www.w3schools.com/php/func_string_strpbrk.asp",
            "info": {
                "Definition and Usage": "The strpbrk() function searches a string for any of the specified characters.Note: This function is case-sensitive.This function returns the rest of the string from where it found the first occurrence of a specified character, otherwise it returns FALSE.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n echo strpbrk(\"Hello world!\",\"W\");\necho \"<br>\";\necho strpbrk(\"Hello world!\",\"w\");\n\r\n?>```"
            }
        },
        "strpos()": {
            "title": "strpos()",
            "url": "https://www.w3schools.com/php/func_string_strpos.asp",
            "info": {
                "Definition and Usage": "The strpos() function finds the position of the first occurrence of a string inside another string.Note: The strpos() function is case-sensitive.Note: This function is binary-safe.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strrchr()": {
            "title": "strrchr()",
            "url": "https://www.w3schools.com/php/func_string_strrchr.asp",
            "info": {
                "Definition and Usage": "The strrchr() function finds the position of the last occurrence of a string within another string, and returns all characters from this position to the end of the string.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strrchr(\"Hello world! What a beautiful day!\", \"What\");\n\r\n?>``````php\n<?php\n\r\necho strrchr(\"Hello world!\",101);\n\r\n?>```"
            }
        },
        "strrev()": {
            "title": "strrev()",
            "url": "https://www.w3schools.com/php/func_string_strrev.asp",
            "info": {
                "Definition and Usage": "The strrev() function reverses a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strripos()": {
            "title": "strripos()",
            "url": "https://www.w3schools.com/php/func_string_strripos.asp",
            "info": {
                "Definition and Usage": "The strripos() function finds the position of the last occurrence of a string inside another string.Note: The strripos() function is case-insensitive.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strrpos()": {
            "title": "strrpos()",
            "url": "https://www.w3schools.com/php/func_string_strrpos.asp",
            "info": {
                "Definition and Usage": "The strrpos() function finds the position of the last occurrence of a string inside another string.Note: The strrpos() function is case-sensitive.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strspn()": {
            "title": "strspn()",
            "url": "https://www.w3schools.com/php/func_string_strspn.asp",
            "info": {
                "Definition and Usage": "The strspn() function returns the number of characters found in the string that contains only characters from the charlist parameter.Tip: Use the strcspn() function to return the number of characters found in a string before any part of the specified characters are found.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strspn(\"abcdefand\",\"abc\");\n\r\n?>```"
            }
        },
        "strstr()": {
            "title": "strstr()",
            "url": "https://www.w3schools.com/php/func_string_strstr.asp",
            "info": {
                "Definition and Usage": "The strstr() function searches for the first occurrence of a string inside another string.Note: This function is binary-safe.Note: This function is case-sensitive. For a case-insensitive search, use stristr() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho strstr(\"Hello world!\",111);\n\r\n?>``````php\n<?php\n\r\necho strstr(\"Hello world!\",\"world\",true);\n\r\n?>```"
            }
        },
        "strtok()": {
            "title": "strtok()",
            "url": "https://www.w3schools.com/php/func_string_strtok.asp",
            "info": {
                "Definition and Usage": "The strtok() function splits a string into smaller strings (tokens).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strtolower()": {
            "title": "strtolower()",
            "url": "https://www.w3schools.com/php/func_string_strtolower.asp",
            "info": {
                "Definition and Usage": "The strtolower() function converts a string to lowercase.Note: This function is binary-safe.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strtoupper()": {
            "title": "strtoupper()",
            "url": "https://www.w3schools.com/php/func_string_strtoupper.asp",
            "info": {
                "Definition and Usage": "The strtoupper() function converts a string to uppercase.Note: This function is binary-safe.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strtr()": {
            "title": "strtr()",
            "url": "https://www.w3schools.com/php/func_string_strtr.asp",
            "info": {
                "Definition and Usage": "The strtr() function translates certain characters in a string.Note: If the from and to parameters are different in length, both will be formatted to the length of the shortest.",
                "Syntax": "or",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$arr = array(\"Hello\" => \"Hi\", \"world\" => \"earth\");\n\r\necho strtr(\"Hello world\",$arr);\n\r\n?>```"
            }
        },
        "substr()": {
            "title": "substr()",
            "url": "https://www.w3schools.com/php/func_string_substr.asp",
            "info": {
                "Definition and Usage": "The substr() function returns a part of a string.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\necho substr(\"Hello world\",10).\"<br>\";\necho substr(\"Hello world\",1).\"<br>\";\necho substr(\"Hello world\",3).\"<br>\";\necho substr(\"Hello world\",7).\"<br>\";\necho substr(\"Hello world\",-1).\"<br>\";\necho substr(\"Hello world\",-10).\"<br>\";\necho substr(\"Hello world\",-8).\"<br>\";\n\r\n echo substr(\"Hello world\",-4).\"<br>\";\n?>``````php\n<?php\necho substr(\"Hello world\",0,10).\"<br>\";\necho substr(\"Hello world\",1,8).\"<br>\";\necho substr(\"Hello world\",0,5).\"<br>\";\necho substr(\"Hello world\",6,6).\"<br>\";\necho substr(\"Hello world\",0,-1).\"<br>\";\necho substr(\"Hello world\",-10,-2).\"<br>\";\necho substr(\"Hello world\",0,-6).\"<br>\";\n?>```"
            }
        },
        "substr_compare()": {
            "title": "substr_compare()",
            "url": "https://www.w3schools.com/php/func_string_substr_compare.asp",
            "info": {
                "Definition and Usage": "The substr\\_compare() function compares two strings from a specified start position.Tip: This function is binary-safe and optionally case-sensitive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho substr_compare(\"Hello world\",\"world\",6);\n\r\n?>``````php\n<?php\necho substr_compare(\"world\",\"or\",1,2); \necho substr_compare(\"world\",\"ld\",-2,2);\r\n \necho substr_compare(\"world\",\"orl\",1,2); \necho substr_compare(\"world\",\"OR\",1,2,TRUE);\r\n \necho substr_compare(\"world\",\"or\",1,3); \necho substr_compare(\"world\",\"rl\",1,2);\n\r\n?>``````php\n<?php\necho substr_compare(\"Hello world!\",\"Hello world!\",0); // the two strings are equal\necho substr_compare(\"Hello world!\",\"Hello\",0); // string1 is greater than string2\necho substr_compare(\"Hello world!\",\"Hello world! Hello!\",0); // str1 is less than str2\n\r\n?>```"
            }
        },
        "substr_count()": {
            "title": "substr_count()",
            "url": "https://www.w3schools.com/php/func_string_substr_count.asp",
            "info": {
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n $str = \"This is nice\";\necho strlen($str).\"<br>\"; // Using strlen() to return the string length\necho substr_count($str,\"is\").\"<br>\"; // The number of times \"is\" occurs in the string\necho substr_count($str,\"is\",2).\"<br>\"; // The string is now reduced to \"is is nice\"\necho substr_count($str,\"is\",3).\"<br>\"; // The string is now reduced to \"s is nice\"\necho substr_count($str,\"is\",3,3).\"<br>\"; // The string is now reduced to \"s i\"\n\r\n?>``````php\n<?php\n\r\n $str = \"abcabcab\"; \necho substr_count($str,\"abcab\"); // This function does not count overlapped substrings\n\r\n?>``````php\n<?php\n\r\n echo $str = \"This is nice\";\nsubstr_count($str,\"is\",3,9);\n\r\n?>```"
            }
        },
        "substr_replace()": {
            "title": "substr_replace()",
            "url": "https://www.w3schools.com/php/func_string_substr_replace.asp",
            "info": {
                "Definition and Usage": "The substr\\_replace() function replaces a part of a string with another string.Note: If the start parameter is a negative number and length is less than or equal to start, length becomes 0.Note: This function is binary-safe.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho substr_replace(\"Hello world\",\"earth\",6);\n\r\n?>``````php\n<?php\n\r\necho substr_replace(\"Hello world\",\"earth\",-5);\n\r\n?>``````php\n<?php\n\r\necho substr_replace(\"world\",\"Hello \",0,0);\n\r\n?>``````php\n<?php\n$replace = array(\"1: AAA\",\"2: AAA\",\"3: AAA\");\necho implode(\"<br>\",substr_replace($replace,'BBB',3,3));\n\r\n ?>```"
            }
        },
        "trim()": {
            "title": "trim()",
            "url": "https://www.w3schools.com/php/func_string_trim.asp",
            "info": {
                "Definition and Usage": "The trim() function removes whitespace and other predefined characters from both sides of a string.Related functions: ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"    Hello World!    \";\n\r\necho \"Without trim: \" . $str;\n\r\necho \"<br>\";\n\r\necho \"With trim: \" . trim($str);\n\r\n?>``````php\n<?php\n\r\n$str = \"\\n\\n\\nHello World!\\n\\n\\n\";\n\r\necho \"Without trim: \" . $str;\n\r\necho \"<br>\";\n\r\necho \"With trim: \" . trim($str);\n\r\n?>```"
            }
        },
        "ucfirst()": {
            "title": "ucfirst()",
            "url": "https://www.w3schools.com/php/func_string_ucfirst.asp",
            "info": {
                "Definition and Usage": "The ucfirst() function converts the first character of a string to uppercase.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "ucwords()": {
            "title": "ucwords()",
            "url": "https://www.w3schools.com/php/func_string_ucwords.asp",
            "info": {
                "Definition and Usage": "The ucwords() function converts the first character of each word in a string to uppercase.Note: This function is binary-safe.Related functions:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\necho ucwords(\"hello|world\", \"|\");\n\r\n?>```"
            }
        },
        "vfprintf()": {
            "title": "vfprintf()",
            "url": "https://www.w3schools.com/php/func_string_vfprintf.asp",
            "info": {
                "Definition and Usage": "The vfprintf() function writes a formatted string to a specified output stream (example: file or database).Unlike fprintf(), the arguments in vfprintf(), are placed in an array. The array elements will be inserted at the percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, the first array element is inserted, at the second % sign, the second array element is inserted, etc.Note: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.Tip: Related functions: fprintf(), printf(), sprintf(), vprintf() andvsprintf().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$num1 = 123;\n\r\n$num2 = 456;\n\r\n$file = fopen(\"test.txt\",\"w\");\n\r\nvfprintf($file,\"%f%f\",array($num1,$num2));\n\r\n?>``````php\n<?php\n\r\n$number = 123;\n\r\n$file = fopen(\"test.txt\",\"w\");\n\r\nvfprintf($file,\"With 2 decimals: %1\\$.2f\n\r\n\\nWith no decimals: %1\\$u\",array($number));\n\r\n?>```"
            }
        },
        "vprintf()": {
            "title": "vprintf()",
            "url": "https://www.w3schools.com/php/func_string_vprintf.asp",
            "info": {
                "Definition and Usage": "The vprintf() function outputs a formatted string.Unlike printf(), the arguments in vprintf(), are placed in an array. The array elements will be inserted at the percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, the first array element is inserted, at the second % sign, the second array element is inserted, etc.Note: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.Tip: Related functions: sprintf(),printf(),vsprintf(),fprintf() andvfprintf()",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$num1 = 123;\n\r\n$num2 = 456;\n\r\nvprintf(\"%f%f\",array($num1,$num2));\n\r\n?>``````php\n<?php\n\r\n$number = 123;\n\r\nvprintf(\"With 2 decimals: %1\\$.2f\n\r\n<br>With no decimals: %1\\$u\",array($number));\n\r\n?>``````php\n<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\nvprintf(\"[%s]<br>\",array($str1));\n\r\n vprintf(\"[%8s]<br>\",array($str1));\nvprintf(\"[%-8s]<br>\",array($str1));\n\r\n vprintf(\"[%08s]<br>\",array($str1)); \nvprintf(\"[%'*8s]<br>\",array($str1));\n\r\n vprintf(\"[%8.8s]<br>\",array($str2)); \n?>```"
            }
        },
        "vsprintf()": {
            "title": "vsprintf()",
            "url": "https://www.w3schools.com/php/func_string_vsprintf.asp",
            "info": {
                "Definition and Usage": "The vsprintf() function writes a formatted string to a variable.Unlike sprintf(), the arguments in vsprintf(), are placed in an array. The array elements will be inserted at the percent (%) signs in the main string. This function works \"step-by-step\". At the first % sign, the first array element is inserted, at the second % sign, the second array element is inserted, etc.Note: If there are more % signs than arguments, you must use placeholders. A placeholder is inserted after the % sign, and consists of the argument- number and \"\\$\". See example two.Tip: Related functions: fprintf(), vfprintf(),printf(), sprintf() and vprintf().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$num1 = 123;\n\r\n$num2 = 456;\n\r\n$txt = vsprintf(\"%f%f\",array($num1,$num2));\n\r\necho $txt;\n\r\n?>``````php\n<?php\n\r\n$number = 123;\n\r\n$txt = vsprintf(\"With 2 decimals: %1\\$.2f\n\r\n<br>With no decimals: %1\\$u\",array($number));\n\r\necho $txt;\n\r\n?>``````php\n<?php\n$str1 = \"Hello\";\n$str2 = \"Hello world!\";\necho vsprintf(\"[%s]\",array($str1)).\"<br>\";\n\r\n echo vsprintf(\"[%8s]\",array($str1)).\"<br>\";\necho vsprintf(\"[%-8s]\",array($str1)).\"<br>\";\n\r\n echo vsprintf(\"[%08s]\",array($str1)).\"<br>\"; \necho vsprintf(\"[%'*8s]\",array($str1)).\"<br>\";\n\r\n echo vsprintf(\"[%8.8s]\",array($str2)).\"<br>\"; \n?>```"
            }
        },
        "wordwrap()": {
            "title": "wordwrap()",
            "url": "https://www.w3schools.com/php/func_string_wordwrap.asp",
            "info": {
                "Definition and Usage": "The wordwrap() function wraps a string into new lines when it reaches a specific length.Note: This function may leave white spaces at the beginning of a line.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n\r\n$str = \"An example of a long word is: Supercalifragulistic\";\n\r\necho wordwrap($str,15,\"<br>\\n\",TRUE);\n\r\n?>``````php\n<?php\n\r\n$str = \"An example of a long word is: Supercalifragulistic\";\n\r\necho wordwrap($str,15);\n\r\n?>```"
            }
        },
        "variablehandling\r\n\nboolval()\ndebug_zval_dump()\ndoubleval()\nis_countable()\nempty()\nfloatval()\nget_defined_vars()\nget_resource_type()\ngettype()\nintval()\nis_array()\nis_bool()\nis_callable()\nis_double()\nis_float()\nis_int()\nis_integer()\nis_iterable()\nis_long()\nis_null()\nis_numeric()\nis_object()\nis_real()\nis_resource()\nis_scalar()\nis_string()\nisset()\nprint_r()\nserialize()\nsettype()\nstrval()\nunserialize()\nunset()\nvar_dump()\nvar_export()\n\n": {
            "title": "PHP Variable Handling\r\n\nboolval()\ndebug_zval_dump()\ndoubleval()\nis_countable()\nempty()\nfloatval()\nget_defined_vars()\nget_resource_type()\ngettype()\nintval()\nis_array()\nis_bool()\nis_callable()\nis_double()\nis_float()\nis_int()\nis_integer()\nis_iterable()\nis_long()\nis_null()\nis_numeric()\nis_object()\nis_real()\nis_resource()\nis_scalar()\nis_string()\nisset()\nprint_r()\nserialize()\nsettype()\nstrval()\nunserialize()\nunset()\nvar_dump()\nvar_export()\n\n",
            "url": "https://www.w3schools.com/php/php_ref_variable_handling.asp",
            "info": {
                "PHP Variable Handling Functions": "The PHP variable handling functions are part of the PHP core. No installation is required to use these functions."
            }
        },
        "boolval()": {
            "title": "boolval()",
            "url": "https://www.w3schools.com/php/func_var_boolval.asp",
            "info": {
                "Definition and Usage": "The boolval() function returns the boolean value of a variable.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "debug_zval_dump()": {
            "title": "debug_zval_dump()",
            "url": "https://www.w3schools.com/php/func_var_debug_zval_dump.asp",
            "info": {
                "Definition and Usage": "The debug\\_zval\\_dump() function dumps a string representation of an internal zend value to output.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "doubleval()": {
            "title": "doubleval()",
            "url": "https://www.w3schools.com/php/func_var_doubleval.asp",
            "info": {
                "Definition and Usage": "The doubleval() function returns the float value of a variable.This function is an alias of floatval().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_countable()": {
            "title": "is_countable()",
            "url": "https://www.w3schools.com/php/func_var_is_countable.asp",
            "info": {
                "Definition and Usage": "The is\\_countable() function checks whether the contents of a variable is a countable value or not.This function returns true (1) if the variable is countable, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "empty()": {
            "title": "empty()",
            "url": "https://www.w3schools.com/php/func_var_empty.asp",
            "info": {
                "Definition and Usage": "The empty() function checks whether a variable is empty or not.This function returns false if the variable exists and is not empty, otherwise it returns true.The following values evaluates to empty:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "floatval()": {
            "title": "floatval()",
            "url": "https://www.w3schools.com/php/func_var_floatval.asp",
            "info": {
                "Definition and Usage": "The floatval() function returns the float value of a variable.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "get_defined_vars()": {
            "title": "get_defined_vars()",
            "url": "https://www.w3schools.com/php/func_var_get_defined_vars.asp",
            "info": {
                "Definition and Usage": "The get\\_defined\\_vars() function returns all defined variables, as an array.",
                "Syntax": "",
                "Parameter Values": "None.",
                "Technical Details": ""
            }
        },
        "get_resource_type()": {
            "title": "get_resource_type()",
            "url": "https://www.w3schools.com/php/func_var_get_resource_type.asp",
            "info": {
                "Definition and Usage": "The get\\_resource\\_type() function returns the type of a resource.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "gettype()": {
            "title": "gettype()",
            "url": "https://www.w3schools.com/php/func_var_gettype.asp",
            "info": {
                "Definition and Usage": "The gettype() function returns the type of a variable.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "intval()": {
            "title": "intval()",
            "url": "https://www.w3schools.com/php/func_var_intval.asp",
            "info": {
                "Definition and Usage": "The intval() function returns the integer value of a variable.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_array()": {
            "title": "is_array()",
            "url": "https://www.w3schools.com/php/func_var_is_array.asp",
            "info": {
                "Definition and Usage": "The is\\_array() function checks whether a variable is an array or not.This function returns true (1) if the variable is an array, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_bool()": {
            "title": "is_bool()",
            "url": "https://www.w3schools.com/php/func_var_is_bool.asp",
            "info": {
                "Definition and Usage": "The is\\_bool() function checks whether a variable is a boolean or not.This function returns true (1) if the variable is a boolean, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_callable()": {
            "title": "is_callable()",
            "url": "https://www.w3schools.com/php/func_var_is_callable.asp",
            "info": {
                "Definition and Usage": "The is\\_callable() function checks whether the contents of a variable can be called as a function or not.This function returns true (1) if the variable is callable, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_double()": {
            "title": "is_double()",
            "url": "https://www.w3schools.com/php/func_var_is_double.asp",
            "info": {
                "Definition and Usage": "The is\\_double() function checks whether a variable is of type float or not.This function is an alias of is\\_float().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_float()": {
            "title": "is_float()",
            "url": "https://www.w3schools.com/php/func_var_is_float.asp",
            "info": {
                "Definition and Usage": "The is\\_float() function checks whether a variable is of type float or not.This function returns true (1) if the variable is of type float, otherwise it returns false.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_int()": {
            "title": "is_int()",
            "url": "https://www.w3schools.com/php/func_var_is_int.asp",
            "info": {
                "Definition and Usage": "The is\\_int() function checks whether a variable is of type integer or not.This function returns true (1) if the variable is of type integer, otherwise it returns false.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_integer()": {
            "title": "is_integer()",
            "url": "https://www.w3schools.com/php/func_var_is_integer.asp",
            "info": {
                "Definition and Usage": "The is\\_integer() function checks whether a variable is of type integer or not.This function is an alias of is\\_int().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_iterable()": {
            "title": "is_iterable()",
            "url": "https://www.w3schools.com/php/func_var_is_iterable.asp",
            "info": {
                "Definition and Usage": "The is\\_iterable() function checks whether the contents of a variable is an iterable value or not.This function returns true (1) if the variable is iterable, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_long()": {
            "title": "is_long()",
            "url": "https://www.w3schools.com/php/func_var_is_long.asp",
            "info": {
                "Definition and Usage": "The is\\_long() function checks whether a variable is of type integer or not.This function is an alias of is\\_int().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_null()": {
            "title": "is_null()",
            "url": "https://www.w3schools.com/php/func_var_is_null.asp",
            "info": {
                "Definition and Usage": "The is\\_null() function checks whether a variable is NULL or not.This function returns true (1) if the variable is NULL, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_numeric()": {
            "title": "is_numeric()",
            "url": "https://www.w3schools.com/php/func_var_is_numeric.asp",
            "info": {
                "Definition and Usage": "The is\\_numeric() function checks whether a variable is a number or a numeric string.This function returns true (1) if the variable is a number or a numeric string, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_object()": {
            "title": "is_object()",
            "url": "https://www.w3schools.com/php/func_var_is_object.asp",
            "info": {
                "Definition and Usage": "The is\\_object() function checks whether a variable is an object.This function returns true (1) if the variable is an object, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_real()": {
            "title": "is_real()",
            "url": "https://www.w3schools.com/php/func_var_is_real.asp",
            "info": {
                "Definition and Usage": "The is\\_real() function checks whether a variable is of type float or not.This function is an alias of is\\_float().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_resource()": {
            "title": "is_resource()",
            "url": "https://www.w3schools.com/php/func_var_is_resource.asp",
            "info": {
                "Definition and Usage": "The is\\_resource() function checks whether a variable is a resource or not.Note: The is\\_resource() function will return FALSE if the resource has been closed.This function returns true (1) if the variable is a resource, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_scalar()": {
            "title": "is_scalar()",
            "url": "https://www.w3schools.com/php/func_var_is_scalar.asp",
            "info": {
                "Definition and Usage": "The is\\_scalar() function checks whether a variable is a scalar or not.This function returns true (1) if the variable is a scalar, otherwise it returns false/nothing.Integers, floats, strings, or boolean can be scalar variables. Arrays, objects, and resources are not.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "is_string()": {
            "title": "is_string()",
            "url": "https://www.w3schools.com/php/func_var_is_string.asp",
            "info": {
                "Definition and Usage": "The is\\_string() function checks whether a variable is of type string or not.This function returns true (1) if the variable is of type string, otherwise it returns false/nothing.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "isset()": {
            "title": "isset()",
            "url": "https://www.w3schools.com/php/func_var_isset.asp",
            "info": {
                "Definition and Usage": "The isset() function checks whether a variable is set, which means that it has to be declared and is not NULL.This function returns true if the variable exists and is not NULL, otherwise it returns false.Note: If multiple variables are supplied, then this function will return true only if all of the variables are set. Tip: A variable can be unset with the unset() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "print_r()": {
            "title": "print_r()",
            "url": "https://www.w3schools.com/php/func_var_print_r.asp",
            "info": {
                "Definition and Usage": "The print\\_r() function prints the information about a variable in a more human-readable way.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "serialize()": {
            "title": "serialize()",
            "url": "https://www.w3schools.com/php/func_var_serialize.asp",
            "info": {
                "Definition and Usage": "The serialize() function converts a storable representation of a value. To serialize data means to convert a value to a sequence of bits, so that it can be stored in a file, a memory buffer, or transmitted across a network. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "settype()": {
            "title": "settype()",
            "url": "https://www.w3schools.com/php/func_var_settype.asp",
            "info": {
                "Definition and Usage": "The settype() function converts a variable to a specific type. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "strval()": {
            "title": "strval()",
            "url": "https://www.w3schools.com/php/func_var_strval.asp",
            "info": {
                "Definition and Usage": "The strval() function returns the string value of a variable.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "unserialize()": {
            "title": "unserialize()",
            "url": "https://www.w3schools.com/php/func_var_unserialize.asp",
            "info": {
                "Definition and Usage": "The unserialize() function converts serialized data back into actual data. ",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "unset()": {
            "title": "unset()",
            "url": "https://www.w3schools.com/php/func_var_unset.asp",
            "info": {
                "Definition and Usage": "The unset() function unsets a variable.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "var_dump()": {
            "title": "var_dump()",
            "url": "https://www.w3schools.com/php/func_var_var_dump.asp",
            "info": {
                "Definition and Usage": "The var\\_dump() function dumps information about one or more variables. The information holds type and value of the variable(s).",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "var_export()": {
            "title": "var_export()",
            "url": "https://www.w3schools.com/php/func_var_var_export.asp",
            "info": {
                "Definition and Usage": "The var\\_export() function outputs or returns structured information about a variable. This function works similar to var\\_dump(), except that the returned value for this function is valid PHP code.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xmlparser": {
            "title": "PHP XML Parser",
            "url": "https://www.w3schools.com/php/php_ref_xml.asp",
            "info": {
                "PHP XML Parser Introduction": "The XML functions lets you parse, but not validate, XML documents.XML is a data format for standardized structured document exchange. More information on XML can be found in our XML Tutorial.This extension uses the Expat XML parser.Expat is an event-based parser, it views an XML document as a series of events. When an event occurs, it calls a specified function to handle it.Expat is a non-validating parser, and ignores any DTDs linked to a document. However, if the document is not well formed it will end with an error message.Because it is an event-based, non validating parser, Expat is fast and well suited for web applications.The XML parser functions lets you create XML parsers and define handlers for XML events.",
                "Installation": "The XML functions are part of the PHP core. There is no installation needed to use these functions.",
                "PHP XML Parser Functions": "",
                "PHP XML Parser Constants": ""
            }
        },
        "utf8_decode()": {
            "title": "utf8_decode()",
            "url": "https://www.w3schools.com/php/func_xml_utf8_decode.asp",
            "info": {
                "Definition and Usage": "The utf8\\_decode() function decodes a UTF-8 string to ISO-8859-1.This function decodes a string, previously encoded with the utf8\\_encode() function, back to ISO-8859-1.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "utf8_encode()": {
            "title": "utf8_encode()",
            "url": "https://www.w3schools.com/php/func_xml_utf8_encode.asp",
            "info": {
                "Definition and Usage": "The utf8\\_encode() function encodes an ISO-8859-1 string to UTF-8.Unicode is a universal standard, and has been developed to describe all possible characters of all languages plus a lot of symbols with one unique number for each character/symbol. However, it is not always possible to transfer a Unicode character to another computer reliably. UTF-8 has been developed to transfer a Unicode character from one computer to another.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_error_string()": {
            "title": "xml_error_string()",
            "url": "https://www.w3schools.com/php/func_xml_error_string.asp",
            "info": {
                "Definition and Usage": "The xml\\_error\\_string() function returns the XML parser error description.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_get_current_byte_index()": {
            "title": "xml_get_current_byte_index()",
            "url": "https://www.w3schools.com/php/func_xml_get_current_byte_index.asp",
            "info": {
                "Definition and Usage": "The xml\\_get\\_current\\_byte\\_index() function returns the byte index for an XML parser.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_get_current_column_number()": {
            "title": "xml_get_current_column_number()",
            "url": "https://www.w3schools.com/php/func_xml_get_current_column_number.asp",
            "info": {
                "Definition and Usage": "The xml\\_get\\_current\\_column\\_number() function returns the current column number for an XML parser.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_get_current_line_number()": {
            "title": "xml_get_current_line_number()",
            "url": "https://www.w3schools.com/php/func_xml_get_current_line_number.asp",
            "info": {
                "Definition and Usage": "The xml\\_get\\_current\\_line\\_number() function returns the current line number for an XML parser.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_get_error_code()": {
            "title": "xml_get_error_code()",
            "url": "https://www.w3schools.com/php/func_xml_get_error_code.asp",
            "info": {
                "Definition and Usage": "The xml\\_get\\_error\\_code() function returns the XML parser error code.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_parse()": {
            "title": "xml_parse()",
            "url": "https://www.w3schools.com/php/func_xml_parse.asp",
            "info": {
                "Definition and Usage": "The xml\\_parse() function parses an XML document.Tip: To create an XML parser, use the xml\\_parser\\_create() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": "",
                "More Examples": "```php\n<?php\n$parser=xml_parser_create();\nfunction start($parser,$element_name,$element_attrs) {\nswitch($element_name) {\ncase \"NOTE\":\necho \"NOTE<br>\";\nbreak;\ncase \"TO\":\necho \"To: \";\nbreak;\ncase \"FROM\":\necho \"From: \";\nbreak;\ncase \"HEADING\":\necho \"Heading: \";\nbreak;\ncase \"BODY\":\necho \"Message: \";\n}\n}\nfunction stop($parser,$element_name) {\necho \"<br>\";\n}\nfunction char($parser,$data) {\necho $data;\n}\n\nxml_set_element_handler($parser,\"start\",\"stop\");\nxml_set_character_data_handler($parser,\"char\");\n$fp=fopen(\"note.xml\",\"r\");\n\nwhile ($data=fread($fp,4096)) {\nxml_parse($parser,$data,feof($fp)) or\ndie (sprintf(\"XML Error: %s at line %d\", \nxml_error_string(xml_get_error_code($parser)),\nxml_get_current_line_number($parser)));\n}\nxml_parser_free($parser);\nfclose($fp);\n\r\n?>```"
            }
        },
        "xml_parse_into_struct()": {
            "title": "xml_parse_into_struct()",
            "url": "https://www.w3schools.com/php/func_xml_parse_into_struct.asp",
            "info": {
                "Definition and Usage": "The xml\\_parse\\_into\\_struct() function parses XML data into an array.This function parses the XML data into 2 arrays:",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_parser_create_ns()": {
            "title": "xml_parser_create_ns()",
            "url": "https://www.w3schools.com/php/func_xml_parser_create_ns.asp",
            "info": {
                "Definition and Usage": "The xml\\_parser\\_create\\_ns() function creates an XML parser with namespace support.Tip: To free the xml parser, use the xml\\_parser\\_free() function.Tip: To create an XML parser without namespace support, use thexml\\_parser\\_create() function instead.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_parser_create()": {
            "title": "xml_parser_create()",
            "url": "https://www.w3schools.com/php/func_xml_parser_create.asp",
            "info": {
                "Definition and Usage": "The xml\\_parser\\_create() function creates an XML parser.Tip: To free the xml parser, use the xml\\_parser\\_free() function.Tip: To create an XML parser with namespace support, use the xml\\_parser\\_create\\_ns() function instead.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_parser_free()": {
            "title": "xml_parser_free()",
            "url": "https://www.w3schools.com/php/func_xml_parser_free.asp",
            "info": {
                "Definition and Usage": "The xml\\_parser\\_free() function frees an XML parser.Tip: To create an XML parser use the xml\\_parser\\_create() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_parser_get_option()": {
            "title": "xml_parser_get_option()",
            "url": "https://www.w3schools.com/php/func_xml_parser_get_option.asp",
            "info": {
                "Definition and Usage": "The xml\\_parser\\_get\\_option() function gets options from an XML parser.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_parser_set_option()": {
            "title": "xml_parser_set_option()",
            "url": "https://www.w3schools.com/php/func_xml_parser_set_option.asp",
            "info": {
                "Definition and Usage": "The xml\\_parser\\_set\\_option() function sets options in an XML parser.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_character_data_handler()": {
            "title": "xml_set_character_data_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_character_data_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_character\\_data\\_handler() function sets the character data handler for the XML parser.This function specifies what function to be called when the parser finds character data in the XML file.Note: The handler parameter can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_default_handler()": {
            "title": "xml_set_default_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_default_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_default\\_handler() function sets the default data handler for the XML parser.This function specifies what function to be called whenever the parser finds data in the XML file.Note: The handler parameter can also be an array containing an object reference and a method name.\u00a0",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_element_handler()": {
            "title": "xml_set_element_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_element_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_element\\_handler() function specifies functions to be called at the start and end of an element in the XML document.Note: The start and end parameters can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_end_namespace_decl_handler()": {
            "title": "xml_set_end_namespace_decl_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_end_namespace_decl_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_end\\_namespace\\_decl\\_handler() function sets up the end namespace declaration handler.This function specifies what function to be called when leaving the scope of a namespace declaration. This will be called, for each namespace declaration, after the handler for the end tag of the element in which the namespace was declared.Note: The handler parameter can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_external_entity_ref_handler()": {
            "title": "xml_set_external_entity_ref_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_external_entity_ref_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_external\\_entity\\_ref\\_handler() function specifies a function to be called when the parser finds an external entity in the XML document.Note: The handler parameter can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_notation_decl_handler()": {
            "title": "xml_set_notation_decl_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_notation_decl_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_notation\\_decl\\_handler() function specifies a function to be called when the parser finds a notation declaration in the XML document.Note: The handler parameter can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_object()": {
            "title": "xml_set_object()",
            "url": "https://www.w3schools.com/php/func_xml_set_object.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_object() function allows a XML parser to be used within an object.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_processing_instruction_handler()": {
            "title": "xml_set_processing_instruction_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_processing_instruction_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_processing\\_instruction\\_handler() function specifies a function to be called when the parser finds a processing instruction (PI) in the XML document.A PI is enclosed in <? and ?> and contains a a target followed by data.Example: In this case the PI associates a style sheet with an XML document:Note: The handler parameter can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_start_namespace_decl_handler()": {
            "title": "xml_set_start_namespace_decl_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_start_namespace_decl_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_start\\_namespace\\_decl\\_handler() function sets up the start namespace declaration handler.This function specifies what function to be called when  a namespace is declared.Note: The handler parameter can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "xml_set_unparsed_entity_decl_handler()": {
            "title": "xml_set_unparsed_entity_decl_handler()",
            "url": "https://www.w3schools.com/php/func_xml_set_unparsed_entity_decl_handler.asp",
            "info": {
                "Definition and Usage": "The xml\\_set\\_unparsed\\_entity\\_decl\\_handler() function specifies a function to be called when the parser an unparsed entity in the XML document.Note: The handler parameter can also be an array containing an object reference and a method name.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip": {
            "title": "PHP Zip",
            "url": "https://www.w3schools.com/php/php_ref_zip.asp",
            "info": {
                "PHP Zip Introduction": "The Zip files functions allows you to read ZIP files.",
                "Requirements": "The ZIP extension requires libzip.",
                "Installation": "Linux SystemsFor these functions to work, you have to compile PHP with --enable-zip.PHP 5.6: Use the--with-libzip=DIR configure option to use a system libzip installation. libzip version 0.11 is required, with 0.11.2 or later recommended.PHP 7.3: Building against the bundled libzip is discouraged, but still possible by adding --without-libzip to the configuration. Windows SystemsBefore PHP 5.3: Users must enable \"php\\_zip.dll\" inside of \"php.ini\" for these functions to work.From PHP 5.3: The ZIP extension is built-in.",
                "PHP Zip Functions": ""
            }
        },
        "zip_close()": {
            "title": "zip_close()",
            "url": "https://www.w3schools.com/php/func_zip_close.asp",
            "info": {
                "Definition and Usage": "The zip\\_close() function closes a ZIP file archive opened by thezip\\_open() function.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_entry_close()": {
            "title": "zip_entry_close()",
            "url": "https://www.w3schools.com/php/func_zip_entry_close.asp",
            "info": {
                "Definition and Usage": "The zip\\_entry\\_close() function closes a ZIP directory entry opened by zip\\_entry\\_open().",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_entry_compressedsize()": {
            "title": "zip_entry_compressedsize()",
            "url": "https://www.w3schools.com/php/func_zip_entry_compressedsize.asp",
            "info": {
                "Definition and Usage": "The zip\\_entry\\_compressedsize() function returns the compressed file size of a ZIP directory entry.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_entry_compressionmethod()": {
            "title": "zip_entry_compressionmethod()",
            "url": "https://www.w3schools.com/php/func_zip_entry_compressionmethod.asp",
            "info": {
                "Definition and Usage": "The zip\\_entry\\_compressionmethod() function returns the compression method of a ZIP directory entry.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_entry_filesize()": {
            "title": "zip_entry_filesize()",
            "url": "https://www.w3schools.com/php/func_zip_entry_filesize.asp",
            "info": {
                "Definition and Usage": "The zip\\_entry\\_filesize() function returns the actual file size of a ZIP directory entry.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_entry_name()": {
            "title": "zip_entry_name()",
            "url": "https://www.w3schools.com/php/func_zip_entry_name.asp",
            "info": {
                "Definition and Usage": "The zip\\_entry\\_name() function returns the name of a ZIP directory entry.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_entry_open()": {
            "title": "zip_entry_open()",
            "url": "https://www.w3schools.com/php/func_zip_entry_open.asp",
            "info": {
                "Definition and Usage": "The zip\\_entry\\_open() function opens a directory entry in a ZIP file for reading.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_entry_read()": {
            "title": "zip_entry_read()",
            "url": "https://www.w3schools.com/php/func_zip_entry_read.asp",
            "info": {
                "Definition and Usage": "The zip\\_entry\\_read() function reads from an open directory entry.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_open()": {
            "title": "zip_open()",
            "url": "https://www.w3schools.com/php/func_zip_open.asp",
            "info": {
                "Definition and Usage": "The zip\\_open() function opens a ZIP file archive.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "zip_read()": {
            "title": "zip_read()",
            "url": "https://www.w3schools.com/php/func_zip_read.asp",
            "info": {
                "Definition and Usage": "The zip\\_read() function reads the next file in a open ZIP file archive.Tip: The resource returned by zip\\_read() can be used by the zip\\_entry\\_\\*() functions.",
                "Syntax": "",
                "Parameter Values": "",
                "Technical Details": ""
            }
        },
        "timezones": {
            "title": "PHP Timezones",
            "url": "https://www.w3schools.com/php/php_ref_timezones.asp",
            "info": {
                "PHP Supported Timezones": "Below is a complete list of the timezones supported by PHP, which are useful with several PHP date functions.",
                "Africa": "",
                "America": "",
                "Antarctica": "",
                "Arctic": "",
                "Asia": "",
                "Atlantic": "",
                "Australia": "",
                "Europe": "",
                "Indian": "",
                "Pacific": ""
            }
        }
    },
    "java": {
        "getstarted": {
            "title": "Java Get Started",
            "url": "https://www.w3schools.com/java/java_getstarted.asp",
            "info": {
                "Java Install": "Some PCs might have Java already installed.To check if you have Java installed on a Windows PC, search in the start bar for Java or type the following in Command Prompt (cmd.exe):```java\nC:\\Users\\Your Name>java -version```If Java is installed, you will see something like this (depending on version):If you do not have Java installed on your computer, you can download it for free from oracle.com.Note: In this tutorial, we will write Java code in a text editor. However, it is possible to write Java in an Integrated Development Environment, such as IntelliJ IDEA, Netbeans or Eclipse, which are particularly useful when managing larger collections of Java files.",
                "Setup for Windows": "To install Java on Windows:",
                "Java Quickstart": "In Java, every application begins with a class name, and that class must match the filename.Let's create our first Java file, called MyClass.java, which can be done in any text editor (like Notepad).The file should contain a \"Hello World\" message, which is written with the following code:```java\npublic class MyClass {public static void main(String[] args) {  System.out.println(\"Hello World\");}\r\n}```Don't worry if you don't understand the code above - we will discuss it in detail in later chapters. For now, focus on how to run the code above.Save the code in Notepad as \"MyClass.java\". Open Command Prompt (cmd.exe), navigate to the directory where you saved your file, and type \"javac MyClass.java\":```java\nC:\\Users\\Your Name>javac MyClass.java```This will compile your code. If there are no errors in the code, the command prompt will take you to the next line. Now, type \"java MyClass\" to run the file:```java\nC:\\Users\\Your Name>java MyClass```The output should read:Congratulations! You have written and executed your first Java program."
            }
        },
        "syntax": {
            "title": "Java Syntax",
            "url": "https://www.w3schools.com/java/java_syntax.asp",
            "info": {
                "Java Syntax": "In the previous chapter, we created a Java file called MyClass.java, and we used the following code to print \"Hello World\" to the screen:```java\npublic class MyClass {public static void main(String[] args) {  System.out.println(\"Hello World\");}\r\n}```Every line of code that runs in Java must be inside a class.In our example, we named the class MyClass. A class should always start with an uppercase first letter.Note: Java is case-sensitive: \"MyClass\" and \"myclass\" has different meaning.The name of the java file must match the class name.When saving the file, save it using the class name and add \".java\" to the end of the filename. To run the example above on your computer, make sure that Java is properly installed: Go to the Get Started Chapter for how to install Java. The output should be:",
                "The main Method": "The main() method is required and you will see it in every Java program:```java\npublic static void main(String[] args)```Any code inside the main() method will be executed. You don't have to understand the keywords before and after main. You will get to know them bit by bit while reading this tutorial.For now, just remember that every Java program has a class name which must match the filename, and that every program must contain the main() method.",
                "System.out.println()": "Inside the main() method, we can use the println() method to print a line of text to the screen:```java\npublic static void main(String[] args) {System.out.println(\"Hello World\");\r\n}```"
            }
        },
        "comments": {
            "title": "Java Comments",
            "url": "https://www.w3schools.com/java/java_comments.asp",
            "info": {
                "Java Comments": "Comments can be used to explain Java code, and to make it more readable. It can also be used to prevent execution when testing alternative code.Single-line comments start with two forward slashes (//).Any text between // and the end of the line is ignored by Java (will not be executed).This example uses a single-line comment before a line of code:```java\n// This is a comment\r\nSystem.out.println(\"Hello World\");```This example uses a single-line comment at the end of a line of code:```java\nSystem.out.println(\"Hello World\"); // This is a comment```",
                "Java Multi-line Comments": "Multi-line comments start with /\\* and ends with \\*/.Any text between /\\* and \\*/ will be ignored by Java.This example uses a multi-line comment (a comment block) to explain the code:```java\n/* The code below will print the words Hello World\r\nto the screen, and it is amazing */\r\nSystem.out.println(\"Hello World\");```"
            }
        },
        "variables": {
            "title": "Java Variables",
            "url": "https://www.w3schools.com/java/java_variables.asp",
            "info": {
                "Java Variables": "Variables are containers for storing data values. In Java, there are different types of variables, for example:",
                "Declaring (Creating) Variables": "To create a variable, you must specify the type and assign it a value:```java\ntype variable = value;```Where type is one of Java's types (such as int or String), and variable is the name of the variable (such as x orname). The equal sign is used to assign values to the variable.To create a variable that should store text, look at the following example:```java\nString name = \"John\";\r\nSystem.out.println(name);```To create a variable that should store a number, look at the following example:```java\nint myNum = 15;\r\nSystem.out.println(myNum);```You can also declare a variable without assigning the value, and assign the value later:```java\nint myNum;\r\nmyNum = 15;\r\nSystem.out.println(myNum);```Note that if you assign a new value to an existing variable, it will overwrite the previous value:```java\nint myNum = 15;\r\nmyNum = 20;  // myNum is now 20\r\nSystem.out.println(myNum);```",
                "Final Variables": "However, you can add the final keyword if you don't want others (or yourself) to overwrite existing values (this will declare the variable as \"final\" or \"constant\", which means unchangeable and read-only):```java\nfinal int myNum = 15;\r\nmyNum = 20;  // will generate an error: cannot assign a value to a final variable```",
                "Other Types": "A demonstration of how to declare variables of other types:```java\nint myNum = 5;\r\nfloat myFloatNum = 5.99f;\r\nchar myLetter = 'D';\r\nboolean myBool = true;\r\nString myText = \"Hello\";```",
                "Display Variables": "The println() method is often used to display variables.To combine both text and a variable, use the + character:```java\nString name = \"John\";\r\nSystem.out.println(\"Hello \" + name);```You can also use the + character to add a variable to another variable:```java\nString firstName = \"John \";\r\nString lastName = \"Doe\";\r\nString fullName = firstName + lastName;\r\nSystem.out.println(fullName);```For numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here):```java\nint x = 5;\r\nint y = 6;\r\nSystem.out.println(x + y); // Print the value of x + y```From the example above, you can expect:",
                "Declare Many Variables": "To declare more than one variable of the same type, use a comma-separated list:```java\nint x = 5, y = 6, z = 50;\r\nSystem.out.println(x + y + z);```",
                "Java Identifiers": "All Java variables must beidentified with unique names.These unique names are called identifiers.Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).Note: It is recommended to use descriptive names in order to create understandable and maintainable code:```java\n// Good\r\nint minutesPerHour = 60;\r\n\r\n// OK, but not so easy to understand what m actually is\r\nint m = 60;```The general rules for constructing names for variables (unique identifiers) are:"
            }
        },
        "datatypes": {
            "title": "Java Data Types",
            "url": "https://www.w3schools.com/java/java_data_types.asp",
            "info": {
                "Java Data Types": "As explained in the previous chapter, a variable in Java must be a specified data type:```java\nint myNum = 5;               // Integer (whole number)\r\nfloat myFloatNum = 5.99f;    // Floating point number\r\nchar myLetter = 'D';         // Character\r\nboolean myBool = true;       // Boolean\r\nString myText = \"Hello\";     // String```Data types are divided into two groups:",
                "Primitive Data Types": "A primitive data type specifies the size and type of variable values, and it has no additional methods.There are eight primitive data types in Java:",
                "Numbers": "Primitive number types are divided into two groups:Integer types stores whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are byte, short, int and long. Which type you should use, depends on the numeric value.Floating point types represents numbers with a fractional part, containing one or more decimals. There are two types: float and double.",
                "Integer Types": "The byte data type can store whole numbers from -128 to 127. This can be used instead of int or other integer types to save memory when you are certain that the value will be within -128 and 127:```java\nbyte myNum = 100;\r\nSystem.out.println(myNum);```The short data type can store whole numbers from -32768 to 32767:```java\nshort myNum = 5000;\r\nSystem.out.println(myNum);```The int data type can store whole numbers from -2147483648 to 2147483647.  In general, and in our tutorial, the int data type is the preferred data type when we create variables with a numeric value.```java\nint myNum = 100000;\r\nSystem.out.println(myNum);```The long data type can store whole numbers from -9223372036854775808 to 9223372036854775807. This is used when int is not large enough to store the value. Note that you should end the value with an \"L\":```java\nlong myNum = 15000000000L;\r\nSystem.out.println(myNum);```",
                "Floating Point Types": "You should use a floating point type whenever you need a number with a decimal, such as 9.99 or 3.14515.The float data type can store fractional numbers from 3.4e\u2212038 to 3.4e+038. Note that you should end the value with an \"f\":```java\nfloat myNum = 5.75f;\r\nSystem.out.println(myNum);```The double data type can store fractional numbers from 1.7e\u2212308 to 1.7e+308. Note that you should end the value with a \"d\":```java\ndouble myNum = 19.99d;\r\nSystem.out.println(myNum);```A floating point number can also be a scientific number with an \"e\" to indicate the power of 10:```java\nfloat f1 = 35e3f;\r\ndouble d1 = 12E4d;\r\nSystem.out.println(f1);\r\nSystem.out.println(d1);```",
                "Booleans": "A boolean data type is declared with the boolean keyword and can only take the values true or false:```java\nboolean isJavaFun = true;\r\nboolean isFishTasty = false;\r\nSystem.out.println(isJavaFun);     // Outputs true\r\nSystem.out.println(isFishTasty);   // Outputs false```Boolean values are mostly used for conditional testing, which you will learn more about in a later chapter.",
                "Characters": "The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':```java\nchar myGrade = 'B';\r\nSystem.out.println(myGrade);```Alternatively, you can use ASCII values to display certain characters:```java\nchar a = 65, b = 66, c = 67;\r\nSystem.out.println(a);\r\nSystem.out.println(b);\r\nSystem.out.println(c);```Tip: A list of all ASCII values can be found in our ASCII Table Reference.",
                "Strings": "The String data type is used to store a sequence of characters (text). String values must be surrounded by double quotes:```java\nString greeting = \"Hello World\";\r\nSystem.out.println(greeting);```",
                "Non-Primitive Data Types": "Non-primitive data types are called reference types because they refer to objects.The main difference between primitive and non-primitive data types are:Examples of non-primitive types are Strings, Arrays, Classes, Interface, etc. You will learn more about these in a later chapter."
            }
        },
        "typecasting": {
            "title": "Java Type Casting",
            "url": "https://www.w3schools.com/java/java_type_casting.asp",
            "info": {
                "Java Type Casting": "Type casting is when you assign a value of one primitive data type to another type.In Java, there are two types of casting:",
                "Widening Casting": "Widening casting is done automatically when passing a smaller size type to a larger size type:```java\npublic class MyClass {public static void main(String[] args) {  int myInt = 9;  double myDouble = myInt; // Automatic casting: int to double\r\n  System.out.println(myInt);      // Outputs 9  System.out.println(myDouble);   // Outputs 9.0}\r\n}```",
                "Narrowing Casting": "Narrowing casting must be done manually by placing the type in parentheses in front of the value:```java\npublic class MyClass {public static void main(String[] args) {  double myDouble = 9.78;  int myInt = (int) myDouble; // Manual casting: double to int\r\n  System.out.println(myDouble);   // Outputs 9.78  System.out.println(myInt);      // Outputs 9}\r\n}```"
            }
        },
        "operators": {
            "title": "Java Operators",
            "url": "https://www.w3schools.com/java/java_operators.asp",
            "info": {
                "Java Operators": "Operators are used to perform operations on variables and values.In the example below, we use the+ operator to add together two values:```java\nint x = 100 + 50;```Although the + operator is often used to add together two values, like in the example above, it can also be used to add together a variable and a value, or a variable and another variable:```java\nint sum1 = 100 + 50;        // 150 (100 + 50)\r\nint sum2 = sum1 + 250;      // 400 (150 + 250)\r\nint sum3 = sum2 + sum2;     // 800 (400 + 400)```Java divides the operators into the following groups:",
                "Arithmetic Operators": "Arithmetic operators are used to perform common mathematical operations.",
                "Java Assignment Operators": "Assignment operators are used to assign values to variables.In the example below, we use the assignment operator (=) to assign the value 10 to a variable called x:```java\nint x = 10;```The addition assignment operator (+=) adds a value to a variable:```java\nint x = 10;\r\nx += 5;```A list of all assignment operators:",
                "Java Comparison Operators": "Comparison operators are used to compare two values:",
                "Java Logical Operators": "Logical operators are used to determine the logic between variables or values:",
                "Java Bitwise Operators": "Bitwise operators are used to perform binary logic with the bits of an integer or longinteger."
            }
        },
        "strings": {
            "title": "Java Strings",
            "url": "https://www.w3schools.com/java/java_strings.asp",
            "info": {
                "Java Strings": "Strings are used for storing text.A String variable contains a collection of characters surrounded by double quotes:```java\nString greeting = \"Hello\";```",
                "String Length": "A String in Java is actually an object, which contain methods that can perform certain operations on strings. For example, the length of a string can be found with the length() method:```java\nString txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nSystem.out.println(\"The length of the txt string is: \" + txt.length());```",
                "More String Methods": "There are many string methods available, for example toUpperCase() and toLowerCase():```java\nString txt = \"Hello World\";\r\nSystem.out.println(txt.toUpperCase());   // Outputs \"HELLO WORLD\"\r\nSystem.out.println(txt.toLowerCase());   // Outputs \"hello world\"```",
                "Finding a Character in a String": "The indexOf() method returns the index (the position) of the first occurrence of a specified text in a string (including whitespace):```java\nString txt = \"Please locate where 'locate' occurs!\";\r\nSystem.out.println(txt.indexOf(\"locate\")); // Outputs 7```",
                "String Concatenation": "The + operator can be used between strings to combine them. This is called concatenation:```java\nString firstName = \"John\";\r\nString lastName = \"Doe\";\r\nSystem.out.println(firstName + \" \" + lastName);```You can also use the concat() method to concatenate two strings:```java\nString firstName = \"John \";\r\nString lastName = \"Doe\";\r\nSystem.out.println(firstName.concat(lastName));```",
                "Special Characters": "Because strings must be written within quotes, Java will misunderstand this string, and generate an error:```java\nString txt = \"We are the so-called \"Vikings\" from the north.\";```The solution to avoid this problem, is to use the backslash escape character.The backslash (\\) escape character turns special characters into string characters:The sequence \\\"\u00a0 inserts a double quote in a string:```java\nString txt = \"We are the so-called \\\"Vikings\\\" from the north.\";```The sequence \\'\u00a0 inserts a single quote in a string:```java\nString txt = \"It\\'s alright.\";```The sequence \\\\\u00a0 inserts a single backslash in a string:```java\nString txt = \"The character \\\\ is called backslash.\";```Six other escape sequences are valid in Java:",
                "Adding Numbers and Strings": "If you add two numbers, the result will be a number:```java\nint x = 10;\r\nint y = 20;\r\nint z = x + y;      // z will be 30 (an integer/number)```If you add two strings, the result will be a string concatenation:```java\nString x = \"10\";\r\nString y = \"20\";\r\nString z = x + y;   // z will be 1020 (a String)```If you add a number and a string, the result will be a string concatenation:```java\nString x = \"10\";\r\nint y = 20;\r\nString z = x + y;   // z will be 1020 (a String)```"
            }
        },
        "math": {
            "title": "Java Math",
            "url": "https://www.w3schools.com/java/java_math.asp",
            "info": {
                "Math.max(x,y)": "The Math.max(x,y) method can be used to find the highest value of x andy:```java\nMath.max(5, 10);```",
                "Math.min(x,y)": "The Math.min(x,y) method can be used to find the lowest value of of x and y:```java\nMath.min(5, 10);```",
                "Math.sqrt(x)": "The Math.sqrt(x) method returns the square root of x:```java\nMath.sqrt(64);```",
                "Math.abs(x)": "The Math.abs(x) method returns the absolute (positive) value of x:```java\nMath.abs(-4.7);```",
                "Random Numbers": "Math.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive):```java\nMath.random();```To get more control over the random number, e.g. you only want a random number between 0 and 100, you can use the following formula:```java\nint randomNum = (int)(Math.random() * 101);  // 0 to 100```"
            }
        },
        "booleans": {
            "title": "Java Booleans",
            "url": "https://www.w3schools.com/java/java_booleans.asp",
            "info": {
                "Java Booleans": "Very often, in programming, you will need a data type that can only have one of two values, like:For this, Java has a boolean data type, which can take the values true or false.",
                "Boolean Values": "A boolean type is declared with the boolean keyword and can only take the values true or false:```java\nboolean isJavaFun = true;\r\nboolean isFishTasty = false;\r\nSystem.out.println(isJavaFun);     // Outputs true\r\nSystem.out.println(isFishTasty);   // Outputs false```However, it is more common to return boolean values from boolean expressions, for conditional testing(see below).",
                "Boolean Expression": "A Boolean expression is a Java expression that returns a Boolean value: true or false.You can use a comparison operator, such as the greater than (>) operator to find out if an expression (or a variable) is true:```java\nint x = 10;\r\nint y = 9;\r\nSystem.out.println(x > y); // returns true, because 10 is higher than 9```Or even easier:```java\nSystem.out.println(10 > 9); // returns true, because 10 is higher than 9```In the examples below, we use the equal to (==) operator to evaluate an expression:```java\nint x = 10;\r\nSystem.out.println(x == 10); // returns true, because the value of x is equal to 10``````java\nSystem.out.println(10 == 15); // returns false, because 10 is not equal to 15```"
            }
        },
        "if...else": {
            "title": "Java If...Else",
            "url": "https://www.w3schools.com/java/java_conditions.asp",
            "info": {
                "Java Conditions and If Statements": "Java supports the usual logical conditions from mathematics:You can use these conditions to perform different actions for different decisions.Java has the following conditional statements:",
                "The if Statement": "Use the if statement to specify a block of Java code to be executed if a condition is true.```java\nif (condition) {// block of code to be executed if the condition is true\r\n}```In the example below, we test two values to find out if 20 is greater than 18. If the condition is true, print some text:```java\nif (20 > 18) {System.out.println(\"20 is greater than 18\");\r\n}```We can also test variables:```java\nint x = 20;\r\nint y = 18;\r\nif (x > y) {System.out.println(\"x is greater than y\");\r\n}```In the example above we use two variables, x and y, to test whether x is greater than y (using the > operator). As x is 20, and y is 18, and we know that 20 is greater than 18, we print to the screen that \"x is greater than y\".",
                "The else Statement": "Use the else statement to specify a block of code to be executed if the condition is false.```java\nif (condition) {// block of code to be executed if the condition is true\r\n} else {// block of code to be executed if the condition is false\r\n}``````java\nint time = 20;\r\nif (time < 18) {System.out.println(\"Good day.\");\r\n} else {System.out.println(\"Good evening.\");\r\n}\r\n// Outputs \"Good evening.\"```In the example above, time (20) is greater than 18, so the condition is false. Because of this, we move on to the else condition and print to the screen \"Good evening\". If the time was less than 18, the program would print \"Good day\".",
                "The else if Statement": "Use the else if statement to specify a new condition if the first condition is false.```java\nif (condition1) {// block of code to be executed if condition1 is true\r\n} else if (condition2) {// block of code to be executed if the condition1 is false and condition2 is true\r\n} else {// block of code to be executed if the condition1 is false and condition2 is false\r\n}``````java\nint time = 22;\r\nif (time < 10) {System.out.println(\"Good morning.\");\r\n} else if (time < 20) {System.out.println(\"Good day.\");\r\n} else {System.out.println(\"Good evening.\");\r\n}\r\n// Outputs \"Good evening.\"```In the example above, time (22) is greater than 10, so the first condition is false. The next condition, in the  else if statement, is also false, so we move on to the elsecondition since condition1 and condition2 is both false - and print to the screen \"Good evening\".However, if the time was 14, our program would print \"Good day.\"",
                "Short Hand If...Else (Ternary Operator)": "There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. It can be used to replace multiple lines of code with a single line. It is often used to replace simple if else statements:```java\nvariable = (condition) ? expressionTrue :  expressionFalse;```Instead of writing:```java\nint time = 20;\r\nif (time < 18) {System.out.println(\"Good day.\");\r\n} else {System.out.println(\"Good evening.\");\r\n}```You can simply write:```java\nint time = 20;\r\nString result = (time < 18) ? \"Good day.\" : \"Good evening.\";\r\nSystem.out.println(result);```"
            }
        },
        "switch": {
            "title": "Java Switch",
            "url": "https://www.w3schools.com/java/java_switch.asp",
            "info": {
                "Java Switch Statements": "Use the switch statement to select one of many code blocks to be executed.```java\nswitch(expression) {case x:  // code block  break;case y:  // code block  break;default:  // code block\r\n}```This is how it works:The example below uses the weekday number to calculate the weekday name:```java\nint day = 4;\r\nswitch (day) {case 1:  System.out.println(\"Monday\");  break;case 2:  System.out.println(\"Tuesday\");  break;case 3:  System.out.println(\"Wednesday\");  break;case 4:  System.out.println(\"Thursday\");  break;case 5:  System.out.println(\"Friday\");  break;case 6:  System.out.println(\"Saturday\");  break;case 7:  System.out.println(\"Sunday\");  break;\r\n}\r\n// Outputs \"Thursday\" (day 4)```",
                "The break Keyword": "When Java reaches a break keyword, it breaks out of the switch block.This will stop the execution of more code and case testing inside the block.When a match is found, and the job is done, it's time for a break. There is no need for more testing.",
                "The default Keyword": "The default keyword specifies some code to run if there is no case match:```java\nint day = 4;\r\nswitch (day) {case 6:  System.out.println(\"Today is Saturday\");  break;case 7:  System.out.println(\"Today is Sunday\");  break;default:  System.out.println(\"Looking forward to the Weekend\");\r\n}\r\n// Outputs \"Looking forward to the Weekend\"```",
                "Definition and Usage": "The switch keyword selects one of many code blocks to be executed.From the example above, it works like this:",
                "Related Pages": "Read more about the switch statement in our Java Switch Tutorial.\u276e Java Keywords"
            }
        },
        "whileloop": {
            "title": "Java While Loop",
            "url": "https://www.w3schools.com/java/java_while_loop.asp",
            "info": {
                "Loops": "Loops can execute a block of code as long as a specified condition is reached.Loops are handy because they save time, reduce errors, and they make code more readable.",
                "Java While Loop": "The while loop loops through a block of code as long as a specified condition is true:```java\nwhile (condition) {// code block to be executed\r\n}```In the example below, the code in the loop will run, over and over again, as long as a variable (i) is less than 5:```java\nint i = 0;\r\nwhile (i < 5) {System.out.println(i);i++;\r\n}```",
                "The Do/While Loop": "The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.```java\ndo {// code block to be executed\r\n}\r\nwhile (condition);```The example below uses a do/while loop. The loop will always be executed at least once, even if the condition is false, because the code block is executed before the condition is tested:```java\nint i = 0;\ndo {System.out.println(i);i++;\r\n}\r\nwhile (i < 5);```"
            }
        },
        "forloop": {
            "title": "Java For Loop",
            "url": "https://www.w3schools.com/java/java_for_loop.asp",
            "info": {
                "Java For Loop": "When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop:```java\nfor (statement 1; statement 2; statement 3) {// code block to be executed\r\n }```Statement 1 is executed (one time) before the execution of the code block.Statement 2 defines the condition for executing the code block.Statement 3 is executed (every time) after the code block has been executed.The example below will print the numbers 0 to 4:```java\nfor (int i = 0; i < 5; i++) {System.out.println(i);\r\n}```Statement 1 sets a variable before the loop starts (int i = 0).Statement 2 defines the condition for the loop to run (i must be less than 5). If the condition is true, the loop will start over again, if it is false, the loop will end.Statement 3 increases a value (i++) each time the code block in the loop has been executed.",
                "Another Example": "This example will only print even values between 0 and 10:```java\nfor (int i = 0; i <= 10; i = i + 2) {System.out.println(i);\r\n}```",
                "For-Each Loop": "There is also a \"for-each\" loop, which is used exclusively to loop through elements in an array:```java\nfor (type variableName : arrayName) {// code block to be executed\r\n}```The following example outputs all elements in the cars array, using a \"for-each\" loop:```java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nfor (String i : cars) {System.out.println(i);\r\n}```"
            }
        },
        "break/continue": {
            "title": "Java Break/Continue",
            "url": "https://www.w3schools.com/java/java_break.asp",
            "info": {
                "Java Break": "You have already seen the break statement used in an earlier chapter of this tutorial. It was used to \"jump out\" of a switch statement.The break statement can also be used to jump out of a loop.This example jumps out of the loop when i is equal to 4:```java\nfor (int i = 0; i < 10; i++) {if (i == 4) {  break;}System.out.println(i);\r\n}```",
                "Java Continue": "The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.This example skips the value of 4:```java\nfor (int i = 0; i < 10; i++) {if (i == 4) {  continue;}System.out.println(i);\r\n}```",
                "Break and Continue in While Loop": "You can also use break and continue in while loops:```java\nint i = 0;\r\nwhile (i < 10) {System.out.println(i);i++;if (i == 4) {  break;}\r\n}``````java\nint i = 0;\r\nwhile (i < 10) {if (i == 4) {  i++;  continue;}System.out.println(i);i++;\r\n}```"
            }
        },
        "arrays": {
            "title": "Java Arrays",
            "url": "https://www.w3schools.com/java/java_arrays.asp",
            "info": {
                "Java Arrays": "Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.To declare an array, define the variable type with square brackets:```java\nString[] cars;```We have now declared a variable that holds an array of strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:```java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};```To create an array of integers, you could write:```java\nint[] myNum = {10, 20, 30, 40};```",
                "Access the Elements of an Array": "You access an array element by referring to the index number.This statement accesses the value of the first element in cars:```java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nSystem.out.println(cars[0]);\r\n// Outputs Volvo```",
                "Change an Array Element": "To change the value of a specific element, refer to the index number:```java\ncars[0] = \"Opel\";``````java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\ncars[0] = \"Opel\";\r\nSystem.out.println(cars[0]);\r\n// Now outputs Opel instead of Volvo```",
                "Array Length": " To find out how many elements an array has, use the length property:```java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nSystem.out.println(cars.length);\r\n// Outputs 4```",
                "Loop Through an Array": "You can loop through the array elements with the for loop, and use the length property to specify how many times the loop should run.The following example outputs all elements in the cars array:```java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nfor (int i = 0; i < cars.length; i++) {System.out.println(cars[i]);\r\n}```",
                "Loop Through an Array with For-Each": "There is also a \"for-each\" loop, which is used exclusively to loop through elements in arrays:```java\nfor (type variable : arrayname) {...\r\n}```The following example outputs all elements in the cars array, using a \"for-each\" loop:```java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nfor (String i : cars) {System.out.println(i);\r\n}```The example above can be read like this: for each String element (called i - as in index) in cars, print out the value of i.If you compare the for loop and for-each loop, you will see that the for-each method is easier to write, it does not require a counter (using the length property), and it is more readable.",
                "Multidimensional Arrays": "A multidimensional array is an array containing one or more arrays.To create a two-dimensional array, add each array within its own set of curly braces:```java\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };```myNumbers is now an array with two arrays as its elements.To access the elements of the myNumbers array, specify two indexes: one for the array, and one for the element inside that array. This example accesses the third element (2) in the second array (1) of myNumbers:```java\nint[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };\r\nint x = myNumbers[1][2];\r\nSystem.out.println(x); // Outputs 7```We can also use a for loop inside another for loop to get the elements of a two-dimensional array (we still have to point to the two indexes):```java\npublic class MyClass {public static void main(String[] args) {  int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };  for (int i = 0; i < myNumbers.length; ++i) {    for(int j = 0; j < myNumbers[i].length; ++j) {      System.out.println(myNumbers[i][j]);    }\n    }}\r\n}```"
            }
        },
        "methods": {
            "title": "Java Methods",
            "url": "https://www.w3schools.com/java/java_methods.asp",
            "info": {
                "Create a Method": "A method must be declared within a class. It is defined with the name of the method, followed by parentheses (). Java provides some pre-defined methods, such as System.out.println(), but you can also create your own methods to perform certain actions:```java\npublic class MyClass {static void myMethod() {  // code to be executed}\r\n}```",
                "Call a Method": "To call a method in Java, write the method's name followed by two parentheses () and a semicolon;In the following example, myMethod() is used to print a text (the action), when it is called:```java\npublic class MyClass {static void myMethod() {  System.out.println(\"I just got executed!\");}\r\npublic static void main(String[] args) {  myMethod();}\r\n}\r\n\r\n// Outputs \"I just got executed!\"```A method can also be called multiple times:```java\npublic class MyClass {static void myMethod() {  System.out.println(\"I just got executed!\");}\r\npublic static void main(String[] args) {  myMethod();  myMethod();  myMethod();}\r\n}\r\n\r\n// I just got executed!\r\n// I just got executed!\r\n// I just got executed!```"
            }
        },
        "methodparameters": {
            "title": "Java Method Parameters",
            "url": "https://www.w3schools.com/java/java_methods_param.asp",
            "info": {
                "Parameters and Arguments": "Information can be passed to methods as parameter. Parameters act as variables inside the method.Parameters are specified after the method name, inside the parentheses.You can add as many parameters as you want, just separate them with a comma.The following example has a method that takes a String called fname as parameter.When the method is called, we pass along a first name,which is used inside the method to print the full name:```java\npublic class MyClass {static void myMethod(String fname) {  System.out.println(fname + \" Refsnes\");}\r\npublic static void main(String[] args) {  myMethod(\"Liam\");  myMethod(\"Jenny\");  myMethod(\"Anja\");}\r\n}\r\n// Liam Refsnes\r\n// Jenny Refsnes\r\n// Anja Refsnes```",
                "Multiple Parameters": "You can have as many parameters as you like:```java\npublic class MyClass {static void myMethod(String fname, int age) {  System.out.println(fname + \" is \" + age);}\r\npublic static void main(String[] args) {  myMethod(\"Liam\", 5);  myMethod(\"Jenny\", 8);  myMethod(\"Anja\", 31);}\r\n}\r\n\r\n// Liam is 5\r\n// Jenny is 8\r\n// Anja is 31```",
                "Return Values": "The void keyword, used in the examples above, indicates that the method should not return a value. If you want the method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method:```java\npublic class MyClass {static int myMethod(int x) {  return 5 + x;}\r\npublic static void main(String[] args) {  System.out.println(myMethod(3));}\r\n}\r\n// Outputs 8 (5 + 3)```This example returns the sum of a method's two parameters:```java\npublic class MyClass {static int myMethod(int x, int y) {  return x + y;}\r\npublic static void main(String[] args) {  System.out.println(myMethod(5, 3));}\r\n}\r\n// Outputs 8 (5 + 3)```You can also store the result in a variable (recommended, as it is easier to read and maintain):```java\npublic class MyClass {static int myMethod(int x, int y) {  return x + y;}\r\npublic static void main(String[] args) {  int z = myMethod(5, 3);  System.out.println(z);}\r\n}\r\n// Outputs 8 (5 + 3)```",
                "A Method with If...Else": "It is common to use if...else statements inside methods:```java\npublic class MyClass {\r\n// Create a checkAge() method with an integer variable called agestatic void checkAge(int age) {\r\n  // If age is less than 18, print \"access denied\"  if (age < 18) {    System.out.println(\"Access denied - You are not old enough!\");\r\n  // If age is greater than 18, print \"access granted\"  } else {    System.out.println(\"Access granted - You are old enough!\");  }\r\n}\r\npublic static void main(String[] args) {  checkAge(20); // Call the checkAge method and pass along an age of 20}\r\n}\r\n\r\n// Outputs \"Access granted - You are old enough!\"```"
            }
        },
        "methodoverloading": {
            "title": "Java Method Overloading",
            "url": "https://www.w3schools.com/java/java_methods_overloading.asp",
            "info": {
                "Method Overloading": "With method overloading, multiple methods can have the same name with differentparameters:```java\nint myMethod(int x)\r\nfloat myMethod(float x)\r\ndouble myMethod(double x, double y)```Consider the following example, which have two methods that add numbers of different type:```java\nstatic int plusMethodInt(int x, int y) {return x + y;\r\n}\r\n\r\nstatic double plusMethodDouble(double x, double y) {return x + y;\r\n}\r\n\r\npublic static void main(String[] args) {int myNum1 = plusMethodInt(8, 5);double myNum2 = plusMethodDouble(4.3, 6.26);System.out.println(\"int: \" + myNum1);System.out.println(\"double: \" + myNum2);\r\n}```Instead of defining two methods that should do the same thing, it is better to overload one. In the example below, we overload the plusMethod method to work for both int and double:"
            }
        },
        "scope": {
            "title": "Java Scope",
            "url": "https://www.w3schools.com/java/java_scope.asp",
            "info": {
                "Java Scope": "In Java, variables are only accessible inside the region they are created. This is calledscope.",
                "Method Scope": "Variables declared directly inside a method are available anywhere in the method followingthe line of code in which they were declared.```java\npublic class MyClass {public static void main(String[] args) {\r\n  // Code here cannot use x\r\n  int x = 100;\r\n  // Code here can use x  System.out.println(x);}\r\n}```",
                "Block Scope": "A block of code refers to all of the code between between curly braces {}. Variablesdeclared inside blocks of code are only accessible by the code between the curly braceswhich follows the line in which the variable was declared. A block of code may exist on itsown or it may belong to an if, while or for statement. In the case of for statements,variables declared in the statement itself are also available inside the block's scope.```java\npublic class MyClass {public static void main(String[] args) {\r\n  // Code here CANNOT use x\r\n  { // This is a block\r\n    // Code here CANNOT use x\r\n    int x = 100;\r\n    // Code here CAN use x    System.out.println(x);\r\n } // The block ends here\r\n  // Code here CANNOT use x}\r\n}```"
            }
        },
        "recursion": {
            "title": "Java Recursion",
            "url": "https://www.w3schools.com/java/java_recursion.asp",
            "info": {
                "Java Recursion": "Recursion is the technique of making a function call itself. This technique provides a wayto break complicated problems down into simple problems which are easier to solve.Recursion may be a bit difficult to understand when encountering it for the first time, thebest way to figure out how it works is to experiment with it.",
                "Recursion Example": "Adding two numbers together is easy to do, but adding a range of numbers is morecomplicated. In the following example, recursion is used to add a range of numberstogether by breaking it down into the simple task of adding two numbers:```java\npublic class MyClass {public static void main(String[] args) {  int result = sum(10);  System.out.println(result);}public static int sum(int k) {  if (k > 0) {    return k + sum(k - 1);  } else {    return 0;  }}\r\n}```When the sum() function is called, it adds parameter k to the sum of all numbers smallerthan k and returns the result. When k becomes 0, the function just returns 0. Whenrunning, the program follows these steps:Since the function does not call itself when k is 0, the program stops there and returns theresult.",
                "Halting Condition": "Just as loops can run into the problem of infinite looping, recursive functions can run intothe problem of infinite recursion. Infinite recursion is when the function never stops callingitself. Every recursive function should have a halting condition, which is the conditionwhere the function stops calling itself. In the previous example, the halting condition iswhen the parameter k becomes 0.It is helpful to see a variety of different examples to better understand the concept. In thisexample, the function adds a range of numbers between a start and an end. The haltingcondition for this recursive function is when end is not greater than start:```java\npublic class MyClass {public static void main(String[] args) {  int result = sum(5, 10);  System.out.println(result);}public static int sum(int start, int end) {  if (end > start) {    return end + sum(start, end - 1);  } else {    return end;  }}\r\n}```"
            }
        },
        "oop": {
            "title": "Java OOP",
            "url": "https://www.w3schools.com/java/java_oop.asp",
            "info": {
                "Java - What is OOP?": "OOP stands for Object-Oriented Programming.Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.Object-oriented programming has several advantages over procedural programming:Tip: The \"Don't Repeat Yourself\" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.",
                "Java - What are Classes and Objects?": "Classes and objects are the two main aspects of object-oriented programming.Look at the following illustration to see the difference between class and objects:Another example:So, a class is a template for objects, and an object is an instance of a class.When the individual objects are created, they inherit all the variables and methods from the class.You will learn much more about classes and objects in the next chapter."
            }
        },
        "classes/objects": {
            "title": "Java Classes/Objects",
            "url": "https://www.w3schools.com/java/java_classes.asp",
            "info": {
                "Java Classes/Objects": "Java is an object-oriented programming language.Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. The car has attributes, such as weight and color, and methods, such as drive and brake. A Class is like an object constructor, or a \"blueprint\" for creating objects.",
                "Create a Class": "To create a class, use the keyword class:```java\npublic class MyClass {int x = 5;\r\n}```",
                "Create an Object": "In Java, an object is created from a class. We have already created the class named MyClass, so now we can use this to create objects.To create an object of MyClass, specify the class name, followed by the object name, and use the keyword new:```java\npublic class MyClass {int x = 5;\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass();  System.out.println(myObj.x);}\r\n}```",
                "Multiple Objects": "You can create multiple objects of one class:```java\npublic class MyClass {int x = 5;\r\npublic static void main(String[] args) {  MyClass myObj1 = new MyClass();  // Object 1  MyClass myObj2 = new MyClass();  // Object 2  System.out.println(myObj1.x);  System.out.println(myObj2.x);}\r\n}```",
                "Using Multiple Classes": "You can also create an object of a class and access it in another class. This is often used for better organization of classes (one class has all the attributes and methods, while the other class holds the main() method (code to be executed)). Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory/folder:```java\npublic class MyClass {int x = 5;\r\n}``````java\nclass OtherClass {public static void main(String[] args) {  MyClass myObj = new MyClass();  System.out.println(myObj.x);}\r\n}```When both files have been compiled:```java\nC:\\Users\\Your Name>javac MyClass.java\n\r\nC:\\Users\\Your Name>javac OtherClass.java```Run the OtherClass.java file:```java\nC:\\Users\\Your Name>java OtherClass```And the output will be:"
            }
        },
        "classattributes": {
            "title": "Java Class Attributes",
            "url": "https://www.w3schools.com/java/java_class_attributes.asp",
            "info": {
                "Java Class Attributes": "In the previous chapter, we used the term \"variable\" for x in the example (as shown below). It is actually an attribute of the class. Or you could say that class attributes are variables within a class:```java\npublic class MyClass {int x = 5;int y = 3;\r\n}```",
                "Accessing Attributes": "You can access attributes by creating an object of the class, and by using the dot syntax (.):The following example will create an object of the MyClass class, with the name myObj. We use the x attribute on the object to print its value:```java\npublic class MyClass {int x = 5;\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass();  System.out.println(myObj.x);}\r\n}```",
                "Modify Attributes": "You can also modify attribute values:```java\npublic class MyClass {int x;\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass();  myObj.x = 40;  System.out.println(myObj.x);}\r\n}```Or override existing values:```java\npublic class MyClass {int x = 10;\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass();  myObj.x = 25; // x is now 25  System.out.println(myObj.x);}\r\n}```If you don't want the ability to override existing values, declare the attribute as final:```java\npublic class MyClass {final int x = 10;\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass();  myObj.x = 25; // will generate an error: cannot assign a value to a final variable  System.out.println(myObj.x);}\r\n}```",
                "Multiple Objects": "If you create multiple objects of one class, you can change the attribute values in one object, without affecting the attribute values in the other:```java\npublic class MyClass {int x = 5;\r\npublic static void main(String[] args) {  MyClass myObj1 = new MyClass();  // Object 1  MyClass myObj2 = new MyClass();  // Object 2  myObj2.x = 25;  System.out.println(myObj1.x);  // Outputs 5  System.out.println(myObj2.x);  // Outputs 25}\r\n}```",
                "Multiple Attributes": "You can specify as many attributes as you want:```java\npublic class Person {String fname = \"John\";String lname = \"Doe\";int age = 24;\r\npublic static void main(String[] args) {  Person myObj = new Person();  System.out.println(\"Name: \" + myObj.fname + \" \" + myObj.lname);  System.out.println(\"Age: \" + myObj.age);}\r\n}```"
            }
        },
        "classmethods": {
            "title": "Java Class Methods",
            "url": "https://www.w3schools.com/java/java_class_methods.asp",
            "info": {
                "Java Class Methods": "You learned from the Java Methods chapter that methods are declared within a class, and that they are used to perform certain actions:```java\npublic class MyClass {static void myMethod() {  System.out.println(\"Hello World!\");}\r\n}```myMethod() prints a text (the action), when it is called. To call a method, write the method's name followed by two parentheses () and a semicolon;```java\npublic class MyClass {static void myMethod() {  System.out.println(\"Hello World!\");}\r\npublic static void main(String[] args) {  myMethod();}\r\n}\r\n\r\n// Outputs \"Hello World!\"```",
                "Static vs. Non-Static": "You will often see Java programs that have either static or public attributes and methods.In the example above, we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:```java\npublic class MyClass {// Static methodstatic void myStaticMethod() {  System.out.println(\"Static methods can be called without creating objects\");}\r\n// Public methodpublic void myPublicMethod() {  System.out.println(\"Public methods must be called by creating objects\");}\r\n// Main methodpublic static void main(String[] args) {  myStaticMethod(); // Call the static method  // myPublicMethod(); This would compile an error\r\n  MyClass myObj = new MyClass(); // Create an object of MyClass  myObj.myPublicMethod(); // Call the public method on the object}\r\n}```",
                "Access Methods With an Object": "```java\n// Create a Car class\r\npublic class Car {\r\n // Create a fullThrottle() methodpublic void fullThrottle() {  System.out.println(\"The car is going as fast as it can!\");}\r\n// Create a speed() method and add a parameterpublic void speed(int maxSpeed) {  System.out.println(\"Max speed is: \" + maxSpeed);}\r\n// Inside main, call the methods on the myCar objectpublic static void main(String[] args) {  Car myCar = new Car();     // Create a myCar object  myCar.fullThrottle();      // Call the fullThrottle() method  myCar.speed(200);          // Call the speed() method}\r\n}\r\n\r\n// The car is going as fast as it can!\r\n// Max speed is: 200```1) We created a custom Car class with the class keyword.2) We created the fullThrottle() and speed() methods in the Car class.3) The fullThrottle() method and the speed() method will print out some text, when they are called.4) The speed() method accepts an int parameter called maxSpeed - we will use this in 8).5) In order to use the Car class and its methods, we need to create an object of the Car Class.6) Then, go to the main() method, which you know by now is a built-in Java method that runs your program (any code inside main is executed).7) By using the new keyword we created a Car object with the namemyCar.8) Then, we call the fullThrottle() and speed() methods on the myCar object, and run the program using the name of the object (myCar), followed by a dot (.), followed by the name of the method (fullThrottle(); and speed(200);). Notice that we add an int parameter of 200 inside the speed() method.",
                "Using Multiple Classes": "Like we specified in the Classes chapter, it is a good practice to create an object of a class and access it in another class.Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory:```java\npublic class Car {public void fullThrottle() {  System.out.println(\"The car is going as fast as it can!\");}\r\npublic void speed(int maxSpeed) {  System.out.println(\"Max speed is: \" + maxSpeed);}\r\n}``````java\nclass OtherClass {public static void main(String[] args) {  Car myCar = new Car();     // Create a myCar object  myCar.fullThrottle();      // Call the fullThrottle() method  myCar.speed(200);          // Call the speed() method}\r\n}```When both files have been compiled:```java\nC:\\Users\\Your Name>javac Car.java\n\r\nC:\\Users\\Your Name>javac OtherClass.java```Run the OtherClass.java file:```java\nC:\\Users\\Your Name>java OtherClass```And the output will be:"
            }
        },
        "constructors": {
            "title": "Java Constructors",
            "url": "https://www.w3schools.com/java/java_constructors.asp",
            "info": {
                "Java Constructors": "A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes:```java\n// Create a MyClass class\r\npublic class MyClass {int x;  // Create a class attribute\r\n// Create a class constructor for the MyClass classpublic MyClass() {  x = 5;  // Set the initial value for the class attribute x}\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass(); // Create an object of class MyClass (This will call the constructor)  System.out.println(myObj.x); // Print the value of x}\r\n}\r\n\r\n// Outputs 5```",
                "Constructor Parameters": "Constructors can also take parameters, which is used to initialize attributes.The following example adds an int y parameter to the constructor. Inside the constructor we set x to y (x=y). When we call the constructor, we pass a parameter to the constructor (5), which will set the value of x to 5:```java\npublic class MyClass {int x;\r\npublic MyClass(int y) {  x = y;}\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass(5);  System.out.println(myObj.x);}\r\n}\r\n\r\n// Outputs 5```You can have as many parameters as you want:```java\npublic class Car {int modelYear;String modelName;\r\npublic Car(int year, String name) {  modelYear = year;  modelName = name;}\r\npublic static void main(String[] args) {  Car myCar = new Car(1969, \"Mustang\");  System.out.println(myCar.modelYear + \" \" + myCar.modelName);}\r\n}\r\n\r\n// Outputs 1969 Mustang```"
            }
        },
        "modifiers": {
            "title": "Java Modifiers",
            "url": "https://www.w3schools.com/java/java_modifiers.asp",
            "info": {
                "Modifiers": "By now, you are quite familiar with the public keyword that appears in almost all of our examples:```java\npublic class MyClass```The public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors.We divide modifiers into two groups:",
                "Access Modifiers": "For classes, you can use either public or default:For attributes, methods and constructors, you can use the one of the following:",
                "Non-Access Modifiers": "For classes, you can use either final or abstract:For attributes and methods, you can use the one of the following:",
                "Final": "If you don't want the ability to override existing attribute values, declare attributes as final:```java\npublic class MyClass {final int x = 10;final double PI = 3.14;\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass();  myObj.x = 50; // will generate an error: cannot assign a value to a final variable  myObj.PI = 25; // will generate an error: cannot assign a value to a final variable  System.out.println(myObj.x);}\r\n}```",
                "Static": "A static method means that it can be accessed without creating an object of the class, unlike public:```java\npublic class MyClass {// Static methodstatic void myStaticMethod() {  System.out.println(\"Static methods can be called without creating objects\");}\r\n// Public methodpublic void myPublicMethod() {  System.out.println(\"Public methods must be called by creating objects\");}\r\n// Main methodpublic static void main(String[ ] args) {  myStaticMethod(); // Call the static method  // myPublicMethod(); This would output an error\r\n  MyClass myObj = new MyClass(); // Create an object of MyClass  myObj.myPublicMethod(); // Call the public method}\r\n}```",
                "Abstract": "An abstract method belongs to an abstract class, and it does not have a body. The body is provided by the subclass:```java\n// Code from filename: Person.java\r\n// abstract class\nabstract class Person {public String fname = \"John\";public int age = 24;public abstract void study(); // abstract method\r\n}\r\n\r\n// Subclass (inherit from Person)\r\nclass Student extends Person {public int graduationYear = 2018;public void study() { // the body of the abstract method is provided here  System.out.println(\"Studying all day long\");}\r\n}\r\n// End code from filename: Person.java\r\n\r\n// Code from filename: MyClass.java\r\nclass MyClass {public static void main(String[] args) {  // create an object of the Student class (which inherits attributes and methods from Person)  Student myObj = new Student();\r\n  System.out.println(\"Name: \" + myObj.fname);  System.out.println(\"Age: \" + myObj.age);  System.out.println(\"Graduation Year: \" + myObj.graduationYear);  myObj.study(); // call abstract method\n  }\r\n}```"
            }
        },
        "encapsulation": {
            "title": "Java Encapsulation",
            "url": "https://www.w3schools.com/java/java_encapsulation.asp",
            "info": {
                "Encapsulation": "The meaning of Encapsulation, is to make sure that \"sensitive\" data is hidden from users. To achieve this, you must:",
                "Get and Set": "You learned from the previous chapter that private variables can only be accessed within the same class (an outside class has no access to it). However, it is possible to access them if we provide public get and set methods.The get method returns the variable value, and the set method sets the value.Syntax for both is that they start with either get or set, followed by the name of the variable, with the first letter in upper case:```java\npublic class Person {private String name; // private = restricted access\r\n// Getterpublic String getName() {  return name;}\r\n// Setterpublic void setName(String newName) {  this.name = newName;}\r\n}```The get method returns the value of the variable name.The set method takes a parameter (newName) and assigns it to thename variable. The this keyword is used to refer to the current object.However, as the name variable is declared as private, we cannot access it from outside this class:If the variable was declared as public, we would expect the following output:However, as we try to access a private variable, we get an error:Instead, we use the getName() and setName() methods to acccess and update the variable:",
                "Why Encapsulation?": ""
            }
        },
        "packages/api": {
            "title": "Java Packages / API",
            "url": "https://www.w3schools.com/java/java_packages.asp",
            "info": {
                "Java Packages & API": "A package in Java is used to group related classes. Think of it asa folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:",
                "Built-in Packages": "The Java API is a library of prewritten classes, that are free to use, included in theJava Development Environment.The library contains components for managing input, database programming, and much much more. The complete list can be found at Oracles website: https://docs.oracle.com/javase/8/docs/api/.The library is divided into packages and classes. Meaning you can either import a single class (along with its methods and attributes), or a whole package that contain all the classes that belong to the specified package.To use a class or a package from the library, you need to use the import keyword:```java\nimport package.name.Class;   // Import a single class\r\nimport package.name.*;   // Import the whole package```",
                "Import a Class": "If you find a class you want to use, for example, the Scanner class, which is used to get user input, write the following code:```java\nimport java.util.Scanner;```In the example above, java.util is a package, while Scanner is a class of the java.util package.To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read a complete line:```java\nimport java.util.Scanner;\r\n\r\nclass MyClass {public static void main(String[] args) {  Scanner myObj = new Scanner(System.in);  System.out.println(\"Enter username\");\r\n  String userName = myObj.nextLine();  System.out.println(\"Username is: \" + userName);}\r\n}```",
                "Import a Package": "There are many packages to choose from. In the previous example, we used the Scanner class from the java.util package. This package also contains date and time facilities, random-number generator and other utility classes.To import a whole package, end the sentence with an asterisk sign (\\*). The following example will import ALL the classes in the java.util package:```java\nimport java.util.*;```",
                "User-defined Packages": "To create your own package, you need to understand that Java uses a file system directory to store them. Just like folders on your computer:To create a package, use the package keyword:```java\npackage mypack;\r\nclass MyPackageClass {public static void main(String[] args) {  System.out.println(\"This is my package!\");}\r\n}```Save the file as MyPackageClass.java, and compile it:```java\nC:\\Users\\Your Name>javac MyPackageClass.java```Then compile the package:```java\nC:\\Users\\Your Name>javac -d . MyPackageClass.java```When we compiled the package in the example above, a new folder was created, called \"mypack\".To run the MyPackageClass.java file, write the following:```java\nC:\\Users\\Your Name>java mypack.MyPackageClass```The output will be:"
            }
        },
        "inheritance": {
            "title": "Java Inheritance",
            "url": "https://www.w3schools.com/java/java_inheritance.asp",
            "info": {
                "Java Inheritance (Subclass and Superclass)": "In Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:To inherit from a class, use the extends keyword.In the example below, the Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):```java\nclass Vehicle {protected String brand = \"Ford\";        // Vehicle attributepublic void honk() {                    // Vehicle method  System.out.println(\"Tuut, tuut!\");}\r\n}\r\n\r\nclass Car extends Vehicle {private String modelName = \"Mustang\";    // Car attributepublic static void main(String[] args) {\r\n  // Create a myCar object  Car myCar = new Car();\r\n  // Call the honk() method (from the Vehicle class) on the myCar object  myCar.honk();\r\n  // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class  System.out.println(myCar.brand + \" \" + myCar.modelName);}\r\n}```",
                "The final Keyword": "If you don't want other classes to inherit from a class, use the final keyword:```java\nfinal class Vehicle {...\r\n}\r\n\r\nclass Car extends Vehicle {...\r\n}```"
            }
        },
        "polymorphism": {
            "title": "Java Polymorphism",
            "url": "https://www.w3schools.com/java/java_polymorphism.asp",
            "info": {
                "Java Polymorphism": "Polymorphism means \"many forms\", and it occurs when we have many classes that are related to each other by inheritance.Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.For example, think of a superclass called Animal that has a method called animalSound(). Subclasses of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):```java\nclass Animal {public void animalSound() {  System.out.println(\"The animal makes a sound\");}\r\n}\r\n\r\nclass Pig extends Animal {public void animalSound() {  System.out.println(\"The pig says: wee wee\");}\r\n}\r\n\r\nclass Dog extends Animal {public void animalSound() {  System.out.println(\"The dog says: bow wow\");}\r\n}```Now we can create Pig and Dog objects and call the animalSound() method on both of them:"
            }
        },
        "innerclasses": {
            "title": "Java Inner Classes",
            "url": "https://www.w3schools.com/java/java_inner_classes.asp",
            "info": {
                "Java Inner Classes": "In Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable.To access the inner class, create an object of the outer class, and then create an object of the inner class:```java\nclass OuterClass {int x = 10;\r\nclass InnerClass {  int y = 5;}\r\n}\r\n\r\npublic class MyMainClass {public static void main(String[] args) {  OuterClass myOuter = new OuterClass();  OuterClass.InnerClass myInner = myOuter.new InnerClass();  System.out.println(myInner.y + myOuter.x);}\r\n}\r\n\r\n// Outputs 15 (5 + 10)```",
                "Private Inner Class": "Unlike a \"regular\" class, an inner class can be private or protected. If you don't want outside objects to access the inner class, declare the class as private:```java\nclass OuterClass {int x = 10;\r\nprivate class InnerClass {  int y = 5;}\r\n}\r\n\r\npublic class MyMainClass {public static void main(String[] args) {  OuterClass myOuter = new OuterClass();  OuterClass.InnerClass myInner = myOuter.new InnerClass();  System.out.println(myInner.y + myOuter.x);}\r\n}```",
                "Static Inner Class": "An inner class can also be static, which means that you can access it without creating an object of the outer class:```java\nclass OuterClass {int x = 10;\r\nstatic class InnerClass {  int y = 5;}\r\n}\r\n\r\npublic class MyMainClass {public static void main(String[] args) {  OuterClass.InnerClass myInner = new OuterClass.InnerClass();  System.out.println(myInner.y);}\r\n}\r\n\r\n// Outputs 5```",
                "Access Outer Class From Inner Class": "One advantage of inner classes, is that they can access attributes and methods of the outer class:```java\nclass OuterClass {int x = 10;\r\nclass InnerClass {  public int myInnerMethod() {    return x;  }}\r\n}\r\n\r\npublic class MyMainClass {public static void main(String[] args) {  OuterClass myOuter = new OuterClass();  OuterClass.InnerClass myInner = myOuter.new InnerClass();  System.out.println(myInner.myInnerMethod());}\r\n}\r\n\r\n// Outputs 10```"
            }
        },
        "abstraction": {
            "title": "Java Abstraction",
            "url": "https://www.w3schools.com/java/java_abstract.asp",
            "info": {
                "Java Abstract Classes and Methods": "Data abstraction is the process of hiding certain details and showing only essential information to the user.Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).The abstract keyword is a non-access modifier, used for classes and methods:An abstract class can have both abstract and regular methods:```java\nabstract class Animal {public abstract void animalSound();public void sleep() {  System.out.println(\"Zzz\");}\r\n}```From the example above, it is not possible to create an object of the Animal class:```java\nAnimal myObj = new Animal(); // will generate an error```To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class:"
            }
        },
        "interface": {
            "title": "Java Interface",
            "url": "https://www.w3schools.com/java/java_interface.asp",
            "info": {
                "Java Interface": "Another way to achieve abstraction in Java, is with interfaces.An interface is a completely \"abstract class\" that is used to group related methods with empty bodies:```java\n// interface\r\ninterface Animal {public void animalSound(); // interface method (does not have a body)public void run(); // interface method (does not have a body)\r\n}```To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class:",
                "Multiple Interfaces ": "To implement multiple interfaces, separate them with a comma:```java\ninterface FirstInterface {public void myMethod(); // interface method\r\n}\r\n\r\ninterface SecondInterface {public void myOtherMethod(); // interface method\r\n}\r\n\r\n// DemoClass \"implements\" FirstInterface and SecondInterface\r\nclass DemoClass implements FirstInterface, SecondInterface {public void myMethod() {  System.out.println(\"Some text..\");}public void myOtherMethod() {  System.out.println(\"Some other text...\");}\r\n}\r\n\r\nclass MyMainClass {public static void main(String[] args) {  DemoClass myObj = new DemoClass();  myObj.myMethod();  myObj.myOtherMethod();}\r\n}```",
                "Definition and Usage": "The interface keyword is used to declare a special type of class that only contains abstract methods.To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class.",
                "Related Pages": "Read more about interfaces in our Java Interface Tutorial.\u276e Java Keywords"
            }
        },
        "enums": {
            "title": "Java Enums",
            "url": "https://www.w3schools.com/java/java_enums.asp",
            "info": {
                "Java Enums": "An enum is a special \"class\" that represents a group of constants (unchangeable variables, like final variables).To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters:```java\nLevel myVar = Level.MEDIUM;```",
                "Enum inside a Class": "You can also have an enum inside a class:```java\npublic class MyClass {enum Level {  LOW,  MEDIUM,  HIGH}\r\npublic static void main(String[] args) {  Level myVar = Level.MEDIUM;   System.out.println(myVar);}\r\n}```",
                "Enum in a Switch Statement": "Enums are often used in switch statements to check for corresponding values:```java\nenum Level {LOW,MEDIUM,HIGH\r\n}\r\n\r\npublic class MyClass {public static void main(String[] args) {  Level myVar = Level.MEDIUM;\r\n  switch(myVar) {    case LOW:      System.out.println(\"Low level\");      break;    case MEDIUM:       System.out.println(\"Medium level\");      break;    case HIGH:      System.out.println(\"High level\");      break;  }}\r\n}```",
                "Loop Through an Enum": "The enum type has a values() method, which returns an array of all enum constants. This method is useful when you want to loop through the constants of an enum:```java\nfor (Level myVar : Level.values()) {System.out.println(myVar);\r\n}```"
            }
        },
        "userinput": {
            "title": "Java User Input",
            "url": "https://www.w3schools.com/java/java_user_input.asp",
            "info": {
                "Java User Input": "The Scanner class is used to get user input, and it is found in the java.util package.To use the Scanner class, create an object of the class and use any of the available methods found in the Scanner class documentation. In our example, we will use the nextLine() method, which is used to read Strings:```java\nimport java.util.Scanner;  // Import the Scanner class\r\n\r\nclass MyClass {public static void main(String[] args) {  Scanner myObj = new Scanner(System.in);  // Create a Scanner object  System.out.println(\"Enter username\");\r\n  String userName = myObj.nextLine();  // Read user input  System.out.println(\"Username is: \" + userName);  // Output user input}\r\n}```",
                "Input Types": "In the example above, we used the nextLine() method, which is used to read Strings. To read other types, look at the table below:In the example below, we use different methods to read data of various types:```java\nimport java.util.Scanner;\r\n\r\nclass MyClass {public static void main(String[] args) {  Scanner myObj = new Scanner(System.in);\r\n  System.out.println(\"Enter name, age and salary:\");\r\n  // String input  String name = myObj.nextLine();\r\n  // Numerical input  int age = myObj.nextInt();  double salary = myObj.nextDouble();\r\n  // Output input by user  System.out.println(\"Name: \" + name);  System.out.println(\"Age: \" + age);  System.out.println(\"Salary: \" + salary);}\r\n}```"
            }
        },
        "date": {
            "title": "Java Date",
            "url": "https://www.w3schools.com/java/java_date.asp",
            "info": {
                "Java Dates": "Java does not have a built-in Date class, but we can import the java.time package to work with the date and time API. The package includes many date and time classes. For example:",
                "Display Current Date": "To display the current date, import the java.time.LocalDate class, and use its now() method:```java\nimport java.time.LocalDate; // import the LocalDate class\r\n\r\npublic class MyClass {public static void main(String[] args) {  LocalDate myObj = LocalDate.now(); // Create a date object  System.out.println(myObj); // Display the current date}\r\n}```",
                "Display Current Time": "To display the current time (hour, minute, second, and nanoseconds), import the java.time.LocalTime class, and use its now() method:```java\nimport java.time.LocalTime; // import the LocalTime class\r\n\r\npublic class MyClass {public static void main(String[] args) {  LocalTime myObj = LocalTime.now();  System.out.println(myObj);}\r\n}```",
                "Display Current Date and Time": "To display the current date and time, import the java.time.LocalDateTime class, and use its now() method:```java\nimport java.time.LocalDateTime; // import the LocalDateTime class\r\n\r\npublic class MyClass {public static void main(String[] args) {  LocalDateTime myObj = LocalDateTime.now();  System.out.println(myObj);}\r\n}```",
                "Formatting Date and Time": "The \"T\" in the example above is used to separate the date from the time. You can use the DateTimeFormatter class with the ofPattern() method in the same package to format or parse date-time objects. The following example will remove both the \"T\" and nanoseconds from the date-time:```java\nimport java.time.LocalDateTime; // Import the LocalDateTime class\r\nimport java.time.format.DateTimeFormatter; // Import the DateTimeFormatter class\r\n\r\npublic class MyClass {public static void main(String[] args) {  LocalDateTime myDateObj = LocalDateTime.now();  System.out.println(\"Before formatting: \" + myDateObj);  DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\");\r\n  String formattedDate = myDateObj.format(myFormatObj);  System.out.println(\"After formatting: \" + formattedDate);}\r\n}```The ofPattern() method accepts all sorts of values, if you want to display the date and time in a different format. For example:"
            }
        },
        "arraylist": {
            "title": "Java ArrayList",
            "url": "https://www.w3schools.com/java/java_arraylist.asp",
            "info": {
                "Java ArrayList": "The ArrayList class is a resizable array, which can be found in the java.util package.The difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one). While elements can be added and removed from an ArrayList whenever you want. The syntax is also slightly different:```java\nimport java.util.ArrayList; // import the ArrayList class\r\n\r\nArrayList<String> cars = new ArrayList<String>(); // Create an ArrayList object```",
                "Add Items": "The ArrayList class has many useful methods. For example, to add elements to the ArrayList, use the add() method:```java\nimport java.util.ArrayList;\r\n\r\npublic class MyClass {public static void main(String[] args) {  ArrayList<String> cars = new ArrayList<String>();  cars.add(\"Volvo\");  cars.add(\"BMW\");  cars.add(\"Ford\");  cars.add(\"Mazda\");  System.out.println(cars);}\r\n}```",
                "Access an Item": "To access an element in the ArrayList, use the get() method and refer to the index number:```java\ncars.get(0);```",
                "Change an Item": "To modify an element, use the set() method and refer to the index number:```java\ncars.set(0, \"Opel\");```",
                "Remove an Item": "To remove an element, use the remove() method and refer to the index number:```java\ncars.remove(0);```To remove all the elements in the ArrayList, use the clear() method:```java\ncars.clear();```",
                "ArrayList Size": "To find out how many elements an ArrayList have, use the size method:```java\ncars.size();```",
                "Loop Through an ArrayList": "Loop through the elements of an ArrayList with a for loop, and use the size() method to specify how many times the loop should run:```java\npublic class MyClass {public static void main(String[] args) {  ArrayList<String> cars = new ArrayList<String>();  cars.add(\"Volvo\");  cars.add(\"BMW\");  cars.add(\"Ford\");  cars.add(\"Mazda\");  for (int i = 0; i < cars.size(); i++) {    System.out.println(cars.get(i));  }}\r\n}```You can also loop through an ArrayList with the for-each loop:```java\npublic class MyClass {public static void main(String[] args) {  ArrayList<String> cars = new ArrayList<String>();  cars.add(\"Volvo\");  cars.add(\"BMW\");  cars.add(\"Ford\");  cars.add(\"Mazda\");  for (String i : cars) {    System.out.println(i);  }}\r\n}```",
                "Other Types": "Elements in an ArrayList are actually objects. In the examples above, we created elements (objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:```java\nimport java.util.ArrayList;\r\n\r\npublic class MyClass {public static void main(String[] args) {  ArrayList<Integer> myNumbers = new ArrayList<Integer>();  myNumbers.add(10);  myNumbers.add(15);  myNumbers.add(20);  myNumbers.add(25);  for (int i : myNumbers) {    System.out.println(i);  }}\r\n}```",
                "Sort an ArrayList": "Another useful class in the java.util package is the Collections class, which include the sort() method for sorting lists alphabetically or numerically:```java\nimport java.util.ArrayList;\r\nimport java.util.Collections;  // Import the Collections class\r\n\r\npublic class MyClass {public static void main(String[] args) {  ArrayList<String> cars = new ArrayList<String>();  cars.add(\"Volvo\");  cars.add(\"BMW\");  cars.add(\"Ford\");  cars.add(\"Mazda\");  Collections.sort(cars);  // Sort cars  for (String i : cars) {    System.out.println(i);  }}\r\n}``````java\nimport java.util.ArrayList;\r\nimport java.util.Collections;  // Import the Collections class\r\n\r\npublic class MyClass {public static void main(String[] args) {  ArrayList<Integer> myNumbers = new ArrayList<Integer>();  myNumbers.add(33);  myNumbers.add(15);  myNumbers.add(20);  myNumbers.add(34);  myNumbers.add(8);  myNumbers.add(12);\r\n  Collections.sort(myNumbers);  // Sort myNumbers\r\n  for (int i : myNumbers) {    System.out.println(i);  }}\r\n}```"
            }
        },
        "linkedlist": {
            "title": "Java LinkedList",
            "url": "https://www.w3schools.com/java/java_linkedlist.asp",
            "info": {
                "Java LinkedList": "In the previous chapter, you learned about the ArrayList class. The LinkedList class is almost identical to the ArrayList:```java\n// Import the LinkedList class\r\nimport java.util.LinkedList;\r\n\r\npublic class MyClass {public static void main(String[] args) {  LinkedList<String> cars = new LinkedList<String>();  cars.add(\"Volvo\");  cars.add(\"BMW\");  cars.add(\"Ford\");  cars.add(\"Mazda\");  System.out.println(cars);}\r\n}```",
                "ArrayList vs. LinkedList": "The LinkedList class is a collection which can contain many objects of the same type,just like the ArrayList.The LinkedList class has all of the same methods as the ArrayList class becausethey both implement the List interface. This means that you can add items, changeitems, remove items and clear the list in the same way.However, while the ArrayList class and the LinkedList class can be used in the same way,they are built very differently.The ArrayList class has a regular array inside it. When an element is added, it is placedinto the array. If the array is not big enough, a new, larger array is created to replace theold one and the old one is removed.The LinkedList stores its items in \"containers.\" The list has a link to the first containerand each container has a link to the next container in the list. To add an element to the list,the element is placed into a new container and that container is linked to one of the othercontainers in the list.It is best to use an ArrayList when:It is best to use a LinkedList when:",
                "LinkedList Methods": "For many cases, the ArrayList is more efficient as it is common to need access torandom items in the list, but the LinkedList provides several methods to do certainoperations more efficiently:"
            }
        },
        "hashmap": {
            "title": "Java HashMap",
            "url": "https://www.w3schools.com/java/java_hashmap.asp",
            "info": {
                "Java HashMap": "In the ArrayList chapter, you learned that Arrays store items as an ordered collection, and you have to access them with an index number (int type).A HashMap however, store items in \"key/value\" pairs, and you can access them by an index of another type (e.g. a String).One object is used as a key (index) to another object (value). It can store different types: String keys and Integer values, or the same type, like: String keys and String values:```java\nimport java.util.HashMap; // import the HashMap class\r\n\r\nHashMap<String, String> capitalCities = new HashMap<String, String>();```",
                "Add Items": "The HashMap class has many useful methods. For example, to add items to it, use the put() method:```java\n// Import the HashMap class\r\nimport java.util.HashMap;\r\n\r\npublic class MyClass {public static void main(String[] args) {  // Create a HashMap object called capitalCities  HashMap<String, String> capitalCities = new HashMap<String, String>();\r\n  // Add keys and values (Country, City)  capitalCities.put(\"England\", \"London\");  capitalCities.put(\"Germany\", \"Berlin\");  capitalCities.put(\"Norway\", \"Oslo\");  capitalCities.put(\"USA\", \"Washington DC\");  System.out.println(capitalCities);}\r\n}```",
                "Access an Item": "To access a value in the HashMap, use the get() method and refer to its key:```java\ncapitalCities.get(\"England\");```",
                "Remove an Item": "To remove an item, use the remove() method and refer to the key:```java\ncapitalCities.remove(\"England\");```To remove all items, use the clear() method:```java\ncapitalCities.clear();```",
                "HashMap Size": "To find out how many items there are, use the size method:```java\ncapitalCities.size();```",
                "Loop Through a HashMap": "Loop through the items of a HashMap with a for-each loop.Note: Use the keySet() method if you only want the keys, and use the values() method if you only want the values:```java\n// Print keys\r\nfor (String i : capitalCities.keySet()) {System.out.println(i);\r\n}``````java\n// Print values\r\nfor (String i : capitalCities.values()) {System.out.println(i);\r\n}``````java\n// Print keys and values\r\nfor (String i : capitalCities.keySet()) {System.out.println(\"key: \" + i + \" value: \" + capitalCities.get(i));\r\n}```",
                "Other Types": "Keys and values in a HashMap are actually objects. In the examples above, we used objects of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:```java\n// Import the HashMap class\r\nimport java.util.HashMap;\r\n\r\npublic class MyClass {public static void main(String[] args) {\r\n  // Create a HashMap object called people  HashMap<String, Integer> people = new HashMap<String, Integer>();\r\n\r\n  // Add keys and values (Name, Age)  people.put(\"John\", 32);  people.put(\"Steve\", 30);  people.put(\"Angie\", 33);\r\n  for (String i : people.keySet()) {    System.out.println(\"key: \" + i + \" value: \" + people.get(i));  }}\r\n}```"
            }
        },
        "hashset": {
            "title": "Java HashSet",
            "url": "https://www.w3schools.com/java/java_hashset.asp",
            "info": {
                "Java HashSet": "A HashSet is a collection of items where every item is unique, and it is found in the java.util package:```java\nimport java.util.HashSet; // Import the HashSet class\r\n\r\nHashSet<String> cars = new HashSet<String>();```",
                "Add Items": "The HashSet class has many useful methods. For example, to add items to it, use the add() method:```java\n// Import the HashSet class\r\nimport java.util.HashSet;\r\n\r\npublic class MyClass {public static void main(String[] args) {  HashSet<String> cars = new HashSet<String>();  cars.add(\"Volvo\");  cars.add(\"BMW\");  cars.add(\"Ford\");  cars.add(\"BMW\");  cars.add(\"Mazda\");  System.out.println(cars);}\r\n}```Note: In the example above, even though BMW is added twice it only appears once in the setbecause every item in a set has to be unique.",
                "Check If an Item Exists": "To check whether an item exists in a HashSet, use the contains() method:```java\ncars.contains(\"Mazda\");```",
                "Remove an Item": "To remove an item, use the remove() method:```java\ncars.remove(\"Volvo\");```To remove all items, use the clear() method:```java\ncars.clear();```",
                "HashSet Size": "To find out how many items there are, use the size method:```java\ncars.size();```",
                "Loop Through a HashSet": "Loop through the items of an HashSet with a for-each loop:```java\nfor (String i : cars) {System.out.println(i);\r\n}```",
                "Other Types": "Items in an HashSet are actually objects. In the examples above, we created items (objects) of type \"String\". Remember that a String in Java is an object (not a primitive type). To use other types, such as int, you must specify an equivalent wrapper class: Integer. For other primitive types, use: Boolean for boolean, Character for char, Double for double, etc:```java\nimport java.util.HashSet;\r\n\r\npublic class MyClass {public static void main(String[] args) {\r\n  // Create a HashSet object called numbers  HashSet<Integer> numbers = new HashSet<Integer>();\r\n  // Add values to the set  numbers.add(4);  numbers.add(7);  numbers.add(8);\r\n  // Show which numbers between 1 and 10 are in the set  for(int i = 1; i <= 10; i++) {    if(numbers.contains(i)) {      System.out.println(i + \" was found in the set.\");    } else {      System.out.println(i + \" was not found in the set.\");    }  }}\r\n}```"
            }
        },
        "iterator": {
            "title": "Java Iterator",
            "url": "https://www.w3schools.com/java/java_iterator.asp",
            "info": {
                "Java Iterator": "An Iterator is an object that can be used to loop through collections, like ArrayListand HashSet. It is called an \"iterator\" because \"iterating\" is the technical term for looping.To use an Iterator, you must import it from the java.util package.",
                "Getting an Iterator": "The iterator() method can be used to get an Iterator for any collection:```java\n// Import the ArrayList class and the Iterator class\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\n\r\npublic class MyClass {public static void main(String[] args) {\r\n  // Make a collection  ArrayList<String> cars = new ArrayList<String>();  cars.add(\"Volvo\");  cars.add(\"BMW\");  cars.add(\"Ford\");  cars.add(\"Mazda\");\r\n  // Get the iterator  Iterator<String> it = cars.iterator();\r\n  // Print the first item  System.out.println(it.next());}\r\n}```",
                "Looping Through a Collection": "To loop through a collection, use the hasNext() and next() methods of the Iterator:```java\nwhile(it.hasNext()) {System.out.println(it.next());\r\n}```",
                "Removing Items from a Collection": "Iterators are designed to easily change the collections that they loop through. The remove() method can remove items from a collection while looping.```java\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\n\r\npublic class MyClass {public static void main(String[] args) {  ArrayList<Integer> numbers = new ArrayList<Integer>();  numbers.add(12);  numbers.add(8);  numbers.add(2);  numbers.add(23);  Iterator<Integer> it = numbers.iterator();  while(it.hasNext()) {    Integer i = it.next();    if(i < 10) {      it.remove();    }  }  System.out.println(numbers);}\r\n}```"
            }
        },
        "wrapperclasses": {
            "title": "Java Wrapper Classes",
            "url": "https://www.w3schools.com/java/java_wrapper_classes.asp",
            "info": {
                "Java Wrapper Classes": "Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects.The table below shows the primitive type and the equivalent wrapper class:Sometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects):```java\nArrayList<int> myNumbers = new ArrayList<int>(); // Invalid```",
                "Creating Wrapper Objects": "To create a wrapper object, use the wrapper class instead of the primitive type. To get the value, you can just print the object:```java\npublic class MyClass {public static void main(String[] args) {  Integer myInt = 5;  Double myDouble = 5.99;  Character myChar = 'A';  System.out.println(myInt);  System.out.println(myDouble);  System.out.println(myChar);}\r\n}```Since you're now working with objects, you can use certain methods to get information about the specific object.For example, the following methods are used to get the value associated with the corresponding wrapper object: intValue(), byteValue(), shortValue(), longValue(), floatValue(), doubleValue(), charValue(), booleanValue().This example will output the same result as the example above:```java\npublic class MyClass {public static void main(String[] args) {  Integer myInt = 5;  Double myDouble = 5.99;  Character myChar = 'A';  System.out.println(myInt.intValue());  System.out.println(myDouble.doubleValue());  System.out.println(myChar.charValue());}\r\n}```Another useful method is the toString() method, which is used to convert wrapper objects to strings.In the following example, we convert an Integer to a String, and use the length() method of the String class to output the length of the \"string\":"
            }
        },
        "exceptions": {
            "title": "Java Exceptions",
            "url": "https://www.w3schools.com/java/java_try_catch.asp",
            "info": {
                "Java Exceptions": "When executing Java code, different errors can occur: coding errors made by the programmer, errors due to wrong input, or other unforeseeable things.When an error occurs, Java will normally stop and generate an error message. The technical term for this is: Java will throw an exception (throw an error).",
                "Java try and catch": "The try statement allows you to define a block of code to be tested for errors while it is being executed.The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.The try and catch keywords come in pairs:```java\ntry {//  Block of code to try\r\n}\r\ncatch(Exception e) {//  Block of code to handle errors\r\n}```Consider the following example:```java\npublic class MyClass {public static void main(String[ ] args) {  int[] myNumbers = {1, 2, 3};  System.out.println(myNumbers[10]); // error!}\r\n}```If an error occurs, we can use try...catch to catch the error and execute some code to handle it:```java\npublic class MyClass {public static void main(String[ ] args) {  try {    int[] myNumbers = {1, 2, 3};    System.out.println(myNumbers[10]);  } catch (Exception e) {    System.out.println(\"Something went wrong.\");  }}\r\n}```",
                "Finally": "The finally statement lets you execute code, after try...catch, regardless of the result:```java\npublic class MyClass {public static void main(String[] args) {  try {    int[] myNumbers = {1, 2, 3};    System.out.println(myNumbers[10]);  } catch (Exception e) {    System.out.println(\"Something went wrong.\");  } finally {    System.out.println(\"The 'try catch' is finished.\");  }}\r\n}```",
                "The throw keyword": "The throw statement allows you to create a custom error.The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, FileNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc:```java\npublic class MyClass {static void checkAge(int age) {  if (age < 18) {    throw new ArithmeticException(\"Access denied - You must be at least 18 years old.\");  }  else {    System.out.println(\"Access granted - You are old enough!\");  }}\r\npublic static void main(String[] args) {  checkAge(15); // Set age to 15 (which is below 18...)}\r\n}```If age was 20, you would not get an exception:```java\ncheckAge(20);```"
            }
        },
        "regex": {
            "title": "Java RegEx",
            "url": "https://www.w3schools.com/java/java_regex.asp",
            "info": {
                "What is a Regular Expression?": "A regular expression is a sequence of characters that forms a search pattern.When you search for data in a text, you can use this search pattern to describe what youare searching for.A regular expression can be a single character, or a more complicated pattern.Regular expressions can be used to perform all types of text search and text replaceoperations.Java does not have a built-in Regular Expression class, but we can import the java.util.regex package to work with regular expressions. The package includes the following classes:```java\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class MyClass {public static void main(String[] args) {  Pattern pattern = Pattern.compile(\"w3schools\", Pattern.CASE_INSENSITIVE);  Matcher matcher = pattern.matcher(\"Visit W3Schools!\");  boolean matchFound = matcher.find();  if(matchFound) {    System.out.println(\"Match found\");  } else {    System.out.println(\"Match not found\");  }}\r\n}\r\n// Outputs Match found```In this example, The word \"w3schools\" is being searched for in a sentence.First, the pattern is created using the Pattern.compile() method. The first parameterindicates which pattern is being searched for and the second parameter has a flag toindicates that the search should be case-insensitive. The second parameter is optional.The matcher() method is used to search for the pattern in a string. It returns a Matcherobject which contains information about the search that was performed.The find() method returns true if the pattern was found in the string and false if it was notfound.",
                "Flags": "Flags in the compile() method change how the search is performed. Here are a few ofthem:",
                "Regular Expression Patterns": "The first parameter of the Pattern.compile() method is the pattern. It describes whatis being searched for.Brackets are used to find a range of characters:",
                "Metacharacters": "Metacharacters are characters with a special meaning:",
                "Quantifiers": "Quantifiers define quantities:"
            }
        },
        "threads": {
            "title": "Java Threads",
            "url": "https://www.w3schools.com/java/java_threads.asp",
            "info": {
                "Java Threads": "Threads allows a program to operate more efficiently by doing multiple things at the sametime.Threads can be used to perform complicated tasks in the background without interruptingthe main program.",
                "Creating a Thread": "There are two ways to create a thread.It can be created by extending the Thread class and overriding its run() method:```java\npublic class MyClass extends Thread {public void run() {  System.out.println(\"This code is running in a thread\");}\r\n}```Another way to create a thread is to implement the Runnable interface:```java\npublic class MyClass implements Runnable {public void run() {  System.out.println(\"This code is running in a thread\");}\r\n}```",
                "Running Threads": "If the class extends the Thread class, the thread can be run by creating an instance of theclass and call its start() method:```java\npublic class MyClass extends Thread {public static void main(String[] args) {  MyClass thread = new MyClass();  thread.start();  System.out.println(\"This code is outside of the thread\");}public void run() {  System.out.println(\"This code is running in a thread\");}\r\n}```If the class implements the Runnable interface, the thread can be run by passing aninstance of the class to a Thread object's constructor and then calling the thread'sstart() method:```java\npublic class MyClass implements Runnable {public static void main(String[] args) {  MyClass obj = new MyClass();  Thread thread = new Thread(obj);  thread.start();  System.out.println(\"This code is outside of the thread\");}public void run() {  System.out.println(\"This code is running in a thread\");}\r\n}```",
                "Concurrency Problems": "Because threads run at the same time as other parts of the program, there is no way toknow in which order the code will run. When the threads and main program are readingand writing the same variables, the values are unpredictable. The problems that resultfrom this are called concurrency problems.```java\npublic class MyClass extends Thread {public static int amount = 0;\r\npublic static void main(String[] args) {  MyClass thread = new MyClass();  thread.start();  System.out.println(amount);  amount++;  System.out.println(amount);}\r\npublic void run() {  amount++;}\r\n}```To avoid concurrency problems, it is best to share as few attributes between threads aspossible. If attributes need to be shared, one possible solution is to use the isAlive()method of the thread to check whether the thread has finished running before using any attributes that the thread can change."
            }
        },
        "lambda": {
            "title": "Java Lambda",
            "url": "https://www.w3schools.com/java/java_lambda.asp",
            "info": {
                "Java Lambda Expressions": "Lambda Expressions were added in Java 8.A lambda expression is a short block of code which takes in parameters and returns avalue. Lambda expressions are similar to methods, but they do not need a name and theycan be implemented right in the body of a method.",
                "Syntax": "The simplest lambda expression contains a single parameter and an expression:```java\nparameter -> expression```To use more than one parameter, wrap them in parentheses:```java\n(parameter1, parameter2) -> expression```Expressions are limited. They have to immediately return a value, they cannot containvariables, assignments or statements such as if or for. In order to do more complexoperations, a code block can be used with curly braces. If the lambda expression needs toreturn a value then the code block should have a return statement.```java\n(parameter1, parameter2) -> { code block }```",
                "Using Lambda Expressions": "Lambda expressions are usually passed as parameters to a function:```java\nimport java.util.ArrayList;\r\n\r\npublic class MyClass {public static void main(String[] args) {  ArrayList<Integer> numbers = new ArrayList<Integer>();  numbers.add(5);  numbers.add(9);  numbers.add(8);  numbers.add(1);  numbers.forEach( (n) -> { System.out.println(n); } );}\r\n}```Lambda expressions can be stored in variables if the variable's type is an interface whichhas only one method. The lambda expression should have the same number ofparameters and the same return type as that method. Java has many of these kinds ofinterfaces built in, such as the Consumer interface (found in the java.util package) used by lists.To use a lambda expression in a method, the method should have a parameter with asingle-method interface as its type. Calling the interface's method will run the lambdaexpression:"
            }
        },
        "files": {
            "title": "Java Files",
            "url": "https://www.w3schools.com/java/java_files.asp",
            "info": {
                "Java File Handling": "The File class from the java.io package, allows us to work with files.To use the File class, create an object of the class, and specify the filename or directory name: ```java\nimport java.io.File;  // Import the File class\r\n\r\nFile myObj = new File(\"filename.txt\"); // Specify the filename```The File class has many useful methods for creating and getting information about files. For example:You will learn how to create, write, read and delete files in the next chapters:"
            }
        },
        "create/writefiles": {
            "title": "Java Create/Write Files",
            "url": "https://www.w3schools.com/java/java_files_create.asp",
            "info": {
                "Create a File": "To create a file in Java, you can use the createNewFile() method. This method returns a boolean value: true if the file was successfully created, and false if the file already exists. Note that the method is enclosed in a try...catch block. This is necessary because it throws an IOException if an error occurs (if the file cannot be created for some reason):```java\nimport java.io.File;  // Import the File class\r\nimport java.io.IOException;  // Import the IOException class to handle errors\r\n\r\npublic class CreateFile {public static void main(String[] args) {  try {    File myObj = new File(\"filename.txt\");    if (myObj.createNewFile()) {      System.out.println(\"File created: \" + myObj.getName());    } else {      System.out.println(\"File already exists.\");    }  } catch (IOException e) {    System.out.println(\"An error occurred.\");    e.printStackTrace();  }}\r\n}```To create a file in a specific directory (requires permission), specify the path of the file and use double backslashes to escape the \"\\\" character (for Windows). On Mac and Linux you can just write the path, like: /Users/name/filename.txt",
                "Write To a File": "In the following example, we use the FileWriter class together with its write() method to write some text to the file we created in the example above. Note that when you are done writing to the file, you should close it with the close() method:```java\nimport java.io.FileWriter;   // Import the FileWriter class\r\nimport java.io.IOException;  // Import the IOException class to handle errors\r\n\r\npublic class WriteToFile {public static void main(String[] args) {  try {    FileWriter myWriter = new FileWriter(\"filename.txt\");    myWriter.write(\"Files in Java might be tricky, but it is fun enough!\");    myWriter.close();    System.out.println(\"Successfully wrote to the file.\");  } catch (IOException e) {    System.out.println(\"An error occurred.\");    e.printStackTrace();  }}\r\n}```To read the file above, go to the Java Read Files chapter."
            }
        },
        "readfiles": {
            "title": "Java Read Files",
            "url": "https://www.w3schools.com/java/java_files_read.asp",
            "info": {
                "Read a File": "In the previous chapter, you learned how to create and write to a file.In the following example, we use the Scanner class to read the contents of the text file we created in the previous chapter:```java\nimport java.io.File;  // Import the File class\r\nimport java.io.FileNotFoundException;  // Import this class to handle errors\r\nimport java.util.Scanner; // Import the Scanner class to read text files\r\n\r\npublic class ReadFile {public static void main(String[] args) {  try {    File myObj = new File(\"filename.txt\");    Scanner myReader = new Scanner(myObj);    while (myReader.hasNextLine()) {      String data = myReader.nextLine();      System.out.println(data);    }    myReader.close();  } catch (FileNotFoundException e) {    System.out.println(\"An error occurred.\");    e.printStackTrace();  }}\r\n}```",
                "Get File Information": "To get more information about a file, use any of the File methods:```java\nimport java.io.File;  // Import the File class\r\n\r\npublic class GetFileInfo { \n  public static void main(String[] args) {  File myObj = new File(\"filename.txt\");  if (myObj.exists()) {    System.out.println(\"File name: \" + myObj.getName());    System.out.println(\"Absolute path: \" + myObj.getAbsolutePath());    System.out.println(\"Writeable: \" + myObj.canWrite());    System.out.println(\"Readable \" + myObj.canRead());    System.out.println(\"File size in bytes \" + myObj.length());  } else {    System.out.println(\"The file does not exist.\");  }}\r\n}```"
            }
        },
        "deletefiles": {
            "title": "Java Delete Files",
            "url": "https://www.w3schools.com/java/java_files_delete.asp",
            "info": {
                "Delete a File": "To delete a file in Java, use the delete() method:```java\nimport java.io.File;  // Import the File class\r\n\r\npublic class DeleteFile {public static void main(String[] args) {   File myObj = new File(\"filename.txt\");   if (myObj.delete()) {     System.out.println(\"Deleted the file: \" + myObj.getName());  } else {    System.out.println(\"Failed to delete the file.\");  } } \r\n}```",
                "Delete a Folder": "You can also delete a folder. However, it must be empty:```java\nimport java.io.File; \r\n\r\npublic class DeleteFolder {public static void main(String[] args) {   File myObj = new File(\"C:\\\\Users\\\\MyName\\\\Test\");   if (myObj.delete()) {     System.out.println(\"Deleted the folder: \" + myObj.getName());  } else {    System.out.println(\"Failed to delete the folder.\");  } } \r\n}```"
            }
        },
        "addtwonumbers": {
            "title": "Add Two Numbers",
            "url": "https://www.w3schools.com/java/java_howto_add_two_numbers.asp",
            "info": {
                "Add Two Numbers": "Learn how to add two numbers in Java:```java\nint x = 5;\r\nint y = 6;\r\nint sum = x + y;\r\nSystem.out.println(sum); // Print the sum of x + y```",
                "Add Two Numbers with User Input": "Learn how to add two numbers with user input:```java\nimport java.util.Scanner; // Import the Scanner class\r\n\r\nclass MyClass {public static void main(String[] args) {  int x, y, sum;  Scanner myObj = new Scanner(System.in); // Create a Scanner object  System.out.println(\"Type a number:\");  x = myObj.nextInt(); // Read user input\r\n  System.out.println(\"Type another number:\");  y = myObj.nextInt(); // Read user input\r\n  sum = x + y;  // Calculate the sum of x + y  System.out.println(\"Sum is: \" + sum); // Print the sum}\r\n}```"
            }
        },
        "keywords": {
            "title": "Java Keywords",
            "url": "https://www.w3schools.com/java/java_ref_keywords.asp",
            "info": {
                "Java Reserved Keywords": "Java has a set of keywords that are reserved words that cannot be used as variables, methods, classes, or any other identifiers:Note: true, false, and null are not keywords, but they are literals and reserved words that cannot be used as identifiers."
            }
        },
        "abstract": {
            "title": "abstract",
            "url": "https://www.w3schools.com/java/ref_keyword_abstract.asp",
            "info": {
                "Definition and Usage": "The abstract keyword is a non-access modifier, used for classes and methods.Class: An abstract class is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).Method: An abstract method can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).",
                "Related Pages": "Read more about modifiers in our Java Modifiers Tutorial.\u276e Java Keywords"
            }
        },
        "boolean": {
            "title": "boolean",
            "url": "https://www.w3schools.com/java/ref_keyword_boolean.asp",
            "info": {
                "Definition and Usage": "The boolean keyword is a data type that can only take the values true or false.Boolean values are mostly used for conditional testing (read the Java Booleans Tutorial for more information).",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.Read more about booleans in our Java Booleans Tutorial.\u276e Java Keywords"
            }
        },
        "break": {
            "title": "break",
            "url": "https://www.w3schools.com/java/ref_keyword_break.asp",
            "info": {
                "Definition and Usage": "The break keyword is used to break out afor loop, a while loop or a switch block.",
                "More Examples": "```java\nint i = 0;\nwhile (i < 10) {System.out.println(i);i++;if (i == 4) {  break;}\r\n}```",
                "Related Pages": "Use the continue keyword to end the current iteration in a loop, but continue with the next.Read more about for loops in our Java For Loops Tutorial.Read more about while loops in our Java While Loops Tutorial.Read more about break and continue in our Java Break Tutorial.\u276e Java Keywords"
            }
        },
        "byte": {
            "title": "byte",
            "url": "https://www.w3schools.com/java/ref_keyword_byte.asp",
            "info": {
                "Definition and Usage": "The byte keyword is a data type that can store whole numbers from -128 to 127.",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.\u276e Java Keywords"
            }
        },
        "case": {
            "title": "case",
            "url": "https://www.w3schools.com/java/ref_keyword_case.asp",
            "info": {
                "Definition and Usage": "The case keyword marks a block of code in a switch statement.",
                "Related Pages": "Read more about the switch statement in our Java Switch Tutorial.\u276e Java Keywords"
            }
        },
        "catch": {
            "title": "catch",
            "url": "https://www.w3schools.com/java/ref_keyword_catch.asp",
            "info": {
                "Definition and Usage": "The catch keyword catches exceptions generated by try statements.The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.",
                "Related Pages": "Read more about exceptions in our Java Try..Catch Tutorial.\u276e Java Keywords"
            }
        },
        "char": {
            "title": "char",
            "url": "https://www.w3schools.com/java/ref_keyword_char.asp",
            "info": {
                "Definition and Usage": "The char keyword is a data type that is used to store a single character.A char value must be surrounded by single quotes, like 'A' or 'c'.",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.\u276e Java Keywords"
            }
        },
        "class": {
            "title": "class",
            "url": "https://www.w3schools.com/java/ref_keyword_class.asp",
            "info": {
                "Definition and Usage": "The class keyword is used to create a class.Every line of code that runs in Java must be inside a class. A class should always start with an uppercase first letter, and the name of the java file must match the class name.A class is like an object constructor. See the example below to see how we can use it to create an object.",
                "More Examples": "```java\npublic class MyClass {int x = 5;\r\npublic static void main(String[] args) {  MyClass myObj = new MyClass();  System.out.println(myObj.x);}\r\n}```",
                "Related Pages": "Read more about classes and objects in our Java Classes/Objects Tutorial.\u276e Java Keywords"
            }
        },
        "continue": {
            "title": "continue",
            "url": "https://www.w3schools.com/java/ref_keyword_continue.asp",
            "info": {
                "Definition and Usage": "The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration.",
                "More Examples": "```java\nint i = 0;\nwhile (i < 10) {if (i == 4) {  i++;  continue;}System.out.println(i);i++;\r\n}```",
                "Related Pages": "Use the break keyword to break out of a loop.Read more about for loops in our Java For Loops Tutorial.Read more about while loops in our Java While Loops Tutorial.Read more about break and continue in our Java Break Tutorial.\u276e Java Keywords"
            }
        },
        "default": {
            "title": "default",
            "url": "https://www.w3schools.com/java/ref_keyword_default.asp",
            "info": {
                "Definition and Usage": "The default keyword the default block of code in a switch statement.The default keyword specifies some code to run if there is no case match in the switch.Note: if the default keyword is used as the last statement in a switch block, it does not need a break.",
                "Related Pages": "Read more about the switch statement in our Java Switch Tutorial.\u276e Java Keywords"
            }
        },
        "do": {
            "title": "do",
            "url": "https://www.w3schools.com/java/ref_keyword_do.asp",
            "info": {
                "Definition and Usage": "The do keyword is used together with while to create a do-while loop.The while loop loops through a block of code as long as a specified condition is true:The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true.Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!",
                "Related Pages": "Read more about while loops in our Java While Loop Tutorial.\u276e Java Keywords"
            }
        },
        "double": {
            "title": "double",
            "url": "https://www.w3schools.com/java/ref_keyword_double.asp",
            "info": {
                "Definition and Usage": "The double keyword is a data type that can store fractional numbers from 1.7e\u2212308 to 1.7e+308.Note that you should end the value with a \"d\":",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.\u276e Java Keywords"
            }
        },
        "else": {
            "title": "else",
            "url": "https://www.w3schools.com/java/ref_keyword_else.asp",
            "info": {
                "Definition and Usage": "The else statement specifies a block of Java code to be executed if a condition is false in an if statement.Java has the following conditional statements:",
                "More Examples": "```java\nint time = 22;\r\nif (time < 10) {System.out.println(\"Good morning.\");\r\n} else if (time < 20) {System.out.println(\"Good day.\");\r\n} else {System.out.println(\"Good evening.\");\r\n}\r\n// Outputs \"Good evening.\"```",
                "Related Pages": "Read more about conditions in our Java If...Else Tutorial.\u276e Java Keywords"
            }
        },
        "enum": {
            "title": "enum",
            "url": "https://www.w3schools.com/java/ref_keyword_enum.asp",
            "info": {
                "Definition and Usage": "The enum keyword declares an enumerated (unchangeable) type.An enum is a special \"class\" that represents a group of constants (unchangeable variables, like final variables).To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters.",
                "Related Pages": "Read more about enums in our Java Enum Tutorial.\u276e Java Keywords"
            }
        },
        "extends": {
            "title": "extends",
            "url": "https://www.w3schools.com/java/ref_keyword_extends.asp",
            "info": {
                "Definition and Usage": "The extends keyword extends a class (indicates that a class is inherited from another class).In Java, it is possible to inherit attributes and methods from one class to another. We group the \"inheritance concept\" into two categories:To inherit from a class, use the extends keyword.",
                "Related Pages": "Read more about inheritance in our Java Inheritance Tutorial.\u276e Java Keywords"
            }
        },
        "final": {
            "title": "final",
            "url": "https://www.w3schools.com/java/ref_keyword_final.asp",
            "info": {
                "Definition and Usage": "The final keyword is a non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override).The final keyword is useful when you want a variable to always store the same value, like PI (3.14159...).The final keyword is called a \"modifier\". You will learn more about these in the Java Modifiers Chapter.",
                "Related Pages": "Read more about attributes our Java Class Attributes Tutorial.\u276e Java Keywords"
            }
        },
        "finally": {
            "title": "finally",
            "url": "https://www.w3schools.com/java/ref_keyword_finally.asp",
            "info": {
                "Definition and Usage": "The finally keyword is used to execute code (used with exceptions - try..catch statements) no matter if there is an exception or not.",
                "Related Pages": "Read more about exceptions in our Java Try..Catch Tutorial.\u276e Java Keywords"
            }
        },
        "float": {
            "title": "float",
            "url": "https://www.w3schools.com/java/ref_keyword_float.asp",
            "info": {
                "Definition and Usage": "The float keyword is a data type that can store fractional numbers from 3.4e\u2212038 to 3.4e+038.Note that you should end the value with an \"f\":",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.\u276e Java Keywords"
            }
        },
        "for": {
            "title": "for",
            "url": "https://www.w3schools.com/java/ref_keyword_for.asp",
            "info": {
                "Definition and Usage": "The for loop loops through a block of code a number of times.From the example above:",
                "More Examples": "There is also a \"for-each\" loop, which is used exclusively to loop through elements in an array:The following example outputs all elements in the cars array, using a \"for-each\" loop:```java\nString[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\r\nfor (String i : cars) {System.out.println(i);\r\n}```",
                "Related Pages": "Read more about for loops in our Java For Loop Tutorial.\u276e Java Keywords"
            }
        },
        "if": {
            "title": "if",
            "url": "https://www.w3schools.com/java/ref_keyword_if.asp",
            "info": {
                "Definition and Usage": "The if statement specifies a block of Java code to be executed if a condition is true.Java has the following conditional statements:",
                "More Examples": "```java\nint x = 20;\r\nint y = 18;\r\nif (x > y) {System.out.println(\"x is greater than y\");\r\n}``````java\nint time = 20;\r\nif (time < 18) {System.out.println(\"Good day.\");\r\n} else {System.out.println(\"Good evening.\");\r\n}\r\n// Outputs \"Good evening.\"``````java\nint time = 22;\r\nif (time < 10) {System.out.println(\"Good morning.\");\r\n} else if (time < 20) {System.out.println(\"Good day.\");\r\n} else {System.out.println(\"Good evening.\");\r\n}\r\n// Outputs \"Good evening.\"```",
                "Related Pages": "Read more about conditions in our Java If...Else Tutorial.\u276e Java Keywords"
            }
        },
        "implements": {
            "title": "implements",
            "url": "https://www.w3schools.com/java/ref_keyword_implements.asp",
            "info": {
                "Definition and Usage": "The implements keyword is used to implement an interface.The interface keyword is used to declare a special type of class that only contains abstract methods.To access the interface methods, the interface must be \"implemented\" (kinda like inherited) by another class with the implements keyword (instead of extends). The body of the interface method is provided by the \"implement\" class.",
                "Multiple Interfaces ": "To implement multiple interfaces, separate them with a comma:```java\ninterface FirstInterface {public void myMethod(); // interface method\r\n}\r\n\r\ninterface SecondInterface {public void myOtherMethod(); // interface method\r\n}\r\n\r\n// DemoClass \"implements\" FirstInterface and SecondInterface\r\nclass DemoClass implements FirstInterface, SecondInterface {public void myMethod() {  System.out.println(\"Some text..\");}public void myOtherMethod() {  System.out.println(\"Some other text...\");}\r\n}\r\n\r\nclass MyMainClass {public static void main(String[] args) {  DemoClass myObj = new DemoClass();  myObj.myMethod();  myObj.myOtherMethod();}\r\n}```",
                "Related Pages": "Read more about interfaces in our Java Interface Tutorial.\u276e Java Keywords"
            }
        },
        "import": {
            "title": "import",
            "url": "https://www.w3schools.com/java/ref_keyword_import.asp",
            "info": {
                "Definition and Usage": "The import keyword is used to import a package, class or interface.",
                "Related Pages": "Read more about packages in our Java Packages Tutorial.\u276e Java Keywords"
            }
        },
        "instanceof": {
            "title": "instanceof",
            "url": "https://www.w3schools.com/java/ref_keyword_instanceof.asp",
            "info": {
                "Definition and Usage": "The instanceof keyword checks whether an object is an instance of a specific class or an interface.The instanceof keyword compares the instance with type. The return value is either true or false.",
                "Related Pages": "Read more about objects in our Java Classes/Objects Tutorial.\u276e Java Keywords"
            }
        },
        "int": {
            "title": "int",
            "url": "https://www.w3schools.com/java/ref_keyword_int.asp",
            "info": {
                "Definition and Usage": "The int keyword is a data type that can store whole numbers from -2147483648 to 2147483647.",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.\u276e Java Keywords"
            }
        },
        "long": {
            "title": "long",
            "url": "https://www.w3schools.com/java/ref_keyword_long.asp",
            "info": {
                "Definition and Usage": "The long keyword is a data type that can store whole numbers from -9223372036854775808 to 9223372036854775808.Note that you should end the value with an \"L\":",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.\u276e Java Keywords"
            }
        },
        "new": {
            "title": "new",
            "url": "https://www.w3schools.com/java/ref_keyword_new.asp",
            "info": {
                "Definition and Usage": "The new keyword creates new objects.",
                "Related Pages": "Read more about objects in our Java Classes/Objects Tutorial.\u276e Java Keywords"
            }
        },
        "package": {
            "title": "package",
            "url": "https://www.w3schools.com/java/ref_keyword_package.asp",
            "info": {
                "Definition and Usage": "The package keyword creates a package.",
                "Related Pages": "Read more about packages in our Java Packages Tutorial.\u276e Java Keywords"
            }
        },
        "private": {
            "title": "private",
            "url": "https://www.w3schools.com/java/ref_keyword_private.asp",
            "info": {
                "Definition and Usage": "The private keyword is an access modifier used for attributes, methods and constructors, making them only accessible within the declared class.",
                "Related Pages": "Read more about modifiers in our Java Modifiers Tutorial.\u276e Java Keywords"
            }
        },
        "protected": {
            "title": "protected",
            "url": "https://www.w3schools.com/java/ref_keyword_protected.asp",
            "info": {
                "Definition and Usage": "The protected keyword is an access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses.",
                "Related Pages": "Read more about modifiers in our Java Modifiers Tutorial.\u276e Java Keywords"
            }
        },
        "public": {
            "title": "public",
            "url": "https://www.w3schools.com/java/ref_keyword_public.asp",
            "info": {
                "Definition and Usage": "The public keyword is an access modifier used for classes, attributes, methods and constructors, making them accessible by any other class.",
                "Related Pages": "Read more about modifiers in our Java Modifiers Tutorial.\u276e Java Keywords"
            }
        },
        "return": {
            "title": "return",
            "url": "https://www.w3schools.com/java/ref_keyword_return.asp",
            "info": {
                "Definition and Usage": "The return keyword finished the execution of a method, and can be used to return a value from a method.",
                "More Examples": "Tip: Use the void keyword to specify that a method should not have a return value:```java\npublic class MyClass {static void myMethod() {  System.out.println(\"I just got executed!\");}\r\npublic static void main(String[] args) {  myMethod();}\r\n}```",
                "Related Pages": "Read more about methods in our Java Methods Tutorial.\u276e Java Keywords"
            }
        },
        "short": {
            "title": "short",
            "url": "https://www.w3schools.com/java/ref_keyword_short.asp",
            "info": {
                "Definition and Usage": "The short keyword is a data type that can store whole numbers from -32768 to 32767.",
                "Related Pages": "Read more about data types in our Java Data Types Tutorial.\u276e Java Keywords"
            }
        },
        "static": {
            "title": "static",
            "url": "https://www.w3schools.com/java/ref_keyword_static.asp",
            "info": {
                "Definition and Usage": "The static keyword is a non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class.",
                "Related Pages": "Read more about modifiers in our Java Modifiers Tutorial.\u276e Java Keywords"
            }
        },
        "super": {
            "title": "super",
            "url": "https://www.w3schools.com/java/ref_keyword_super.asp",
            "info": {
                "Definition and Usage": "The super keyword refers to superclass (parent) objects.It is used to call superclass methods, and to access the superclass constructor.The most common use of the super keyword is to eliminate the confusion between superclasses and subclasses that have methods with the same name.To understand the super keyword, you should have a basic understanding of Inheritance and Polymorphism.",
                "Related Pages": "Read more about inheritance (subclasses and superclasses) in our Java Inheritance Tutorial.Read more about polymorphism in our Java Polymorphism Tutorial.\u276e Java Keywords"
            }
        },
        "this": {
            "title": "this",
            "url": "https://www.w3schools.com/java/ref_keyword_this.asp",
            "info": {
                "Definition and Usage": "The this keyword refers to the current object in a method or constructor.The most common use of the this keyword is to eliminate the confusion between class attributes and parameters with the same name (because a class attribute is shadowed by a method or constructor parameter). If you omit the keyword in the example above, the output would be \"0\" instead of \"5\".this can also be used to:",
                "Related Pages": "Read more about objects in our Java Classes/Objects Tutorial.Read more about constructors in our Java Constructors Tutorial.Read more about methods in our Java Methods Tutorial.\u276e Java Keywords"
            }
        },
        "throw": {
            "title": "throw",
            "url": "https://www.w3schools.com/java/ref_keyword_throw.asp",
            "info": {
                "Definition and Usage": "The throw keyword is used to create a custom error.The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.The exception type is often used together with a custom method, like in the example above.Differences between throw and throws:",
                "Related Pages": "Read more about exceptions in our Java Try..Catch Tutorial.\u276e Java Keywords"
            }
        },
        "throws": {
            "title": "throws",
            "url": "https://www.w3schools.com/java/ref_keyword_throws.asp",
            "info": {
                "Definition and Usage": "The throws keyword indicates what exception type may be thrown by a method.There are many exception types available in Java: ArithmeticException, ClassNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.Differences between throw and throws:",
                "Related Pages": "Read more about exceptions in our Java Try..Catch Tutorial.\u276e Java Keywords"
            }
        },
        "try": {
            "title": "try",
            "url": "https://www.w3schools.com/java/ref_keyword_try.asp",
            "info": {
                "Definition and Usage": "The try keyword creates a try...catch statement.The try statement allows you to define a block of code to be tested for errors while it is being executed.The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.",
                "Related Pages": "Read more about exceptions in our Java Try..Catch Tutorial.\u276e Java Keywords"
            }
        },
        "void": {
            "title": "void",
            "url": "https://www.w3schools.com/java/ref_keyword_void.asp",
            "info": {
                "Definition and Usage": "The void keyword specifies that a method should not have a return value.",
                "More Examples": "Tip: If you want a method to return a value, you can use a primitive data type (such as int, char, etc.) instead of void, and use the return keyword inside the method:```java\npublic class MyClass {static int myMethod(int x) {  return 5 + x;}\r\npublic static void main(String[] args) {  System.out.println(myMethod(3));}\r\n}\r\n// Outputs 8 (5 + 3)```",
                "Related Pages": "Read more about methods in our Java Methods Tutorial.\u276e Java Keywords"
            }
        },
        "while": {
            "title": "while",
            "url": "https://www.w3schools.com/java/ref_keyword_while.asp",
            "info": {
                "Definition and Usage": "The while loop loops through a block of code as long as a specified condition is true.Note: Do not forget to increase the variable used in the condition, otherwise the loop will never end!",
                "More Examples": "The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it willrepeat the loop as long as the condition is true:```java\nint i = 0;\r\ndo {System.out.println(i);i++;\r\n}\r\nwhile (i < 5);```",
                "Related Pages": "Read more about while loops in our Java While Loop Tutorial.\u276e Java Keywords"
            }
        },
        "stringmethods": {
            "title": "Java String Methods",
            "url": "https://www.w3schools.com/java/java_ref_string.asp",
            "info": {
                "All String Methods": "The String class has a set of built-in methods that you can use on strings."
            }
        },
        "mathmethods": {
            "title": "Java Math Methods",
            "url": "https://www.w3schools.com/java/java_ref_math.asp",
            "info": {
                "All Math Methods": "A list of all Math methods can be found in the table below:Note: All Math methods are static."
            }
        }
    }
}