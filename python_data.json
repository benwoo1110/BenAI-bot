{
    "home": {
        "title": "Python HOME",
        "url": "https://www.w3schools.com/python/default.asp",
        "info": {
            "Learning by Examples": "With our \"Try it Yourself\" editor, you can edit Python code and view the result.```py\n\r\nprint(\"Hello, World!\")\r\n```Click on the \"Try it Yourself\" button to see how it works.",
            "Python File Handling": "In our File Handling section you will learn how to open, read, write, and delete files.Python File Handling",
            "Python Database Handling": "In our database section you will learn how to access and work with MySQL and MongoDB databases:Python MySQL TutorialPython MongoDB Tutorial",
            "Python Exercises": "",
            "Python Examples": "Learn by examples! This tutorial supplements all explanations with clarifying examples.See All Python Examples",
            "Python Quiz": "Learn by taking a quiz! This quiz will give you a signal of how much you know, or do not know, about Python.Python Quiz",
            "Python Reference": "You will also find complete function and method references:Reference OverviewBuilt-in FunctionsString MethodsList/Array MethodsDictionary MethodsTuple MethodsSet MethodsFile MethodsPython KeywordsPython ExceptionsPython GlossaryRandom ModuleRequests ModuleMath ModuleCMath Module",
            "Download Python": "Download Python from the official Python web site:  https://python.org",
            "Python Exam - Get Your Diploma!": "Get Your Certificate \u00bbThe HTML Certificate documents your knowledge of HTML.The CSS Certificate documents your knowledge of advanced CSS.The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.The Python Certificate documents your knowledge of Python.The jQuery Certificate documents your knowledge of jQuery.The SQL Certificate documents your knowledge of SQL.The PHP Certificate documents your knowledge of PHP and MySQL.The XML Certificate documents your knowledge of XML, XML DOM and XSLT.The Bootstrap Certificate documents your knowledge of the Bootstrap framework."
        }
    },
    "intro": {
        "title": "Python Intro",
        "url": "https://www.w3schools.com/python/python_intro.asp",
        "info": {
            "What is Python?": "Python is a popular programming language. It was created by Guido van Rossum, and released in 1991.It is used for:"
        }
    },
    "getstarted": {
        "title": "Python Get Started",
        "url": "https://www.w3schools.com/python/python_getstarted.asp",
        "info": {
            "Python Install": "Many PCs and Macs will have python already installed.To check if you have python installed on a Windows PC, search in the start bar for Python or run the following on the Command Line (cmd.exe):```py\n\r\nC:\\Users\\Your Name>python --version\r\n```To check if you have python installed on a Linux or Mac, then on linux open the command line or on Mac open the Terminal and type:```py\n\r\npython --version\r\n```If you find that you do not have python installed on your computer, then you can download it for free from the following website: https://www.python.org/",
            "Python Quickstart": "Python is an interpreted programming language, this means that as a developer you write Python (.py) files in a text editor and then put those files into the python interpreter to be executed.The way to run a python file is like this on the command line:```py\n\r\nC:\\Users\\Your Name>python helloworld.py\r\n```Where \"helloworld.py\" is the name of your python file.Let's write our first Python file, called helloworld.py, which can be done in any text editor.```py\n\r\nprint(\"Hello, World!\")\r\n```Simple as that. Save your file. Open your command line, navigate to the directory where you saved your file, and run:```py\n\r\nC:\\Users\\Your Name>python helloworld.py\r\n```The output should read:```py\n\r\nHello, World!\r\n```Congratulations, you have written and executed your first Python program.",
            "The Python Command Line": "To test a short amount of code in python sometimes it is quickest and easiest not to write the code in a file. This is made possible because Python can be run as a command line itself.Type the following on the Windows, Mac or Linux command line:```py\n\r\nC:\\Users\\Your Name>python\r\n``````py\n\r\nC:\\Users\\Your Name>py\r\n```From there you can write any python, including our hello world example from earlier in the tutorial:```py\n\nC:\\Users\\Your Name>python\n\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\n\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\r\n>>> print(\"Hello, World!\")\r\n```Which will write \"Hello, World!\" in the command line:```py\n\nC:\\Users\\Your Name>python\n\r\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32\n\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\r\n>>> print(\"Hello, World!\")\n\r\nHello, World!\r\n```Whenever you are done in the python command line, you can simply type the following to quit the python command line interface:```py\n\r\nexit()\r\n```"
        }
    },
    "syntax": {
        "title": "Python Syntax",
        "url": "https://www.w3schools.com/python/python_syntax.asp",
        "info": {
            "Python Indentation": "Indentation refers to the spaces at the beginning of a code line.Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important.Python uses indentation to indicate a block of code.```py\nif 5 > 2:\n \r\nprint(\"Five is greater than two!\")\r\n```Python will give you an error if you skip the indentation:```py\n\r\nif 5 > 2:\n\r\nprint(\"Five is greater than two!\")\r\n```The number of spaces is up to you as a programmer, but it has to be at least one.```py\nif 5 > 2:\n print(\"Five is greater than two!\") \r\nif 5 > 2:\n        print(\"Five is greater than two!\") \r\n```You have to use the same number of spaces in the same block of code, otherwise Python will give you an error:```py\n\r\nif 5 > 2:\n\r\n print(\"Five is greater than two!\")\r\n        print(\"Five is greater than two!\")```",
            "Python Variables": "In Python, variables are created when you assign a value to it:```py\nx = 5\ny = \"Hello, World!\"\r\n```Python has no command for declaring a variable.You will learn more about variables in the Python Variables chapter.",
            "Comments": "Python has commenting capability for the purpose of in-code documentation.Comments start with a #, and Python will render the rest of the line as a comment:```py\n\r\n#This is a comment.\n\r\nprint(\"Hello, World!\")\r\n```"
        }
    },
    "comments": {
        "title": "Python Comments",
        "url": "https://www.w3schools.com/python/python_comments.asp",
        "info": {
            "Creating a Comment": "Comments starts with a #, and Python will ignore them:```py\n\r\n#This is a comment\n\r\nprint(\"Hello, World!\")\r\n```Comments can be placed at the end of a line, and Python will ignore the rest of the line:```py\n\r\nprint(\"Hello, World!\") #This is a comment\r\n```Comments does not have to be text to explain the code, it can also be used to prevent Python from executing code:```py\n#print(\"Hello, World!\")\nprint(\"Cheers, Mate!\")```",
            "Multi Line Comments": "Python does not really have a syntax for multi line comments.To add a multiline comment you could insert a # for each line:```py\n#This is a comment\n#written in\n#more than just one line\nprint(\"Hello, World!\")\r\n```Or, not quite as intended, you can use a multiline string.Since Python will ignore string literals that are not assigned to a variable, you can add a multiline string (triple quotes) in your code, and place your comment inside it:```py\n\"\"\"\nThis is a comment\nwritten in \nmore than just one line\n\"\"\"\nprint(\"Hello, World!\")```As long as the string is not assigned to a variable, Python will read the code, but then ignore it, and you have made a multiline comment."
        }
    },
    "variables": {
        "title": "Python Variables",
        "url": "https://www.w3schools.com/python/python_variables.asp",
        "info": {
            "Creating Variables": "Variables are containers for storing data values.Unlike other programming languages, Python has no command for declaring a variable.A variable is created the moment you first assign a value to it.```py\n\r\nx = 5\n\r\ny = \"John\"\n\r\nprint(x)\n\r\nprint(y)\r\n```Variables do not need to be declared with any particular type and can even change type after they have been set.```py\n\r\nx = 4 # x is of type int\n\r\nx = \"Sally\" # x is now of type str\n\r\nprint(x)\r\n```String variables can be declared either by using single or double quotes:```py\n\r\nx = \"John\"\n# is the same as\nx = 'John'\r\n```",
            "Variable Names": "```py\n#Legal variable names:\nmyvar = \"John\"\nmy_var = \"John\"\n_my_var = \"John\"\nmyVar = \"John\"\nMYVAR = \"John\"\nmyvar2 = \"John\"\n#Illegal variable names:\n2myvar = \"John\"\nmy-var = \"John\"\nmy var = \"John\"```",
            "Assign Value to Multiple Variables": "Python allows you to assign values to multiple variables in one line:```py\nx, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)\r\n```And you can assign the same value to multiple variables in one line:```py\nx = y = z = \"Orange\"\nprint(x)\nprint(y)\nprint(z)\r\n```",
            "Output Variables": "The Python print statement is often used to output variables.To combine both text and a variable, Python uses the + character:```py\n\r\nx = \"awesome\"\nprint(\"Python is \" + x)\r\n```You can also use the + character to add a variable to another variable:```py\n\r\nx = \"Python is \"\ny = \"awesome\"\nz =  x + y\n\r\nprint(z)\r\n```For numbers, the + character works as a mathematical operator:```py\n\r\nx = 5\ny = 10\nprint(x + y)\r\n```If you try to combine a string and a number, Python will give you an error:```py\nx = 5\ny = \"John\"\nprint(x + y)\r\n```",
            "Global Variables": "Variables that are created outside of a function (as in all of the examples above) are known as global variables.Global variables can be used by everyone, both inside of functions and outside.```py\n\r\nx = \"awesome\"\ndef myfunc():\n  print(\"Python is \" + x)\nmyfunc()```If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.```py\n\r\nx = \"awesome\"\ndef myfunc():\n  x = \"fantastic\"\n  print(\"Python is \" + x)\nmyfunc()\n\nprint(\"Python is \" + x)```",
            "The global Keyword": "Normally, when you create a variable inside a function, that variable is local, and can only be used inside that function.To create a global variable inside a function, you can use the global keyword.```py\ndef myfunc():\n  global x\n  x = \"fantastic\"\nmyfunc()\n\nprint(\"Python is \" + x)```Also, use the global keyword if you want to change a global variable inside a function.```py\nx = \"awesome\"\ndef myfunc():\n  global x\n  x = \"fantastic\"\nmyfunc()\n\nprint(\"Python is \" + x)```"
        }
    },
    "datatypes": {
        "title": "Python Data Types",
        "url": "https://www.w3schools.com/python/python_datatypes.asp",
        "info": {
            "Built-in Data Types": "In programming, data type is an important concept.Variables can store data of different types, and different types can do different things.Python has the following data types built-in by default, in these categories:",
            "Getting the Data Type": "You can get the data type of any object by using the type() function:```py\n\r\nx = 5\n\r\nprint(type(x))\r\n```",
            "Setting the Data Type": "In Python, the data type is set when you assign a value to a variable:",
            "Setting the Specific Data Type": "If you want to specify the data type, you can use the following constructor functions:"
        }
    },
    "numbers": {
        "title": "Python Numbers",
        "url": "https://www.w3schools.com/python/python_numbers.asp",
        "info": {
            "Python Numbers": "There are three numeric types in Python:Variables of numeric types are created when you assign a value to them:```py\n\r\nx = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n```To verify the type of any object in Python, use the type() function:```py\nprint(type(x))\nprint(type(y))\nprint(type(z))\n```",
            "Int": "Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length.```py\n\r\nx = 1\ny = 35656222554887711\nz = -3255522\nprint(type(x))\nprint(type(y))\nprint(type(z))```",
            "Float": "Float, or \"floating point number\" is a number, positive or negative, containing one or more decimals.```py\n\r\nx = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))```Float can also be scientific numbers with an \"e\" to indicate the power of 10.```py\nx = 35e3\ny = 12E4\nz = -87.7e100\nprint(type(x))\nprint(type(y))\nprint(type(z))```",
            "Complex": "Complex numbers are written with a \"j\" as the imaginary part:```py\nx = 3+5j\ny = 5j\nz = -5j\nprint(type(x))\nprint(type(y))\nprint(type(z))```",
            "Type Conversion": "You can convert from one type to another with the int(), float(), and complex() methods:```py\nx = 1    # int\ny = 2.8  # float\nz = 1j   # complex\n#convert from int to float:\na = float(x)\n#convert from float to int:\nb = int(y)\n#convert from int to complex:\nc = complex(x)\nprint(a)\nprint(b)\nprint(c)\nprint(type(a))\nprint(type(b))\nprint(type(c))```",
            "Random Number": "Python does not have a random() function to make a random number, but Python has a built-in module calledrandom that can be used to make random numbers:```py\nimport random\nprint(random.randrange(1, 10))```In our Random Module Reference you will learn more about the Random module."
        }
    },
    "casting": {
        "title": "Python Casting",
        "url": "https://www.w3schools.com/python/python_casting.asp",
        "info": {
            "Specify a Variable Type": "There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.Casting in python is therefore done using constructor functions:```py\n\r\nx = int(1)   # x will be 1\n\r\ny = int(2.8) # y will be 2\n\r\nz = int(\"3\") # z will be 3\n``````py\n\r\nx = float(1)     # x will be 1.0\n\r\ny = float(2.8)   # y will be 2.8\n\r\nz = float(\"3\")   # z will be 3.0\n\r\nw = float(\"4.2\") # w will be 4.2\n``````py\n\r\nx = str(\"s1\") # x will be 's1'\n\r\ny = str(2)    # y will be '2'\n\r\nz = str(3.0)  # z will be '3.0'\r\n```"
        }
    },
    "strings": {
        "title": "Python Strings",
        "url": "https://www.w3schools.com/python/python_strings.asp",
        "info": {
            "String Literals": "String literals in python are surrounded by either single quotation marks, or double quotation marks.'hello' is the same as \"hello\".You can display a string literal with the print() function:```py\n\r\nprint(\"Hello\")\n\r\nprint('Hello')\r\n```",
            "Assign String to a Variable": "Assigning a string to a variable is done with the variable name followed by an equal sign and the string:```py\n\r\na = \"Hello\"\nprint(a)```",
            "Multiline Strings": "You can assign a multiline string to a variable by using three quotes:```py\na = \"\"\"Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.\"\"\"\nprint(a)```Or three single quotes:```py\na = '''Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore magna aliqua.'''\nprint(a)```",
            "Strings are Arrays": "Like many other popular programming languages, strings in Python are arrays of bytes representing unicode characters.However, Python does not have a character data type, a single character is simply a string with a length of 1.Square brackets can be used to access elements of the string.```py\n\r\na = \"Hello, World!\"\n\r\nprint(a[1])\r\n```",
            "Slicing": "You can return a range of characters by using the slice syntax.Specify the start index and the end index, separated by a colon, to return a part of the string.```py\n\r\nb = \"Hello, World!\"\nprint(b[2:5])\r\n```",
            "Negative Indexing": "```py\n\r\nb = \"Hello, World!\"\nprint(b[-5:-2])\r\n```",
            "String Length": "To get the length of a string, use the len() function.```py\n\r\na = \"Hello, World!\"\n\r\nprint(len(a))\r\n```",
            "String Methods": "Python has a set of built-in methods that you can use on strings.",
            "Check String": "To check if a certain phrase or character is present in a string, we can use the keywords in or not in.```py\ntxt = \"The rain in Spain stays mainly in the plain\"\nx = \"ain\" in txt\n\r\nprint(x)\r\n``````py\ntxt = \"The rain in Spain stays mainly in the plain\"\nx = \"ain\" not in txt\n\r\nprint(x)  ```",
            "String Concatenation": "To concatenate, or combine, two strings you can use the + operator.```py\na = \"Hello\"\nb = \"World\"\nc = a + b\n\r\nprint(c)\r\n``````py\na = \"Hello\"\nb = \"World\"\nc = a + \" \" + b\n\r\nprint(c)\r\n```",
            "String Format": "As we learned in the Python Variables chapter, we cannot combine strings and numbers like this:```py\nage = 36\ntxt = \"My name is John, I am \" + age\nprint(txt)\r\n```But we can combine strings and numbers by using the format() method!The format() method takes the passed arguments, formats them, and places them in the string where the placeholders{} are:```py\nage = 36\ntxt = \"My name is John, and I am {}\"\nprint(txt.format(age))\r\n```The format() method takes unlimited number of arguments, and are placed into the respective placeholders:```py\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want {} pieces of item {} for {} dollars.\"\nprint(myorder.format(quantity, itemno, price))\r\n```You can use index numbers {0} to be sure the arguments are placed in the correct placeholders:```py\nquantity = 3\nitemno = 567\nprice = 49.95\nmyorder = \"I want to pay {2} dollars for {0} pieces of item {1}.\"\nprint(myorder.format(quantity, itemno, price))\r\n```",
            "Escape Character": "To insert characters that are illegal in a string, use an escape character.An escape character is a backslash \\ followed by the character you want to insert.An example of an illegal character is a double quote inside a string that is surrounded by double quotes:```py\n\r\ntxt = \"We are the so-called \"Vikings\" from the north.\"\r\n```To fix this problem, use the escape character \\\":```py\n\r\ntxt = \"We are the so-called \\\"Vikings\\\" from the north.\"\r\n```Other escape characters used in Python:"
        }
    },
    "booleans": {
        "title": "Python Booleans",
        "url": "https://www.w3schools.com/python/python_booleans.asp",
        "info": {
            "Boolean Values": "In programming you often need to know if an expression is True or False.You can evaluate any expression in Python, and get one of two answers, True or False.When you compare two values, the expression is evaluated and Python returns the Boolean answer:```py\nprint(10 > 9)\nprint(10 == 9)\nprint(10 < 9)```When you run a condition in an if statement, Python returns True or False:```py\na = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")```",
            "Evaluate Values and Variables": "The bool() function allows you to evaluate any value, and give you True or False in return,```py\nprint(bool(\"Hello\"))\nprint(bool(15))\n``````py\nx = \"Hello\"\ny = 15\nprint(bool(x))\nprint(bool(y))\n```",
            "Most Values are True": "Almost any value is evaluated to True if it has some sort of content.Any string is True, except empty strings.Any number is True, except 0.Any list, tuple, set, and dictionary are True, except empty ones.```py\nbool(\"abc\")\nbool(123)\nbool([\"apple\", \"cherry\", \"banana\"])\n```",
            "Some Values are False": "In fact, there are not many values that evaluates toFalse, except empty values, such as (),[], {}, \"\", the number0, and the value None. And of course the value False evaluates toFalse.```py\nbool(False)\nbool(None)\nbool(0)\nbool(\"\")\nbool(())\nbool([])\nbool({})```One more value, or object in this case, evaluates to False, and that is if you have an object that is made from a class with a `__`len`__` function that returns 0 or False: ```py\nclass myclass():\n  def __len__(self):\n    return 0\n\nmyobj = myclass()\nprint(bool(myobj))```",
            "Functions can Return a Boolean": "You can create functions that returns a Boolean Value:```py\ndef myFunction() :\n  return True\nprint(myFunction())```You can execute code based on the Boolean answer of a function:```py\ndef myFunction() :\n  return True\nif myFunction():\n  print(\"YES!\")\nelse:\n  print(\"NO!\")```Python also has many built-in functions that returns a boolean value, like the isinstance() function, which can be used to determine if an object is of a certain data type:```py\nx = 200\nprint(isinstance(x, int))```"
        }
    },
    "operators": {
        "title": "Python Operators",
        "url": "https://www.w3schools.com/python/python_operators.asp",
        "info": {
            "Python Operators": "Operators are used to perform operations on variables and values.Python divides the operators in the following groups:",
            "Python Arithmetic Operators": "Arithmetic operators are used with numeric values to perform common mathematical operations:",
            "Python Assignment Operators": "Assignment operators are used to assign values to variables:",
            "Python Comparison Operators": "Comparison operators are used to compare two values:",
            "Python Logical Operators": "Logical operators are used to combine conditional statements:",
            "Python Identity Operators": "Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:",
            "Python Membership Operators": "Membership operators are used to test if a sequence is presented in an object:",
            "Python Bitwise Operators": "Bitwise operators are used to compare (binary) numbers:"
        }
    },
    "lists": {
        "title": "Python Lists",
        "url": "https://www.w3schools.com/python/python_lists.asp",
        "info": {
            "Python Collections (Arrays)": "There are four collection data types in the Python programming language:When choosing a collection type, it is useful to understand the properties of that type. Choosing the right type for a particular data set could mean retention of meaning, and, it could mean an increase in efficiency or security.",
            "List": "A list is a collection which is ordered and changeable. In Python lists are written with square brackets.```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(thislist)\r\n```",
            "Access Items": "You access the list items by referring to the index number:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(thislist[1])\r\n```Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(thislist[-1])\r\n```You can specify a range of indexes by specifying where to start and where to end the range.When specifying a range, the return value will be a new list with the specified items.```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n\r\nprint(thislist[2:5])\r\n```By leaving out the start value, the range will start at the first item:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n\r\nprint(thislist[:4])\r\n```By leaving out the end value, the range will go on to the end of the list:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n\r\nprint(thislist[2:])\r\n```Specify negative indexes if you want to start the search from the end of the list:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\"]\n\r\nprint(thislist[-4:-1])\r\n```",
            "Change Item Value": "```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist[1] = \"blackcurrant\"\n\r\nprint(thislist)\r\n```",
            "Loop Through a List": "You can loop through the list items by using a for loop:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\nfor x in thislist:\n  print(x)```You will learn more about for loops in our Python For Loops Chapter.",
            "Check if Item Exists": "To determine if a specified item is present in a list use the in keyword:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\nif \"apple\" in thislist:\n  print(\"Yes, 'apple' is in the fruits list\")```",
            "List Length": "To determine how many items a list has, use the len() function:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nprint(len(thislist))\r\n```",
            "Add Items": "To add an item to the end of the list, use the append() method:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.append(\"orange\")\n\r\nprint(thislist)\r\n```To add an item at the specified index, use the insert() method:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.insert(1, \"orange\")\n\r\nprint(thislist)\r\n```",
            "Remove Item": "There are several methods to remove items from a list:```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.remove(\"banana\")\n\r\nprint(thislist)\r\n``````py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\n\r\nthislist.pop()\n\r\nprint(thislist)\r\n``````py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel\r\nthislist[0]\nprint(thislist)\r\n``````py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\ndel\r\nthislist``````py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\nthislist.clear()\nprint(thislist)\r\n```",
            "Copy a List": "You cannot copy a list simply by typing list2 = list1, because: list2 will only be a reference to list1, and changes made inlist1 will automatically also be made inlist2.There are ways to make a copy, one way is to use the built-in List method copy().```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = thislist.copy()\nprint(mylist)\r\n```Another way to make a copy is to use the built-in method list().```py\n\r\nthislist = [\"apple\", \"banana\", \"cherry\"]\nmylist = list(thislist)\nprint(mylist)\r\n```",
            "Join Two Lists": "There are several ways to join, or concatenate, two or more lists in Python.One of the easiest ways are by using the + operator.```py\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\nlist3 = list1 + list2\nprint(list3)```Another way to join two lists are by appending all the items from list2 into list1, one by one:```py\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\n\nfor x in list2:\n  list1.append(x)\nprint(list1)```Or you can use the extend() method, which purpose is to add elements from one list to another list:```py\nlist1 = [\"a\", \"b\" , \"c\"]\nlist2 = [1, 2, 3]\nlist1.extend(list2)\nprint(list1)```",
            "The list() Constructor": "It is also possible to use the list() constructor to make a new list.```py\n\r\nthislist = list((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n\r\nprint(thislist)\r\n```",
            "List Methods": "Python has a set of built-in methods that you can use on lists."
        }
    },
    "tuples": {
        "title": "Python Tuples",
        "url": "https://www.w3schools.com/python/python_tuples.asp",
        "info": {
            "Tuple": "A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nprint(thistuple)\r\n```",
            "Access Tuple Items": "You can access tuple items by referring to the index number, inside square brackets:```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nprint(thistuple[1])\r\n```Negative indexing means beginning from the end, -1 refers to the last item, -2 refers to the second last item etc.```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nprint(thistuple[-1])\r\n```You can specify a range of indexes by specifying where to start and where to end the range.When specifying a range, the return value will be a new tuple with the specified items.```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\n\r\nprint(thistuple[2:5])\r\n```Specify negative indexes if you want to start the search from the end of the tuple:```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"melon\", \"mango\")\n\r\nprint(thistuple[-4:-1])\r\n```",
            "Change Tuple Values": "Once a tuple is created, you cannot change its values. Tuples are unchangeable, or immutable as it also is called.But there is a workaround. You can convert the tuple into a list, change the list, and convert the list back into a tuple.```py\nx = (\"apple\", \"banana\", \"cherry\")\ny = list(x)\ny[1] = \"kiwi\"\nx = tuple(y)\nprint(x)```",
            "Loop Through a Tuple": "You can loop through the tuple items by using a for loop.```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\nfor x in thistuple:\n  print(x)```You will learn more about for loops in our Python For Loops Chapter.",
            "Check if Item Exists": "To determine if a specified item is present in a tuple use the in keyword:```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\nif \"apple\" in thistuple:\n  print(\"Yes, 'apple' is in the fruits tuple\")```",
            "Tuple Length": "To determine how many items a tuple has, use the len() method:```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\nprint(len(thistuple))```",
            "Add Items": "Once a tuple is created, you cannot add items to it. Tuples are unchangeable.```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\n\r\nthistuple[3] = \"orange\" # This will raise an error\nprint(thistuple)\r\n```",
            "Create Tuple With One Item": "To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.```py\n\r\nthistuple = (\"apple\",)\nprint(type(thistuple))\n#NOT a tuple\nthistuple = (\"apple\")\nprint(type(thistuple))```",
            "Remove Items": "Tuples are unchangeable, so you cannot remove items from it, but you can delete the tuple completely:```py\n\r\nthistuple = (\"apple\", \"banana\", \"cherry\")\ndel\r\nthistuple\nprint(thistuple)#this will raise an error because the tuple no longer exists```",
            "Join Two Tuples": "To join two or more tuples you can use the + operator:```py\ntuple1 = (\"a\", \"b\" , \"c\")\ntuple2 = (1, 2, 3)\ntuple3 = tuple1 + tuple2\nprint(tuple3)```",
            "The tuple() Constructor": "It is also possible to use the tuple() constructor to make a tuple.```py\n\r\nthistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n\r\nprint(thistuple)\r\n```",
            "Tuple Methods": "Python has two built-in methods that you can use on tuples."
        }
    },
    "sets": {
        "title": "Python Sets",
        "url": "https://www.w3schools.com/python/python_sets.asp",
        "info": {
            "Set": "A set is a collection which is unordered and unindexed. In Python sets are written with curly brackets.```py\n\r\nthisset = {\"apple\", \"banana\", \"cherry\"}\nprint(thisset)```",
            "Access Items": "You cannot access items in a set by referring to an index, since sets are unordered the items has no index.But you can loop through the set items using a for loop, or ask if a specified value is present in a set, by using thein keyword.```py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nfor x in thisset:\n  print(x)``````py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nprint(\"banana\" in thisset)```",
            "Change Items": "",
            "Add Items": "To add one item to a set use the add() method.To add more than one item to a set use the update() method.```py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.add(\"orange\")\nprint(thisset)``````py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.update([\"orange\", \"mango\", \"grapes\"])\nprint(thisset)```",
            "Get the Length of a Set": "To determine how many items a set has, use the len() method.```py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nprint(len(thisset))```",
            "Remove Item": "To remove an item in a set, use the remove(), or the discard() method.```py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.remove(\"banana\")\nprint(thisset)``````py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.discard(\"banana\")\nprint(thisset)```You can also use the pop(), method to remove an item, but this method will remove the last item. Remember that sets are unordered, so you will not know what item that gets removed.The return value of the pop() method is the removed item.```py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nx =thisset.pop()\nprint(x)\nprint(thisset)``````py\nthisset = {\"apple\", \"banana\", \"cherry\"}\nthisset.clear()\nprint(thisset)``````py\nthisset = {\"apple\", \"banana\", \"cherry\"}\ndelthisset\nprint(thisset)```",
            "Join Two Sets": "There are several ways to join two or more sets in Python.You can use the union() method that returns a new set containing all items from both sets,or the update() method that inserts all the items from one set into another:```py\nset1 = {\"a\", \"b\" , \"c\"}\nset2 = {1, 2, 3}\nset3 = set1.union(set2)\nprint(set3)``````py\nset1 = {\"a\", \"b\" , \"c\"}\nset2 = {1, 2, 3}\nset1.update(set2)\nprint(set1)```There are other methods that joins two sets and keeps ONLY the duplicates, or NEVER the duplicates, check the full list of set methods in the bottom of this page.",
            "The set() Constructor": "It is also possible to use the set() constructor to make a set.```py\n\r\nthisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets\n\r\nprint(thisset)```",
            "Set Methods": "Python has a set of built-in methods that you can use on sets."
        }
    },
    "dictionaries": {
        "title": "Python Dictionaries",
        "url": "https://www.w3schools.com/python/python_dictionaries.asp",
        "info": {
            "Dictionary": "A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.```py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\n\r\nprint(thisdict)\n```",
            "Accessing Items": "You can access the items of a dictionary by referring to its key name, inside square brackets:```py\nx = thisdict[\"model\"]\n```There is also a method called get() that will give you the same result:```py\nx = thisdict.get(\"model\")\n```",
            "Change Values": "You can change the value of a specific item by referring to its key name:```py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict[\"year\"] = 2018\n```",
            "Loop Through a Dictionary": "You can loop through a dictionary by using afor loop.When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.```py\nfor x in thisdict:\n  print(x)``````py\nfor x in thisdict:\n  print(thisdict[x])``````py\nfor x in thisdict.values():\n  print(x)``````py\nfor x, y in thisdict.items():\n  print(x, y)```",
            "Check if Key Exists": "To determine if a specified key is present in a dictionary use the in keyword:```py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nif \"model\" in thisdict:\n  print(\"Yes, 'model' is one of the keys in the thisdict dictionary\")```",
            "Dictionary Length": "To determine how many items (key-value pairs) a dictionary has, use the len() function.```py\nprint(len(thisdict))```",
            "Adding Items": "Adding an item to the dictionary is done by using a new index key and assigning a value to it:```py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict[\"color\"] = \"red\"\nprint(thisdict)\n```",
            "Removing Items": "There are several methods to remove items from a dictionary:```py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict.pop(\"model\")\nprint(thisdict)``````py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict.popitem()\nprint(thisdict)``````py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\ndel thisdict[\"model\"]\nprint(thisdict)``````py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\ndel thisdict\nprint(thisdict) #this will cause an error because \"thisdict\" no longer exists.``````py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nthisdict.clear()\nprint(thisdict)```",
            "Copy a Dictionary": "You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made indict1 will automatically also be made indict2.There are ways to make a copy, one way is to use the built-in Dictionary method copy().```py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nmydict = thisdict.copy()\nprint(mydict)\r\n```Another way to make a copy is to use the built-in function dict().```py\n\r\nthisdict =\t{\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n\r\n}\nmydict = dict(thisdict)\nprint(mydict)```",
            "Nested Dictionaries": "A dictionary can also contain many dictionaries, this is called nested dictionaries.```py\nmyfamily = {\n  \"child1\" : {\n    \"name\" : \"Emil\",\n    \"year\" : 2004\n  },\n  \"child2\" : {\n    \"name\" : \"Tobias\",\n    \"year\" : 2007\n  },\n  \"child3\" : {\n    \"name\" : \"Linus\",\n    \"year\" : 2011\n  }\n} ```Or, if you want to nest three dictionaries that already exists as dictionaries:```py\nchild1 = {\n  \"name\" : \"Emil\",\n  \"year\" : 2004\n}\nchild2 = {\n  \"name\" : \"Tobias\",\n  \"year\" : 2007\n}\nchild3 = {\n  \"name\" : \"Linus\",\n  \"year\" : 2011\n}\nmyfamily = {\n  \"child1\" : child1,\n  \"child2\" : child2,\n  \"child3\" : child3\n}```",
            "The dict() Constructor": "It is also possible to use the dict() constructor to make a new dictionary:```py\n\r\nthisdict =\tdict(brand=\"Ford\", model=\"Mustang\", year=1964)\n\r\n# note that keywords are not string literals\n\r\n# note the use of equals rather than colon for the assignment\n\r\nprint(thisdict)\n```",
            "Dictionary Methods": "Python has a set of built-in methods that you can use on dictionaries."
        }
    },
    "if...else": {
        "title": "Python If...Else",
        "url": "https://www.w3schools.com/python/python_conditions.asp",
        "info": {
            "Python Conditions and If statements": "Python supports the usual logical conditions from mathematics:These conditions can be used in several ways, most commonly in \"if statements\" and loops.An \"if statement\" is written by using the if keyword.```py\n\r\na = 33\n\r\nb = 200\n\r\nif b > a:\n  print(\"b is greater than a\")\r\n```In this example we use two variables, a and b,which are used as part of the if statement to test whether b is greater than a.As a is 33, and b is 200,we know that 200 is greater than 33, and so we print to screen that \"b is greater than a\".",
            "Indentation": "Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.```py\n\r\na = 33\n\r\nb = 200\n\r\nif b > a:\n\r\nprint(\"b is greater than a\")\r\n# you will get an error\r\n```",
            "Elif": "The elif keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".```py\n\r\na = 33\n\r\nb = 33\n\r\nif b > a:\n\tprint(\"b is greater than a\")\n\r\nelif a == b:\n\tprint(\"a and b are equal\")\n```In this example a is equal to b, so the first condition is not true, but the elif condition is true, so we print to screen that \"a and b are equal\".",
            "Else": "The else keyword catches anything which isn't caught by the preceding conditions.```py\n\r\na = 200\n\r\nb = 33\n\r\nif b > a:\n\tprint(\"b is greater than a\")\n\r\nelif a == b:\n\tprint(\"a and b are equal\")\nelse:\n\tprint(\"a is greater than b\")\n```In this example a is greater than b,so the first condition is not true, also the elif condition is not true,so we go to the else condition and print to screen that \"a is greater than b\".You can also have an else without theelif:```py\n\r\na = 200\n\r\nb = 33\n\r\nif b > a:\n\tprint(\"b is greater than a\")\nelse:\n\tprint(\"b is not greater than a\")\n```",
            "Short Hand If": "If you have only one statement to execute, you can put it on the same line as the if statement.```py\nif a > b: print(\"a is greater than b\")\r\n```",
            "Short Hand If ... Else": "If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:```py\na = 2\nb = 330\nprint(\"A\") if a > b else print(\"B\")```You can also have multiple else statements on the same line:```py\na = 330\nb = 330\nprint(\"A\") if a > b else print(\"=\") if a == b else print(\"B\")```",
            "And": "The and keyword is a logical operator, and is used to combine conditional statements:```py\na = 200\nb = 33\nc = 500\nif a > b and c > a:\n\tprint(\"Both conditions are True\")\n```",
            "Or": "The or keyword is a logical operator, and is used to combine conditional statements:```py\na = 200\nb = 33\nc = 500\nif a > b or a > c:\n\tprint(\"At least one of the conditions is True\")\n```",
            "Nested If": "You can have if statements inside if statements, this is called nestedif statements.```py\nx = 41\nif x > 10:\n\tprint(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")```",
            "The pass Statement": "if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.```py\na = 33\nb = 200\nif b > a:\n  pass```"
        }
    },
    "whileloops": {
        "title": "Python While Loops",
        "url": "https://www.w3schools.com/python/python_while_loops.asp",
        "info": {
            "Python Loops": "Python has two primitive loop commands:",
            "The while Loop": "With the while loop we can execute a set of statements as long as a condition is true.```py\n\r\ni = 1\n\r\nwhile i < 6:\nprint(i)\ni += 1\n```The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.",
            "The break Statement": "With the break statement we can stop the loop even if the while condition is true:```py\n\r\ni = 1\n\r\nwhile i < 6:\nprint(i)\n  if i == 3:\n    break\n  i += 1\r\n```",
            "The continue Statement": "With the continue statement we can stop the current iteration, and continue with the next:```py\n\r\ni = 0\n\r\nwhile i < 6:\n  i += 1\r\n  if i == 3:\n    continue\n  print(i)\n```",
            "The else Statement": "With the else statement we can run a block of code once when the condition no longer is true:```py\n\r\ni = 1\n\r\nwhile i < 6:\nprint(i)\ni += 1\nelse:\n  print(\"i is no longer less than 6\")\n```"
        }
    },
    "forloops": {
        "title": "Python For Loops",
        "url": "https://www.w3schools.com/python/python_for_loops.asp",
        "info": {
            "Python For Loops": "A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.```py\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n\tprint(x)\r\n```The for loop does not require an indexing variable to set beforehand.",
            "Looping Through a String": "Even strings are iterable objects, they contain a sequence of characters:```py\nfor x in \"banana\":\n  print(x)\r\n```",
            "The break Statement": "With the break statement we can stop the loop before it has looped through all the items:```py\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  print(x)\n  if x == \"banana\":\n    break\n``````py\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  if x == \"banana\":\n    break\n  print(x)\r\n```",
            "The continue Statement": "With the continue statement we can stop the current iteration of the loop, and continue with the next:```py\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor x in fruits:\n  if x == \"banana\":\n    continue\n  print(x)\r\n```",
            "The range() Function": "The range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.```py\nfor x in range(6):\n\tprint(x)\r\n```The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):```py\nfor x in range(2, 6):\n\tprint(x)\r\n```The range() function defaults to increment the sequence by 1,however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):```py\nfor x in range(2, 30, 3):\n\tprint(x)\r\n```",
            "Else in For Loop": "The else keyword in afor loop specifies a block of code to be executed when the loop is finished:```py\nfor x in range(6):\n \tprint(x)\nelse:\n \tprint(\"Finally finished!\")```",
            "Nested Loops": "A nested loop is a loop inside a loop.The \"inner loop\" will be executed one time for each iteration of the \"outer loop\":```py\nadj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor x in adj:\n  for y in fruits:\n    print(x, y)```",
            "The pass Statement": "for loops cannot be empty, but if you for some reason have a for loop with no content, put in the pass statement to avoid getting an error.```py\nfor x in [0, 1, 2]:\n  pass```"
        }
    },
    "functions": {
        "title": "Python Functions",
        "url": "https://www.w3schools.com/python/python_functions.asp",
        "info": {
            "Creating a Function": "In Python a function is defined using the def keyword:```py\ndef my_function():\n  print(\"Hello from a function\")```",
            "Calling a Function": "To call a function, use the function name followed by parenthesis:```py\ndef my_function():\n  print(\"Hello from a function\")\n\nmy_function()```",
            "Arguments": "Information can be passed into functions as arguments.Arguments are specified after the function name, inside the parentheses.You can add as many arguments as you want, just separate them with a comma.The following example has a function with one argument (fname).When the function is called, we pass along a first name,which is used inside the function to print the full name:```py\ndef my_function(fname):\n  print(fname + \" Refsnes\")\nmy_function(\"Emil\")\nmy_function(\"Tobias\")\nmy_function(\"Linus\")```",
            "Parameters or Arguments?": "The terms parameter and argument can be used for the same thing: information that are passed into a function.",
            "Number of Arguments": "By default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less. ```py\ndef my_function(fname, lname):\n  print(fname + \" \" + lname)\nmy_function(\"Emil\", \"Refsnes\")``````py\ndef my_function(fname, lname):\n  print(fname + \" \" + lname)\nmy_function(\"Emil\")```",
            "Arbitrary Arguments, *args": "If you do not know how many arguments that will be passed into your function,add a * before the parameter name in the function definition.This way the function will receive a tuple of arguments, and can access the items accordingly:```py\ndef my_function(*kids):\n  print(\"The youngest child is \" + kids[2])\nmy_function(\"Emil\", \"Tobias\", \"Linus\")```",
            "Keyword Arguments": "You can also send arguments with the key = value syntax.This way the order of the arguments does not matter.```py\ndef my_function(child3, child2, child1):\n  print(\"The youngest child is \" + child3)\nmy_function(child1 = \"Emil\", child2 = \"Tobias\", child3 = \"Linus\")```",
            "Arbitrary Keyword Arguments, **kwargs": "If you do not know how many keyword arguments that will be passed into your function,add two asterisk: `**` before the parameter name in the function definition.This way the function will receive a dictionary of arguments, and can access the items accordingly:```py\ndef my_function(**kid):\n  print(\"His last name is \" + kid[\"lname\"])\n\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")```",
            "Default Parameter Value": "The following example shows how to use a default parameter value.If we call the function without argument, it uses the default value:```py\ndef my_function(country = \"Norway\"):\n  print(\"I am from \" + country)\nmy_function(\"Sweden\")\nmy_function(\"India\")\nmy_function()\nmy_function(\"Brazil\")```",
            "Passing a List as an Argument": "You can send any data types of argument to a function (string, number, list, dictionary etc.), and it willbe treated as the same data type inside the function.E.g. if you send a List as an argument, it will still be a List when it reaches the function:```py\ndef my_function(food):\n  for x in food:\n    print(x)\nfruits = [\"apple\", \"banana\", \"cherry\"]\nmy_function(fruits)\n```",
            "Return Values": "To let a function return a value, use the return statement:```py\ndef my_function(x):\n  return 5 * x\nprint(my_function(3))\nprint(my_function(5))\nprint(my_function(9))```",
            "The pass Statement": "function definitions cannot be empty, but if you for some reason have a function definition with no content, put in the pass statement to avoid getting an error.```py\ndef myfunction():\n  pass```",
            "Recursion": "Python also accepts function recursion, which means a defined function can call itself.Recursion is a common mathematical and programming concept. It means that a function calls itself. This has the benefit of meaning that you can loop through data to reach a result.The developer should be very careful with recursion as it can be quite easy to slip into writing a function which never terminates, or one that uses excess amounts of memory or processor power. However, when written correctly recursion can be a very efficient and mathematically-elegant approach to programming.In this example, tri_recursion() is a function that we have defined to call itself (\"recurse\"). We use the k variable as the data, which decrements (-1) every time we recurse. The recursion ends when the condition is not greater than 0 (i.e. when it is 0).To a new developer it can take some time to work out how exactly this works, best way to find out is by testing and modifying it.```py\n\r\ndef tri_recursion(k):\n\tif(k > 0):\n\t\t   \t\tresult = k + tri_recursion(k - 1)\n\t\t   \t\tprint(result)\n\telse:\n\t\t   \t\tresult = 0\n\treturn result\n\n\r\nprint(\"\\n\\nRecursion Example Results\")\n\r\ntri_recursion(6)\n```"
        }
    },
    "lambda": {
        "title": "Python Lambda",
        "url": "https://www.w3schools.com/python/python_lambda.asp",
        "info": {
            "Syntax": "The expression is executed and the result is returned:```py\nx = lambda a : a + 10\nprint(x(5))```Lambda functions can take any number of arguments:```py\nx = lambda a, b : a * b\nprint(x(5, 6))``````py\nx = lambda a, b, c : a + b + c\nprint(x(5, 6, 2))```",
            "Why Use Lambda Functions?": "The power of lambda is better shown when you use them as an anonymous function inside another function.Say you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:```py\n\r\ndef myfunc(n):\nreturn lambda a : a * n\r\n```Use that function definition to make a function that always doubles the number you send in:```py\n\r\ndef myfunc(n):\nreturn lambda a : a * n\n\nmydoubler = myfunc(2)\n\nprint(mydoubler(11))\r\n```Or, use the same function definition to make a function that always triples the number you send in:```py\n\r\ndef myfunc(n):\nreturn lambda a : a * n\n\nmytripler = myfunc(3)\n\nprint(mytripler(11))\r\n```Or, use the same function definition to make both functions, in the same program:```py\n\r\ndef myfunc(n):\nreturn lambda a : a * n\n\nmydoubler = myfunc(2)\nmytripler = myfunc(3)\n\nprint(mydoubler(11))\r\nprint(mytripler(11))\r\n```"
        }
    },
    "arrays": {
        "title": "Python Arrays",
        "url": "https://www.w3schools.com/python/python_arrays.asp",
        "info": {
            "Arrays": "Arrays are used to store multiple values in one single variable:```py\ncars = [\"Ford\", \"Volvo\", \"BMW\"]```",
            "What is an Array?": "An array is a special variable, which can hold more than one value at a time.If you have a list of items (a list of car names, for example), storing the cars in single variables could look like this:However, what if you want to loop through the cars and find a specific one? And what if you had not 3 cars, but 300?The solution is an array!An array can hold many values under a single name, and you can access the values by referring to an index number.",
            "Access the Elements of an Array": "You refer to an array element by referring to the index number.```py\nx = cars[0]``````py\ncars[0] = \"Toyota\"```",
            "The Length of an Array": "Use the len() method to return the length of an array (the number of elements in an array).```py\nx = len(cars)```",
            "Looping Array Elements": "You can use the for in loop to loop through all the elements of an array.```py\nfor x in cars:\n  print(x)```",
            "Adding Array Elements": "You can use the append() method to add an element to an array.```py\n\r\ncars.append(\"Honda\")```",
            "Removing Array Elements": "You can use the pop() method to remove an element from the array.```py\n\r\ncars.pop(1)```You can also use the remove() method to remove an element from the array.```py\n\r\ncars.remove(\"Volvo\")```",
            "Array Methods": "Python has a set of built-in methods that you can use on lists/arrays."
        }
    },
    "classes/objects": {
        "title": "Python Classes/Objects",
        "url": "https://www.w3schools.com/python/python_classes.asp",
        "info": {
            "Python Classes/Objects": "Python is an object oriented programming language.Almost everything in Python is an object, with its properties and methods.A Class is like an object constructor, or a \"blueprint\" for creating objects.",
            "Create a Class": "To create a class, use the keyword class:```py\nclass MyClass:\n  x = 5```",
            "Create Object": "Now we can use the class named MyClass to create objects:```py\np1 = MyClass()\nprint(p1.x)```",
            "The __init__() Function": "The examples above are classes and objects in their simplest form, and are not really useful in real life applications.To understand the meaning of classes we have to understand the built-in `__`init`__`() function.All classes have a function called `__`init`__`(), which is always executed when the class is being initiated.Use the `__`init`__`() function to assign values to object properties, or other operations that are necessary to do when the object is being created:```py\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)```",
            "Object Methods": "Objects can also contain methods. Methods in objects are functions that belong to the object.Let us create a method in the Person class:```py\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  def myfunc(self):\n    print(\"Hello my name is \" + self.name)\np1 = Person(\"John\", 36)\np1.myfunc()```",
            "The self Parameter": "The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class:```py\nclass Person:\n  def __init__(mysillyobject, name, age):\n    mysillyobject.name = name\n    mysillyobject.age = age\n  def myfunc(abc):\n    print(\"Hello my name is \" + abc.name)\np1 = Person(\"John\", 36)\np1.myfunc()```",
            "Modify Object Properties": "You can modify properties on objects like this:```py\np1.age = 40```",
            "Delete Object Properties": "You can delete properties on objects by using the del keyword:```py\ndel p1.age```",
            "Delete Objects": "You can delete objects by using the del keyword:```py\ndel p1```",
            "The pass Statement": "class definitions cannot be empty, but if you for some reason have a class definition with no content, put in the pass statement to avoid getting an error.```py\nclass Person:\n  pass```"
        }
    },
    "inheritance": {
        "title": "Python Inheritance",
        "url": "https://www.w3schools.com/python/python_inheritance.asp",
        "info": {
            "Python Inheritance": "Inheritance allows us to define a class that inherits all the methods and properties from another class.Parent class is the class being inherited from, also called base class.Child class is the class that inherits from another class, also called derived class.",
            "Create a Parent Class": "Any class can be a parent class, so the syntax is the same as creating any other class:```py\n\r\nclass Person:\n  def __init__(self, fname, lname):\n    self.firstname = fname\n    self.lastname = lname\n  def printname(self):\n    print(self.firstname, self.lastname)\n#Use the Person class to create an object, and then execute the printname method:\nx = Person(\"John\", \"Doe\")\nx.printname()```",
            "Create a Child Class": "To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class:```py\n\r\nclass Student(Person):\n  pass```Now the Student class has the same properties and methods as the Person class.```py\nx = Student(\"Mike\", \"Olsen\")\nx.printname()```",
            "Add the __init__() Function": "So far we have created a child class that inherits the properties and methods from its parent.We want to add the `__`init`__`() function to the child class (instead of the pass keyword).```py\nclass Student(Person):\n  def __init__(self, fname, lname):\n    #add properties etc.```When you add the `__`init`__`() function, the child class will no longer inherit the parent's `__`init`__`() function.To keep the inheritance of the parent's `__`init`__`() function, add a call to the parent's `__`init`__`() function:```py\nclass Student(Person):\n  def __init__(self, fname, lname):\n    Person.__init__(self, fname, lname)```Now we have successfully added the `__`init`__`() function, and kept the inheritance of the parent class, and we are ready to add functionality in the`__`init`__`() function.",
            "Use the super() Function": "Python also has a super() function that will make the child class inherit all the methods and properties from its parent:```py\nclass Student(Person):\n  def __init__(self, fname, lname):\n      super().__init__(fname, lname)```By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.",
            "Add Properties": "```py\nclass Student(Person):\n  def __init__(self, fname, lname):\n    super().__init__(fname, lname)\n    self.graduationyear = 2019```In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects.To do so, add another parameter in the `__`init`__`() function:```py\nclass Student(Person):\n  def __init__(self, fname, lname, year):\n    super().__init__(fname, lname)\n    self.graduationyear = year\nx = Student(\"Mike\", \"Olsen\", 2019)```",
            "Add Methods": "```py\nclass Student(Person):\n  def __init__(self, fname, lname, year):\n    super().__init__(fname, lname)\n    self.graduationyear = year\n  def welcome(self):\n    print(\"Welcome\", self.firstname, self.lastname, \"to the class of\", self.graduationyear)```If you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden."
        }
    },
    "iterators": {
        "title": "Python Iterators",
        "url": "https://www.w3schools.com/python/python_iterators.asp",
        "info": {
            "Python Iterators": "An iterator is an object that contains a countable number of values.An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods `__`iter`__`() and `__`next`__`().",
            "Iterator vs Iterable": "Lists, tuples, dictionaries, and sets are all iterable objects. They are iterablecontainers which you can get an iterator from.All these objects have a iter() method which is used to get an iterator:```py\n  mytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\n  print(next(myit))\nprint(next(myit))\nprint(next(myit))\n```Even strings are iterable objects, and can return an iterator:```py\n  mystr = \"banana\"\nmyit = iter(mystr)\n  print(next(myit))\nprint(next(myit))\nprint(next(myit))\n  print(next(myit))\nprint(next(myit))\nprint(next(myit))\n```",
            "Looping Through an Iterator": "We can also use a for loop to iterate through an iterable object:```py\n  mytuple = (\"apple\", \"banana\", \"cherry\")\n\nfor x in mytuple:\n    print(x)``````py\n  mystr = \"banana\"\n\nfor x in mystr:\n    print(x)```The for loop actually creates an iterator object and executes the next() method for each loop.",
            "Create an Iterator": "To create an object/class as an iterator you have to implement the methods`__`iter`__`() and `__`next`__`() to your object.As you have learned in the Python Classes/Objects chapter, all classes have a function called`__`init`__`(), which allows you to do some initializing when the object is being created.The `__`iter`__`() method acts similar, you can do operations (initializing etc.), but must always return the iterator object itself.The `__`next`__`() method also allows you to do operations, and must return the next item in the sequence.```py\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n  def __next__(self):\n    x = self.a\n    self.a += 1\n    return x\n\nmyclass = MyNumbers()\nmyiter = iter(myclass)\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))```",
            "StopIteration": "The example above would continue forever if you had enough next() statements, or if it was used in a for loop.To prevent the iteration to go on forever, we can use the StopIteration statement.In the `__`next`__`() method, we can add a terminating condition to raise an error if the iteration is done a specified number of times:```py\nclass MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\nmyclass = MyNumbers()\nmyiter = iter(myclass)\nfor x in myiter:\n  print(x)\n```"
        }
    },
    "scope": {
        "title": "Python Scope",
        "url": "https://www.w3schools.com/python/python_scope.asp",
        "info": {
            "Local Scope": "A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.```py\ndef myfunc():\n  x = 300\n  print(x)\nmyfunc()```As explained in the example above, the variable x is not available outside the function, but it is available for any function inside the function:```py\ndef myfunc():\n  x = 300\n  def myinnerfunc():\n    print(x)\n  myinnerfunc()\nmyfunc()```",
            "Global Scope": "A variable created in the main body of the Python code is a global variable and belongs to the global scope.Global variables are available from within any scope, global and local.```py\n  x = 300\ndef myfunc():\n  print(x)\nmyfunc()\nprint(x)```If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables,one available in the global scope (outside the function) and one available in the local scope (inside the function):```py\n  x = 300\ndef myfunc():\n  x = 200\n    print(x)\nmyfunc()\nprint(x)```",
            "Global Keyword": "If you need to create a global variable, but are stuck in the local scope, you can use the global keyword.The global keyword makes the variable global.```py\n  def myfunc():\n  global x\n  x = 300\nmyfunc()\n  print(x)```Also, use the global keyword if you want to make a change to a global variable inside a function.```py\nx = 300\ndef myfunc():\n  global x\n  x = 200\nmyfunc()\n\nprint(x)```"
        }
    },
    "modules": {
        "title": "Python Modules",
        "url": "https://www.w3schools.com/python/python_modules.asp",
        "info": {
            "What is a Module?": "Consider a module to be the same as a code library.A file containing a set of functions you want to include in your application.",
            "Create a Module": "To create a module just save the code you want in a file with the file extension .py:```py\ndef greeting(name):\n  print(\"Hello, \" + name)```",
            "Use a Module": "Now we can use the module we just created, by using the import statement:```py\nimport mymodule\nmymodule.greeting(\"Jonathan\")\r\n```",
            "Variables in Module": "The module can contain functions, as already described, but also variables of all types (arrays, dictionaries, objects etc):```py\nperson1 = {\n  \"name\": \"John\",\n  \"age\": 36,\n  \"country\": \"Norway\"\n}``````py\nimport mymodule\na = mymodule.person1[\"age\"]\nprint(a)```",
            "Naming a Module": "You can name the module file whatever you like, but it must have the file extension .py",
            "Re-naming a Module": "You can create an alias when you import a module, by using the as keyword:```py\nimport mymodule as mx\na = mx.person1[\"age\"]\nprint(a)```",
            "Built-in Modules": "There are several built-in modules in Python, which you can import whenever you like.```py\nimport platform\nx = platform.system()\nprint(x)```",
            "Using the dir() Function": "There is a built-in function to list all the function names (or variable names) in a module. The dir() function:```py\nimport platform\nx = dir(platform)\nprint(x)```",
            "Import From Module": "You can choose to import only parts from a module, by using the from keyword.```py\ndef greeting(name):\n  print(\"Hello, \" + name)\nperson1 = {\n  \"name\": \"John\",\n  \"age\": 36,\n  \"country\": \"Norway\"\n}\n``````py\nfrom mymodule import person1\nprint (person1[\"age\"])\n```"
        }
    },
    "dates": {
        "title": "Python Dates",
        "url": "https://www.w3schools.com/python/python_datetime.asp",
        "info": {
            "Python Dates": "A date in Python is not a data type of its own, but we can import a module named datetime to work with dates as date objects.```py\nimport datetime\nx = datetime.datetime.now()\nprint(x)```",
            "Date Output": "When we execute the code from the example above the result will be:The date contains year, month, day, hour, minute, second, and microsecond.The datetime module has many methods to return information about the date object.Here are a few examples, you will learn more about them later in this chapter: ```py\nimport datetime\nx = datetime.datetime.now()\nprint(x.year)\nprint(x.strftime(\"%A\"))```",
            "Creating Date Objects": "To create a date, we can use the datetime() class (constructor) of thedatetime module.The datetime() class requires three parameters to create a date: year, month, day.```py\nimport datetime\nx = datetime.datetime(2020, 5, 17)\n\nprint(x)```The datetime() class also takes parameters for time and timezone (hour, minute, second, microsecond, tzone), but they are optional, and has a default value of 0, (None for timezone).",
            "The strftime() Method": "The datetime object has a method for formatting date objects into readable strings.The method is called strftime(), and takes one parameter, format, to specify the format of the returned string:```py\nimport datetime\nx = datetime.datetime(2018, 6, 1)\nprint(x.strftime(\"%B\"))```A reference of all the legal format codes:"
        }
    },
    "math": {
        "title": "Python Math",
        "url": "https://www.w3schools.com/python/python_math.asp",
        "info": {
            "Built-in Math Functions": "The min() and max() functions can be used to find the lowest or highest value in an iterable:```py\n  x = min(5, 10, 25)\ny = max(5, 10, 25)\nprint(x)\nprint(y)```The abs() function returns the absolute (positive) value of the specified number:```py\n  x = abs(-7.25)\nprint(x)```The pow(x, y) function returns the value of x to the power of y (xy).```py\n  x = pow(4, 3)\nprint(x)```",
            "The Math Module": "Python has also a built-in module called math, which extends the list of mathematical functions.To use it, you must import the math module:```py\nimport math```When you have imported the math module, you can start using methods and constants of the module.The math.sqrt() method for example, returns the square root of a number:```py\n  import   math\nx = math.sqrt(64)\nprint(x)```The math.ceil() method rounds a number upwards to its nearest integer, and the math.floor() method rounds a number downwards to its nearest integer, and returns the result:```py\n  import   math\nx = math.ceil(1.4)\ny = math.floor(1.4)\nprint(x) #   returns 2\nprint(y) # returns 1```The math.pi constant, returns the value of PI (3.14...):```py\n  import   math\nx = math.pi\nprint(x) ```",
            "Complete Math Module Reference": "In our Math Module Reference you will find a complete reference of all methods and constants that belongs to the Math module."
        }
    },
    "json": {
        "title": "Python JSON",
        "url": "https://www.w3schools.com/python/python_json.asp",
        "info": {
            "JSON in Python": "Python has a built-in package called json, which can be used to work with JSON data.```py\n  import json```",
            "Parse JSON - Convert from JSON to Python": "If you have a JSON string, you can parse it by using thejson.loads() method.```py\nimport json\n# some JSON:\nx =  '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n# parse x:\ny = json.loads(x)\n# the result is a Python dictionary:\nprint(y[\"age\"])```",
            "Convert from Python to JSON": "If you have a Python object, you can convert it into a JSON string by using the json.dumps() method.```py\nimport json\n# a Python object (dict):\nx = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n# convert into JSON:\ny = json.dumps(x)\n# the result is a JSON string:\nprint(y)```You can convert Python objects of the following types, into JSON strings:```py\nimport json\nprint(json.dumps({\"name\": \"John\", \"age\": 30}))\nprint(json.dumps([\"apple\", \"bananas\"]))\nprint(json.dumps((\"apple\", \"bananas\")))\nprint(json.dumps(\"hello\"))\nprint(json.dumps(42))\nprint(json.dumps(31.76))\nprint(json.dumps(True))\nprint(json.dumps(False))\nprint(json.dumps(None))```When you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:```py\nimport json\nx = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"married\": True,\n  \"divorced\": False,\n  \"children\": (\"Ann\",\"Billy\"),\n  \"pets\": None,\n  \"cars\": [\n    {\"model\": \"BMW 230\", \"mpg\": 27.5},\n    {\"model\": \"Ford Edge\", \"mpg\": 24.1}\n  ]\n}\nprint(json.dumps(x))\n```",
            "Format the Result": "The example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.The json.dumps() method has parameters to make it easier to read the result:```py\n  json.dumps(x, indent=4)\n```You can also define the separators, default value is (\", \", \": \"), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:```py\n  json.dumps(x, indent=4, separators=(\". \", \" = \"))\n```",
            "Order the Result": "The json.dumps() method has parameters to order the keys in the result:```py\n  json.dumps(x, indent=4, sort_keys=True)\n```"
        }
    },
    "regex": {
        "title": "Python RegEx",
        "url": "https://www.w3schools.com/python/python_regex.asp",
        "info": {
            "RegEx Module": "Python has a built-in package called re, which can be used to work with Regular Expressions.Import the re module:```py\nimport re```",
            "RegEx in Python": "When you have imported the re module, you can start using regular expressions:```py\n  import   re\ntxt = \"The rain in Spain\"\nx = re.search(\"^The.*Spain$\", txt)```",
            "RegEx Functions": "The re module offers a set of functions that allows us to search a string for a match:",
            "Metacharacters": "Metacharacters are characters with a special meaning:",
            "Special Sequences": "A special sequence is a \\ followed by one of the characters in the list below, and has a special meaning:",
            "Sets": "A set is a set of characters inside a pair of square brackets [] with a special meaning:",
            "The findall() Function": "The findall() function returns a list containing all matches.```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.findall(\"ai\", txt)\nprint(x)```The list contains the matches in the order they are found.If no matches are found, an empty list is returned:```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.findall(\"Portugal\", txt)\nprint(x)```",
            "The search() Function": "The search() function searches the string for a match, and returns a Match object if there is a match.If there is more than one match, only the first occurrence of the match will be returned:```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"\\s\", txt)\n\nprint(\"The first white-space character is located in position:\", x.start()) ```If no matches are found, the value None is returned:```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"Portugal\", txt)\nprint(x)```",
            "The split() Function": "The split() function returns a list where the string has been split at each match:```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt)\nprint(x)```You can control the number of occurrences by specifying the maxsplit parameter:```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.split(\"\\s\", txt, 1)\nprint(x)```",
            "The sub() Function": "The sub() function replaces the matches with the text of your choice:```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt)\nprint(x)```You can control the number of replacements by specifying thecount parameter:```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.sub(\"\\s\", \"9\", txt, 2)\nprint(x)```",
            "Match Object": "A Match Object is an object containing information about the search and the result.```py\nimport re\ntxt = \"The rain in Spain\"\nx = re.search(\"ai\", txt)\nprint(x) #this will print an object```The Match object has properties and methods used to retrieve information about the search, and the result:.span() returns a tuple containing the start-, and end positions of the match..string returns the string passed into the function.group() returns the part of the string where there was a match```py\n  import re\n  txt = \"The rain in Spain\"\n  x = re.search(r\"\\bS\\w+\", txt)\n  print(x.span())``````py\n  import re\n  txt = \"The rain in Spain\"\n  x = re.search(r\"\\bS\\w+\", txt)\n  print(x.string)``````py\n  import re\n  txt = \"The rain in Spain\"\n  x = re.search(r\"\\bS\\w+\", txt)\n  print(x.group())```"
        }
    },
    "pip": {
        "title": "Python PIP",
        "url": "https://www.w3schools.com/python/python_pip.asp",
        "info": {
            "What is PIP?": "PIP is a package manager for Python packages, or modules if you like.",
            "What is a Package?": "A package contains all the files you need for a module.Modules are Python code libraries you can include in your project.",
            "Check if PIP is Installed": "Navigate your command line to the location of Python's script directory, and type the following:```py\n\r\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip --version\r\n```",
            "Install PIP": "If you do not have PIP installed, you can download and install it from this page:https://pypi.org/project/pip/",
            "Download a Package": "Downloading a package is very easy.Open the command line interface and tell PIP to download the package you want.Navigate your command line to the location of Python's script directory, and type the following:```py\n\r\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip install camelcase```Now you have downloaded and installed your first package!",
            "Using a Package": "Once the package is installed, it is ready to use.Import the \"camelcase\" package into your project.```py\nimport camelcase\nc = camelcase.CamelCase()\ntxt = \"hello world\"\n\nprint(c.hump(txt))```",
            "Find Packages": "Find more packages at https://pypi.org/.",
            "Remove a Package": "Use the uninstall command to remove a package:```py\n\r\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip uninstall camelcase```The PIP Package Manager will ask you to confirm that you want to remove the camelcase package:```py\nUninstalling camelcase-02.1:\n  Would remove:\n    c:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camecase-0.2-py3.6.egg-info\n    c:\\users\\Your Name\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\camecase\\*\nProceed (y/n)?```Press y and the package will be removed.",
            "List Packages": "Use the list command to list all the packages installed on your system:```py\n\r\nC:\\Users\\Your Name\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts>pip list```"
        }
    },
    "try...except": {
        "title": "Python Try...Except",
        "url": "https://www.w3schools.com/python/python_try_except.asp",
        "info": {
            "Exception Handling": "When an error occurs, or exception as we call it, Python will normally stop and generate an error message.These exceptions can be handled using the try statement:```py\ntry:\n  print(x)\nexcept:\n  print(\"An exception occurred\")```Since the try block raises an error, the except block will be executed.Without the try block, the program will crash and raise an error:```py\nprint(x)```",
            "Many Exceptions": "You can define as many exception blocks as you want, e.g. if you want to execute a special block of code for a special kind of error:```py\ntry:\n  print(x)\nexcept NameError:\n  print(\"Variable x is not defined\")\nexcept:\n  print(\"Something else went wrong\")```",
            "Else": "You can use the else keyword to define a block of code to be executed if no errors were raised:```py\ntry:\n  print(\"Hello\")\nexcept:\n  print(\"Something went wrong\")\nelse:\n  print(\"Nothing went wrong\")```",
            "Finally": "The finally block, if specified, will be executed regardless if the try block raises an error or not.```py\ntry:\n  print(x)\nexcept:\n  print(\"Something went wrong\")\nfinally:\n  print(\"The 'try except' is finished\")```This can be useful to close objects and clean up resources:```py\ntry:\n  f = open(\"demofile.txt\")\n  f.write(\"Lorum Ipsum\")\nexcept:\n  print(\"Something went wrong when writing to the file\")\nfinally:\n  f.close()```The program can continue, without leaving the file object open.",
            "Raise an exception": "As a Python developer you can choose to throw an exception if a condition occurs.To throw (or raise) an exception, use the raise keyword.```py\n  x = -1\nif x < 0:\n  raise Exception(\"Sorry, no numbers below   zero\")```The raise keyword is used to raise an exception.You can define what kind of error to raise, and the text to print to the user.```py\n  x = \"hello\"\nif not type(x) is int:\n  raise TypeError(\"Only   integers are allowed\")```"
        }
    },
    "userinput": {
        "title": "Python User Input",
        "url": "https://www.w3schools.com/python/python_user_input.asp",
        "info": {
            "User Input": "Python allows for user input.That means we are able to ask the user for input.The method is a bit different in Python 3.6 than Python 2.7.Python 3.6 uses the input() method. Python 2.7 uses the raw_input() method. The following example asks for the username, and when you entered the username, it gets printed on the screen:```py\nusername = input(\"Enter username:\")\n\r\nprint(\"Username is: \" + username)\n``````py\nusername = raw_input(\"Enter username:\")\n\r\nprint(\"Username is: \" + username)\n```"
        }
    },
    "stringformatting": {
        "title": "Python String Formatting",
        "url": "https://www.w3schools.com/python/python_string_formatting.asp",
        "info": {
            "String format()": "The format() method allows you to format selected parts of a string.Sometimes there are parts of a text that you do not control, maybe they come from a database, or user input?To control such values, add placeholders (curly brackets {}) in the text, and run the values through the format() method:```py\nprice = 49\ntxt = \"The price is {} dollars\"\nprint(txt.format(price))\r\n```You can add parameters inside the curly brackets to specify how to convert the value:```py\ntxt = \"The price is {:.2f} dollars\"\n```Check out all formatting types in our String format() Reference.",
            "Multiple Values": "If you want to use more values, just add more values to the format() method:```py\n\r\nprint(txt.format(price, itemno, count))\r\n```And add more placeholders:```py\nquantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {} pieces of item number {} for {:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))\r\n```",
            "Index Numbers": "You can use index numbers (a number inside the curly brackets {0}) to be sure the values are placed in the correct placeholders:```py\nquantity = 3\nitemno = 567\nprice = 49\nmyorder = \"I want {0} pieces of item number {1} for {2:.2f} dollars.\"\nprint(myorder.format(quantity, itemno, price))\r\n```Also, if you want to refer to the same value more than once, use the index number:```py\nage = 36\nname = \"John\"\ntxt = \"His name is {1}. {1} is {0} years old.\"\nprint(txt.format(age, name))\r\n```",
            "Named Indexes": "You can also use named indexes by entering a name inside the curly brackets {carname}, but then you must use names when you pass the parameter valuestxt.format(carname = \"Ford\"):```py\nmyorder = \"I have a {carname}, it is a {model}.\"\nprint(myorder.format(carname = \"Ford\", model = \"Mustang\"))\r\n```"
        }
    },
    "filehandling": {
        "title": "Python File Handling",
        "url": "https://www.w3schools.com/python/python_file_handling.asp",
        "info": {
            "File Handling": "The key function for working with files in Python is theopen() function.The open() function takes two parameters;filename, and mode.There are four different methods (modes) for opening a file:```py\nNone```In addition you can specify if the file should be handled as binary or text mode```py\nNone```",
            "Syntax": "To open a file for reading it is enough to specify the name of the file:```py\n\r\nf = open(\"demofile.txt\")\r\n```The code above is the same as:```py\n\r\nf = open(\"demofile.txt\", \"rt\")\r\n```Because \"r\" for read, and \"t\" for text are the default values, you do not need to specify them."
        }
    },
    "readfiles": {
        "title": "Python Read Files",
        "url": "https://www.w3schools.com/python/python_file_open.asp",
        "info": {
            "Open a File on the Server": "Assume we have the following file, located in the same folder as Python:```py\nHello! Welcome to demofile.txt\nThis file is for testing purposes.\nGood Luck!```To open the file, use the built-in open() function.The open() function returns a file object, which has a read() method for reading the content of the file:```py\nf = open(\"demofile.txt\", \"r\")\nprint(f.read())```If the file is located in a different location, you will have to specify the file path, like this:```py\nf = open(\"D:\\\\myfiles\\welcome.txt\", \"r\")\nprint(f.read())```",
            "Read Only Parts of the File": "By default the read() method returns the whole text, but you can also specify how many characters you want to return:```py\nf = open(\"demofile.txt\", \"r\")\nprint(f.read(5))```",
            "Read Lines": "You can return one line by using the readline() method:```py\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())```By calling readline() two times, you can read the two first lines:```py\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())\nprint(f.readline())```By looping through the lines of the file, you can read the whole file, line by line:```py\nf = open(\"demofile.txt\", \"r\")\nfor x in f:\n  print(x)```",
            "Close Files": "It is a good practice to always close the file when you are done with it.```py\nf = open(\"demofile.txt\", \"r\")\nprint(f.readline())\nf.close()```"
        }
    },
    "write/createfiles": {
        "title": "Python Write/Create Files",
        "url": "https://www.w3schools.com/python/python_file_write.asp",
        "info": {
            "Write to an Existing File": "To write to an existing file, you must add a parameter to theopen() function:\"a\" - Append - will append to the end of the file\"w\" - Write - will overwrite any existing content```py\nf = open(\"demofile2.txt\", \"a\")\nf.write(\"Now the file has more content!\")\nf.close()\n#open and read the file after the appending:\nf = open(\"demofile2.txt\", \"r\")\nprint(f.read())``````py\nf = open(\"demofile3.txt\", \"w\")\nf.write(\"Woops! I have deleted the content!\")\nf.close()\n#open and read the file after the appending:\nf = open(\"demofile3.txt\", \"r\")\nprint(f.read())```",
            "Create a New File": "To create a new file in Python, use the open() method, with one of the following parameters:\"x\" - Create - will create a file, returns an error if the file exist\"a\" - Append - will create a file if the specified file does not exist\"w\" - Write - will create a file if the specified file does not exist```py\nf = open(\"myfile.txt\", \"x\")\r\n```Result: a new empty file is created!```py\nf = open(\"myfile.txt\", \"w\")\r\n```"
        }
    },
    "deletefiles": {
        "title": "Python Delete Files",
        "url": "https://www.w3schools.com/python/python_file_remove.asp",
        "info": {
            "Delete a File": "To delete a file, you must import the OS module, and run itsos.remove() function:```py\nimport os\nos.remove(\"demofile.txt\")```",
            "Check if File exist:": "To avoid getting an error, you might want to check if the file exists before you try to delete it:```py\nimport os\nif os.path.exists(\"demofile.txt\"):\n  os.remove(\"demofile.txt\")\nelse:\n  print(\"The file does not exist\")```",
            "Delete Folder": "To delete an entire folder, use the os.rmdir() method:```py\nimport os\nos.rmdir(\"myfolder\")```"
        }
    },
    "overview": {
        "title": "Python Overview",
        "url": "https://www.w3schools.com/python/python_reference.asp",
        "info": {
            "Python Reference": "",
            "Module Reference": ""
        }
    },
    "built-infunctions": {
        "title": "Python Built-in Functions",
        "url": "https://www.w3schools.com/python/python_ref_functions.asp",
        "info": {}
    },
    "stringmethods": {
        "title": "Python String Methods",
        "url": "https://www.w3schools.com/python/python_ref_string.asp",
        "info": {}
    },
    "listmethods": {
        "title": "Python List Methods",
        "url": "https://www.w3schools.com/python/python_ref_list.asp",
        "info": {}
    },
    "dictionarymethods": {
        "title": "Python Dictionary Methods",
        "url": "https://www.w3schools.com/python/python_ref_dictionary.asp",
        "info": {}
    },
    "tuplemethods": {
        "title": "Python Tuple Methods",
        "url": "https://www.w3schools.com/python/python_ref_tuple.asp",
        "info": {}
    },
    "setmethods": {
        "title": "Python Set Methods",
        "url": "https://www.w3schools.com/python/python_ref_set.asp",
        "info": {}
    },
    "filemethods": {
        "title": "Python File Methods",
        "url": "https://www.w3schools.com/python/python_ref_file.asp",
        "info": {}
    },
    "keywords": {
        "title": "Python Keywords",
        "url": "https://www.w3schools.com/python/python_ref_keywords.asp",
        "info": {}
    },
    "exceptions": {
        "title": "Python Exceptions",
        "url": "https://www.w3schools.com/python/python_ref_exceptions.asp",
        "info": {
            "Built-in Exceptions": "The table below shows built-in exceptions that are usually raised in Python:"
        }
    },
    "glossary": {
        "title": "Python Glossary",
        "url": "https://www.w3schools.com/python/python_ref_glossary.asp",
        "info": {}
    },
    "examples": {
        "title": "Python Examples",
        "url": "https://www.w3schools.com/python/python_examples.asp",
        "info": {
            "Python Syntax": "Syntax Explained",
            "Python Variables": "Variables Explained",
            "Python Numbers": "Numbers Explained",
            "Python Casting": "Casting Explained",
            "Python Strings": "Strings Explained",
            "Python Operators": "Operators Explained",
            "Python Lists": "Lists Explained",
            "Python Tuples": "Tuples Explained",
            "Python Sets": "Sets Explained",
            "Python Dictionaries": "Dictionaries Explained",
            "Python If ... Else": "If ... Else Explained",
            "Python While Loop": "While Loop Explained",
            "Python For Loop": "For Loop Explained",
            "Python Functions": "Functions Explained",
            "Python Lambda": "Lambda Explained",
            "Python Arrays": "Arrays Explained",
            "Python Classes and Objects": "Classes/Objects Explained",
            "Python Iterators": "Iterators Explained",
            "Python Modules": "Modules Explained",
            "Python Dates": "Dates Explained",
            "Python Math": "Math Explained",
            "Python JSON": "JSON Explained",
            "Python RegEx": "RegEx Explained",
            "Python PIP": "PIP Explained",
            "Python Try Except": "Try Except Explained",
            "Python Files": "Files Explained",
            "Python MySQL": "MySQL Explained",
            "Python MongoDB": "MongoDB Explained"
        }
    },
    "compiler": {
        "title": "Python Compiler",
        "url": "https://www.w3schools.com/python/python_compiler.asp",
        "info": {
            "Python Compiler (Editor)": "With our online Python compiler, you can edit Python code, and view the result in your browser.Click on the \"Try it Yourself\" button to see how it works.",
            "Python Compiler Explained": "The window to the left is editable - edit the code and click on the \"Run\" button to view the result in the right window.The icons are explained in the table below:"
        }
    },
    "exercises": {
        "title": "Python Exercises",
        "url": "https://www.w3schools.com/python/python_exercises.asp",
        "info": {
            "Exercises": "We have gathered a variety of Python exercises (with answers) for each Python Chapter.Try to solve an exercise by filling in the missing parts of a code. If your stuck, hit the \"Show Answer\" button to see what you've done wrong.",
            "Count Your Score": "You will get 1 point foreach correct answer. Your score and total score will always be displayed.Get Your Certificate \u00bbThe HTML Certificate documents your knowledge of HTML.The CSS Certificate documents your knowledge of advanced CSS.The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.The Python Certificate documents your knowledge of Python.The jQuery Certificate documents your knowledge of jQuery.The SQL Certificate documents your knowledge of SQL.The PHP Certificate documents your knowledge of PHP and MySQL.The XML Certificate documents your knowledge of XML, XML DOM and XSLT.The Bootstrap Certificate documents your knowledge of the Bootstrap framework."
        }
    },
    "quiz": {
        "title": "Python Quiz",
        "url": "https://www.w3schools.com/python/python_quiz.asp",
        "info": {
            "The Test": "The test contains 25 questions and there is no time limit.The test is not official, it's just a nice way to see how much you know, or don't know, about Python.",
            "Count Your Score": "You will get 1 point for each correct answer. At the end of the Quiz,your total score will be displayed. Maximum score is 25 points.Get Your Certificate \u00bbThe HTML Certificate documents your knowledge of HTML.The CSS Certificate documents your knowledge of advanced CSS.The JavaScript Certificate documents your knowledge of JavaScript and HTML DOM.The Python Certificate documents your knowledge of Python.The jQuery Certificate documents your knowledge of jQuery.The SQL Certificate documents your knowledge of SQL.The PHP Certificate documents your knowledge of PHP and MySQL.The XML Certificate documents your knowledge of XML, XML DOM and XSLT.The Bootstrap Certificate documents your knowledge of the Bootstrap framework."
        }
    },
    "certificate": {
        "title": "Python Certificate",
        "url": "https://www.w3schools.com/python/python_exam.asp",
        "info": {
            "How Does It Work?": ""
        }
    }
}